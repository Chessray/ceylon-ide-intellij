package org.intellij.plugins.ceylon.ide.wizard;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.ValidationInfo;
import com.intellij.ui.components.JBTextField;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.redhat.ceylon.model.typechecker.model.Module;
import org.apache.commons.lang.StringUtils;
import org.intellij.plugins.ceylon.ide.model.IdeaCeylonProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.Set;

import static com.google.common.base.Predicates.notNull;
import static com.google.common.collect.Iterables.all;
import static java.util.Arrays.asList;
import static org.intellij.plugins.ceylon.ide.CeylonBundle.message;
import static org.intellij.plugins.ceylon.ide.validate.NameValidator.packageNameIsLegal;
import static org.intellij.plugins.ceylon.ide.validate.NameValidator.unitNameIsLegal;

public class CreateCeylonModuleWizard extends DialogWrapper {
    private final IdeaCeylonProject project;
    private JPanel contentPane;
    private JTextField moduleName;
    private JTextField moduleVersion;
    private JTextField compilationUnit;

    public CreateCeylonModuleWizard(@NotNull Project project, @Nullable Object ceylonProject) {
        super(project, true);
        this.project = (org.intellij.plugins.ceylon.ide.model.IdeaCeylonProject) ceylonProject;

        $$$setupUI$$$();
        setTitle(message("ceylon.module.wizard.title"));
        init();
    }

    @Nullable
    @Override
    public JComponent getPreferredFocusedComponent() {
        return moduleName;
    }

    @Nullable
    @Override
    protected ValidationInfo doValidate() {
        String name = moduleName.getText();

        if (StringUtils.isBlank(name)) {
            return new ValidationInfo(message("ceylon.module.wizard.error.blank"), moduleName);
        } else if (!packageNameIsLegal(name)) {
            return new ValidationInfo(message("ceylon.module.wizard.error.illegal", name), moduleName);
        } else if (moduleExists(name)) {
            return new ValidationInfo(message("ceylon.module.wizard.error.duplicate", name), moduleName);
        }

        String unit = compilationUnit.getText();

        if (!unitNameIsLegal(unit)) {
            return new ValidationInfo(message("ceylon.module.wizard.error.unit"), compilationUnit);
        }

        return null;
    }

    private boolean moduleExists(String moduleName) {
        Set<Module> modules;

        // Might not be a Ceylon project yet
        if (project == null) {
            return false;
        }
        if (all(asList(project, project.getModules(), project.getModules().getTypecheckerModules(),
                modules = project.getModules().getTypecheckerModules().getListOfModules()),
                notNull())) {
            for (Module module : modules) {
                if (module.getNameAsString().equals(moduleName)) {
                    return true;
                }
            }
            return false;
        }
        // cannot tell whether the module exists, so let's be safe! Should never happen.
        return true;
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return contentPane;
    }

    public String getModuleName() {
        return moduleName.getText();
    }

    public String getModuleVersion() {
        return moduleVersion.getText();
    }

    public String getCompilationUnitName() {
        return compilationUnit.getText();
    }

    private void createUIComponents() {
        JBTextField compilationUnit = new JBTextField();
        compilationUnit.getEmptyText().setText("No runnable compilation unit");
        this.compilationUnit = compilationUnit;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 2, new Insets(0, 10, 0, 10), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, -1), null, 1, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Module name:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moduleName = new JTextField();
        panel1.add(moduleName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(311, 26), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Module version:");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moduleVersion = new JTextField();
        moduleVersion.setText("1.0.0");
        panel1.add(moduleVersion, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(311, 26), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Runnable unit name:");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        compilationUnit.setText("");
        panel1.add(compilationUnit, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(311, 26), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
