package org.intellij.plugins.ceylon.ide.settings;

import com.intellij.ide.DataManager;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.openapi.options.*;
import com.intellij.openapi.options.ex.Settings;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.intellij.plugins.ceylon.ide.settings.ceylonSettings_;
import org.intellij.plugins.ceylon.ide.settings.CeylonSettings;
import org.intellij.plugins.ceylon.ide.settings.CeylonOptions;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.List;

/**
 * Settings for Ceylon.
 */
public class CeylonConfigurable extends BaseConfigurable {
    private JPanel myPanel;
    private JRadioButton jvmTarget;
    private JRadioButton jsTarget;
    private JRadioButton crossTarget;
    private JTextField sourceName;
    private JTextField resourceName;
    private JLabel editorLink;
    private JLabel completionLink;
    private JButton restoreDefaultsButton;
    private JLabel compilerLink;
    private ButtonGroup targetVM;

    public CeylonConfigurable() {
        setupLinks();
        restoreDefaultsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ceylonSettings_.get_().loadState(new CeylonOptions());
                reset();
            }
        });
    }

    @Nls
    @Override
    public String getDisplayName() {
        return "Ceylon";
    }

    @Nullable
    @Override
    public String getHelpTopic() {
        return null;
    }

    @Nullable
    @Override
    public JComponent createComponent() {
        return myPanel;
    }

    @Override
    public void apply() throws ConfigurationException {
        CeylonSettings settings = ceylonSettings_.get_();

        settings.setDefaultTargetVm(getTargetVm());
        settings.setDefaultSourceFolder(sourceName.getText());
        settings.setDefaultResourceFolder(resourceName.getText());
    }

    private String getTargetVm() {
        if (jvmTarget.isSelected()) {
            return "jvm";
        } else if (jsTarget.isSelected()) {
            return "js";
        }
        return "cross";
    }

    @Override
    public void reset() {
        CeylonSettings settings = ceylonSettings_.get_();

        switch (settings.getDefaultTargetVm()) {
            case "jvm":
                targetVM.setSelected(jvmTarget.getModel(), true);
                break;
            case "js":
                targetVM.setSelected(jsTarget.getModel(), true);
                break;
            default:
                targetVM.setSelected(crossTarget.getModel(), true);
                break;
        }
        sourceName.setText(settings.getDefaultSourceFolder());
        resourceName.setText(settings.getDefaultResourceFolder());
    }

    @Override
    public boolean isModified() {
        CeylonSettings settings = ceylonSettings_.get_();

        return !(
                settings.getDefaultTargetVm().equals(getTargetVm())
                        && settings.getDefaultSourceFolder().equals(sourceName.getText())
                        && settings.getDefaultResourceFolder().equals(resourceName.getText())
        );
    }

    @Override
    public void disposeUIResources() {

    }

    private void createUIComponents() {
    }

    private void setupLinks() {
        JLabelLinkListener listener = new JLabelLinkListener() {
            @Override
            public Object onLinkClicked(String href) {
                selectConfigurable(href);
                return null;
            }
        };

        List<JLabel> links = Arrays.asList(editorLink, completionLink, compilerLink);

        for (JLabel link : links) {
            link.addMouseListener(listener);
            link.addMouseMotionListener(listener);
        }
    }

    static void selectConfigurable(String id) {
        DataContext context = DataManager.getInstance().getDataContextFromFocus().getResult();
        if (context != null) {
            Settings settings = Settings.KEY.getData(context);
            if (settings != null) {
                settings.select(settings.find(id));
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        restoreDefaultsButton = new JButton();
        restoreDefaultsButton.setText("Restore Defaults");
        myPanel.add(restoreDefaultsButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        myPanel.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        myPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("More settings"));
        completionLink = new JLabel();
        completionLink.setText("<html>See <a href=\"preferences.Ceylon.completion\">Completion</a> for preferences related to content completion.</html>");
        panel1.add(completionLink, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        editorLink = new JLabel();
        editorLink.setText("<html>See <a href=\"preferences.Ceylon.modelUpdate\">Model Update</a> for control over Ceylon model updates.</html>");
        panel1.add(editorLink, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        compilerLink = new JLabel();
        compilerLink.setText("<html>See <a href=\"preferences.Ceylon.compiler\">Ceylon Compiler</a> for preferences related to the compiler.</html>");
        panel1.add(compilerLink, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        myPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder("Defaults for new Ceylon projects"));
        final JLabel label1 = new JLabel();
        label1.setText("Default target virtual machine");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label2 = new JLabel();
        label2.setText("Default source folder name");
        panel2.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        sourceName = new JTextField();
        sourceName.setColumns(0);
        sourceName.setText("source");
        panel2.add(sourceName, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Default resource folder name");
        panel2.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        resourceName = new JTextField();
        resourceName.setColumns(0);
        resourceName.setText("resource");
        panel2.add(resourceName, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        jvmTarget = new JRadioButton();
        jvmTarget.setText("JVM");
        panel3.add(jvmTarget, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jsTarget = new JRadioButton();
        jsTarget.setText("JavaScript");
        panel3.add(jsTarget, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        crossTarget = new JRadioButton();
        crossTarget.setText("Cross-platform");
        panel3.add(crossTarget, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        targetVM = new ButtonGroup();
        targetVM.add(jvmTarget);
        targetVM.add(jsTarget);
        targetVM.add(crossTarget);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }
}
