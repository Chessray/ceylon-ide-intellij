package org.intellij.plugins.ceylon.ide.settings;

import com.intellij.openapi.options.BaseConfigurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.UIUtil;
import org.intellij.plugins.ceylon.ide.settings.ceylonSettings_;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.Collections;
import java.util.List;

import static org.intellij.plugins.ceylon.ide.settings.CeylonConfigurable.selectConfigurable;

public class ModelUpdateConfigurable extends BaseConfigurable {
    private JPanel myPanel;
    private JLabel completionLink;
    private JFormattedTextField modelUpdateDelay;
    private JFormattedTextField modelUpdateTimeoutMinutes;
    private JCheckBox decreaseThePriorityOfCheckBox;

    public ModelUpdateConfigurable() {
//        setupLinks();
        UIUtil.configureNumericFormattedTextField(modelUpdateDelay);
        UIUtil.configureNumericFormattedTextField(modelUpdateTimeoutMinutes);
    }

    @Nls
    @Override
    public String getDisplayName() {
        return null;
    }

    @Nullable
    @Override
    public String getHelpTopic() {
        return null;
    }

    @Nullable
    @Override
    public JComponent createComponent() {
        return myPanel;
    }

    @Override
    public void apply() throws ConfigurationException {
        ceylonSettings_.get_()
                .setAutoUpdateInterval(Integer.valueOf(modelUpdateDelay.getText()) * 1000);
        ceylonSettings_.get_()
                .setModelUpdateTimeoutMinutes(Integer.valueOf(modelUpdateTimeoutMinutes.getText()));
        ceylonSettings_.get_()
                .setLowerModelUpdatePriority(decreaseThePriorityOfCheckBox.isSelected());
    }

    @Override
    public void reset() {
        modelUpdateDelay.setText(String.valueOf(
                ceylonSettings_.get_().getAutoUpdateInterval() / 1000));
        modelUpdateTimeoutMinutes.setText(String.valueOf(
                ceylonSettings_.get_().getModelUpdateTimeoutMinutes()));
        decreaseThePriorityOfCheckBox.setSelected(
                ceylonSettings_.get_().getLowerModelUpdatePriority());
    }

    @Override
    public boolean isModified() {
        return ceylonSettings_.get_()
                .getAutoUpdateInterval() != Integer.valueOf(modelUpdateDelay.getText()) * 1000 ||
                ceylonSettings_.get_()
                        .getModelUpdateTimeoutMinutes() != Integer.valueOf(modelUpdateTimeoutMinutes.getText()) ||
                ceylonSettings_.get_()
                        .getLowerModelUpdatePriority() != decreaseThePriorityOfCheckBox.isSelected();
    }

    @Override
    public void disposeUIResources() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        myPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(418, 14), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        myPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Model update timeouts"));
        final JLabel label1 = new JLabel();
        label1.setText("Update Ceylon model automatically");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label2 = new JLabel();
        label2.setText("seconds after any edit");
        panel1.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modelUpdateDelay = new JFormattedTextField();
        modelUpdateDelay.setColumns(0);
        modelUpdateDelay.setEnabled(true);
        panel1.add(modelUpdateDelay, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Cancel slow model update after");
        panel1.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label4 = new JLabel();
        label4.setText("minutes");
        panel1.add(label4, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modelUpdateTimeoutMinutes = new JFormattedTextField();
        modelUpdateTimeoutMinutes.setColumns(0);
        modelUpdateTimeoutMinutes.setEnabled(true);
        panel1.add(modelUpdateTimeoutMinutes, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        myPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder("Model update background priority"));
        decreaseThePriorityOfCheckBox = new JCheckBox();
        decreaseThePriorityOfCheckBox.setText("Lower priority model updates");
        panel2.add(decreaseThePriorityOfCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }

//    private void setupLinks() {
//        JLabelLinkListener listener = new JLabelLinkListener() {
//            @Override
//            public void onLinkClicked(String href) {
//                selectConfigurable(href);
//            }
//        };
//
//        List<JLabel> links = Collections.singletonList(completionLink);
//
//        for (JLabel link : links) {
//            link.addMouseListener(listener);
//            link.addMouseMotionListener(listener);
//        }
//    }
}
