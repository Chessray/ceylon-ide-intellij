// $ANTLR 3.4 /home/david/git/ceylon-spec/Ceylon.g 2015-01-22 12:18:50
 package org.intellij.plugins.ceylon.parser;
                  import com.redhat.ceylon.compiler.typechecker.tree.MissingToken;
                  import com.redhat.ceylon.compiler.typechecker.tree.Node;
                  import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.MethodDeclaration;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.MethodDefinition;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.FunctionArgument;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.AttributeDeclaration;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.Variable;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.ClassDefinition;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.IsCase;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.ExtendedTypeExpression;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.*;

import com.redhat.ceylon.compiler.typechecker.parser.ParseError;
                
                  import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.Package; 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class PsiCompatibleCeylonParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACTED_TYPE", "ADD_SPECIFY", "AIDENTIFIER", "ALIAS", "AND_OP", "AND_SPECIFY", "ASSEMBLY", "ASSERT", "ASSIGN", "ASTRING_LITERAL", "AVERBATIM_STRING", "BACKTICK", "BREAK", "BinaryDigit", "BinaryDigits", "CASE_CLAUSE", "CASE_TYPES", "CATCH_CLAUSE", "CHAR_LITERAL", "CLASS_DEFINITION", "COMMA", "COMPARE_OP", "COMPILER_ANNOTATION", "COMPLEMENT_OP", "COMPLEMENT_SPECIFY", "COMPUTE", "CONTINUE", "CharPart", "DECREMENT_OP", "DIFFERENCE_OP", "DIVIDE_SPECIFY", "DYNAMIC", "Digit", "Digits", "ELLIPSIS", "ELSE_CLAUSE", "ENTRY_OP", "EQUAL_OP", "EXISTS", "EXTENDS", "EscapeSequence", "Exponent", "FINALLY_CLAUSE", "FLOAT_LITERAL", "FOR_CLAUSE", "FUNCTION_MODIFIER", "FractionalMagnitude", "HexDigit", "HexDigits", "IDENTICAL_OP", "IF_CLAUSE", "IMPORT", "INCREMENT_OP", "INTERFACE_DEFINITION", "INTERSECTION_OP", "INTERSECT_SPECIFY", "IN_OP", "IS_OP", "IdentifierPart", "IdentifierStart", "LARGER_OP", "LARGE_AS_OP", "LBRACE", "LBRACKET", "LET", "LIDENTIFIER", "LINE_COMMENT", "LIdentifierPrefix", "LPAREN", "Letter", "MEMBER_OP", "MODULE", "MULTIPLY_SPECIFY", "MULTI_COMMENT", "Magnitude", "NATURAL_LITERAL", "NEW", "NONEMPTY", "NOT_EQUAL_OP", "NOT_OP", "OBJECT_DEFINITION", "OPTIONAL", "OR_OP", "OR_SPECIFY", "OUT", "OUTER", "PACKAGE", "PIDENTIFIER", "POWER_OP", "PRODUCT_OP", "QUOTIENT_OP", "RANGE_OP", "RBRACE", "RBRACKET", "REMAINDER_OP", "REMAINDER_SPECIFY", "RETURN", "RPAREN", "SAFE_MEMBER_OP", "SATISFIES", "SCALE_OP", "SEGMENT_OP", "SEMICOLON", "SMALLER_OP", "SMALL_AS_OP", "SPECIFY", "SPREAD_OP", "STRING_END", "STRING_LITERAL", "STRING_MID", "STRING_START", "SUBTRACT_SPECIFY", "SUM_OP", "SUPER", "SWITCH_CLAUSE", "StringPart", "THEN_CLAUSE", "THIS", "THROW", "TRY_CLAUSE", "TYPE_CONSTRAINT", "UIDENTIFIER", "UIdentifierPrefix", "UNION_OP", "UNION_SPECIFY", "VALUE_MODIFIER", "VERBATIM_STRING", "VOID_MODIFIER", "WHILE_CLAUSE", "WS"
    };

    public static final int EOF=-1;
    public static final int ABSTRACTED_TYPE=4;
    public static final int ADD_SPECIFY=5;
    public static final int AIDENTIFIER=6;
    public static final int ALIAS=7;
    public static final int AND_OP=8;
    public static final int AND_SPECIFY=9;
    public static final int ASSEMBLY=10;
    public static final int ASSERT=11;
    public static final int ASSIGN=12;
    public static final int ASTRING_LITERAL=13;
    public static final int AVERBATIM_STRING=14;
    public static final int BACKTICK=15;
    public static final int BREAK=16;
    public static final int BinaryDigit=17;
    public static final int BinaryDigits=18;
    public static final int CASE_CLAUSE=19;
    public static final int CASE_TYPES=20;
    public static final int CATCH_CLAUSE=21;
    public static final int CHAR_LITERAL=22;
    public static final int CLASS_DEFINITION=23;
    public static final int COMMA=24;
    public static final int COMPARE_OP=25;
    public static final int COMPILER_ANNOTATION=26;
    public static final int COMPLEMENT_OP=27;
    public static final int COMPLEMENT_SPECIFY=28;
    public static final int COMPUTE=29;
    public static final int CONTINUE=30;
    public static final int CharPart=31;
    public static final int DECREMENT_OP=32;
    public static final int DIFFERENCE_OP=33;
    public static final int DIVIDE_SPECIFY=34;
    public static final int DYNAMIC=35;
    public static final int Digit=36;
    public static final int Digits=37;
    public static final int ELLIPSIS=38;
    public static final int ELSE_CLAUSE=39;
    public static final int ENTRY_OP=40;
    public static final int EQUAL_OP=41;
    public static final int EXISTS=42;
    public static final int EXTENDS=43;
    public static final int EscapeSequence=44;
    public static final int Exponent=45;
    public static final int FINALLY_CLAUSE=46;
    public static final int FLOAT_LITERAL=47;
    public static final int FOR_CLAUSE=48;
    public static final int FUNCTION_MODIFIER=49;
    public static final int FractionalMagnitude=50;
    public static final int HexDigit=51;
    public static final int HexDigits=52;
    public static final int IDENTICAL_OP=53;
    public static final int IF_CLAUSE=54;
    public static final int IMPORT=55;
    public static final int INCREMENT_OP=56;
    public static final int INTERFACE_DEFINITION=57;
    public static final int INTERSECTION_OP=58;
    public static final int INTERSECT_SPECIFY=59;
    public static final int IN_OP=60;
    public static final int IS_OP=61;
    public static final int IdentifierPart=62;
    public static final int IdentifierStart=63;
    public static final int LARGER_OP=64;
    public static final int LARGE_AS_OP=65;
    public static final int LBRACE=66;
    public static final int LBRACKET=67;
    public static final int LET=68;
    public static final int LIDENTIFIER=69;
    public static final int LINE_COMMENT=70;
    public static final int LIdentifierPrefix=71;
    public static final int LPAREN=72;
    public static final int Letter=73;
    public static final int MEMBER_OP=74;
    public static final int MODULE=75;
    public static final int MULTIPLY_SPECIFY=76;
    public static final int MULTI_COMMENT=77;
    public static final int Magnitude=78;
    public static final int NATURAL_LITERAL=79;
    public static final int NEW=80;
    public static final int NONEMPTY=81;
    public static final int NOT_EQUAL_OP=82;
    public static final int NOT_OP=83;
    public static final int OBJECT_DEFINITION=84;
    public static final int OPTIONAL=85;
    public static final int OR_OP=86;
    public static final int OR_SPECIFY=87;
    public static final int OUT=88;
    public static final int OUTER=89;
    public static final int PACKAGE=90;
    public static final int PIDENTIFIER=91;
    public static final int POWER_OP=92;
    public static final int PRODUCT_OP=93;
    public static final int QUOTIENT_OP=94;
    public static final int RANGE_OP=95;
    public static final int RBRACE=96;
    public static final int RBRACKET=97;
    public static final int REMAINDER_OP=98;
    public static final int REMAINDER_SPECIFY=99;
    public static final int RETURN=100;
    public static final int RPAREN=101;
    public static final int SAFE_MEMBER_OP=102;
    public static final int SATISFIES=103;
    public static final int SCALE_OP=104;
    public static final int SEGMENT_OP=105;
    public static final int SEMICOLON=106;
    public static final int SMALLER_OP=107;
    public static final int SMALL_AS_OP=108;
    public static final int SPECIFY=109;
    public static final int SPREAD_OP=110;
    public static final int STRING_END=111;
    public static final int STRING_LITERAL=112;
    public static final int STRING_MID=113;
    public static final int STRING_START=114;
    public static final int SUBTRACT_SPECIFY=115;
    public static final int SUM_OP=116;
    public static final int SUPER=117;
    public static final int SWITCH_CLAUSE=118;
    public static final int StringPart=119;
    public static final int THEN_CLAUSE=120;
    public static final int THIS=121;
    public static final int THROW=122;
    public static final int TRY_CLAUSE=123;
    public static final int TYPE_CONSTRAINT=124;
    public static final int UIDENTIFIER=125;
    public static final int UIdentifierPrefix=126;
    public static final int UNION_OP=127;
    public static final int UNION_SPECIFY=128;
    public static final int VALUE_MODIFIER=129;
    public static final int VERBATIM_STRING=130;
    public static final int VOID_MODIFIER=131;
    public static final int WHILE_CLAUSE=132;
    public static final int WS=133;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public PsiCompatibleCeylonParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PsiCompatibleCeylonParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[297+1];
         

    }

    public String[] getTokenNames() { return PsiCompatibleCeylonParser.tokenNames; }
    public String getGrammarFileName() { return "/home/david/git/ceylon-spec/Ceylon.g"; }


        private java.util.List<ParseError> errors 
                = new java.util.ArrayList<ParseError>();

        public ParseError newParseError(String[] tn,
                RecognitionException re) {
            ParseError parseError = new ParseError(this, re, expecting, tn);
            expecting = -1;
            return parseError;
        }
        
        public ParseError newParseError(String[] tn, 
                RecognitionException re,
                int code) {
            ParseError parseError = new ParseError(this, re, tn, code);
            return parseError;
        }

        @Override public void displayRecognitionError(String[] tn,
                RecognitionException re) {
            errors.add(newParseError(tn, re));
        }
        public void displayRecognitionError(String[] tn,
                RecognitionException re, 
                int code) {
            errors.add(newParseError(tn, re, code));
        }
        public java.util.List<ParseError> getErrors() {
            return errors;
        }
        int expecting=-1;
      @Override
      protected Object getMissingSymbol(IntStream input,
                        RecognitionException e,
                        int expectedTokenType,
                        BitSet follow)
      {
        String tokenText;
        if ( expectedTokenType==Token.EOF ) tokenText = "<missing EOF>";
        else tokenText = "<missing "+getTokenNames()[expectedTokenType]+">";
        MissingToken t = new MissingToken(expectedTokenType, tokenText);
        Token current = ((TokenStream)input).LT(1);
        if ( current.getType() == Token.EOF ) {
          current = ((TokenStream)input).LT(-1);
        }
        t.setLine(current.getLine());
        t.setCharPositionInLine(current.getCharPositionInLine());
        t.setChannel(DEFAULT_TOKEN_CHANNEL);
        t.setInputStream(current.getInputStream());
        return t;
      }



    // $ANTLR start "compilationUnit"
    // /home/david/git/ceylon-spec/Ceylon.g:79:1: compilationUnit returns [CompilationUnit compilationUnit] : (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF ;
    public CompilationUnit compilationUnit() throws RecognitionException {
        CompilationUnit compilationUnit = null;


        List<CompilerAnnotation> ca =null;

        Import importDeclaration1 =null;

        ModuleDescriptor moduleDescriptor2 =null;

        PackageDescriptor packageDescriptor3 =null;

        Declaration toplevelDeclaration4 =null;


         compilationUnit = new CompilationUnit(null);
                    ImportList importList = new ImportList(null); 
                    compilationUnit.setImportList(importList); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:83:5: ( (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF )
            // /home/david/git/ceylon-spec/Ceylon.g:83:7: (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF
            {
            // /home/david/git/ceylon-spec/Ceylon.g:83:7: (ca= compilerAnnotations SEMICOLON )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:84:9: ca= compilerAnnotations SEMICOLON
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_compilationUnit86);
                    ca=compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return compilationUnit;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_compilationUnit96); if (state.failed) return compilationUnit;

                    if ( state.backtracking==0 ) { compilationUnit.getCompilerAnnotations().addAll(ca); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:88:7: ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )*
            loop2:
            do {
                int alt2=6;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==IMPORT) ) {
                    alt2=1;
                }
                else if ( (LA2_0==COMPILER_ANNOTATION) ) {
                    int LA2_3 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==STRING_LITERAL) ) {
                    int LA2_4 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==VERBATIM_STRING) ) {
                    int LA2_5 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==LIDENTIFIER) ) {
                    int LA2_6 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==MODULE) && (synpred1_Ceylon())) {
                    alt2=2;
                }
                else if ( (LA2_0==PACKAGE) && (synpred2_Ceylon())) {
                    alt2=3;
                }
                else if ( (LA2_0==ALIAS||LA2_0==ASSIGN||LA2_0==CLASS_DEFINITION||LA2_0==DYNAMIC||LA2_0==FUNCTION_MODIFIER||LA2_0==INTERFACE_DEFINITION||(LA2_0 >= LBRACE && LA2_0 <= LBRACKET)||LA2_0==NEW||LA2_0==OBJECT_DEFINITION||LA2_0==SMALLER_OP||LA2_0==UIDENTIFIER||LA2_0==VALUE_MODIFIER||LA2_0==VOID_MODIFIER) ) {
                    alt2=4;
                }
                else if ( (LA2_0==RBRACE) ) {
                    alt2=5;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:89:9: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit134);
            	    importDeclaration1=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { importList.addImport(importDeclaration1); 
            	              compilationUnit.connect(importList); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:93:9: ( annotatedModuleDescriptorStart )=> moduleDescriptor
            	    {
            	    pushFollow(FOLLOW_moduleDescriptor_in_compilationUnit177);
            	    moduleDescriptor2=moduleDescriptor();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { compilationUnit.addModuleDescriptor(moduleDescriptor2); }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:97:9: ( annotatedPackageDescriptorStart )=> packageDescriptor
            	    {
            	    pushFollow(FOLLOW_packageDescriptor_in_compilationUnit220);
            	    packageDescriptor3=packageDescriptor();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { compilationUnit.addPackageDescriptor(packageDescriptor3); }

            	    }
            	    break;
            	case 4 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:101:9: toplevelDeclaration
            	    {
            	    pushFollow(FOLLOW_toplevelDeclaration_in_compilationUnit248);
            	    toplevelDeclaration4=toplevelDeclaration();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { if (toplevelDeclaration4!=null)
            	                  compilationUnit.addDeclaration(toplevelDeclaration4); }

            	    }
            	    break;
            	case 5 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:104:9: RBRACE
            	    {
            	    match(input,RBRACE,FOLLOW_RBRACE_in_compilationUnit268); if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
            	                  new MismatchedTokenException(EOF, input)); }

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            match(input,EOF,FOLLOW_EOF_in_compilationUnit295); if (state.failed) return compilationUnit;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return compilationUnit;
    }
    // $ANTLR end "compilationUnit"



    // $ANTLR start "toplevelDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:111:1: toplevelDeclaration returns [Declaration declaration] : ca= compilerAnnotations d= declaration ;
    public Declaration toplevelDeclaration() throws RecognitionException {
        Declaration declaration = null;


        List<CompilerAnnotation> ca =null;

        Declaration d =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:112:5: (ca= compilerAnnotations d= declaration )
            // /home/david/git/ceylon-spec/Ceylon.g:112:7: ca= compilerAnnotations d= declaration
            {
            pushFollow(FOLLOW_compilerAnnotations_in_toplevelDeclaration318);
            ca=compilerAnnotations();

            state._fsp--;
            if (state.failed) return declaration;

            pushFollow(FOLLOW_declaration_in_toplevelDeclaration329);
            d=declaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = d;
                    if (declaration!=null)
                        declaration.getCompilerAnnotations().addAll(ca); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "toplevelDeclaration"



    // $ANTLR start "annotatedModuleDescriptorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:119:1: annotatedModuleDescriptorStart : compilerAnnotations annotations MODULE ;
    public void annotatedModuleDescriptorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:120:5: ( compilerAnnotations annotations MODULE )
            // /home/david/git/ceylon-spec/Ceylon.g:120:7: compilerAnnotations annotations MODULE
            {
            pushFollow(FOLLOW_compilerAnnotations_in_annotatedModuleDescriptorStart354);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotations_in_annotatedModuleDescriptorStart356);
            annotations();

            state._fsp--;
            if (state.failed) return ;

            match(input,MODULE,FOLLOW_MODULE_in_annotatedModuleDescriptorStart358); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedModuleDescriptorStart"



    // $ANTLR start "annotatedPackageDescriptorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:123:1: annotatedPackageDescriptorStart : compilerAnnotations annotations PACKAGE ;
    public void annotatedPackageDescriptorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:124:5: ( compilerAnnotations annotations PACKAGE )
            // /home/david/git/ceylon-spec/Ceylon.g:124:7: compilerAnnotations annotations PACKAGE
            {
            pushFollow(FOLLOW_compilerAnnotations_in_annotatedPackageDescriptorStart375);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotations_in_annotatedPackageDescriptorStart377);
            annotations();

            state._fsp--;
            if (state.failed) return ;

            match(input,PACKAGE,FOLLOW_PACKAGE_in_annotatedPackageDescriptorStart379); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedPackageDescriptorStart"



    // $ANTLR start "moduleDescriptor"
    // /home/david/git/ceylon-spec/Ceylon.g:127:1: moduleDescriptor returns [ModuleDescriptor moduleDescriptor] : compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList ;
    public ModuleDescriptor moduleDescriptor() throws RecognitionException {
        ModuleDescriptor moduleDescriptor = null;


        Token MODULE5=null;
        Token CHAR_LITERAL9=null;
        Token STRING_LITERAL10=null;
        AnnotationList annotations6 =null;

        List<CompilerAnnotation> compilerAnnotations7 =null;

        ImportPath packagePath8 =null;

        ImportModuleList importModuleList11 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:128:5: ( compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList )
            // /home/david/git/ceylon-spec/Ceylon.g:128:7: compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList
            {
            pushFollow(FOLLOW_compilerAnnotations_in_moduleDescriptor400);
            compilerAnnotations7=compilerAnnotations();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            pushFollow(FOLLOW_annotations_in_moduleDescriptor402);
            annotations6=annotations();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            MODULE5=(Token)match(input,MODULE,FOLLOW_MODULE_in_moduleDescriptor410); if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor = new ModuleDescriptor(MODULE5); 
                    moduleDescriptor.setAnnotationList(annotations6);
                    moduleDescriptor.getCompilerAnnotations().addAll(compilerAnnotations7); }

            pushFollow(FOLLOW_packagePath_in_moduleDescriptor427);
            packagePath8=packagePath();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor.setImportPath(packagePath8); }

            // /home/david/git/ceylon-spec/Ceylon.g:135:7: ( CHAR_LITERAL | STRING_LITERAL )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==CHAR_LITERAL) ) {
                alt3=1;
            }
            else if ( (LA3_0==STRING_LITERAL) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return moduleDescriptor;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:136:9: CHAR_LITERAL
                    {
                    CHAR_LITERAL9=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_moduleDescriptor453); if (state.failed) return moduleDescriptor;

                    if ( state.backtracking==0 ) { moduleDescriptor.setVersion(new QuotedLiteral(CHAR_LITERAL9)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:139:9: STRING_LITERAL
                    {
                    STRING_LITERAL10=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_moduleDescriptor481); if (state.failed) return moduleDescriptor;

                    if ( state.backtracking==0 ) { moduleDescriptor.setVersion(new QuotedLiteral(STRING_LITERAL10)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importModuleList_in_moduleDescriptor507);
            importModuleList11=importModuleList();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor.setImportModuleList(importModuleList11); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return moduleDescriptor;
    }
    // $ANTLR end "moduleDescriptor"



    // $ANTLR start "importModuleList"
    // /home/david/git/ceylon-spec/Ceylon.g:146:1: importModuleList returns [ImportModuleList importModuleList] : LBRACE ( compilerAnnotations annotations importModule )* RBRACE ;
    public ImportModuleList importModuleList() throws RecognitionException {
        ImportModuleList importModuleList = null;


        Token LBRACE12=null;
        Token RBRACE16=null;
        ImportModule importModule13 =null;

        AnnotationList annotations14 =null;

        List<CompilerAnnotation> compilerAnnotations15 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:147:5: ( LBRACE ( compilerAnnotations annotations importModule )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:147:7: LBRACE ( compilerAnnotations annotations importModule )* RBRACE
            {
            LBRACE12=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_importModuleList536); if (state.failed) return importModuleList;

            if ( state.backtracking==0 ) { importModuleList = new ImportModuleList(LBRACE12); }

            // /home/david/git/ceylon-spec/Ceylon.g:149:7: ( compilerAnnotations annotations importModule )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==ALIAS||(LA4_0 >= ASSERT && LA4_0 <= ASSIGN)||(LA4_0 >= BACKTICK && LA4_0 <= BREAK)||(LA4_0 >= CHAR_LITERAL && LA4_0 <= CLASS_DEFINITION)||LA4_0==COMPILER_ANNOTATION||LA4_0==CONTINUE||(LA4_0 >= DECREMENT_OP && LA4_0 <= DIFFERENCE_OP)||LA4_0==DYNAMIC||(LA4_0 >= FLOAT_LITERAL && LA4_0 <= FUNCTION_MODIFIER)||(LA4_0 >= IF_CLAUSE && LA4_0 <= INTERFACE_DEFINITION)||LA4_0==IN_OP||(LA4_0 >= LBRACE && LA4_0 <= LIDENTIFIER)||LA4_0==LPAREN||LA4_0==MODULE||(LA4_0 >= NATURAL_LITERAL && LA4_0 <= NEW)||(LA4_0 >= NOT_OP && LA4_0 <= OBJECT_DEFINITION)||(LA4_0 >= OUT && LA4_0 <= PACKAGE)||LA4_0==PRODUCT_OP||LA4_0==RETURN||(LA4_0 >= SEMICOLON && LA4_0 <= SMALLER_OP)||LA4_0==STRING_LITERAL||LA4_0==STRING_START||(LA4_0 >= SUM_OP && LA4_0 <= SWITCH_CLAUSE)||(LA4_0 >= THIS && LA4_0 <= UIDENTIFIER)||(LA4_0 >= VALUE_MODIFIER && LA4_0 <= WHILE_CLAUSE)) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:150:9: compilerAnnotations annotations importModule
            	    {
            	    pushFollow(FOLLOW_compilerAnnotations_in_importModuleList562);
            	    compilerAnnotations15=compilerAnnotations();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    pushFollow(FOLLOW_annotations_in_importModuleList564);
            	    annotations14=annotations();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    pushFollow(FOLLOW_importModule_in_importModuleList574);
            	    importModule13=importModule();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    if ( state.backtracking==0 ) { if (importModule13!=null)
            	                  importModuleList.addImportModule(importModule13); 
            	              if (importModule13!=null)
            	                  importModule13.setAnnotationList(annotations14);
            	              if (importModule13!=null)
            	                  importModule13.getCompilerAnnotations().addAll(compilerAnnotations15); }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            RBRACE16=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_importModuleList601); if (state.failed) return importModuleList;

            if ( state.backtracking==0 ) { importModuleList.setEndToken(RBRACE16); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importModuleList;
    }
    // $ANTLR end "importModuleList"



    // $ANTLR start "packageDescriptor"
    // /home/david/git/ceylon-spec/Ceylon.g:163:1: packageDescriptor returns [PackageDescriptor packageDescriptor] : compilerAnnotations annotations PACKAGE packagePath SEMICOLON ;
    public PackageDescriptor packageDescriptor() throws RecognitionException {
        PackageDescriptor packageDescriptor = null;


        Token PACKAGE17=null;
        Token SEMICOLON21=null;
        AnnotationList annotations18 =null;

        List<CompilerAnnotation> compilerAnnotations19 =null;

        ImportPath packagePath20 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:164:5: ( compilerAnnotations annotations PACKAGE packagePath SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:164:7: compilerAnnotations annotations PACKAGE packagePath SEMICOLON
            {
            pushFollow(FOLLOW_compilerAnnotations_in_packageDescriptor630);
            compilerAnnotations19=compilerAnnotations();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            pushFollow(FOLLOW_annotations_in_packageDescriptor632);
            annotations18=annotations();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            PACKAGE17=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDescriptor640); if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor = new PackageDescriptor(PACKAGE17); 
                    packageDescriptor.setAnnotationList(annotations18); 
                    packageDescriptor.getCompilerAnnotations().addAll(compilerAnnotations19); }

            pushFollow(FOLLOW_packagePath_in_packageDescriptor657);
            packagePath20=packagePath();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor.setImportPath(packagePath20); 
                    expecting=SEMICOLON; }

            SEMICOLON21=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_packageDescriptor673); if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor.setEndToken(SEMICOLON21); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return packageDescriptor;
    }
    // $ANTLR end "packageDescriptor"



    // $ANTLR start "importModule"
    // /home/david/git/ceylon-spec/Ceylon.g:177:1: importModule returns [ImportModule importModule] : IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON ;
    public ImportModule importModule() throws RecognitionException {
        ImportModule importModule = null;


        Token c1=null;
        Token s1=null;
        Token c2=null;
        Token s2=null;
        Token IMPORT22=null;
        Token SEMICOLON24=null;
        ImportPath packagePath23 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:178:5: ( IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:178:7: IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON
            {
            IMPORT22=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importModule702); if (state.failed) return importModule;

            if ( state.backtracking==0 ) { importModule = new ImportModule(IMPORT22); }

            // /home/david/git/ceylon-spec/Ceylon.g:180:7: (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath )
            int alt5=3;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
                {
                alt5=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt5=2;
                }
                break;
            case LIDENTIFIER:
            case UIDENTIFIER:
                {
                alt5=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return importModule;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:181:9: c1= CHAR_LITERAL
                    {
                    c1=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_importModule731); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setQuotedLiteral(new QuotedLiteral(c1)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:184:9: s1= STRING_LITERAL
                    {
                    s1=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_importModule761); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setQuotedLiteral(new QuotedLiteral(s1)); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:187:9: packagePath
                    {
                    pushFollow(FOLLOW_packagePath_in_importModule789);
                    packagePath23=packagePath();

                    state._fsp--;
                    if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setImportPath(packagePath23); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:190:7: (c2= CHAR_LITERAL |s2= STRING_LITERAL )?
            int alt6=3;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==CHAR_LITERAL) ) {
                alt6=1;
            }
            else if ( (LA6_0==STRING_LITERAL) ) {
                alt6=2;
            }
            switch (alt6) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:191:9: c2= CHAR_LITERAL
                    {
                    c2=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_importModule827); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setVersion(new QuotedLiteral(c2)); 
                              expecting=SEMICOLON; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:195:9: s2= STRING_LITERAL
                    {
                    s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_importModule857); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setVersion(new QuotedLiteral(s2)); 
                              expecting=SEMICOLON; }

                    }
                    break;

            }


            SEMICOLON24=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_importModule884); if (state.failed) return importModule;

            if ( state.backtracking==0 ) { importModule.setEndToken(SEMICOLON24); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importModule;
    }
    // $ANTLR end "importModule"



    // $ANTLR start "importDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:204:1: importDeclaration returns [Import importDeclaration] : IMPORT ( packagePath |) importElementList ;
    public Import importDeclaration() throws RecognitionException {
        Import importDeclaration = null;


        Token IMPORT25=null;
        ImportPath packagePath26 =null;

        ImportMemberOrTypeList importElementList27 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:205:5: ( IMPORT ( packagePath |) importElementList )
            // /home/david/git/ceylon-spec/Ceylon.g:205:7: IMPORT ( packagePath |) importElementList
            {
            IMPORT25=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration913); if (state.failed) return importDeclaration;

            if ( state.backtracking==0 ) { importDeclaration = new Import(IMPORT25); }

            // /home/david/git/ceylon-spec/Ceylon.g:207:7: ( packagePath |)
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LIDENTIFIER||LA7_0==UIDENTIFIER) ) {
                alt7=1;
            }
            else if ( (LA7_0==LBRACE) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return importDeclaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:208:9: packagePath
                    {
                    pushFollow(FOLLOW_packagePath_in_importDeclaration941);
                    packagePath26=packagePath();

                    state._fsp--;
                    if (state.failed) return importDeclaration;

                    if ( state.backtracking==0 ) { importDeclaration.setImportPath(packagePath26); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:210:9: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importElementList_in_importDeclaration977);
            importElementList27=importElementList();

            state._fsp--;
            if (state.failed) return importDeclaration;

            if ( state.backtracking==0 ) { importDeclaration.setImportMemberOrTypeList(importElementList27); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importDeclaration;
    }
    // $ANTLR end "importDeclaration"



    // $ANTLR start "importElementList"
    // /home/david/git/ceylon-spec/Ceylon.g:217:1: importElementList returns [ImportMemberOrTypeList importMemberOrTypeList] : LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE ;
    public ImportMemberOrTypeList importElementList() throws RecognitionException {
        ImportMemberOrTypeList importMemberOrTypeList = null;


        Token c1=null;
        Token LBRACE28=null;
        Token RBRACE29=null;
        ImportMemberOrType ie1 =null;

        ImportMemberOrType ie2 =null;

        ImportWildcard iw =null;


         ImportMemberOrTypeList il=null; 
                    boolean wildcarded = false; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:220:5: ( LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:221:5: LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE
            {
            LBRACE28=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_importElementList1019); if (state.failed) return importMemberOrTypeList;

            if ( state.backtracking==0 ) { il = new ImportMemberOrTypeList(LBRACE28);
                  importMemberOrTypeList = il; }

            // /home/david/git/ceylon-spec/Ceylon.g:224:5: (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )?
            int alt10=3;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ALIAS||(LA10_0 >= ASSERT && LA10_0 <= ASSIGN)||(LA10_0 >= BACKTICK && LA10_0 <= BREAK)||(LA10_0 >= CHAR_LITERAL && LA10_0 <= CLASS_DEFINITION)||LA10_0==COMPILER_ANNOTATION||LA10_0==CONTINUE||(LA10_0 >= DECREMENT_OP && LA10_0 <= DIFFERENCE_OP)||LA10_0==DYNAMIC||(LA10_0 >= FLOAT_LITERAL && LA10_0 <= FUNCTION_MODIFIER)||(LA10_0 >= IF_CLAUSE && LA10_0 <= INTERFACE_DEFINITION)||LA10_0==IN_OP||(LA10_0 >= LBRACE && LA10_0 <= LIDENTIFIER)||LA10_0==LPAREN||LA10_0==MODULE||(LA10_0 >= NATURAL_LITERAL && LA10_0 <= NEW)||(LA10_0 >= NOT_OP && LA10_0 <= OBJECT_DEFINITION)||(LA10_0 >= OUT && LA10_0 <= PACKAGE)||LA10_0==PRODUCT_OP||LA10_0==RETURN||(LA10_0 >= SEMICOLON && LA10_0 <= SMALLER_OP)||LA10_0==STRING_LITERAL||LA10_0==STRING_START||(LA10_0 >= SUM_OP && LA10_0 <= SWITCH_CLAUSE)||(LA10_0 >= THIS && LA10_0 <= UIDENTIFIER)||(LA10_0 >= VALUE_MODIFIER && LA10_0 <= WHILE_CLAUSE)) ) {
                alt10=1;
            }
            else if ( (LA10_0==ELLIPSIS) ) {
                alt10=2;
            }
            switch (alt10) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:225:7: ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )*
                    {
                    pushFollow(FOLLOW_importElement_in_importElementList1042);
                    ie1=importElement();

                    state._fsp--;
                    if (state.failed) return importMemberOrTypeList;

                    if ( state.backtracking==0 ) { if (ie1!=null)
                                il.addImportMemberOrType(ie1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:228:7: (c1= COMMA (ie2= importElement |iw= importWildcard |) )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==COMMA) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:229:9: c1= COMMA (ie2= importElement |iw= importWildcard |)
                    	    {
                    	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_importElementList1073); if (state.failed) return importMemberOrTypeList;

                    	    if ( state.backtracking==0 ) { il.setEndToken(c1); 
                    	              if (wildcarded) 
                    	                  displayRecognitionError(getTokenNames(), 
                    	                      new MismatchedTokenException(RBRACE, input)); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:234:9: (ie2= importElement |iw= importWildcard |)
                    	    int alt8=3;
                    	    switch ( input.LA(1) ) {
                    	    case ALIAS:
                    	    case ASSERT:
                    	    case ASSIGN:
                    	    case BACKTICK:
                    	    case BREAK:
                    	    case CHAR_LITERAL:
                    	    case CLASS_DEFINITION:
                    	    case COMPILER_ANNOTATION:
                    	    case CONTINUE:
                    	    case DECREMENT_OP:
                    	    case DIFFERENCE_OP:
                    	    case DYNAMIC:
                    	    case FLOAT_LITERAL:
                    	    case FOR_CLAUSE:
                    	    case FUNCTION_MODIFIER:
                    	    case IF_CLAUSE:
                    	    case IMPORT:
                    	    case INCREMENT_OP:
                    	    case INTERFACE_DEFINITION:
                    	    case IN_OP:
                    	    case LBRACE:
                    	    case LBRACKET:
                    	    case LET:
                    	    case LIDENTIFIER:
                    	    case LPAREN:
                    	    case MODULE:
                    	    case NATURAL_LITERAL:
                    	    case NEW:
                    	    case NOT_OP:
                    	    case OBJECT_DEFINITION:
                    	    case OUT:
                    	    case OUTER:
                    	    case PACKAGE:
                    	    case PRODUCT_OP:
                    	    case RETURN:
                    	    case SEMICOLON:
                    	    case SMALLER_OP:
                    	    case STRING_LITERAL:
                    	    case STRING_START:
                    	    case SUM_OP:
                    	    case SUPER:
                    	    case SWITCH_CLAUSE:
                    	    case THIS:
                    	    case THROW:
                    	    case TRY_CLAUSE:
                    	    case TYPE_CONSTRAINT:
                    	    case UIDENTIFIER:
                    	    case VALUE_MODIFIER:
                    	    case VERBATIM_STRING:
                    	    case VOID_MODIFIER:
                    	    case WHILE_CLAUSE:
                    	        {
                    	        alt8=1;
                    	        }
                    	        break;
                    	    case ELLIPSIS:
                    	        {
                    	        alt8=2;
                    	        }
                    	        break;
                    	    case COMMA:
                    	    case RBRACE:
                    	        {
                    	        alt8=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return importMemberOrTypeList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 8, 0, input);

                    	        throw nvae;

                    	    }

                    	    switch (alt8) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:235:11: ie2= importElement
                    	            {
                    	            pushFollow(FOLLOW_importElement_in_importElementList1108);
                    	            ie2=importElement();

                    	            state._fsp--;
                    	            if (state.failed) return importMemberOrTypeList;

                    	            if ( state.backtracking==0 ) { if (ie2!=null)
                    	                            il.addImportMemberOrType(ie2);
                    	                        if (ie2!=null)
                    	                            il.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:240:11: iw= importWildcard
                    	            {
                    	            pushFollow(FOLLOW_importWildcard_in_importElementList1136);
                    	            iw=importWildcard();

                    	            state._fsp--;
                    	            if (state.failed) return importMemberOrTypeList;

                    	            if ( state.backtracking==0 ) { wildcarded = true;
                    	                        if (iw!=null) 
                    	                            il.setImportWildcard(iw); 
                    	                        if (iw!=null) 
                    	                            il.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:246:11: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                            new MismatchedTokenException(ELLIPSIS, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:250:7: iw= importWildcard
                    {
                    pushFollow(FOLLOW_importWildcard_in_importElementList1190);
                    iw=importWildcard();

                    state._fsp--;
                    if (state.failed) return importMemberOrTypeList;

                    if ( state.backtracking==0 ) { il.setImportWildcard(iw); }

                    }
                    break;

            }


            RBRACE29=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_importElementList1205); if (state.failed) return importMemberOrTypeList;

            if ( state.backtracking==0 ) { il.setEndToken(RBRACE29); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importMemberOrTypeList;
    }
    // $ANTLR end "importElementList"



    // $ANTLR start "importElement"
    // /home/david/git/ceylon-spec/Ceylon.g:256:1: importElement returns [ImportMemberOrType importMemberOrType] : compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? ) ;
    public ImportMemberOrType importElement() throws RecognitionException {
        ImportMemberOrType importMemberOrType = null;


        Token SPECIFY30=null;
        Identifier in1 =null;

        Identifier in2 =null;

        ImportMemberOrTypeList iel2 =null;

        List<CompilerAnnotation> compilerAnnotations31 =null;


         Alias alias = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:258:5: ( compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? ) )
            // /home/david/git/ceylon-spec/Ceylon.g:258:7: compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_importElement1241);
            compilerAnnotations31=compilerAnnotations();

            state._fsp--;
            if (state.failed) return importMemberOrType;

            // /home/david/git/ceylon-spec/Ceylon.g:259:5: (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? )
            // /home/david/git/ceylon-spec/Ceylon.g:259:7: in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )?
            {
            pushFollow(FOLLOW_importName_in_importElement1251);
            in1=importName();

            state._fsp--;
            if (state.failed) return importMemberOrType;

            if ( state.backtracking==0 ) { importMemberOrType = new ImportMember(null);
                    importMemberOrType.setIdentifier(in1); }

            // /home/david/git/ceylon-spec/Ceylon.g:262:7: ( SPECIFY (in2= importName |) )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SPECIFY) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:262:9: SPECIFY (in2= importName |)
                    {
                    SPECIFY30=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_importElement1270); if (state.failed) return importMemberOrType;

                    if ( state.backtracking==0 ) { alias = new Alias(SPECIFY30);
                              alias.setIdentifier(in1);
                              importMemberOrType.setAlias(alias); 
                              importMemberOrType.setIdentifier(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:267:9: (in2= importName |)
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==LIDENTIFIER||LA11_0==UIDENTIFIER) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==COMMA||LA11_0==LBRACE||LA11_0==RBRACE) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return importMemberOrType;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;

                    }
                    switch (alt11) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:268:11: in2= importName
                            {
                            pushFollow(FOLLOW_importName_in_importElement1304);
                            in2=importName();

                            state._fsp--;
                            if (state.failed) return importMemberOrType;

                            if ( state.backtracking==0 ) { importMemberOrType.setIdentifier(in2); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:270:11: 
                            {
                            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                              new MismatchedTokenException(in1.getToken().getType(), input)); }

                            }
                            break;

                    }


                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:274:7: (iel2= importElementList )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==LBRACE) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:275:9: iel2= importElementList
                    {
                    pushFollow(FOLLOW_importElementList_in_importElement1368);
                    iel2=importElementList();

                    state._fsp--;
                    if (state.failed) return importMemberOrType;

                    if ( state.backtracking==0 ) { importMemberOrType.setImportMemberOrTypeList(iel2); }

                    }
                    break;

            }


            }


            if ( state.backtracking==0 ) { if (importMemberOrType!=null)
                    importMemberOrType.getCompilerAnnotations().addAll(compilerAnnotations31); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importMemberOrType;
    }
    // $ANTLR end "importElement"



    // $ANTLR start "importWildcard"
    // /home/david/git/ceylon-spec/Ceylon.g:283:1: importWildcard returns [ImportWildcard importWildcard] : ELLIPSIS ;
    public ImportWildcard importWildcard() throws RecognitionException {
        ImportWildcard importWildcard = null;


        Token ELLIPSIS32=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:284:5: ( ELLIPSIS )
            // /home/david/git/ceylon-spec/Ceylon.g:284:7: ELLIPSIS
            {
            ELLIPSIS32=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_importWildcard1420); if (state.failed) return importWildcard;

            if ( state.backtracking==0 ) { importWildcard = new ImportWildcard(ELLIPSIS32); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importWildcard;
    }
    // $ANTLR end "importWildcard"



    // $ANTLR start "importName"
    // /home/david/git/ceylon-spec/Ceylon.g:288:1: importName returns [Identifier identifier] : ( memberName | typeName );
    public Identifier importName() throws RecognitionException {
        Identifier identifier = null;


        Identifier memberName33 =null;

        Identifier typeName34 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:289:5: ( memberName | typeName )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==LIDENTIFIER) ) {
                alt14=1;
            }
            else if ( (LA14_0==UIDENTIFIER) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:289:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_importName1449);
                    memberName33=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier =memberName33; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:290:7: typeName
                    {
                    pushFollow(FOLLOW_typeName_in_importName1459);
                    typeName34=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier =typeName34; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "importName"



    // $ANTLR start "packagePath"
    // /home/david/git/ceylon-spec/Ceylon.g:293:1: packagePath returns [ImportPath importPath] : pn1= packageName (m= MEMBER_OP (pn2= packageName |) )* ;
    public ImportPath packagePath() throws RecognitionException {
        ImportPath importPath = null;


        Token m=null;
        Identifier pn1 =null;

        Identifier pn2 =null;


         importPath = new ImportPath(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:295:5: (pn1= packageName (m= MEMBER_OP (pn2= packageName |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:295:7: pn1= packageName (m= MEMBER_OP (pn2= packageName |) )*
            {
            pushFollow(FOLLOW_packageName_in_packagePath1493);
            pn1=packageName();

            state._fsp--;
            if (state.failed) return importPath;

            if ( state.backtracking==0 ) { if (pn1!=null) 
                        importPath.addIdentifier(pn1); }

            // /home/david/git/ceylon-spec/Ceylon.g:298:7: (m= MEMBER_OP (pn2= packageName |) )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==MEMBER_OP) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:299:9: m= MEMBER_OP (pn2= packageName |)
            	    {
            	    m=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_packagePath1524); if (state.failed) return importPath;

            	    if ( state.backtracking==0 ) { importPath.setEndToken(m); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:301:9: (pn2= packageName |)
            	    int alt15=2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==LIDENTIFIER||LA15_0==UIDENTIFIER) ) {
            	        alt15=1;
            	    }
            	    else if ( (LA15_0==BACKTICK||LA15_0==CHAR_LITERAL||LA15_0==LBRACE||LA15_0==MEMBER_OP||LA15_0==SEMICOLON||LA15_0==STRING_LITERAL) ) {
            	        alt15=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return importPath;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 15, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt15) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:302:11: pn2= packageName
            	            {
            	            pushFollow(FOLLOW_packageName_in_packagePath1559);
            	            pn2=packageName();

            	            state._fsp--;
            	            if (state.failed) return importPath;

            	            if ( state.backtracking==0 ) { importPath.addIdentifier(pn2); 
            	                        importPath.setEndToken(null); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:305:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importPath;
    }
    // $ANTLR end "packagePath"



    // $ANTLR start "packageName"
    // /home/david/git/ceylon-spec/Ceylon.g:311:1: packageName returns [Identifier identifier] : ( LIDENTIFIER | UIDENTIFIER );
    public Identifier packageName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER35=null;
        Token UIDENTIFIER36=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:312:5: ( LIDENTIFIER | UIDENTIFIER )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==LIDENTIFIER) ) {
                alt17=1;
            }
            else if ( (LA17_0==UIDENTIFIER) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:312:7: LIDENTIFIER
                    {
                    LIDENTIFIER35=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_packageName1624); if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER35);
                            LIDENTIFIER35.setType(PIDENTIFIER);}

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:315:7: UIDENTIFIER
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
                                  new MismatchedTokenException(LIDENTIFIER, input), 5001); }

                    UIDENTIFIER36=(Token)match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_packageName1648); if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = new Identifier(UIDENTIFIER36);
                            UIDENTIFIER36.setType(PIDENTIFIER);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "packageName"



    // $ANTLR start "typeName"
    // /home/david/git/ceylon-spec/Ceylon.g:322:1: typeName returns [Identifier identifier] : UIDENTIFIER ;
    public Identifier typeName() throws RecognitionException {
        Identifier identifier = null;


        Token UIDENTIFIER37=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:323:5: ( UIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:323:7: UIDENTIFIER
            {
            UIDENTIFIER37=(Token)match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_typeName1677); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(UIDENTIFIER37); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "typeName"



    // $ANTLR start "annotationName"
    // /home/david/git/ceylon-spec/Ceylon.g:327:1: annotationName returns [Identifier identifier] : LIDENTIFIER ;
    public Identifier annotationName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER38=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:328:5: ( LIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:328:7: LIDENTIFIER
            {
            LIDENTIFIER38=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_annotationName1706); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER38); 
                    LIDENTIFIER38.setType(AIDENTIFIER); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "annotationName"



    // $ANTLR start "memberName"
    // /home/david/git/ceylon-spec/Ceylon.g:333:1: memberName returns [Identifier identifier] : LIDENTIFIER ;
    public Identifier memberName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER39=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:334:5: ( LIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:334:7: LIDENTIFIER
            {
            LIDENTIFIER39=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_memberName1735); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER39); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "memberName"



    // $ANTLR start "memberNameDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:338:1: memberNameDeclaration returns [Identifier identifier] : ( memberName | typeName );
    public Identifier memberNameDeclaration() throws RecognitionException {
        Identifier identifier = null;


        Identifier memberName40 =null;

        Identifier typeName41 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:339:5: ( memberName | typeName )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LIDENTIFIER) ) {
                alt18=1;
            }
            else if ( (LA18_0==UIDENTIFIER) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:339:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_memberNameDeclaration1768);
                    memberName40=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = memberName40; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:340:7: typeName
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input), 5001); }

                    pushFollow(FOLLOW_typeName_in_memberNameDeclaration1786);
                    typeName41=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = typeName41; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "memberNameDeclaration"



    // $ANTLR start "typeNameDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:346:1: typeNameDeclaration returns [Identifier identifier] : ( typeName | memberName );
    public Identifier typeNameDeclaration() throws RecognitionException {
        Identifier identifier = null;


        Identifier typeName42 =null;

        Identifier memberName43 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:347:5: ( typeName | memberName )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==UIDENTIFIER) ) {
                alt19=1;
            }
            else if ( (LA19_0==LIDENTIFIER) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:347:7: typeName
                    {
                    pushFollow(FOLLOW_typeName_in_typeNameDeclaration1816);
                    typeName42=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = typeName42; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:348:7: memberName
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(UIDENTIFIER, input), 5002); }

                    pushFollow(FOLLOW_memberName_in_typeNameDeclaration1834);
                    memberName43=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = memberName43; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "typeNameDeclaration"



    // $ANTLR start "objectDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:354:1: objectDeclaration returns [ObjectDefinition declaration] : OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) ;
    public ObjectDefinition objectDeclaration() throws RecognitionException {
        ObjectDefinition declaration = null;


        Token OBJECT_DEFINITION44=null;
        Token SEMICOLON49=null;
        Identifier memberNameDeclaration45 =null;

        ExtendedType extendedType46 =null;

        SatisfiedTypes satisfiedTypes47 =null;

        ClassBody classBody48 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:355:5: ( OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:355:7: OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON )
            {
            OBJECT_DEFINITION44=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectDeclaration1864); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new ObjectDefinition(OBJECT_DEFINITION44); 
                    declaration.setType(new ValueModifier(null)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_objectDeclaration1880);
            memberNameDeclaration45=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration45); }

            // /home/david/git/ceylon-spec/Ceylon.g:360:7: ( extendedType )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==EXTENDS) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:361:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectDeclaration1907);
                    extendedType46=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setExtendedType(extendedType46); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:364:7: ( satisfiedTypes )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SATISFIES) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:365:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectDeclaration1946);
                    satisfiedTypes47=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setSatisfiedTypes(satisfiedTypes47); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:368:7: ( classBody | SEMICOLON )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LBRACE) ) {
                alt22=1;
            }
            else if ( (LA22_0==SEMICOLON) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:369:9: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_objectDeclaration1984);
                    classBody48=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setClassBody(classBody48); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:371:9: SEMICOLON
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LBRACE, input)); }

                    SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_objectDeclaration2014); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON49); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "objectDeclaration"



    // $ANTLR start "objectExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:378:1: objectExpression returns [ObjectExpression objectExpression] : OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody ;
    public ObjectExpression objectExpression() throws RecognitionException {
        ObjectExpression objectExpression = null;


        Token OBJECT_DEFINITION50=null;
        ExtendedType extendedType51 =null;

        SatisfiedTypes satisfiedTypes52 =null;

        ClassBody classBody53 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:379:5: ( OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody )
            // /home/david/git/ceylon-spec/Ceylon.g:379:7: OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody
            {
            OBJECT_DEFINITION50=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectExpression2053); if (state.failed) return objectExpression;

            if ( state.backtracking==0 ) { objectExpression = new ObjectExpression(OBJECT_DEFINITION50); }

            // /home/david/git/ceylon-spec/Ceylon.g:381:7: ( extendedType )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==EXTENDS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:382:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectExpression2080);
                    extendedType51=extendedType();

                    state._fsp--;
                    if (state.failed) return objectExpression;

                    if ( state.backtracking==0 ) { objectExpression.setExtendedType(extendedType51); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:385:7: ( satisfiedTypes )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SATISFIES) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:386:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectExpression2119);
                    satisfiedTypes52=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return objectExpression;

                    if ( state.backtracking==0 ) { objectExpression.setSatisfiedTypes(satisfiedTypes52); }

                    }
                    break;

            }


            pushFollow(FOLLOW_classBody_in_objectExpression2147);
            classBody53=classBody();

            state._fsp--;
            if (state.failed) return objectExpression;

            if ( state.backtracking==0 ) { objectExpression.setClassBody(classBody53); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return objectExpression;
    }
    // $ANTLR end "objectExpression"



    // $ANTLR start "voidOrInferredMethodDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:393:1: voidOrInferredMethodDeclaration returns [AnyMethod declaration] : ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON ) ;
    public AnyMethod voidOrInferredMethodDeclaration() throws RecognitionException {
        AnyMethod declaration = null;


        Token VOID_MODIFIER54=null;
        Token FUNCTION_MODIFIER55=null;
        Token SEMICOLON62=null;
        Identifier memberNameDeclaration56 =null;

        TypeParameterList typeParameters57 =null;

        ParameterList parameters58 =null;

        TypeConstraintList typeConstraints59 =null;

        Block block60 =null;

        SpecifierExpression functionSpecifier61 =null;


         MethodDefinition def=null;
                    MethodDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:396:5: ( ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:396:7: ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:396:7: ( VOID_MODIFIER | FUNCTION_MODIFIER )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==VOID_MODIFIER) ) {
                alt25=1;
            }
            else if ( (LA25_0==FUNCTION_MODIFIER) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:397:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER54=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodDeclaration2195); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { VoidModifier vm = new VoidModifier(VOID_MODIFIER54);
                              def = new MethodDefinition(VOID_MODIFIER54);
                              dec = new MethodDeclaration(VOID_MODIFIER54);
                              def.setType(vm);
                              dec.setType(vm);
                              declaration = dec; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:404:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER55=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodDeclaration2215); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { FunctionModifier fm = new FunctionModifier(FUNCTION_MODIFIER55);
                              def = new MethodDefinition(FUNCTION_MODIFIER55);
                              dec = new MethodDeclaration(FUNCTION_MODIFIER55);
                              def.setType(fm);
                              dec.setType(fm);
                              declaration = dec; }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_voidOrInferredMethodDeclaration2241);
            memberNameDeclaration56=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(memberNameDeclaration56); 
                    def.setIdentifier(memberNameDeclaration56); }

            // /home/david/git/ceylon-spec/Ceylon.g:415:7: ( typeParameters )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SMALLER_OP) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:416:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_voidOrInferredMethodDeclaration2267);
                    typeParameters57=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters57); 
                              dec.setTypeParameterList(typeParameters57); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:420:7: ( parameters )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==LPAREN) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:421:9: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_voidOrInferredMethodDeclaration2312);
            	    parameters58=parameters();

            	    state._fsp--;
            	    if (state.failed) return declaration;

            	    if ( state.backtracking==0 ) { def.addParameterList(parameters58); 
            	              dec.addParameterList(parameters58); }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:426:7: ( typeConstraints )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==COMPILER_ANNOTATION||LA28_0==TYPE_CONSTRAINT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:427:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_voidOrInferredMethodDeclaration2356);
                    typeConstraints59=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints59); 
                              dec.setTypeConstraintList(typeConstraints59); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:431:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==LBRACE) ) {
                alt30=1;
            }
            else if ( (LA30_0==COMPUTE||LA30_0==SEMICOLON||LA30_0==SPECIFY) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:432:9: block
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_block_in_voidOrInferredMethodDeclaration2404);
                    block60=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setBlock(block60); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:436:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:436:9: ( functionSpecifier )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==COMPUTE||LA29_0==SPECIFY) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:437:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_voidOrInferredMethodDeclaration2446);
                            functionSpecifier61=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierExpression(functionSpecifier61); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON62=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidOrInferredMethodDeclaration2489); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON62); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "voidOrInferredMethodDeclaration"



    // $ANTLR start "setterDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:447:1: setterDeclaration returns [AttributeSetterDefinition declaration] : ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON ) ;
    public AttributeSetterDefinition setterDeclaration() throws RecognitionException {
        AttributeSetterDefinition declaration = null;


        Token ASSIGN63=null;
        Token SEMICOLON67=null;
        Identifier memberNameDeclaration64 =null;

        Block block65 =null;

        SpecifierExpression functionSpecifier66 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:448:5: ( ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:448:7: ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON )
            {
            ASSIGN63=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_setterDeclaration2538); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new AttributeSetterDefinition(ASSIGN63); 
                    declaration.setType( new VoidModifier(null) ); }

            pushFollow(FOLLOW_memberNameDeclaration_in_setterDeclaration2555);
            memberNameDeclaration64=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration64); }

            // /home/david/git/ceylon-spec/Ceylon.g:453:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LBRACE) ) {
                alt32=1;
            }
            else if ( (LA32_0==COMPUTE||LA32_0==SEMICOLON||LA32_0==SPECIFY) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:454:9: block
                    {
                    pushFollow(FOLLOW_block_in_setterDeclaration2583);
                    block65=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block65); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:457:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:457:9: ( functionSpecifier )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==COMPUTE||LA31_0==SPECIFY) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:458:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_setterDeclaration2624);
                            functionSpecifier66=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(functionSpecifier66); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_setterDeclaration2667); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON67); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "setterDeclaration"



    // $ANTLR start "tuplePatternStart"
    // /home/david/git/ceylon-spec/Ceylon.g:468:1: tuplePatternStart : LBRACKET ( compilerAnnotations ( PRODUCT_OP )? LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart ) ;
    public void tuplePatternStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:469:5: ( LBRACKET ( compilerAnnotations ( PRODUCT_OP )? LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:469:7: LBRACKET ( compilerAnnotations ( PRODUCT_OP )? LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart )
            {
            match(input,LBRACKET,FOLLOW_LBRACKET_in_tuplePatternStart2702); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:470:7: ( compilerAnnotations ( PRODUCT_OP )? LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart )
            int alt34=3;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==COMPILER_ANNOTATION) ) {
                int LA34_1 = input.LA(2);

                if ( (true) ) {
                    alt34=1;
                }
                else if ( (synpred3_Ceylon()) ) {
                    alt34=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA34_0==LIDENTIFIER||LA34_0==PRODUCT_OP) ) {
                alt34=1;
            }
            else if ( (LA34_0==VALUE_MODIFIER) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==FUNCTION_MODIFIER) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==VOID_MODIFIER) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==ASSIGN) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==INTERFACE_DEFINITION) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==CLASS_DEFINITION) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==OBJECT_DEFINITION) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==NEW) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==ALIAS) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==UIDENTIFIER) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==SMALLER_OP) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==LBRACKET) ) {
                int LA34_15 = input.LA(2);

                if ( (synpred3_Ceylon()) ) {
                    alt34=2;
                }
                else if ( (true) ) {
                    alt34=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA34_0==LBRACE) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else if ( (LA34_0==DYNAMIC) && (synpred3_Ceylon())) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:471:9: compilerAnnotations ( PRODUCT_OP )? LIDENTIFIER
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_tuplePatternStart2720);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:471:29: ( PRODUCT_OP )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==PRODUCT_OP) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:471:29: PRODUCT_OP
                            {
                            match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_tuplePatternStart2722); if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_tuplePatternStart2725); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:473:9: ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart )
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:474:9: ( compilerAnnotations declarationStart )
                    // /home/david/git/ceylon-spec/Ceylon.g:474:10: compilerAnnotations declarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_tuplePatternStart2761);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_declarationStart_in_tuplePatternStart2763);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:476:9: tuplePatternStart
                    {
                    pushFollow(FOLLOW_tuplePatternStart_in_tuplePatternStart2782);
                    tuplePatternStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "tuplePatternStart"



    // $ANTLR start "variableOrTuplePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:480:1: variableOrTuplePattern returns [Pattern pattern] : ( ( tuplePatternStart )=> tuplePattern | variablePattern );
    public Pattern variableOrTuplePattern() throws RecognitionException {
        Pattern pattern = null;


        TuplePattern tuplePattern68 =null;

        VariablePattern variablePattern69 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:481:5: ( ( tuplePatternStart )=> tuplePattern | variablePattern )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==LBRACKET) ) {
                int LA35_1 = input.LA(2);

                if ( (synpred4_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (true) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA35_0==COMPILER_ANNOTATION||LA35_0==FUNCTION_MODIFIER||LA35_0==LBRACE||LA35_0==LIDENTIFIER||LA35_0==SMALLER_OP||LA35_0==UIDENTIFIER||LA35_0==VALUE_MODIFIER||LA35_0==VOID_MODIFIER) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:482:7: ( tuplePatternStart )=> tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_variableOrTuplePattern2824);
                    tuplePattern68=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern68; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:485:7: variablePattern
                    {
                    pushFollow(FOLLOW_variablePattern_in_variableOrTuplePattern2847);
                    variablePattern69=variablePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = variablePattern69; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variableOrTuplePattern"



    // $ANTLR start "pattern"
    // /home/david/git/ceylon-spec/Ceylon.g:489:1: pattern returns [Pattern pattern] : ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | ( tuplePatternStart )=> tuplePattern | variablePattern );
    public Pattern pattern() throws RecognitionException {
        Pattern pattern = null;


        KeyValuePattern ki1 =null;

        KeyValuePattern ki2 =null;

        TuplePattern tuplePattern70 =null;

        VariablePattern variablePattern71 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:490:5: ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | ( tuplePatternStart )=> tuplePattern | variablePattern )
            int alt36=4;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA36_1 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (synpred7_Ceylon()) ) {
                    alt36=3;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA36_2 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA36_3 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA36_4 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA36_5 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA36_6 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA36_7 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA36_8 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA36_9 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }

            switch (alt36) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:491:7: ( variable ENTRY_OP )=>ki1= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_pattern2899);
                    ki1=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:495:7: ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_pattern2937);
                    ki2=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki2; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:499:7: ( tuplePatternStart )=> tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_pattern2972);
                    tuplePattern70=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern70; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:503:7: variablePattern
                    {
                    pushFollow(FOLLOW_variablePattern_in_pattern2995);
                    variablePattern71=variablePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = variablePattern71; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "pattern"



    // $ANTLR start "tupleOrEntryPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:507:1: tupleOrEntryPattern returns [Pattern pattern] : ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | tuplePattern );
    public Pattern tupleOrEntryPattern() throws RecognitionException {
        Pattern pattern = null;


        KeyValuePattern ki1 =null;

        KeyValuePattern ki2 =null;

        TuplePattern tuplePattern72 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:508:5: ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | tuplePattern )
            int alt37=3;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA37_1 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else if ( (true) ) {
                    alt37=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA37_2 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA37_3 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA37_4 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA37_5 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA37_6 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA37_7 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA37_8 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA37_9 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt37=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }

            switch (alt37) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:509:7: ( variable ENTRY_OP )=>ki1= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_tupleOrEntryPattern3047);
                    ki1=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:513:7: ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_tupleOrEntryPattern3085);
                    ki2=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki2; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:517:7: tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_tupleOrEntryPattern3107);
                    tuplePattern72=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern72; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "tupleOrEntryPattern"



    // $ANTLR start "variablePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:521:1: variablePattern returns [VariablePattern pattern] : variable ;
    public VariablePattern variablePattern() throws RecognitionException {
        VariablePattern pattern = null;


        Variable variable73 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:522:5: ( variable )
            // /home/david/git/ceylon-spec/Ceylon.g:522:7: variable
            {
            pushFollow(FOLLOW_variable_in_variablePattern3136);
            variable73=variable();

            state._fsp--;
            if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new VariablePattern(null);
                    pattern.setVariable(variable73); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variablePattern"



    // $ANTLR start "tuplePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:527:1: tuplePattern returns [TuplePattern pattern] : LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET ;
    public TuplePattern tuplePattern() throws RecognitionException {
        TuplePattern pattern = null;


        Token c1=null;
        Token LBRACKET74=null;
        Token RBRACKET75=null;
        Pattern v1 =null;

        Pattern v2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:528:5: ( LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:528:7: LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET
            {
            LBRACKET74=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tuplePattern3165); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new TuplePattern(LBRACKET74); }

            // /home/david/git/ceylon-spec/Ceylon.g:530:7: (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==COMPILER_ANNOTATION||LA39_0==FUNCTION_MODIFIER||(LA39_0 >= LBRACE && LA39_0 <= LBRACKET)||LA39_0==LIDENTIFIER||LA39_0==PRODUCT_OP||LA39_0==SMALLER_OP||LA39_0==UIDENTIFIER||LA39_0==VALUE_MODIFIER||LA39_0==VOID_MODIFIER) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:531:9: v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )*
                    {
                    pushFollow(FOLLOW_variadicPattern_in_tuplePattern3193);
                    v1=variadicPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern.addPattern(v1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:533:9: (c1= COMMA (v2= variadicPattern ) )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==COMMA) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:534:11: c1= COMMA (v2= variadicPattern )
                    	    {
                    	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuplePattern3227); if (state.failed) return pattern;

                    	    if ( state.backtracking==0 ) { pattern.setEndToken(c1); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:536:11: (v2= variadicPattern )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:537:13: v2= variadicPattern
                    	    {
                    	    pushFollow(FOLLOW_variadicPattern_in_tuplePattern3267);
                    	    v2=variadicPattern();

                    	    state._fsp--;
                    	    if (state.failed) return pattern;

                    	    if ( state.backtracking==0 ) { pattern.addPattern(v2);
                    	                  pattern.setEndToken(null); }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }
                    break;

            }


            RBRACKET75=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tuplePattern3321); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern.setEndToken(RBRACKET75); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "tuplePattern"



    // $ANTLR start "variadicPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:547:1: variadicPattern returns [Pattern pattern] : ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern ) ;
    public Pattern variadicPattern() throws RecognitionException {
        Pattern pattern = null;


        Pattern p =null;

        Variable variadicVariable76 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:548:5: ( ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern ) )
            // /home/david/git/ceylon-spec/Ceylon.g:548:7: ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:548:7: ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==COMPILER_ANNOTATION) ) {
                int LA40_1 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==UIDENTIFIER) ) {
                int LA40_2 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==SMALLER_OP) ) {
                int LA40_3 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==LBRACKET) ) {
                int LA40_4 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==LBRACE) ) {
                int LA40_5 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==PRODUCT_OP) && (synpred10_Ceylon())) {
                alt40=1;
            }
            else if ( (LA40_0==FUNCTION_MODIFIER||LA40_0==LIDENTIFIER||LA40_0==VALUE_MODIFIER||LA40_0==VOID_MODIFIER) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:549:9: ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable
                    {
                    pushFollow(FOLLOW_variadicVariable_in_variadicPattern3379);
                    variadicVariable76=variadicVariable();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { VariablePattern vp = new VariablePattern(null);
                              vp.setVariable(variadicVariable76); 
                              pattern = vp; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:555:9: p= pattern
                    {
                    pushFollow(FOLLOW_pattern_in_variadicPattern3408);
                    p=pattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = p; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variadicPattern"



    // $ANTLR start "variadicVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:560:1: variadicVariable returns [Variable variable] : compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )? ;
    public Variable variadicVariable() throws RecognitionException {
        Variable variable = null;


        Token PRODUCT_OP79=null;
        List<CompilerAnnotation> compilerAnnotations77 =null;

        StaticType unionType78 =null;

        Identifier memberName80 =null;


         variable = new Variable(null); 
                    Type t = new ValueModifier(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:563:5: ( compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )? )
            // /home/david/git/ceylon-spec/Ceylon.g:563:7: compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )?
            {
            pushFollow(FOLLOW_compilerAnnotations_in_variadicVariable3455);
            compilerAnnotations77=compilerAnnotations();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.getCompilerAnnotations().addAll(compilerAnnotations77); }

            // /home/david/git/ceylon-spec/Ceylon.g:565:7: ( unionType )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0 >= LBRACE && LA41_0 <= LBRACKET)||LA41_0==SMALLER_OP||LA41_0==UIDENTIFIER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:566:9: unionType
                    {
                    pushFollow(FOLLOW_unionType_in_variadicVariable3481);
                    unionType78=unionType();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { t = unionType78; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:569:7: ( PRODUCT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:570:9: PRODUCT_OP
            {
            PRODUCT_OP79=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_variadicVariable3518); if (state.failed) return variable;

            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(PRODUCT_OP79);
                      st.setType(t);
                      st.setAtLeastOne(false);
                      variable.setType(st); }

            }


            // /home/david/git/ceylon-spec/Ceylon.g:582:7: ( memberName )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==LIDENTIFIER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:583:9: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_variadicVariable3562);
                    memberName80=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(memberName80); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "variadicVariable"



    // $ANTLR start "keyItemPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:588:1: keyItemPattern returns [KeyValuePattern pattern] : v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )? ;
    public KeyValuePattern keyItemPattern() throws RecognitionException {
        KeyValuePattern pattern = null;


        Token ENTRY_OP81=null;
        Pattern v1 =null;

        Pattern v2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:589:5: (v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )? )
            // /home/david/git/ceylon-spec/Ceylon.g:589:7: v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )?
            {
            pushFollow(FOLLOW_variableOrTuplePattern_in_keyItemPattern3604);
            v1=variableOrTuplePattern();

            state._fsp--;
            if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new KeyValuePattern(null);
                    pattern.setKey(v1); }

            ENTRY_OP81=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_keyItemPattern3620); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern.setEndToken(ENTRY_OP81); }

            // /home/david/git/ceylon-spec/Ceylon.g:594:7: (v2= variableOrTuplePattern )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==COMPILER_ANNOTATION||LA43_0==FUNCTION_MODIFIER||(LA43_0 >= LBRACE && LA43_0 <= LBRACKET)||LA43_0==LIDENTIFIER||LA43_0==SMALLER_OP||LA43_0==UIDENTIFIER||LA43_0==VALUE_MODIFIER||LA43_0==VOID_MODIFIER) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:595:9: v2= variableOrTuplePattern
                    {
                    pushFollow(FOLLOW_variableOrTuplePattern_in_keyItemPattern3648);
                    v2=variableOrTuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern.setValue(v2); 
                              pattern.setEndToken(null); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "keyItemPattern"



    // $ANTLR start "destructure"
    // /home/david/git/ceylon-spec/Ceylon.g:601:1: destructure returns [Destructure destructure] : VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON ;
    public Destructure destructure() throws RecognitionException {
        Destructure destructure = null;


        Token VALUE_MODIFIER82=null;
        Token SEMICOLON85=null;
        Pattern tupleOrEntryPattern83 =null;

        SpecifierExpression specifier84 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:602:5: ( VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:602:7: VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON
            {
            VALUE_MODIFIER82=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructure3688); if (state.failed) return destructure;

            if ( state.backtracking==0 ) { ValueModifier vm = new ValueModifier(VALUE_MODIFIER82);
                    destructure = new Destructure(null);
                    destructure.setType(vm); }

            pushFollow(FOLLOW_tupleOrEntryPattern_in_destructure3704);
            tupleOrEntryPattern83=tupleOrEntryPattern();

            state._fsp--;
            if (state.failed) return destructure;

            if ( state.backtracking==0 ) { destructure.setPattern(tupleOrEntryPattern83); }

            // /home/david/git/ceylon-spec/Ceylon.g:608:7: ( specifier )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==SPECIFY) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:609:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_destructure3730);
                    specifier84=specifier();

                    state._fsp--;
                    if (state.failed) return destructure;

                    if ( state.backtracking==0 ) { destructure.setSpecifierExpression(specifier84); }

                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    }
                    break;

            }


            SEMICOLON85=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_destructure3767); if (state.failed) return destructure;

            if ( state.backtracking==0 ) { destructure.setEndToken(SEMICOLON85); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return destructure;
    }
    // $ANTLR end "destructure"



    // $ANTLR start "inferredAttributeDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:618:1: inferredAttributeDeclaration returns [AnyAttribute declaration] : VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block ) ;
    public AnyAttribute inferredAttributeDeclaration() throws RecognitionException {
        AnyAttribute declaration = null;


        Token VALUE_MODIFIER86=null;
        Token SEMICOLON90=null;
        Identifier memberNameDeclaration87 =null;

        SpecifierExpression specifier88 =null;

        SpecifierExpression lazySpecifier89 =null;

        Block block91 =null;


         AttributeGetterDefinition def=null;
                    AttributeDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:621:5: ( VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:621:7: VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block )
            {
            VALUE_MODIFIER86=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_inferredAttributeDeclaration3805); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { ValueModifier fm = new ValueModifier(VALUE_MODIFIER86);
                    def = new AttributeGetterDefinition(VALUE_MODIFIER86);
                    dec = new AttributeDeclaration(VALUE_MODIFIER86);
                    def.setType(fm);
                    dec.setType(fm);
                    declaration = dec; }

            pushFollow(FOLLOW_memberNameDeclaration_in_inferredAttributeDeclaration3822);
            memberNameDeclaration87=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(memberNameDeclaration87); 
                    def.setIdentifier(memberNameDeclaration87); }

            // /home/david/git/ceylon-spec/Ceylon.g:631:7: ( ( specifier | lazySpecifier )? SEMICOLON | block )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==COMPUTE||LA46_0==SEMICOLON||LA46_0==SPECIFY) ) {
                alt46=1;
            }
            else if ( (LA46_0==LBRACE) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:632:9: ( specifier | lazySpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:632:9: ( specifier | lazySpecifier )?
                    int alt45=3;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==SPECIFY) ) {
                        alt45=1;
                    }
                    else if ( (LA45_0==COMPUTE) ) {
                        alt45=2;
                    }
                    switch (alt45) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:633:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_inferredAttributeDeclaration3861);
                            specifier88=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierOrInitializerExpression(specifier88); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:636:11: lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_inferredAttributeDeclaration3896);
                            lazySpecifier89=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierOrInitializerExpression(lazySpecifier89); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON90=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inferredAttributeDeclaration3939); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON90); 
                              expecting=-1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:644:9: block
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_block_in_inferredAttributeDeclaration3978);
                    block91=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setBlock(block91); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "inferredAttributeDeclaration"



    // $ANTLR start "typedMethodOrAttributeDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:650:1: typedMethodOrAttributeDeclaration returns [TypedDeclaration declaration] : ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block ) ;
    public TypedDeclaration typedMethodOrAttributeDeclaration() throws RecognitionException {
        TypedDeclaration declaration = null;


        Token s1=null;
        Token s2=null;
        Token DYNAMIC93=null;
        Block b1 =null;

        SpecifierExpression ms =null;

        SpecifierExpression as =null;

        SpecifierExpression ac =null;

        Block b2 =null;

        Type variadicType92 =null;

        Identifier memberNameDeclaration94 =null;

        TypeParameterList typeParameters95 =null;

        ParameterList parameters96 =null;

        TypeConstraintList typeConstraints97 =null;


         AttributeGetterDefinition adef=new AttributeGetterDefinition(null);
                    AttributeDeclaration adec=new AttributeDeclaration(null);
                    MethodDefinition mdef=new MethodDefinition(null);
                    MethodDeclaration mdec=new MethodDeclaration(null); 
                    declaration = adec; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:656:5: ( ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:656:7: ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:656:7: ( variadicType | DYNAMIC )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0 >= LBRACE && LA47_0 <= LBRACKET)||LA47_0==SMALLER_OP||LA47_0==UIDENTIFIER) ) {
                alt47=1;
            }
            else if ( (LA47_0==DYNAMIC) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:656:9: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_typedMethodOrAttributeDeclaration4028);
                    variadicType92=variadicType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { adef.setType(variadicType92);
                              adec.setType(variadicType92); 
                              mdef.setType(variadicType92);
                              mdec.setType(variadicType92); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:661:9: DYNAMIC
                    {
                    DYNAMIC93=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_typedMethodOrAttributeDeclaration4048); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { DynamicModifier dm = new DynamicModifier(DYNAMIC93);
                              adef.setType(dm);
                              adec.setType(dm); 
                              mdef.setType(dm);
                              mdec.setType(dm); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_typedMethodOrAttributeDeclaration4074);
            memberNameDeclaration94=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { adef.setIdentifier(memberNameDeclaration94);
                    adec.setIdentifier(memberNameDeclaration94); 
                    mdef.setIdentifier(memberNameDeclaration94);
                    mdec.setIdentifier(memberNameDeclaration94); }

            // /home/david/git/ceylon-spec/Ceylon.g:673:7: ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block )
            int alt54=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case SMALLER_OP:
                {
                alt54=1;
                }
                break;
            case COMPUTE:
            case SEMICOLON:
            case SPECIFY:
                {
                alt54=2;
                }
                break;
            case LBRACE:
                {
                alt54=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:674:9: ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON )
                    {
                    if ( state.backtracking==0 ) { declaration = mdec; }

                    // /home/david/git/ceylon-spec/Ceylon.g:675:9: ( typeParameters )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==SMALLER_OP) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:676:11: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_typedMethodOrAttributeDeclaration4123);
                            typeParameters95=typeParameters();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setTypeParameterList(typeParameters95);
                                        mdec.setTypeParameterList(typeParameters95); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:680:9: ( parameters )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==LPAREN) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:681:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_typedMethodOrAttributeDeclaration4168);
                    	    parameters96=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { mdef.addParameterList(parameters96);
                    	                mdec.addParameterList(parameters96); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:686:9: ( typeConstraints )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==COMPILER_ANNOTATION||LA50_0==TYPE_CONSTRAINT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:687:11: typeConstraints
                            {
                            pushFollow(FOLLOW_typeConstraints_in_typedMethodOrAttributeDeclaration4223);
                            typeConstraints97=typeConstraints();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setTypeConstraintList(typeConstraints97);
                                        mdec.setTypeConstraintList(typeConstraints97); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:691:9: (b1= block | (ms= functionSpecifier )? s1= SEMICOLON )
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==LBRACE) ) {
                        alt52=1;
                    }
                    else if ( (LA52_0==COMPUTE||LA52_0==SEMICOLON||LA52_0==SPECIFY) ) {
                        alt52=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 52, 0, input);

                        throw nvae;

                    }
                    switch (alt52) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:692:11: b1= block
                            {
                            if ( state.backtracking==0 ) { declaration = mdef; }

                            pushFollow(FOLLOW_block_in_typedMethodOrAttributeDeclaration4283);
                            b1=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setBlock(b1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:696:11: (ms= functionSpecifier )? s1= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:696:11: (ms= functionSpecifier )?
                            int alt51=2;
                            int LA51_0 = input.LA(1);

                            if ( (LA51_0==COMPUTE||LA51_0==SPECIFY) ) {
                                alt51=1;
                            }
                            switch (alt51) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:697:13: ms= functionSpecifier
                                    {
                                    pushFollow(FOLLOW_functionSpecifier_in_typedMethodOrAttributeDeclaration4333);
                                    ms=functionSpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { mdec.setSpecifierExpression(ms); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s1=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4385); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setEndToken(s1);
                                        expecting=-1; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:706:9: (as= specifier |ac= lazySpecifier )? s2= SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:706:9: (as= specifier |ac= lazySpecifier )?
                    int alt53=3;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==SPECIFY) ) {
                        alt53=1;
                    }
                    else if ( (LA53_0==COMPUTE) ) {
                        alt53=2;
                    }
                    switch (alt53) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:707:11: as= specifier
                            {
                            pushFollow(FOLLOW_specifier_in_typedMethodOrAttributeDeclaration4440);
                            as=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { adec.setSpecifierOrInitializerExpression(as); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:710:11: ac= lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_typedMethodOrAttributeDeclaration4478);
                            ac=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { adec.setSpecifierOrInitializerExpression(ac); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    s2=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4524); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(s2); 
                            expecting=-1; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:718:9: b2= block
                    {
                    if ( state.backtracking==0 ) { declaration = adef; }

                    pushFollow(FOLLOW_block_in_typedMethodOrAttributeDeclaration4565);
                    b2=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { adef.setBlock(b2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "typedMethodOrAttributeDeclaration"



    // $ANTLR start "interfaceDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:724:1: interfaceDeclaration returns [AnyInterface declaration] : ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON ) ;
    public AnyInterface interfaceDeclaration() throws RecognitionException {
        AnyInterface declaration = null;


        Token INTERFACE_DEFINITION98=null;
        Token DYNAMIC99=null;
        Token SEMICOLON107=null;
        Identifier typeNameDeclaration100 =null;

        TypeParameterList typeParameters101 =null;

        CaseTypes caseTypes102 =null;

        SatisfiedTypes satisfiedTypes103 =null;

        TypeConstraintList typeConstraints104 =null;

        InterfaceBody interfaceBody105 =null;

        TypeSpecifier typeSpecifier106 =null;


         InterfaceDefinition def=null; 
                    InterfaceDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:727:5: ( ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:727:7: ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:727:7: ( INTERFACE_DEFINITION | DYNAMIC )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==INTERFACE_DEFINITION) ) {
                alt55=1;
            }
            else if ( (LA55_0==DYNAMIC) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:728:9: INTERFACE_DEFINITION
                    {
                    INTERFACE_DEFINITION98=(Token)match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_interfaceDeclaration4624); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def = new InterfaceDefinition(INTERFACE_DEFINITION98); 
                              dec = new InterfaceDeclaration(INTERFACE_DEFINITION98);
                              declaration = dec; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:733:9: DYNAMIC
                    {
                    DYNAMIC99=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_interfaceDeclaration4653); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def = new InterfaceDefinition(DYNAMIC99);
                              dec = new InterfaceDeclaration(DYNAMIC99);
                              def.setDynamic(true);
                              declaration = def; }

                    }
                    break;

            }


            pushFollow(FOLLOW_typeNameDeclaration_in_interfaceDeclaration4679);
            typeNameDeclaration100=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(typeNameDeclaration100); 
                    def.setIdentifier(typeNameDeclaration100); }

            // /home/david/git/ceylon-spec/Ceylon.g:742:7: ( typeParameters )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==SMALLER_OP) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:743:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_interfaceDeclaration4706);
                    typeParameters101=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters101); 
                              dec.setTypeParameterList(typeParameters101); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:747:7: ( caseTypes )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==CASE_TYPES) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:748:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_interfaceDeclaration4744);
                    caseTypes102=caseTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setCaseTypes(caseTypes102); 
                              dec.setCaseTypes(caseTypes102); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:757:7: ( satisfiedTypes )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SATISFIES) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:758:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_interfaceDeclaration4798);
                    satisfiedTypes103=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setSatisfiedTypes(satisfiedTypes103); 
                              dec.setSatisfiedTypes(satisfiedTypes103); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:762:7: ( typeConstraints )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==COMPILER_ANNOTATION||LA59_0==TYPE_CONSTRAINT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:763:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_interfaceDeclaration4835);
                    typeConstraints104=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints104); 
                              dec.setTypeConstraintList(typeConstraints104); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:767:7: ( interfaceBody | ( typeSpecifier )? SEMICOLON )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LBRACE) ) {
                alt61=1;
            }
            else if ( (LA61_0==COMPUTE||LA61_0==SEMICOLON||LA61_0==SPECIFY) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:768:9: interfaceBody
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_interfaceBody_in_interfaceDeclaration4882);
                    interfaceBody105=interfaceBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setInterfaceBody(interfaceBody105); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:772:9: ( typeSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:772:9: ( typeSpecifier )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==COMPUTE||LA60_0==SPECIFY) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:773:11: typeSpecifier
                            {
                            pushFollow(FOLLOW_typeSpecifier_in_interfaceDeclaration4923);
                            typeSpecifier106=typeSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setTypeSpecifier(typeSpecifier106); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceDeclaration4967); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON107); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "interfaceDeclaration"



    // $ANTLR start "classDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:783:1: classDeclaration returns [AnyClass declaration] : CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON ) ;
    public AnyClass classDeclaration() throws RecognitionException {
        AnyClass declaration = null;


        Token CLASS_DEFINITION108=null;
        Token SEMICOLON118=null;
        Identifier typeNameDeclaration109 =null;

        TypeParameterList typeParameters110 =null;

        ParameterList parameters111 =null;

        CaseTypes caseTypes112 =null;

        ExtendedType extendedType113 =null;

        SatisfiedTypes satisfiedTypes114 =null;

        TypeConstraintList typeConstraints115 =null;

        ClassBody classBody116 =null;

        ClassSpecifier classSpecifier117 =null;


         ClassDefinition def=null; 
                    ClassDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:786:5: ( CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:786:7: CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON )
            {
            CLASS_DEFINITION108=(Token)match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_classDeclaration5015); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { def = new ClassDefinition(CLASS_DEFINITION108); 
                    dec = new ClassDeclaration(CLASS_DEFINITION108);
                    declaration = dec; }

            pushFollow(FOLLOW_typeNameDeclaration_in_classDeclaration5032);
            typeNameDeclaration109=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(typeNameDeclaration109); 
                    def.setIdentifier(typeNameDeclaration109); }

            // /home/david/git/ceylon-spec/Ceylon.g:793:7: ( typeParameters )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==SMALLER_OP) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:794:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration5058);
                    typeParameters110=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters110); 
                              dec.setTypeParameterList(typeParameters110); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:798:7: ( parameters )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LPAREN) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:799:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_classDeclaration5095);
                    parameters111=parameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setParameterList(parameters111); 
                              dec.setParameterList(parameters111); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:803:7: ( caseTypes )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==CASE_TYPES) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:804:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_classDeclaration5132);
                    caseTypes112=caseTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setCaseTypes(caseTypes112); 
                              dec.setCaseTypes(caseTypes112); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:809:7: ( extendedType )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==EXTENDS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:810:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_classDeclaration5178);
                    extendedType113=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setExtendedType(extendedType113); 
                              dec.setExtendedType(extendedType113); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:814:7: ( satisfiedTypes )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==SATISFIES) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:815:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_classDeclaration5216);
                    satisfiedTypes114=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setSatisfiedTypes(satisfiedTypes114); 
                              dec.setSatisfiedTypes(satisfiedTypes114); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:819:7: ( typeConstraints )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==COMPILER_ANNOTATION||LA67_0==TYPE_CONSTRAINT) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:820:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_classDeclaration5253);
                    typeConstraints115=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints115); 
                              dec.setTypeConstraintList(typeConstraints115); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:824:7: ( classBody | ( classSpecifier )? SEMICOLON )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LBRACE) ) {
                alt69=1;
            }
            else if ( (LA69_0==COMPUTE||LA69_0==SEMICOLON||LA69_0==SPECIFY) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:825:9: classBody
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_classBody_in_classDeclaration5300);
                    classBody116=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setClassBody(classBody116); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:829:9: ( classSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:829:9: ( classSpecifier )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==COMPUTE||LA68_0==SPECIFY) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:830:11: classSpecifier
                            {
                            pushFollow(FOLLOW_classSpecifier_in_classDeclaration5341);
                            classSpecifier117=classSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setClassSpecifier(classSpecifier117); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON118=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_classDeclaration5384); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON118); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "classDeclaration"



    // $ANTLR start "constructor"
    // /home/david/git/ceylon-spec/Ceylon.g:840:1: constructor returns [Constructor declaration] : NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block ;
    public Constructor constructor() throws RecognitionException {
        Constructor declaration = null;


        Token NEW119=null;
        DelegatedConstructor dc =null;

        Identifier typeNameDeclaration120 =null;

        ParameterList parameters121 =null;

        Block block122 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:841:5: ( NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block )
            // /home/david/git/ceylon-spec/Ceylon.g:841:7: NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block
            {
            NEW119=(Token)match(input,NEW,FOLLOW_NEW_in_constructor5423); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new Constructor(NEW119); }

            pushFollow(FOLLOW_typeNameDeclaration_in_constructor5439);
            typeNameDeclaration120=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(typeNameDeclaration120); }

            // /home/david/git/ceylon-spec/Ceylon.g:845:7: ( parameters )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==LPAREN) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:846:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_constructor5465);
                    parameters121=parameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setParameterList(parameters121); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:849:7: (dc= delegatedConstructor )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==EXTENDS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:850:9: dc= delegatedConstructor
                    {
                    pushFollow(FOLLOW_delegatedConstructor_in_constructor5506);
                    dc=delegatedConstructor();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setDelegatedConstructor(dc); }

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_constructor5533);
            block122=block();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setBlock(block122); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "constructor"



    // $ANTLR start "delegatedConstructor"
    // /home/david/git/ceylon-spec/Ceylon.g:857:1: delegatedConstructor returns [DelegatedConstructor delegatedConstructor] : EXTENDS (ci= classInstantiation )? ;
    public DelegatedConstructor delegatedConstructor() throws RecognitionException {
        DelegatedConstructor delegatedConstructor = null;


        Token EXTENDS123=null;
        PsiCompatibleCeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:858:5: ( EXTENDS (ci= classInstantiation )? )
            // /home/david/git/ceylon-spec/Ceylon.g:858:7: EXTENDS (ci= classInstantiation )?
            {
            EXTENDS123=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_delegatedConstructor5562); if (state.failed) return delegatedConstructor;

            if ( state.backtracking==0 ) { delegatedConstructor = new DelegatedConstructor(EXTENDS123); }

            // /home/david/git/ceylon-spec/Ceylon.g:860:7: (ci= classInstantiation )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==SUPER||LA72_0==UIDENTIFIER) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:861:9: ci= classInstantiation
                    {
                    pushFollow(FOLLOW_classInstantiation_in_delegatedConstructor5590);
                    ci=classInstantiation();

                    state._fsp--;
                    if (state.failed) return delegatedConstructor;

                    if ( state.backtracking==0 ) { delegatedConstructor.setType((ci!=null?ci.type:null));
                              delegatedConstructor.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return delegatedConstructor;
    }
    // $ANTLR end "delegatedConstructor"



    // $ANTLR start "aliasDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:867:1: aliasDeclaration returns [TypeAliasDeclaration declaration] : ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON ;
    public TypeAliasDeclaration aliasDeclaration() throws RecognitionException {
        TypeAliasDeclaration declaration = null;


        Token ALIAS124=null;
        Token SEMICOLON129=null;
        Identifier typeNameDeclaration125 =null;

        TypeParameterList typeParameters126 =null;

        TypeConstraintList typeConstraints127 =null;

        TypeSpecifier typeSpecifier128 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:868:5: ( ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:868:7: ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON
            {
            ALIAS124=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_aliasDeclaration5630); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new TypeAliasDeclaration(ALIAS124);}

            pushFollow(FOLLOW_typeNameDeclaration_in_aliasDeclaration5646);
            typeNameDeclaration125=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(typeNameDeclaration125); }

            // /home/david/git/ceylon-spec/Ceylon.g:872:7: ( typeParameters )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==SMALLER_OP) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:873:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_aliasDeclaration5673);
                    typeParameters126=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeParameterList(typeParameters126); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:876:7: ( typeConstraints )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==COMPILER_ANNOTATION||LA74_0==TYPE_CONSTRAINT) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:877:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_aliasDeclaration5711);
                    typeConstraints127=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeConstraintList(typeConstraints127); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:880:7: ( typeSpecifier )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==COMPUTE||LA75_0==SPECIFY) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:881:9: typeSpecifier
                    {
                    pushFollow(FOLLOW_typeSpecifier_in_aliasDeclaration5748);
                    typeSpecifier128=typeSpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeSpecifier(typeSpecifier128); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON129=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aliasDeclaration5783); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON129); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "aliasDeclaration"



    // $ANTLR start "assertion"
    // /home/david/git/ceylon-spec/Ceylon.g:890:1: assertion returns [Assertion assertion] : annotations ASSERT conditions SEMICOLON ;
    public Assertion assertion() throws RecognitionException {
        Assertion assertion = null;


        Token ASSERT130=null;
        Token SEMICOLON133=null;
        AnnotationList annotations131 =null;

        ConditionList conditions132 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:891:5: ( annotations ASSERT conditions SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:891:7: annotations ASSERT conditions SEMICOLON
            {
            pushFollow(FOLLOW_annotations_in_assertion5812);
            annotations131=annotations();

            state._fsp--;
            if (state.failed) return assertion;

            ASSERT130=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assertion5820); if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion = new Assertion(ASSERT130); 
                    assertion.setAnnotationList(annotations131); }

            pushFollow(FOLLOW_conditions_in_assertion5836);
            conditions132=conditions();

            state._fsp--;
            if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion.setConditionList(conditions132); }

            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON133=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_assertion5860); if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion.setEndToken(SEMICOLON133); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return assertion;
    }
    // $ANTLR end "assertion"



    // $ANTLR start "block"
    // /home/david/git/ceylon-spec/Ceylon.g:903:1: block returns [Block block] : LBRACE ( declarationOrStatement )* RBRACE ;
    public Block block() throws RecognitionException {
        Block block = null;


        Token LBRACE134=null;
        Token RBRACE136=null;
        Statement declarationOrStatement135 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:904:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:904:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE134=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_block5889); if (state.failed) return block;

            if ( state.backtracking==0 ) { block = new Block(LBRACE134); }

            // /home/david/git/ceylon-spec/Ceylon.g:906:7: ( declarationOrStatement )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==ALIAS||(LA76_0 >= ASSERT && LA76_0 <= ASSIGN)||(LA76_0 >= BACKTICK && LA76_0 <= BREAK)||(LA76_0 >= CHAR_LITERAL && LA76_0 <= CLASS_DEFINITION)||LA76_0==COMPILER_ANNOTATION||LA76_0==CONTINUE||(LA76_0 >= DECREMENT_OP && LA76_0 <= DIFFERENCE_OP)||LA76_0==DYNAMIC||(LA76_0 >= FLOAT_LITERAL && LA76_0 <= FUNCTION_MODIFIER)||(LA76_0 >= IF_CLAUSE && LA76_0 <= INTERFACE_DEFINITION)||LA76_0==IN_OP||(LA76_0 >= LBRACE && LA76_0 <= LIDENTIFIER)||LA76_0==LPAREN||LA76_0==MODULE||(LA76_0 >= NATURAL_LITERAL && LA76_0 <= NEW)||(LA76_0 >= NOT_OP && LA76_0 <= OBJECT_DEFINITION)||(LA76_0 >= OUT && LA76_0 <= PACKAGE)||LA76_0==PRODUCT_OP||LA76_0==RETURN||(LA76_0 >= SEMICOLON && LA76_0 <= SMALLER_OP)||LA76_0==STRING_LITERAL||LA76_0==STRING_START||(LA76_0 >= SUM_OP && LA76_0 <= SWITCH_CLAUSE)||(LA76_0 >= THIS && LA76_0 <= UIDENTIFIER)||(LA76_0 >= VALUE_MODIFIER && LA76_0 <= WHILE_CLAUSE)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:907:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_block5916);
            	    declarationOrStatement135=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return block;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement135!=null)
            	                  block.addStatement(declarationOrStatement135); }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            RBRACE136=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_block5943); if (state.failed) return block;

            if ( state.backtracking==0 ) { block.setEndToken(RBRACE136); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "block"



    // $ANTLR start "interfaceBody"
    // /home/david/git/ceylon-spec/Ceylon.g:919:1: interfaceBody returns [InterfaceBody interfaceBody] : LBRACE ( declarationOrStatement )* RBRACE ;
    public InterfaceBody interfaceBody() throws RecognitionException {
        InterfaceBody interfaceBody = null;


        Token LBRACE137=null;
        Token RBRACE139=null;
        Statement declarationOrStatement138 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:920:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:920:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE137=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_interfaceBody5976); if (state.failed) return interfaceBody;

            if ( state.backtracking==0 ) { interfaceBody = new InterfaceBody(LBRACE137); }

            // /home/david/git/ceylon-spec/Ceylon.g:922:7: ( declarationOrStatement )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==ALIAS||(LA77_0 >= ASSERT && LA77_0 <= ASSIGN)||(LA77_0 >= BACKTICK && LA77_0 <= BREAK)||(LA77_0 >= CHAR_LITERAL && LA77_0 <= CLASS_DEFINITION)||LA77_0==COMPILER_ANNOTATION||LA77_0==CONTINUE||(LA77_0 >= DECREMENT_OP && LA77_0 <= DIFFERENCE_OP)||LA77_0==DYNAMIC||(LA77_0 >= FLOAT_LITERAL && LA77_0 <= FUNCTION_MODIFIER)||(LA77_0 >= IF_CLAUSE && LA77_0 <= INTERFACE_DEFINITION)||LA77_0==IN_OP||(LA77_0 >= LBRACE && LA77_0 <= LIDENTIFIER)||LA77_0==LPAREN||LA77_0==MODULE||(LA77_0 >= NATURAL_LITERAL && LA77_0 <= NEW)||(LA77_0 >= NOT_OP && LA77_0 <= OBJECT_DEFINITION)||(LA77_0 >= OUT && LA77_0 <= PACKAGE)||LA77_0==PRODUCT_OP||LA77_0==RETURN||(LA77_0 >= SEMICOLON && LA77_0 <= SMALLER_OP)||LA77_0==STRING_LITERAL||LA77_0==STRING_START||(LA77_0 >= SUM_OP && LA77_0 <= SWITCH_CLAUSE)||(LA77_0 >= THIS && LA77_0 <= UIDENTIFIER)||(LA77_0 >= VALUE_MODIFIER && LA77_0 <= WHILE_CLAUSE)) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:923:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_interfaceBody6003);
            	    declarationOrStatement138=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return interfaceBody;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement138!=null)
            	                  interfaceBody.addStatement(declarationOrStatement138); }

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            RBRACE139=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_interfaceBody6030); if (state.failed) return interfaceBody;

            if ( state.backtracking==0 ) { interfaceBody.setEndToken(RBRACE139); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return interfaceBody;
    }
    // $ANTLR end "interfaceBody"



    // $ANTLR start "classBody"
    // /home/david/git/ceylon-spec/Ceylon.g:931:1: classBody returns [ClassBody classBody] : LBRACE ( declarationOrStatement )* RBRACE ;
    public ClassBody classBody() throws RecognitionException {
        ClassBody classBody = null;


        Token LBRACE140=null;
        Token RBRACE142=null;
        Statement declarationOrStatement141 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:932:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:932:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE140=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_classBody6059); if (state.failed) return classBody;

            if ( state.backtracking==0 ) { classBody = new ClassBody(LBRACE140); }

            // /home/david/git/ceylon-spec/Ceylon.g:934:7: ( declarationOrStatement )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==ALIAS||(LA78_0 >= ASSERT && LA78_0 <= ASSIGN)||(LA78_0 >= BACKTICK && LA78_0 <= BREAK)||(LA78_0 >= CHAR_LITERAL && LA78_0 <= CLASS_DEFINITION)||LA78_0==COMPILER_ANNOTATION||LA78_0==CONTINUE||(LA78_0 >= DECREMENT_OP && LA78_0 <= DIFFERENCE_OP)||LA78_0==DYNAMIC||(LA78_0 >= FLOAT_LITERAL && LA78_0 <= FUNCTION_MODIFIER)||(LA78_0 >= IF_CLAUSE && LA78_0 <= INTERFACE_DEFINITION)||LA78_0==IN_OP||(LA78_0 >= LBRACE && LA78_0 <= LIDENTIFIER)||LA78_0==LPAREN||LA78_0==MODULE||(LA78_0 >= NATURAL_LITERAL && LA78_0 <= NEW)||(LA78_0 >= NOT_OP && LA78_0 <= OBJECT_DEFINITION)||(LA78_0 >= OUT && LA78_0 <= PACKAGE)||LA78_0==PRODUCT_OP||LA78_0==RETURN||(LA78_0 >= SEMICOLON && LA78_0 <= SMALLER_OP)||LA78_0==STRING_LITERAL||LA78_0==STRING_START||(LA78_0 >= SUM_OP && LA78_0 <= SWITCH_CLAUSE)||(LA78_0 >= THIS && LA78_0 <= UIDENTIFIER)||(LA78_0 >= VALUE_MODIFIER && LA78_0 <= WHILE_CLAUSE)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:935:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_classBody6085);
            	    declarationOrStatement141=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return classBody;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement141!=null)
            	                  classBody.addStatement(declarationOrStatement141); }

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            RBRACE142=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_classBody6112); if (state.failed) return classBody;

            if ( state.backtracking==0 ) { classBody.setEndToken(RBRACE142); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return classBody;
    }
    // $ANTLR end "classBody"



    // $ANTLR start "extendedType"
    // /home/david/git/ceylon-spec/Ceylon.g:943:1: extendedType returns [ExtendedType extendedType] : EXTENDS (ci= classInstantiation )? ;
    public ExtendedType extendedType() throws RecognitionException {
        ExtendedType extendedType = null;


        Token EXTENDS143=null;
        PsiCompatibleCeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:944:5: ( EXTENDS (ci= classInstantiation )? )
            // /home/david/git/ceylon-spec/Ceylon.g:944:7: EXTENDS (ci= classInstantiation )?
            {
            EXTENDS143=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_extendedType6141); if (state.failed) return extendedType;

            if ( state.backtracking==0 ) { extendedType = new ExtendedType(EXTENDS143); }

            // /home/david/git/ceylon-spec/Ceylon.g:946:7: (ci= classInstantiation )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==SUPER||LA79_0==UIDENTIFIER) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:947:9: ci= classInstantiation
                    {
                    pushFollow(FOLLOW_classInstantiation_in_extendedType6171);
                    ci=classInstantiation();

                    state._fsp--;
                    if (state.failed) return extendedType;

                    if ( state.backtracking==0 ) { extendedType.setType((ci!=null?ci.type:null));
                              extendedType.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return extendedType;
    }
    // $ANTLR end "extendedType"



    // $ANTLR start "classSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:953:1: classSpecifier returns [ClassSpecifier classSpecifier] : ( COMPUTE | SPECIFY ) (ci= classInstantiation )? ;
    public ClassSpecifier classSpecifier() throws RecognitionException {
        ClassSpecifier classSpecifier = null;


        Token COMPUTE144=null;
        Token SPECIFY145=null;
        PsiCompatibleCeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:954:5: ( ( COMPUTE | SPECIFY ) (ci= classInstantiation )? )
            // /home/david/git/ceylon-spec/Ceylon.g:954:7: ( COMPUTE | SPECIFY ) (ci= classInstantiation )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:954:7: ( COMPUTE | SPECIFY )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==COMPUTE) ) {
                alt80=1;
            }
            else if ( (LA80_0==SPECIFY) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return classSpecifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }
            switch (alt80) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:955:9: COMPUTE
                    {
                    COMPUTE144=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_classSpecifier6221); if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier = new ClassSpecifier(COMPUTE144); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:958:9: SPECIFY
                    {
                    SPECIFY145=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_classSpecifier6250); if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier = new ClassSpecifier(SPECIFY145); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:961:7: (ci= classInstantiation )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==SUPER||LA81_0==UIDENTIFIER) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:962:9: ci= classInstantiation
                    {
                    pushFollow(FOLLOW_classInstantiation_in_classSpecifier6289);
                    ci=classInstantiation();

                    state._fsp--;
                    if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier.setType((ci!=null?ci.type:null));
                              classSpecifier.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return classSpecifier;
    }
    // $ANTLR end "classSpecifier"


    public static class classInstantiation_return extends ParserRuleReturnScope {
        public SimpleType type;
        public InvocationExpression invocationExpression;
    };


    // $ANTLR start "classInstantiation"
    // /home/david/git/ceylon-spec/Ceylon.g:968:1: classInstantiation returns [SimpleType type, InvocationExpression invocationExpression] : (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )? ;
    public PsiCompatibleCeylonParser.classInstantiation_return classInstantiation() throws RecognitionException {
        PsiCompatibleCeylonParser.classInstantiation_return retval = new PsiCompatibleCeylonParser.classInstantiation_return();
        retval.start = input.LT(1);


        Token SUPER146=null;
        PsiCompatibleCeylonParser.typeNameWithArguments_return t1 =null;

        PsiCompatibleCeylonParser.typeNameWithArguments_return t3 =null;

        PsiCompatibleCeylonParser.typeNameWithArguments_return t2 =null;

        PositionalArgumentList positionalArguments147 =null;


         Primary p=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:970:5: ( (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:970:7: (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:970:7: (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==UIDENTIFIER) ) {
                alt83=1;
            }
            else if ( (LA83_0==SUPER) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:971:9: t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )?
                    {
                    pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6350);
                    t1=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { BaseType bt = new BaseType(null);
                              bt.setIdentifier((t1!=null?t1.identifier:null));
                              if ((t1!=null?t1.typeArgumentList:null)!=null)
                                  bt.setTypeArgumentList((t1!=null?t1.typeArgumentList:null));
                              retval.type =bt; 
                              ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                              ete.setExtendedType(retval.type); 
                              p = ete; }

                    // /home/david/git/ceylon-spec/Ceylon.g:980:9: ( MEMBER_OP t3= typeNameWithArguments )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==MEMBER_OP) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:981:11: MEMBER_OP t3= typeNameWithArguments
                            {
                            match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_classInstantiation6382); if (state.failed) return retval;

                            pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6396);
                            t3=typeNameWithArguments();

                            state._fsp--;
                            if (state.failed) return retval;

                            if ( state.backtracking==0 ) { QualifiedType qt=new QualifiedType(null);
                                      qt.setOuterType(retval.type);
                                      qt.setIdentifier((t3!=null?t3.identifier:null));
                                      if ((t3!=null?t3.typeArgumentList:null)!=null)
                                          qt.setTypeArgumentList((t3!=null?t3.typeArgumentList:null));
                                      retval.type =qt;
                                      ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                                      ete.setExtendedType(retval.type); 
                                      p = ete; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:993:9: SUPER MEMBER_OP t2= typeNameWithArguments
                    {
                    SUPER146=(Token)match(input,SUPER,FOLLOW_SUPER_in_classInstantiation6429); if (state.failed) return retval;

                    match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_classInstantiation6431); if (state.failed) return retval;

                    pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6444);
                    t2=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { QualifiedType qt=new QualifiedType(null);
                              SuperType st = new SuperType(SUPER146);
                              qt.setOuterType(st);
                              qt.setIdentifier((t2!=null?t2.identifier:null));
                              if ((t2!=null?t2.typeArgumentList:null)!=null)
                                  qt.setTypeArgumentList((t2!=null?t2.typeArgumentList:null));
                              retval.type =qt;
                              ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                              ete.setExtendedType(retval.type); 
                              p = ete; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1006:7: ( positionalArguments )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==LPAREN) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1007:9: positionalArguments
                    {
                    pushFollow(FOLLOW_positionalArguments_in_classInstantiation6481);
                    positionalArguments147=positionalArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
                              ie.setPrimary(p);
                              ie.setPositionalArgumentList(positionalArguments147);
                              retval.invocationExpression =ie; 
                              p = ie; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classInstantiation"



    // $ANTLR start "satisfiedTypes"
    // /home/david/git/ceylon-spec/Ceylon.g:1023:1: satisfiedTypes returns [SatisfiedTypes satisfiedTypes] : SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )* ;
    public SatisfiedTypes satisfiedTypes() throws RecognitionException {
        SatisfiedTypes satisfiedTypes = null;


        Token i=null;
        Token SATISFIES148=null;
        StaticType t1 =null;

        StaticType t2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1024:5: ( SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1024:7: SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )*
            {
            SATISFIES148=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiedTypes6531); if (state.failed) return satisfiedTypes;

            if ( state.backtracking==0 ) { satisfiedTypes = new SatisfiedTypes(SATISFIES148); }

            // /home/david/git/ceylon-spec/Ceylon.g:1026:7: (t1= abbreviatedType )
            // /home/david/git/ceylon-spec/Ceylon.g:1027:9: t1= abbreviatedType
            {
            pushFollow(FOLLOW_abbreviatedType_in_satisfiedTypes6561);
            t1=abbreviatedType();

            state._fsp--;
            if (state.failed) return satisfiedTypes;

            if ( state.backtracking==0 ) { if (t1!=null) satisfiedTypes.addType(t1); }

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1030:7: ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA||LA86_0==INTERSECTION_OP||LA86_0==UNION_OP) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1031:9: (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType )
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1031:9: (i= INTERSECTION_OP | COMMA | UNION_OP )
            	    int alt85=3;
            	    switch ( input.LA(1) ) {
            	    case INTERSECTION_OP:
            	        {
            	        alt85=1;
            	        }
            	        break;
            	    case COMMA:
            	        {
            	        alt85=2;
            	        }
            	        break;
            	    case UNION_OP:
            	        {
            	        alt85=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return satisfiedTypes;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 85, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt85) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1032:11: i= INTERSECTION_OP
            	            {
            	            i=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_satisfiedTypes6613); if (state.failed) return satisfiedTypes;

            	            if ( state.backtracking==0 ) { satisfiedTypes.setEndToken(i); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1035:11: COMMA
            	            {
            	            match(input,COMMA,FOLLOW_COMMA_in_satisfiedTypes6648); if (state.failed) return satisfiedTypes;

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1035:17: UNION_OP
            	            {
            	            match(input,UNION_OP,FOLLOW_UNION_OP_in_satisfiedTypes6650); if (state.failed) return satisfiedTypes;

            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(INTERSECTION_OP, input)); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1039:9: (t2= abbreviatedType )
            	    // /home/david/git/ceylon-spec/Ceylon.g:1040:11: t2= abbreviatedType
            	    {
            	    pushFollow(FOLLOW_abbreviatedType_in_satisfiedTypes6696);
            	    t2=abbreviatedType();

            	    state._fsp--;
            	    if (state.failed) return satisfiedTypes;

            	    if ( state.backtracking==0 ) { if (t2!=null) {
            	                    satisfiedTypes.addType(t2); 
            	                    satisfiedTypes.setEndToken(null); } }

            	    }


            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return satisfiedTypes;
    }
    // $ANTLR end "satisfiedTypes"



    // $ANTLR start "caseTypes"
    // /home/david/git/ceylon-spec/Ceylon.g:1048:1: caseTypes returns [CaseTypes caseTypes] : CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )* ;
    public CaseTypes caseTypes() throws RecognitionException {
        CaseTypes caseTypes = null;


        Token u=null;
        Token CASE_TYPES149=null;
        PsiCompatibleCeylonParser.caseType_return ct1 =null;

        PsiCompatibleCeylonParser.caseType_return ct2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1049:5: ( CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1049:7: CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )*
            {
            CASE_TYPES149=(Token)match(input,CASE_TYPES,FOLLOW_CASE_TYPES_in_caseTypes6748); if (state.failed) return caseTypes;

            if ( state.backtracking==0 ) { caseTypes = new CaseTypes(CASE_TYPES149); }

            pushFollow(FOLLOW_caseType_in_caseTypes6766);
            ct1=caseType();

            state._fsp--;
            if (state.failed) return caseTypes;

            if ( state.backtracking==0 ) { if ((ct1!=null?ct1.type:null)!=null) caseTypes.addType((ct1!=null?ct1.type:null)); 
                    if ((ct1!=null?ct1.instance:null)!=null) caseTypes.addBaseMemberExpression((ct1!=null?ct1.instance:null)); }

            // /home/david/git/ceylon-spec/Ceylon.g:1054:7: ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==COMMA||LA88_0==INTERSECTION_OP||LA88_0==UNION_OP) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1055:9: (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType )
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1055:9: (u= UNION_OP | COMMA | INTERSECTION_OP )
            	    int alt87=3;
            	    switch ( input.LA(1) ) {
            	    case UNION_OP:
            	        {
            	        alt87=1;
            	        }
            	        break;
            	    case COMMA:
            	        {
            	        alt87=2;
            	        }
            	        break;
            	    case INTERSECTION_OP:
            	        {
            	        alt87=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return caseTypes;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 87, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt87) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1056:11: u= UNION_OP
            	            {
            	            u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_caseTypes6808); if (state.failed) return caseTypes;

            	            if ( state.backtracking==0 ) { caseTypes.setEndToken(u); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1059:11: COMMA
            	            {
            	            match(input,COMMA,FOLLOW_COMMA_in_caseTypes6844); if (state.failed) return caseTypes;

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1059:17: INTERSECTION_OP
            	            {
            	            match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_caseTypes6846); if (state.failed) return caseTypes;

            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(UNION_OP, input)); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1063:9: (ct2= caseType )
            	    // /home/david/git/ceylon-spec/Ceylon.g:1064:11: ct2= caseType
            	    {
            	    pushFollow(FOLLOW_caseType_in_caseTypes6892);
            	    ct2=caseType();

            	    state._fsp--;
            	    if (state.failed) return caseTypes;

            	    if ( state.backtracking==0 ) { if ((ct2!=null?ct2.type:null)!=null) caseTypes.addType((ct2!=null?ct2.type:null)); 
            	                if ((ct2!=null?ct2.instance:null)!=null) caseTypes.addBaseMemberExpression((ct2!=null?ct2.instance:null)); 
            	                if ((ct2!=null?ct2.type:null)!=null||(ct2!=null?ct2.instance:null)!=null) caseTypes.setEndToken(null); }

            	    }


            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return caseTypes;
    }
    // $ANTLR end "caseTypes"


    public static class caseType_return extends ParserRuleReturnScope {
        public StaticType type;
        public BaseMemberExpression instance;
    };


    // $ANTLR start "caseType"
    // /home/david/git/ceylon-spec/Ceylon.g:1072:1: caseType returns [StaticType type, BaseMemberExpression instance] : (t= abbreviatedType | memberName );
    public PsiCompatibleCeylonParser.caseType_return caseType() throws RecognitionException {
        PsiCompatibleCeylonParser.caseType_return retval = new PsiCompatibleCeylonParser.caseType_return();
        retval.start = input.LT(1);


        StaticType t =null;

        Identifier memberName150 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1073:5: (t= abbreviatedType | memberName )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0 >= LBRACE && LA89_0 <= LBRACKET)||LA89_0==SMALLER_OP||LA89_0==UIDENTIFIER) ) {
                alt89=1;
            }
            else if ( (LA89_0==LIDENTIFIER) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }
            switch (alt89) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1073:7: t= abbreviatedType
                    {
                    pushFollow(FOLLOW_abbreviatedType_in_caseType6946);
                    t=abbreviatedType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.type =t;}

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1075:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_caseType6963);
                    memberName150=memberName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.instance = new BaseMemberExpression(null);
                            retval.instance.setIdentifier(memberName150);
                            retval.instance.setTypeArguments( new InferredTypeArguments(null) ); }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "caseType"



    // $ANTLR start "abstractedType"
    // /home/david/git/ceylon-spec/Ceylon.g:1083:1: abstractedType returns [AbstractedType abstractedType] : ABSTRACTED_TYPE abbreviatedType ;
    public AbstractedType abstractedType() throws RecognitionException {
        AbstractedType abstractedType = null;


        Token ABSTRACTED_TYPE151=null;
        StaticType abbreviatedType152 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1084:5: ( ABSTRACTED_TYPE abbreviatedType )
            // /home/david/git/ceylon-spec/Ceylon.g:1084:7: ABSTRACTED_TYPE abbreviatedType
            {
            ABSTRACTED_TYPE151=(Token)match(input,ABSTRACTED_TYPE,FOLLOW_ABSTRACTED_TYPE_in_abstractedType6998); if (state.failed) return abstractedType;

            if ( state.backtracking==0 ) { abstractedType = new AbstractedType(ABSTRACTED_TYPE151); }

            pushFollow(FOLLOW_abbreviatedType_in_abstractedType7014);
            abbreviatedType152=abbreviatedType();

            state._fsp--;
            if (state.failed) return abstractedType;

            if ( state.backtracking==0 ) { abstractedType.setType(abbreviatedType152); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return abstractedType;
    }
    // $ANTLR end "abstractedType"



    // $ANTLR start "parameters"
    // /home/david/git/ceylon-spec/Ceylon.g:1090:1: parameters returns [ParameterList parameterList] : LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN ;
    public ParameterList parameters() throws RecognitionException {
        ParameterList parameterList = null;


        Token c=null;
        Token LPAREN153=null;
        Token RPAREN154=null;
        Parameter ap1 =null;

        Parameter ap2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1091:5: ( LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:1091:7: LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN
            {
            LPAREN153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameters7043); if (state.failed) return parameterList;

            if ( state.backtracking==0 ) { parameterList =new ParameterList(LPAREN153); }

            // /home/david/git/ceylon-spec/Ceylon.g:1093:7: (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==ALIAS||(LA92_0 >= ASSERT && LA92_0 <= ASSIGN)||(LA92_0 >= BACKTICK && LA92_0 <= BREAK)||(LA92_0 >= CHAR_LITERAL && LA92_0 <= CLASS_DEFINITION)||LA92_0==COMPILER_ANNOTATION||LA92_0==CONTINUE||(LA92_0 >= DECREMENT_OP && LA92_0 <= DIFFERENCE_OP)||LA92_0==DYNAMIC||(LA92_0 >= FLOAT_LITERAL && LA92_0 <= FUNCTION_MODIFIER)||(LA92_0 >= IF_CLAUSE && LA92_0 <= INTERFACE_DEFINITION)||LA92_0==IN_OP||(LA92_0 >= LBRACE && LA92_0 <= LIDENTIFIER)||LA92_0==LPAREN||LA92_0==MODULE||(LA92_0 >= NATURAL_LITERAL && LA92_0 <= NEW)||(LA92_0 >= NOT_OP && LA92_0 <= OBJECT_DEFINITION)||(LA92_0 >= OUT && LA92_0 <= PACKAGE)||LA92_0==PRODUCT_OP||LA92_0==RETURN||(LA92_0 >= SEMICOLON && LA92_0 <= SMALLER_OP)||LA92_0==STRING_LITERAL||LA92_0==STRING_START||(LA92_0 >= SUM_OP && LA92_0 <= SWITCH_CLAUSE)||(LA92_0 >= THIS && LA92_0 <= UIDENTIFIER)||(LA92_0 >= VALUE_MODIFIER && LA92_0 <= WHILE_CLAUSE)) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1094:9: ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )*
                    {
                    pushFollow(FOLLOW_parameterDeclarationOrRef_in_parameters7071);
                    ap1=parameterDeclarationOrRef();

                    state._fsp--;
                    if (state.failed) return parameterList;

                    if ( state.backtracking==0 ) { if (ap1!=null)
                                  parameterList.addParameter(ap1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:1097:9: (c= COMMA (ap2= parameterDeclarationOrRef |) )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==COMMA) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1098:11: c= COMMA (ap2= parameterDeclarationOrRef |)
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters7106); if (state.failed) return parameterList;

                    	    if ( state.backtracking==0 ) { parameterList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:1100:11: (ap2= parameterDeclarationOrRef |)
                    	    int alt90=2;
                    	    int LA90_0 = input.LA(1);

                    	    if ( (LA90_0==ALIAS||(LA90_0 >= ASSERT && LA90_0 <= ASSIGN)||(LA90_0 >= BACKTICK && LA90_0 <= BREAK)||(LA90_0 >= CHAR_LITERAL && LA90_0 <= CLASS_DEFINITION)||LA90_0==COMPILER_ANNOTATION||LA90_0==CONTINUE||(LA90_0 >= DECREMENT_OP && LA90_0 <= DIFFERENCE_OP)||LA90_0==DYNAMIC||(LA90_0 >= FLOAT_LITERAL && LA90_0 <= FUNCTION_MODIFIER)||(LA90_0 >= IF_CLAUSE && LA90_0 <= INTERFACE_DEFINITION)||LA90_0==IN_OP||(LA90_0 >= LBRACE && LA90_0 <= LIDENTIFIER)||LA90_0==LPAREN||LA90_0==MODULE||(LA90_0 >= NATURAL_LITERAL && LA90_0 <= NEW)||(LA90_0 >= NOT_OP && LA90_0 <= OBJECT_DEFINITION)||(LA90_0 >= OUT && LA90_0 <= PACKAGE)||LA90_0==PRODUCT_OP||LA90_0==RETURN||(LA90_0 >= SEMICOLON && LA90_0 <= SMALLER_OP)||LA90_0==STRING_LITERAL||LA90_0==STRING_START||(LA90_0 >= SUM_OP && LA90_0 <= SWITCH_CLAUSE)||(LA90_0 >= THIS && LA90_0 <= UIDENTIFIER)||(LA90_0 >= VALUE_MODIFIER && LA90_0 <= WHILE_CLAUSE)) ) {
                    	        alt90=1;
                    	    }
                    	    else if ( (LA90_0==COMMA||LA90_0==RPAREN) ) {
                    	        alt90=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return parameterList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 90, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt90) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1101:13: ap2= parameterDeclarationOrRef
                    	            {
                    	            pushFollow(FOLLOW_parameterDeclarationOrRef_in_parameters7146);
                    	            ap2=parameterDeclarationOrRef();

                    	            state._fsp--;
                    	            if (state.failed) return parameterList;

                    	            if ( state.backtracking==0 ) { if (ap2!=null) {
                    	                              parameterList.addParameter(ap2); 
                    	                              parameterList.setEndToken(null); } }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1106:13: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
                    	                            new MismatchedTokenException(UIDENTIFIER, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameters7226); if (state.failed) return parameterList;

            if ( state.backtracking==0 ) { parameterList.setEndToken(RPAREN154); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameterList;
    }
    // $ANTLR end "parameters"



    // $ANTLR start "parameter"
    // /home/david/git/ceylon-spec/Ceylon.g:1115:1: parameter returns [ParameterDeclaration parameter] : compilerAnnotations annotations parameterDeclaration ;
    public ParameterDeclaration parameter() throws RecognitionException {
        ParameterDeclaration parameter = null;


        TypedDeclaration parameterDeclaration155 =null;

        List<CompilerAnnotation> compilerAnnotations156 =null;

        AnnotationList annotations157 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1116:5: ( compilerAnnotations annotations parameterDeclaration )
            // /home/david/git/ceylon-spec/Ceylon.g:1116:7: compilerAnnotations annotations parameterDeclaration
            {
            pushFollow(FOLLOW_compilerAnnotations_in_parameter7255);
            compilerAnnotations156=compilerAnnotations();

            state._fsp--;
            if (state.failed) return parameter;

            pushFollow(FOLLOW_annotations_in_parameter7263);
            annotations157=annotations();

            state._fsp--;
            if (state.failed) return parameter;

            pushFollow(FOLLOW_parameterDeclaration_in_parameter7271);
            parameterDeclaration155=parameterDeclaration();

            state._fsp--;
            if (state.failed) return parameter;

            if ( state.backtracking==0 ) { TypedDeclaration d = parameterDeclaration155;
                    d.getCompilerAnnotations().addAll(compilerAnnotations156);
                    d.setAnnotationList(annotations157);
                    if (d instanceof AttributeDeclaration) {
                        ValueParameterDeclaration vp = new ValueParameterDeclaration(null);
                        vp.setTypedDeclaration(d);
                        parameter = vp;
                    }
                    else if (d instanceof MethodDeclaration) {
                        FunctionalParameterDeclaration fp = new FunctionalParameterDeclaration(null);
                        fp.setTypedDeclaration(d);
                        parameter = fp;
                    }
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameter"



    // $ANTLR start "parameterDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:1135:1: parameterDeclaration returns [TypedDeclaration declaration] : ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? ) ;
    public TypedDeclaration parameterDeclaration() throws RecognitionException {
        TypedDeclaration declaration = null;


        Token VOID_MODIFIER159=null;
        Token FUNCTION_MODIFIER160=null;
        Token DYNAMIC161=null;
        Token VALUE_MODIFIER162=null;
        Type variadicType158 =null;

        Identifier memberName163 =null;

        SpecifierExpression specifier164 =null;

        ParameterList parameters165 =null;

        SpecifierExpression functionSpecifier166 =null;


         AttributeDeclaration a = new AttributeDeclaration(null); 
                    MethodDeclaration m = new MethodDeclaration(null);
                    declaration = a; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1139:5: ( ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1139:7: ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1139:7: ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER )
            int alt93=5;
            switch ( input.LA(1) ) {
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt93=1;
                }
                break;
            case VOID_MODIFIER:
                {
                alt93=2;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt93=3;
                }
                break;
            case DYNAMIC:
                {
                alt93=4;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt93=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }

            switch (alt93) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1140:9: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_parameterDeclaration7324);
                    variadicType158=variadicType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(variadicType158);
                              m.setType(variadicType158); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1143:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER159=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_parameterDeclaration7344); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { m.setType(new VoidModifier(VOID_MODIFIER159));
                              declaration =m; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1146:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER160=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_parameterDeclaration7364); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { m.setType(new FunctionModifier(FUNCTION_MODIFIER160));
                              declaration =m; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1149:9: DYNAMIC
                    {
                    DYNAMIC161=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_parameterDeclaration7384); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(new DynamicModifier(DYNAMIC161));
                              m.setType(new DynamicModifier(DYNAMIC161)); }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1152:9: VALUE_MODIFIER
                    {
                    VALUE_MODIFIER162=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_parameterDeclaration7404); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(new ValueModifier(VALUE_MODIFIER162)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberName_in_parameterDeclaration7430);
            memberName163=memberName();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { a.setIdentifier(memberName163);
                    m.setIdentifier(memberName163); }

            // /home/david/git/ceylon-spec/Ceylon.g:1158:7: ( ( specifier )? | ( parameters )+ ( functionSpecifier )? )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==COMMA||LA97_0==RPAREN||LA97_0==SPECIFY) ) {
                alt97=1;
            }
            else if ( (LA97_0==LPAREN) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1159:9: ( specifier )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:1159:9: ( specifier )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==SPECIFY) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1160:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_parameterDeclaration7468);
                            specifier164=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { a.setSpecifierOrInitializerExpression(specifier164); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1164:9: ( parameters )+ ( functionSpecifier )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:1164:9: ( parameters )+
                    int cnt95=0;
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==LPAREN) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1165:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_parameterDeclaration7521);
                    	    parameters165=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { m.addParameterList(parameters165);
                    	                declaration =m; }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt95 >= 1 ) break loop95;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(95, input);
                                throw eee;
                        }
                        cnt95++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:1169:9: ( functionSpecifier )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==COMPUTE||LA96_0==SPECIFY) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1170:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_parameterDeclaration7566);
                            functionSpecifier166=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { m.setSpecifierExpression(functionSpecifier166); }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "parameterDeclaration"



    // $ANTLR start "parameterRef"
    // /home/david/git/ceylon-spec/Ceylon.g:1176:1: parameterRef returns [InitializerParameter parameter] : memberName ( specifier )? ;
    public InitializerParameter parameterRef() throws RecognitionException {
        InitializerParameter parameter = null;


        Identifier memberName167 =null;

        SpecifierExpression specifier168 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1177:5: ( memberName ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1177:7: memberName ( specifier )?
            {
            pushFollow(FOLLOW_memberName_in_parameterRef7618);
            memberName167=memberName();

            state._fsp--;
            if (state.failed) return parameter;

            if ( state.backtracking==0 ) { parameter = new InitializerParameter(null);
                    parameter.setIdentifier(memberName167); }

            // /home/david/git/ceylon-spec/Ceylon.g:1180:7: ( specifier )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==SPECIFY) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1181:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_parameterRef7644);
                    specifier168=specifier();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter.setSpecifierExpression(specifier168); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameterRef"



    // $ANTLR start "parameterDeclarationOrRef"
    // /home/david/git/ceylon-spec/Ceylon.g:1186:1: parameterDeclarationOrRef returns [Parameter parameter] : (r= parameterRef |p= parameter );
    public Parameter parameterDeclarationOrRef() throws RecognitionException {
        Parameter parameter = null;


        InitializerParameter r =null;

        ParameterDeclaration p =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1187:5: (r= parameterRef |p= parameter )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==LIDENTIFIER) ) {
                int LA99_1 = input.LA(2);

                if ( (LA99_1==COMMA||LA99_1==RPAREN||LA99_1==SPECIFY) ) {
                    alt99=1;
                }
                else if ( (LA99_1==DYNAMIC||LA99_1==FUNCTION_MODIFIER||(LA99_1 >= LBRACE && LA99_1 <= LBRACKET)||LA99_1==LIDENTIFIER||LA99_1==LPAREN||LA99_1==SMALLER_OP||LA99_1==UIDENTIFIER||LA99_1==VALUE_MODIFIER||LA99_1==VOID_MODIFIER) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return parameter;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA99_0==COMPILER_ANNOTATION||LA99_0==DYNAMIC||LA99_0==FUNCTION_MODIFIER||(LA99_0 >= LBRACE && LA99_0 <= LBRACKET)||LA99_0==SMALLER_OP||LA99_0==STRING_LITERAL||LA99_0==UIDENTIFIER||(LA99_0 >= VALUE_MODIFIER && LA99_0 <= VOID_MODIFIER)) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return parameter;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1188:7: r= parameterRef
                    {
                    pushFollow(FOLLOW_parameterRef_in_parameterDeclarationOrRef7692);
                    r=parameterRef();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter =r; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1191:7: p= parameter
                    {
                    pushFollow(FOLLOW_parameter_in_parameterDeclarationOrRef7717);
                    p=parameter();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter =p; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameterDeclarationOrRef"



    // $ANTLR start "typeParameters"
    // /home/david/git/ceylon-spec/Ceylon.g:1195:1: typeParameters returns [TypeParameterList typeParameterList] : SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP ;
    public TypeParameterList typeParameters() throws RecognitionException {
        TypeParameterList typeParameterList = null;


        Token c=null;
        Token SMALLER_OP169=null;
        Token LARGER_OP170=null;
        TypeParameterDeclaration tp1 =null;

        TypeParameterDeclaration tp2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1196:5: ( SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:1196:7: SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP
            {
            SMALLER_OP169=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeParameters7746); if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { typeParameterList = new TypeParameterList(SMALLER_OP169); }

            pushFollow(FOLLOW_typeParameter_in_typeParameters7764);
            tp1=typeParameter();

            state._fsp--;
            if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { if (tp1 instanceof TypeParameterDeclaration)
                        typeParameterList.addTypeParameterDeclaration(tp1); }

            // /home/david/git/ceylon-spec/Ceylon.g:1201:7: (c= COMMA (tp2= typeParameter |) )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1202:9: c= COMMA (tp2= typeParameter |)
            	    {
            	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters7792); if (state.failed) return typeParameterList;

            	    if ( state.backtracking==0 ) { typeParameterList.setEndToken(c); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:1204:9: (tp2= typeParameter |)
            	    int alt100=2;
            	    int LA100_0 = input.LA(1);

            	    if ( (LA100_0==ALIAS||(LA100_0 >= ASSERT && LA100_0 <= ASSIGN)||(LA100_0 >= BACKTICK && LA100_0 <= BREAK)||(LA100_0 >= CHAR_LITERAL && LA100_0 <= CLASS_DEFINITION)||LA100_0==COMPILER_ANNOTATION||LA100_0==CONTINUE||(LA100_0 >= DECREMENT_OP && LA100_0 <= DIFFERENCE_OP)||LA100_0==DYNAMIC||(LA100_0 >= FLOAT_LITERAL && LA100_0 <= FUNCTION_MODIFIER)||(LA100_0 >= IF_CLAUSE && LA100_0 <= INTERFACE_DEFINITION)||LA100_0==IN_OP||(LA100_0 >= LBRACE && LA100_0 <= LIDENTIFIER)||LA100_0==LPAREN||LA100_0==MODULE||(LA100_0 >= NATURAL_LITERAL && LA100_0 <= NEW)||(LA100_0 >= NOT_OP && LA100_0 <= OBJECT_DEFINITION)||(LA100_0 >= OUT && LA100_0 <= PACKAGE)||LA100_0==PRODUCT_OP||LA100_0==RETURN||(LA100_0 >= SEMICOLON && LA100_0 <= SMALLER_OP)||LA100_0==STRING_LITERAL||LA100_0==STRING_START||(LA100_0 >= SUM_OP && LA100_0 <= SWITCH_CLAUSE)||(LA100_0 >= THIS && LA100_0 <= UIDENTIFIER)||(LA100_0 >= VALUE_MODIFIER && LA100_0 <= WHILE_CLAUSE)) ) {
            	        alt100=1;
            	    }
            	    else if ( (LA100_0==COMMA||LA100_0==LARGER_OP) ) {
            	        alt100=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return typeParameterList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 100, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt100) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1205:11: tp2= typeParameter
            	            {
            	            pushFollow(FOLLOW_typeParameter_in_typeParameters7826);
            	            tp2=typeParameter();

            	            state._fsp--;
            	            if (state.failed) return typeParameterList;

            	            if ( state.backtracking==0 ) { if (tp2 instanceof TypeParameterDeclaration)
            	                            typeParameterList.addTypeParameterDeclaration(tp2);
            	                        typeParameterList.setEndToken(null); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1209:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(UIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            LARGER_OP170=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeParameters7877); if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { typeParameterList.setEndToken(LARGER_OP170); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeParameterList;
    }
    // $ANTLR end "typeParameters"



    // $ANTLR start "typeParameter"
    // /home/david/git/ceylon-spec/Ceylon.g:1217:1: typeParameter returns [TypeParameterDeclaration typeParameter] : compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )? ;
    public TypeParameterDeclaration typeParameter() throws RecognitionException {
        TypeParameterDeclaration typeParameter = null;


        TypeVariance variance171 =null;

        Identifier typeNameDeclaration172 =null;

        TypeSpecifier typeDefault173 =null;

        List<CompilerAnnotation> compilerAnnotations174 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1218:5: ( compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1218:7: compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )?
            {
            if ( state.backtracking==0 ) { typeParameter = new TypeParameterDeclaration(null); }

            pushFollow(FOLLOW_compilerAnnotations_in_typeParameter7914);
            compilerAnnotations174=compilerAnnotations();

            state._fsp--;
            if (state.failed) return typeParameter;

            // /home/david/git/ceylon-spec/Ceylon.g:1220:7: ( variance )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==IN_OP||LA102_0==OUT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1221:9: variance
                    {
                    pushFollow(FOLLOW_variance_in_typeParameter7933);
                    variance171=variance();

                    state._fsp--;
                    if (state.failed) return typeParameter;

                    if ( state.backtracking==0 ) { typeParameter.setTypeVariance(variance171); }

                    }
                    break;

            }


            pushFollow(FOLLOW_typeNameDeclaration_in_typeParameter7963);
            typeNameDeclaration172=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return typeParameter;

            if ( state.backtracking==0 ) { typeParameter.setIdentifier(typeNameDeclaration172); }

            // /home/david/git/ceylon-spec/Ceylon.g:1226:7: ( typeDefault )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==SPECIFY) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1227:9: typeDefault
                    {
                    pushFollow(FOLLOW_typeDefault_in_typeParameter7989);
                    typeDefault173=typeDefault();

                    state._fsp--;
                    if (state.failed) return typeParameter;

                    if ( state.backtracking==0 ) { typeParameter.setTypeSpecifier(typeDefault173); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { typeParameter.getCompilerAnnotations().addAll(compilerAnnotations174); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeParameter;
    }
    // $ANTLR end "typeParameter"



    // $ANTLR start "variance"
    // /home/david/git/ceylon-spec/Ceylon.g:1233:1: variance returns [TypeVariance typeVariance] : ( IN_OP | OUT );
    public TypeVariance variance() throws RecognitionException {
        TypeVariance typeVariance = null;


        Token IN_OP175=null;
        Token OUT176=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1234:5: ( IN_OP | OUT )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==IN_OP) ) {
                alt104=1;
            }
            else if ( (LA104_0==OUT) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return typeVariance;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1234:7: IN_OP
                    {
                    IN_OP175=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_variance8037); if (state.failed) return typeVariance;

                    if ( state.backtracking==0 ) { typeVariance = new TypeVariance(IN_OP175); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1236:7: OUT
                    {
                    OUT176=(Token)match(input,OUT,FOLLOW_OUT_in_variance8053); if (state.failed) return typeVariance;

                    if ( state.backtracking==0 ) { typeVariance = new TypeVariance(OUT176); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeVariance;
    }
    // $ANTLR end "variance"



    // $ANTLR start "typeConstraint"
    // /home/david/git/ceylon-spec/Ceylon.g:1240:1: typeConstraint returns [TypeConstraint typeConstraint] : compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )? ;
    public TypeConstraint typeConstraint() throws RecognitionException {
        TypeConstraint typeConstraint = null;


        Token TYPE_CONSTRAINT177=null;
        List<CompilerAnnotation> compilerAnnotations178 =null;

        Identifier typeNameDeclaration179 =null;

        ParameterList parameters180 =null;

        CaseTypes caseTypes181 =null;

        SatisfiedTypes satisfiedTypes182 =null;

        AbstractedType abstractedType183 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1241:5: ( compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1241:7: compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )?
            {
            pushFollow(FOLLOW_compilerAnnotations_in_typeConstraint8086);
            compilerAnnotations178=compilerAnnotations();

            state._fsp--;
            if (state.failed) return typeConstraint;

            TYPE_CONSTRAINT177=(Token)match(input,TYPE_CONSTRAINT,FOLLOW_TYPE_CONSTRAINT_in_typeConstraint8094); if (state.failed) return typeConstraint;

            if ( state.backtracking==0 ) { typeConstraint = new TypeConstraint(TYPE_CONSTRAINT177); 
                    typeConstraint.getCompilerAnnotations().addAll(compilerAnnotations178); }

            pushFollow(FOLLOW_typeNameDeclaration_in_typeConstraint8110);
            typeNameDeclaration179=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return typeConstraint;

            if ( state.backtracking==0 ) { typeConstraint.setIdentifier(typeNameDeclaration179); }

            // /home/david/git/ceylon-spec/Ceylon.g:1248:7: ( parameters )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LPAREN) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1249:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_typeConstraint8144);
                    parameters180=parameters();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setParameterList(parameters180); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1252:7: ( caseTypes )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==CASE_TYPES) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1253:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_typeConstraint8181);
                    caseTypes181=caseTypes();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setCaseTypes(caseTypes181); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1257:7: ( satisfiedTypes )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==SATISFIES) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1258:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_typeConstraint8225);
                    satisfiedTypes182=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setSatisfiedTypes(satisfiedTypes182); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1261:7: ( abstractedType )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ABSTRACTED_TYPE) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1262:9: abstractedType
                    {
                    pushFollow(FOLLOW_abstractedType_in_typeConstraint8263);
                    abstractedType183=abstractedType();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setAbstractedType(abstractedType183); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeConstraint;
    }
    // $ANTLR end "typeConstraint"



    // $ANTLR start "typeConstraints"
    // /home/david/git/ceylon-spec/Ceylon.g:1267:1: typeConstraints returns [TypeConstraintList typeConstraintList] : ( typeConstraint )+ ;
    public TypeConstraintList typeConstraints() throws RecognitionException {
        TypeConstraintList typeConstraintList = null;


        TypeConstraint typeConstraint184 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1268:5: ( ( typeConstraint )+ )
            // /home/david/git/ceylon-spec/Ceylon.g:1268:7: ( typeConstraint )+
            {
            if ( state.backtracking==0 ) { typeConstraintList =new TypeConstraintList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:1269:7: ( typeConstraint )+
            int cnt109=0;
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMPILER_ANNOTATION||LA109_0==TYPE_CONSTRAINT) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1270:9: typeConstraint
            	    {
            	    pushFollow(FOLLOW_typeConstraint_in_typeConstraints8321);
            	    typeConstraint184=typeConstraint();

            	    state._fsp--;
            	    if (state.failed) return typeConstraintList;

            	    if ( state.backtracking==0 ) { if (typeConstraint184!=null)
            	                typeConstraintList.addTypeConstraint(typeConstraint184); }

            	    }
            	    break;

            	default :
            	    if ( cnt109 >= 1 ) break loop109;
            	    if (state.backtracking>0) {state.failed=true; return typeConstraintList;}
                        EarlyExitException eee =
                            new EarlyExitException(109, input);
                        throw eee;
                }
                cnt109++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeConstraintList;
    }
    // $ANTLR end "typeConstraints"



    // $ANTLR start "annotationListStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1276:1: annotationListStart : ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER ) ;
    public void annotationListStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1277:5: ( ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1277:7: ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1277:7: ( stringLiteral | annotation )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==STRING_LITERAL||LA110_0==VERBATIM_STRING) ) {
                alt110=1;
            }
            else if ( (LA110_0==LIDENTIFIER) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1277:8: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotationListStart8358);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1277:22: annotation
                    {
                    pushFollow(FOLLOW_annotation_in_annotationListStart8360);
                    annotation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( input.LA(1)==FUNCTION_MODIFIER||input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER||input.LA(1)==VALUE_MODIFIER||input.LA(1)==VOID_MODIFIER ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotationListStart"



    // $ANTLR start "destructureStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1281:1: destructureStart : VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP ) ;
    public void destructureStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1282:5: ( VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1282:7: VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP )
            {
            match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructureStart8397); if (state.failed) return ;

            pushFollow(FOLLOW_compilerAnnotations_in_destructureStart8399);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1283:7: ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP )
            int alt111=6;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                alt111=1;
                }
                break;
            case UIDENTIFIER:
                {
                alt111=2;
                }
                break;
            case VOID_MODIFIER:
                {
                alt111=3;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt111=4;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt111=5;
                }
                break;
            case LIDENTIFIER:
                {
                alt111=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:8: LBRACKET
                    {
                    match(input,LBRACKET,FOLLOW_LBRACKET_in_destructureStart8409); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:17: UIDENTIFIER
                    {
                    match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_destructureStart8411); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:29: VOID_MODIFIER
                    {
                    match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_destructureStart8413); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:43: VALUE_MODIFIER
                    {
                    match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructureStart8415); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:58: FUNCTION_MODIFIER
                    {
                    match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_destructureStart8417); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1283:76: LIDENTIFIER ENTRY_OP
                    {
                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_destructureStart8419); if (state.failed) return ;

                    match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_destructureStart8421); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "destructureStart"



    // $ANTLR start "declarationOrStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1286:1: declarationOrStatement returns [Statement statement] options {memoize=true; } : compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement ) ;
    public Statement declarationOrStatement() throws RecognitionException {
        Statement statement = null;

        int declarationOrStatement_StartIndex = input.index();

        Declaration d1 =null;

        Declaration d2 =null;

        Statement s =null;

        Destructure destructure185 =null;

        Assertion assertion186 =null;

        List<CompilerAnnotation> compilerAnnotations187 =null;


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return statement; }

            // /home/david/git/ceylon-spec/Ceylon.g:1288:5: ( compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1288:7: compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_declarationOrStatement8454);
            compilerAnnotations187=compilerAnnotations();

            state._fsp--;
            if (state.failed) return statement;

            // /home/david/git/ceylon-spec/Ceylon.g:1289:7: ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement )
            int alt112=5;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==VALUE_MODIFIER) ) {
                int LA112_1 = input.LA(2);

                if ( (synpred11_Ceylon()) ) {
                    alt112=1;
                }
                else if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==STRING_LITERAL) ) {
                int LA112_2 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt112=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==VERBATIM_STRING) ) {
                int LA112_3 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt112=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==LIDENTIFIER) ) {
                int LA112_4 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt112=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==CLASS_DEFINITION) ) {
                int LA112_5 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==INTERFACE_DEFINITION) ) {
                int LA112_6 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==DYNAMIC) ) {
                int LA112_7 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==ALIAS) ) {
                int LA112_8 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==OBJECT_DEFINITION) ) {
                int LA112_9 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==ASSIGN) ) {
                int LA112_10 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==VOID_MODIFIER) ) {
                int LA112_11 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==FUNCTION_MODIFIER) ) {
                int LA112_12 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==UIDENTIFIER) ) {
                int LA112_13 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==SMALLER_OP) ) {
                int LA112_14 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==LBRACKET) ) {
                int LA112_15 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==LBRACE) ) {
                int LA112_16 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else if ( (true) ) {
                    alt112=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==NEW) ) {
                int LA112_17 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt112=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt112=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 17, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==ASSERT) && (synpred13_Ceylon())) {
                alt112=3;
            }
            else if ( ((LA112_0 >= BACKTICK && LA112_0 <= BREAK)||LA112_0==CHAR_LITERAL||LA112_0==CONTINUE||(LA112_0 >= DECREMENT_OP && LA112_0 <= DIFFERENCE_OP)||(LA112_0 >= FLOAT_LITERAL && LA112_0 <= FOR_CLAUSE)||LA112_0==IF_CLAUSE||LA112_0==INCREMENT_OP||LA112_0==LPAREN||LA112_0==NATURAL_LITERAL||LA112_0==NOT_OP||(LA112_0 >= OUTER && LA112_0 <= PACKAGE)||LA112_0==RETURN||LA112_0==STRING_START||(LA112_0 >= SUM_OP && LA112_0 <= SWITCH_CLAUSE)||(LA112_0 >= THIS && LA112_0 <= TRY_CLAUSE)||LA112_0==WHILE_CLAUSE) ) {
                alt112=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }
            switch (alt112) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1290:9: ( destructureStart )=> destructure
                    {
                    pushFollow(FOLLOW_destructure_in_declarationOrStatement8478);
                    destructure185=destructure();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =destructure185; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1292:9: ( annotatedDeclarationStart )=>d1= declaration
                    {
                    pushFollow(FOLLOW_declaration_in_declarationOrStatement8506);
                    d1=declaration();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =d1; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1294:9: ( annotatedAssertionStart )=> assertion
                    {
                    pushFollow(FOLLOW_assertion_in_declarationOrStatement8532);
                    assertion186=assertion();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = assertion186; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1296:9: ( annotationListStart )=>d2= declaration
                    {
                    pushFollow(FOLLOW_declaration_in_declarationOrStatement8560);
                    d2=declaration();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =d2; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1298:9: s= statement
                    {
                    pushFollow(FOLLOW_statement_in_declarationOrStatement8582);
                    s=statement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =s; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (statement!=null)
                        statement.getCompilerAnnotations().addAll(compilerAnnotations187); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, declarationOrStatement_StartIndex); }

        }
        return statement;
    }
    // $ANTLR end "declarationOrStatement"



    // $ANTLR start "declaration"
    // /home/david/git/ceylon-spec/Ceylon.g:1305:1: declaration returns [Declaration declaration] : annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor ) ;
    public Declaration declaration() throws RecognitionException {
        Declaration declaration = null;


        AnnotationList annotations188 =null;

        AnyClass classDeclaration189 =null;

        AnyInterface interfaceDeclaration190 =null;

        TypeAliasDeclaration aliasDeclaration191 =null;

        ObjectDefinition objectDeclaration192 =null;

        AttributeSetterDefinition setterDeclaration193 =null;

        AnyMethod voidOrInferredMethodDeclaration194 =null;

        AnyAttribute inferredAttributeDeclaration195 =null;

        TypedDeclaration typedMethodOrAttributeDeclaration196 =null;

        Constructor constructor197 =null;


         MissingDeclaration md = new MissingDeclaration(null); 
                    declaration = md; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1308:5: ( annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1308:7: annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor )
            {
            pushFollow(FOLLOW_annotations_in_declaration8638);
            annotations188=annotations();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { md.setAnnotationList(annotations188); }

            // /home/david/git/ceylon-spec/Ceylon.g:1310:5: ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor )
            int alt113=9;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==CLASS_DEFINITION) ) {
                alt113=1;
            }
            else if ( (LA113_0==INTERFACE_DEFINITION) && (synpred15_Ceylon())) {
                alt113=2;
            }
            else if ( (LA113_0==DYNAMIC) ) {
                int LA113_3 = input.LA(2);

                if ( (synpred15_Ceylon()) ) {
                    alt113=2;
                }
                else if ( (true) ) {
                    alt113=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return declaration;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA113_0==ALIAS) ) {
                alt113=3;
            }
            else if ( (LA113_0==OBJECT_DEFINITION) ) {
                alt113=4;
            }
            else if ( (LA113_0==ASSIGN) ) {
                alt113=5;
            }
            else if ( (LA113_0==FUNCTION_MODIFIER||LA113_0==VOID_MODIFIER) ) {
                alt113=6;
            }
            else if ( (LA113_0==VALUE_MODIFIER) ) {
                alt113=7;
            }
            else if ( ((LA113_0 >= LBRACE && LA113_0 <= LBRACKET)||LA113_0==SMALLER_OP||LA113_0==UIDENTIFIER) ) {
                alt113=8;
            }
            else if ( (LA113_0==NEW) ) {
                alt113=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1311:7: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_declaration8661);
                    classDeclaration189=classDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =classDeclaration189; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1313:7: ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_declaration8687);
                    interfaceDeclaration190=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =interfaceDeclaration190; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1315:7: aliasDeclaration
                    {
                    pushFollow(FOLLOW_aliasDeclaration_in_declaration8703);
                    aliasDeclaration191=aliasDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =aliasDeclaration191; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1317:7: objectDeclaration
                    {
                    pushFollow(FOLLOW_objectDeclaration_in_declaration8719);
                    objectDeclaration192=objectDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =objectDeclaration192; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1319:7: setterDeclaration
                    {
                    pushFollow(FOLLOW_setterDeclaration_in_declaration8735);
                    setterDeclaration193=setterDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =setterDeclaration193; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1321:7: voidOrInferredMethodDeclaration
                    {
                    pushFollow(FOLLOW_voidOrInferredMethodDeclaration_in_declaration8751);
                    voidOrInferredMethodDeclaration194=voidOrInferredMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =voidOrInferredMethodDeclaration194; }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1323:7: inferredAttributeDeclaration
                    {
                    pushFollow(FOLLOW_inferredAttributeDeclaration_in_declaration8767);
                    inferredAttributeDeclaration195=inferredAttributeDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =inferredAttributeDeclaration195; }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1325:7: typedMethodOrAttributeDeclaration
                    {
                    pushFollow(FOLLOW_typedMethodOrAttributeDeclaration_in_declaration8783);
                    typedMethodOrAttributeDeclaration196=typedMethodOrAttributeDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =typedMethodOrAttributeDeclaration196; }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1327:7: constructor
                    {
                    pushFollow(FOLLOW_constructor_in_declaration8799);
                    constructor197=constructor();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =constructor197; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (declaration!=null)
                      declaration.setAnnotationList(annotations188); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "declaration"



    // $ANTLR start "annotatedDeclarationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1338:1: annotatedDeclarationStart : ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart ) ;
    public void annotatedDeclarationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1339:5: ( ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1339:7: ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1339:7: ( stringLiteral )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==STRING_LITERAL||LA114_0==VERBATIM_STRING) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1339:7: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotatedDeclarationStart8842);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1339:22: ( annotation )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==LIDENTIFIER) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1339:22: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotatedDeclarationStart8845);
            	    annotation();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1340:7: ( ( unambiguousType )=> unambiguousType | declarationStart )
            int alt116=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA116_1 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA116_2 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA116_3 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA116_4 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 4, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSIGN:
            case CLASS_DEFINITION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case INTERFACE_DEFINITION:
            case NEW:
            case OBJECT_DEFINITION:
            case VALUE_MODIFIER:
            case VOID_MODIFIER:
                {
                alt116=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1340:8: ( unambiguousType )=> unambiguousType
                    {
                    pushFollow(FOLLOW_unambiguousType_in_annotatedDeclarationStart8862);
                    unambiguousType();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1340:47: declarationStart
                    {
                    pushFollow(FOLLOW_declarationStart_in_annotatedDeclarationStart8866);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedDeclarationStart"



    // $ANTLR start "annotatedAssertionStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1343:1: annotatedAssertionStart : ( stringLiteral )? ( annotation )* ASSERT ;
    public void annotatedAssertionStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1344:5: ( ( stringLiteral )? ( annotation )* ASSERT )
            // /home/david/git/ceylon-spec/Ceylon.g:1344:7: ( stringLiteral )? ( annotation )* ASSERT
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1344:7: ( stringLiteral )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==STRING_LITERAL||LA117_0==VERBATIM_STRING) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1344:7: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotatedAssertionStart8884);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1344:22: ( annotation )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==LIDENTIFIER) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1344:22: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotatedAssertionStart8887);
            	    annotation();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            match(input,ASSERT,FOLLOW_ASSERT_in_annotatedAssertionStart8890); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedAssertionStart"



    // $ANTLR start "declarationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1350:1: declarationStart : ( VALUE_MODIFIER | FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | ASSIGN | INTERFACE_DEFINITION | CLASS_DEFINITION | OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER ) | NEW | ALIAS | variadicType LIDENTIFIER | DYNAMIC ( LIDENTIFIER | UIDENTIFIER ) );
    public void declarationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1351:5: ( VALUE_MODIFIER | FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | ASSIGN | INTERFACE_DEFINITION | CLASS_DEFINITION | OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER ) | NEW | ALIAS | variadicType LIDENTIFIER | DYNAMIC ( LIDENTIFIER | UIDENTIFIER ) )
            int alt119=11;
            switch ( input.LA(1) ) {
            case VALUE_MODIFIER:
                {
                alt119=1;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt119=2;
                }
                break;
            case VOID_MODIFIER:
                {
                alt119=3;
                }
                break;
            case ASSIGN:
                {
                alt119=4;
                }
                break;
            case INTERFACE_DEFINITION:
                {
                alt119=5;
                }
                break;
            case CLASS_DEFINITION:
                {
                alt119=6;
                }
                break;
            case OBJECT_DEFINITION:
                {
                alt119=7;
                }
                break;
            case NEW:
                {
                alt119=8;
                }
                break;
            case ALIAS:
                {
                alt119=9;
                }
                break;
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt119=10;
                }
                break;
            case DYNAMIC:
                {
                alt119=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }

            switch (alt119) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1351:7: VALUE_MODIFIER
                    {
                    match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_declarationStart8910); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1352:7: FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_declarationStart8918); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1353:7: VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_declarationStart8933); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1354:7: ASSIGN
                    {
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_declarationStart8948); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1355:7: INTERFACE_DEFINITION
                    {
                    match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_declarationStart8956); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1356:7: CLASS_DEFINITION
                    {
                    match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_declarationStart8964); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1357:7: OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_declarationStart8972); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1358:7: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_declarationStart8987); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1359:7: ALIAS
                    {
                    match(input,ALIAS,FOLLOW_ALIAS_in_declarationStart8995); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1360:7: variadicType LIDENTIFIER
                    {
                    pushFollow(FOLLOW_variadicType_in_declarationStart9004);
                    variadicType();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_declarationStart9006); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1361:7: DYNAMIC ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,DYNAMIC,FOLLOW_DYNAMIC_in_declarationStart9014); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "declarationStart"



    // $ANTLR start "unambiguousType"
    // /home/david/git/ceylon-spec/Ceylon.g:1367:1: unambiguousType : ( qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET ) | LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE | LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET );
    public void unambiguousType() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1368:5: ( qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET ) | LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE | LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET )
            int alt133=3;
            switch ( input.LA(1) ) {
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt133=1;
                }
                break;
            case LBRACE:
                {
                alt133=2;
                }
                break;
            case LBRACKET:
                {
                alt133=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }

            switch (alt133) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1368:7: qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET )
                    {
                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9044);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1369:7: ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )?
                    int alt121=2;
                    switch ( input.LA(1) ) {
                        case OPTIONAL:
                            {
                            int LA121_1 = input.LA(2);

                            if ( (LA121_1==ENTRY_OP) ) {
                                alt121=1;
                            }
                            }
                            break;
                        case LBRACKET:
                            {
                            int LA121_2 = input.LA(2);

                            if ( (LA121_2==RBRACKET) ) {
                                int LA121_5 = input.LA(3);

                                if ( (LA121_5==ENTRY_OP) ) {
                                    alt121=1;
                                }
                            }
                            }
                            break;
                        case ENTRY_OP:
                            {
                            alt121=1;
                            }
                            break;
                    }

                    switch (alt121) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1370:9: ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:1370:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt120=3;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==OPTIONAL) ) {
                                alt120=1;
                            }
                            else if ( (LA120_0==LBRACKET) ) {
                                alt120=2;
                            }
                            switch (alt120) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1370:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9064); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1370:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9068); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9070); if (state.failed) return ;

                                    }
                                    break;

                            }


                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9083); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9085);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1373:7: ( OPTIONAL | LBRACKET RBRACKET )
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==OPTIONAL) ) {
                        alt122=1;
                    }
                    else if ( (LA122_0==LBRACKET) ) {
                        alt122=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 0, input);

                        throw nvae;

                    }
                    switch (alt122) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1373:8: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9103); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1373:19: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9107); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9109); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1374:7: LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE
                    {
                    match(input,LBRACE,FOLLOW_LBRACE_in_unambiguousType9118); if (state.failed) return ;

                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9127);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1375:21: ( OPTIONAL | LBRACKET RBRACKET )?
                    int alt123=3;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==OPTIONAL) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==LBRACKET) ) {
                        alt123=2;
                    }
                    switch (alt123) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1375:22: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9130); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1375:33: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9134); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9136); if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1376:7: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==ENTRY_OP) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1377:9: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                            {
                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9156); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9158);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            // /home/david/git/ceylon-spec/Ceylon.g:1378:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt124=3;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==OPTIONAL) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==LBRACKET) ) {
                                alt124=2;
                            }
                            switch (alt124) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1378:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9170); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1378:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9174); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9176); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input,RBRACE,FOLLOW_RBRACE_in_unambiguousType9209); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1382:7: LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET
                    {
                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9217); if (state.failed) return ;

                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9226);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1383:21: ( OPTIONAL | LBRACKET RBRACKET )?
                    int alt126=3;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==OPTIONAL) ) {
                        alt126=1;
                    }
                    else if ( (LA126_0==LBRACKET) ) {
                        alt126=2;
                    }
                    switch (alt126) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1383:22: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9229); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1383:33: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9233); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9235); if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1384:7: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==ENTRY_OP) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1385:9: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                            {
                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9256); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9258);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            // /home/david/git/ceylon-spec/Ceylon.g:1386:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt127=3;
                            int LA127_0 = input.LA(1);

                            if ( (LA127_0==OPTIONAL) ) {
                                alt127=1;
                            }
                            else if ( (LA127_0==LBRACKET) ) {
                                alt127=2;
                            }
                            switch (alt127) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1386:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9269); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1386:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9273); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9275); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1388:7: ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==COMMA) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1389:9: COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_unambiguousType9305); if (state.failed) return ;

                    	    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9316);
                    	    qualifiedType();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    // /home/david/git/ceylon-spec/Ceylon.g:1390:23: ( OPTIONAL | LBRACKET RBRACKET )?
                    	    int alt129=3;
                    	    int LA129_0 = input.LA(1);

                    	    if ( (LA129_0==OPTIONAL) ) {
                    	        alt129=1;
                    	    }
                    	    else if ( (LA129_0==LBRACKET) ) {
                    	        alt129=2;
                    	    }
                    	    switch (alt129) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1390:24: OPTIONAL
                    	            {
                    	            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9319); if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1390:35: LBRACKET RBRACKET
                    	            {
                    	            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9323); if (state.failed) return ;

                    	            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9325); if (state.failed) return ;

                    	            }
                    	            break;

                    	    }


                    	    // /home/david/git/ceylon-spec/Ceylon.g:1391:9: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    	    int alt131=2;
                    	    int LA131_0 = input.LA(1);

                    	    if ( (LA131_0==ENTRY_OP) ) {
                    	        alt131=1;
                    	    }
                    	    switch (alt131) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1392:11: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                    	            {
                    	            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9350); if (state.failed) return ;

                    	            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9352);
                    	            qualifiedType();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            // /home/david/git/ceylon-spec/Ceylon.g:1393:11: ( OPTIONAL | LBRACKET RBRACKET )?
                    	            int alt130=3;
                    	            int LA130_0 = input.LA(1);

                    	            if ( (LA130_0==OPTIONAL) ) {
                    	                alt130=1;
                    	            }
                    	            else if ( (LA130_0==LBRACKET) ) {
                    	                alt130=2;
                    	            }
                    	            switch (alt130) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:1393:12: OPTIONAL
                    	                    {
                    	                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9366); if (state.failed) return ;

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:1393:23: LBRACKET RBRACKET
                    	                    {
                    	                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9370); if (state.failed) return ;

                    	                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9372); if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9416); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unambiguousType"



    // $ANTLR start "statement"
    // /home/david/git/ceylon-spec/Ceylon.g:1400:1: statement returns [Statement statement] : ( directiveStatement | controlStatement | expressionOrSpecificationStatement );
    public Statement statement() throws RecognitionException {
        Statement statement = null;


        Directive directiveStatement198 =null;

        ControlStatement controlStatement199 =null;

        Statement expressionOrSpecificationStatement200 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1401:5: ( directiveStatement | controlStatement | expressionOrSpecificationStatement )
            int alt134=3;
            switch ( input.LA(1) ) {
            case BREAK:
            case CONTINUE:
            case RETURN:
            case THROW:
                {
                alt134=1;
                }
                break;
            case FOR_CLAUSE:
            case IF_CLAUSE:
            case SWITCH_CLAUSE:
            case TRY_CLAUSE:
            case WHILE_CLAUSE:
                {
                alt134=2;
                }
                break;
            case DYNAMIC:
                {
                int LA134_3 = input.LA(2);

                if ( (LA134_3==LBRACKET) ) {
                    alt134=3;
                }
                else if ( (LA134_3==LBRACE) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 3, input);

                    throw nvae;

                }
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case FLOAT_LITERAL:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case NOT_OP:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
                {
                alt134=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }

            switch (alt134) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1401:7: directiveStatement
                    {
                    pushFollow(FOLLOW_directiveStatement_in_statement9437);
                    directiveStatement198=directiveStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = directiveStatement198; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1403:7: controlStatement
                    {
                    pushFollow(FOLLOW_controlStatement_in_statement9453);
                    controlStatement199=controlStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = controlStatement199; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1405:7: expressionOrSpecificationStatement
                    {
                    pushFollow(FOLLOW_expressionOrSpecificationStatement_in_statement9469);
                    expressionOrSpecificationStatement200=expressionOrSpecificationStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = expressionOrSpecificationStatement200; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "statement"



    // $ANTLR start "expressionOrSpecificationStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1409:1: expressionOrSpecificationStatement returns [Statement statement] : expression ( lazySpecifier )? ( SEMICOLON | COMMA ) ;
    public Statement expressionOrSpecificationStatement() throws RecognitionException {
        Statement statement = null;


        Token SEMICOLON203=null;
        Token COMMA204=null;
        Expression expression201 =null;

        SpecifierExpression lazySpecifier202 =null;


         SpecifierStatement ss=new SpecifierStatement(null); 
                    ExpressionStatement es=new ExpressionStatement(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1412:5: ( expression ( lazySpecifier )? ( SEMICOLON | COMMA ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1412:7: expression ( lazySpecifier )? ( SEMICOLON | COMMA )
            {
            pushFollow(FOLLOW_expression_in_expressionOrSpecificationStatement9507);
            expression201=expression();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement = es;
                    if (expression201!=null)
                        es.setExpression(expression201);
                    if (expression201.getTerm() instanceof AssignOp) {
                        AssignOp a = (AssignOp) expression201.getTerm();
                        Term lt = a.getLeftTerm();
                        if (lt instanceof BaseMemberExpression ||
                            lt instanceof ParameterizedExpression ||
                            lt instanceof QualifiedMemberExpression &&
                                ((QualifiedMemberExpression) lt).getPrimary() instanceof This &&
                                ((QualifiedMemberExpression) lt).getMemberOperator() instanceof MemberOp) {
                            Expression e = new Expression(null);
                            e.setTerm(a.getRightTerm());
                            SpecifierExpression se = new SpecifierExpression(null);
                            se.setExpression(e);
                            ss.setSpecifierExpression(se);
                            ss.setBaseMemberExpression(a.getLeftTerm());
                            statement = ss;
                        }
                    }
                  }

            // /home/david/git/ceylon-spec/Ceylon.g:1434:7: ( lazySpecifier )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==COMPUTE) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1440:9: lazySpecifier
                    {
                    pushFollow(FOLLOW_lazySpecifier_in_expressionOrSpecificationStatement9543);
                    lazySpecifier202=lazySpecifier();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { ss.setSpecifierExpression(lazySpecifier202);
                              ss.setBaseMemberExpression(expression201.getTerm()); 
                              statement = ss; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            // /home/david/git/ceylon-spec/Ceylon.g:1446:7: ( SEMICOLON | COMMA )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==SEMICOLON) ) {
                alt136=1;
            }
            else if ( (LA136_0==COMMA) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1447:9: SEMICOLON
                    {
                    SEMICOLON203=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expressionOrSpecificationStatement9588); if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setEndToken(SEMICOLON203); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1449:9: COMMA
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(SEMICOLON, input)); }

                    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionOrSpecificationStatement9618); if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setEndToken(COMMA204); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "expressionOrSpecificationStatement"



    // $ANTLR start "directiveStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1457:1: directiveStatement returns [Directive directive] : d= directive SEMICOLON ;
    public Directive directiveStatement() throws RecognitionException {
        Directive directive = null;


        Token SEMICOLON205=null;
        Directive d =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1458:5: (d= directive SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1458:7: d= directive SEMICOLON
            {
            pushFollow(FOLLOW_directive_in_directiveStatement9667);
            d=directive();

            state._fsp--;
            if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive =d;
                    expecting=SEMICOLON; }

            SEMICOLON205=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_directiveStatement9684); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive.setEndToken(SEMICOLON205);
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "directiveStatement"



    // $ANTLR start "directive"
    // /home/david/git/ceylon-spec/Ceylon.g:1466:1: directive returns [Directive directive] : ( returnDirective | throwDirective | breakDirective | continueDirective );
    public Directive directive() throws RecognitionException {
        Directive directive = null;


        Return returnDirective206 =null;

        Throw throwDirective207 =null;

        Break breakDirective208 =null;

        Continue continueDirective209 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1467:5: ( returnDirective | throwDirective | breakDirective | continueDirective )
            int alt137=4;
            switch ( input.LA(1) ) {
            case RETURN:
                {
                alt137=1;
                }
                break;
            case THROW:
                {
                alt137=2;
                }
                break;
            case BREAK:
                {
                alt137=3;
                }
                break;
            case CONTINUE:
                {
                alt137=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return directive;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }

            switch (alt137) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1467:7: returnDirective
                    {
                    pushFollow(FOLLOW_returnDirective_in_directive9713);
                    returnDirective206=returnDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = returnDirective206; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1469:7: throwDirective
                    {
                    pushFollow(FOLLOW_throwDirective_in_directive9729);
                    throwDirective207=throwDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = throwDirective207; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1471:7: breakDirective
                    {
                    pushFollow(FOLLOW_breakDirective_in_directive9745);
                    breakDirective208=breakDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = breakDirective208; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1473:7: continueDirective
                    {
                    pushFollow(FOLLOW_continueDirective_in_directive9761);
                    continueDirective209=continueDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = continueDirective209; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "directive"



    // $ANTLR start "returnDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1477:1: returnDirective returns [Return directive] : RETURN ( functionOrExpression )? ;
    public Return returnDirective() throws RecognitionException {
        Return directive = null;


        Token RETURN210=null;
        Expression functionOrExpression211 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1478:5: ( RETURN ( functionOrExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1478:7: RETURN ( functionOrExpression )?
            {
            RETURN210=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnDirective9790); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Return(RETURN210); }

            // /home/david/git/ceylon-spec/Ceylon.g:1480:7: ( functionOrExpression )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==BACKTICK||LA138_0==CHAR_LITERAL||(LA138_0 >= DECREMENT_OP && LA138_0 <= DIFFERENCE_OP)||LA138_0==DYNAMIC||LA138_0==FLOAT_LITERAL||LA138_0==FUNCTION_MODIFIER||LA138_0==IF_CLAUSE||LA138_0==INCREMENT_OP||(LA138_0 >= LBRACE && LA138_0 <= LIDENTIFIER)||LA138_0==LPAREN||LA138_0==NATURAL_LITERAL||(LA138_0 >= NOT_OP && LA138_0 <= OBJECT_DEFINITION)||(LA138_0 >= OUTER && LA138_0 <= PACKAGE)||LA138_0==STRING_LITERAL||LA138_0==STRING_START||(LA138_0 >= SUM_OP && LA138_0 <= SWITCH_CLAUSE)||LA138_0==THIS||LA138_0==UIDENTIFIER||(LA138_0 >= VERBATIM_STRING && LA138_0 <= VOID_MODIFIER)) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1481:9: functionOrExpression
                    {
                    pushFollow(FOLLOW_functionOrExpression_in_returnDirective9817);
                    functionOrExpression211=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive.setExpression(functionOrExpression211); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "returnDirective"



    // $ANTLR start "throwDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1486:1: throwDirective returns [Throw directive] : THROW ( expression )? ;
    public Throw throwDirective() throws RecognitionException {
        Throw directive = null;


        Token THROW212=null;
        Expression expression213 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1487:5: ( THROW ( expression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1487:7: THROW ( expression )?
            {
            THROW212=(Token)match(input,THROW,FOLLOW_THROW_in_throwDirective9857); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Throw(THROW212); }

            // /home/david/git/ceylon-spec/Ceylon.g:1489:7: ( expression )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==BACKTICK||LA139_0==CHAR_LITERAL||(LA139_0 >= DECREMENT_OP && LA139_0 <= DIFFERENCE_OP)||LA139_0==DYNAMIC||LA139_0==FLOAT_LITERAL||LA139_0==INCREMENT_OP||(LA139_0 >= LBRACE && LA139_0 <= LBRACKET)||LA139_0==LIDENTIFIER||LA139_0==LPAREN||LA139_0==NATURAL_LITERAL||(LA139_0 >= NOT_OP && LA139_0 <= OBJECT_DEFINITION)||(LA139_0 >= OUTER && LA139_0 <= PACKAGE)||LA139_0==STRING_LITERAL||LA139_0==STRING_START||(LA139_0 >= SUM_OP && LA139_0 <= SUPER)||LA139_0==THIS||LA139_0==UIDENTIFIER||LA139_0==VERBATIM_STRING) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1490:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_throwDirective9884);
                    expression213=expression();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive.setExpression(expression213); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "throwDirective"



    // $ANTLR start "breakDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1495:1: breakDirective returns [Break directive] : BREAK ;
    public Break breakDirective() throws RecognitionException {
        Break directive = null;


        Token BREAK214=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1496:5: ( BREAK )
            // /home/david/git/ceylon-spec/Ceylon.g:1496:7: BREAK
            {
            BREAK214=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakDirective9924); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Break(BREAK214); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "breakDirective"



    // $ANTLR start "continueDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1500:1: continueDirective returns [Continue directive] : CONTINUE ;
    public Continue continueDirective() throws RecognitionException {
        Continue directive = null;


        Token CONTINUE215=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1501:5: ( CONTINUE )
            // /home/david/git/ceylon-spec/Ceylon.g:1501:7: CONTINUE
            {
            CONTINUE215=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continueDirective9953); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Continue(CONTINUE215); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "continueDirective"



    // $ANTLR start "typeSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1505:1: typeSpecifier returns [TypeSpecifier typeSpecifier] : ( COMPUTE | SPECIFY ) ( type )? ;
    public TypeSpecifier typeSpecifier() throws RecognitionException {
        TypeSpecifier typeSpecifier = null;


        Token COMPUTE216=null;
        Token SPECIFY217=null;
        StaticType type218 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1506:5: ( ( COMPUTE | SPECIFY ) ( type )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1506:7: ( COMPUTE | SPECIFY ) ( type )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1506:7: ( COMPUTE | SPECIFY )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMPUTE) ) {
                alt140=1;
            }
            else if ( (LA140_0==SPECIFY) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return typeSpecifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1507:9: COMPUTE
                    {
                    COMPUTE216=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_typeSpecifier9992); if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier = new TypeSpecifier(COMPUTE216); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1510:9: SPECIFY
                    {
                    SPECIFY217=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_typeSpecifier10021); if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier = new TypeSpecifier(SPECIFY217); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1513:7: ( type )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( ((LA141_0 >= LBRACE && LA141_0 <= LBRACKET)||LA141_0==SMALLER_OP||LA141_0==UIDENTIFIER) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1514:9: type
                    {
                    pushFollow(FOLLOW_type_in_typeSpecifier10058);
                    type218=type();

                    state._fsp--;
                    if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier.setType(type218); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeSpecifier;
    }
    // $ANTLR end "typeSpecifier"



    // $ANTLR start "typeDefault"
    // /home/david/git/ceylon-spec/Ceylon.g:1519:1: typeDefault returns [TypeSpecifier typeSpecifier] : SPECIFY type ;
    public TypeSpecifier typeDefault() throws RecognitionException {
        TypeSpecifier typeSpecifier = null;


        Token SPECIFY219=null;
        StaticType type220 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1520:5: ( SPECIFY type )
            // /home/david/git/ceylon-spec/Ceylon.g:1520:7: SPECIFY type
            {
            SPECIFY219=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_typeDefault10098); if (state.failed) return typeSpecifier;

            if ( state.backtracking==0 ) { typeSpecifier = new DefaultTypeArgument(SPECIFY219); }

            pushFollow(FOLLOW_type_in_typeDefault10115);
            type220=type();

            state._fsp--;
            if (state.failed) return typeSpecifier;

            if ( state.backtracking==0 ) { typeSpecifier.setType(type220); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeSpecifier;
    }
    // $ANTLR end "typeDefault"



    // $ANTLR start "specifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1526:1: specifier returns [SpecifierExpression specifierExpression] : SPECIFY functionOrExpression ;
    public SpecifierExpression specifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token SPECIFY221=null;
        Expression functionOrExpression222 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1527:5: ( SPECIFY functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1527:7: SPECIFY functionOrExpression
            {
            SPECIFY221=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_specifier10144); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new SpecifierExpression(SPECIFY221); }

            pushFollow(FOLLOW_functionOrExpression_in_specifier10160);
            functionOrExpression222=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression222); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "specifier"



    // $ANTLR start "lazySpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1533:1: lazySpecifier returns [SpecifierExpression specifierExpression] : COMPUTE functionOrExpression ;
    public SpecifierExpression lazySpecifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token COMPUTE223=null;
        Expression functionOrExpression224 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1534:5: ( COMPUTE functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1534:7: COMPUTE functionOrExpression
            {
            COMPUTE223=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_lazySpecifier10189); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(COMPUTE223); }

            pushFollow(FOLLOW_functionOrExpression_in_lazySpecifier10205);
            functionOrExpression224=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression224); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "lazySpecifier"



    // $ANTLR start "functionSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1540:1: functionSpecifier returns [SpecifierExpression specifierExpression] : ( COMPUTE | SPECIFY ) functionOrExpression ;
    public SpecifierExpression functionSpecifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token COMPUTE225=null;
        Token SPECIFY226=null;
        Expression functionOrExpression227 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1541:5: ( ( COMPUTE | SPECIFY ) functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1541:7: ( COMPUTE | SPECIFY ) functionOrExpression
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1541:7: ( COMPUTE | SPECIFY )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==COMPUTE) ) {
                alt142=1;
            }
            else if ( (LA142_0==SPECIFY) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return specifierExpression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1542:9: COMPUTE
                    {
                    COMPUTE225=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_functionSpecifier10244); if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(COMPUTE225); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1545:9: SPECIFY
                    {
                    SPECIFY226=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_functionSpecifier10272); if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(SPECIFY226); }

                    }
                    break;

            }


            pushFollow(FOLLOW_functionOrExpression_in_functionSpecifier10298);
            functionOrExpression227=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression227); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "functionSpecifier"



    // $ANTLR start "expression"
    // /home/david/git/ceylon-spec/Ceylon.g:1552:1: expression returns [Expression expression] : assignmentExpression ;
    public Expression expression() throws RecognitionException {
        Expression expression = null;


        Term assignmentExpression228 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1553:5: ( assignmentExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1553:7: assignmentExpression
            {
            if ( state.backtracking==0 ) { expression = new Expression(null); }

            pushFollow(FOLLOW_assignmentExpression_in_expression10335);
            assignmentExpression228=assignmentExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression.setTerm(assignmentExpression228); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "expression"



    // $ANTLR start "base"
    // /home/david/git/ceylon-spec/Ceylon.g:1558:1: base returns [Primary primary] : ( nonstringLiteral | stringExpression | metaLiteral | enumeration | tuple | dynamicObject | objectExpression | selfReference | parExpression | baseReference );
    public Primary base() throws RecognitionException {
        Primary primary = null;


        Literal nonstringLiteral229 =null;

        Atom stringExpression230 =null;

        MetaLiteral metaLiteral231 =null;

        SequenceEnumeration enumeration232 =null;

        Tuple tuple233 =null;

        Dynamic dynamicObject234 =null;

        ObjectExpression objectExpression235 =null;

        Atom selfReference236 =null;

        Expression parExpression237 =null;

        PsiCompatibleCeylonParser.baseReference_return baseReference238 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1559:5: ( nonstringLiteral | stringExpression | metaLiteral | enumeration | tuple | dynamicObject | objectExpression | selfReference | parExpression | baseReference )
            int alt143=10;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case FLOAT_LITERAL:
            case NATURAL_LITERAL:
                {
                alt143=1;
                }
                break;
            case STRING_LITERAL:
            case STRING_START:
            case VERBATIM_STRING:
                {
                alt143=2;
                }
                break;
            case BACKTICK:
                {
                alt143=3;
                }
                break;
            case LBRACE:
                {
                alt143=4;
                }
                break;
            case LBRACKET:
                {
                alt143=5;
                }
                break;
            case DYNAMIC:
                {
                alt143=6;
                }
                break;
            case OBJECT_DEFINITION:
                {
                alt143=7;
                }
                break;
            case OUTER:
            case PACKAGE:
            case SUPER:
            case THIS:
                {
                alt143=8;
                }
                break;
            case LPAREN:
                {
                alt143=9;
                }
                break;
            case LIDENTIFIER:
            case UIDENTIFIER:
                {
                alt143=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return primary;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }

            switch (alt143) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1559:7: nonstringLiteral
                    {
                    pushFollow(FOLLOW_nonstringLiteral_in_base10364);
                    nonstringLiteral229=nonstringLiteral();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =nonstringLiteral229; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1561:7: stringExpression
                    {
                    pushFollow(FOLLOW_stringExpression_in_base10380);
                    stringExpression230=stringExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =stringExpression230; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1563:7: metaLiteral
                    {
                    pushFollow(FOLLOW_metaLiteral_in_base10396);
                    metaLiteral231=metaLiteral();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =metaLiteral231; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1565:7: enumeration
                    {
                    pushFollow(FOLLOW_enumeration_in_base10412);
                    enumeration232=enumeration();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =enumeration232; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1567:7: tuple
                    {
                    pushFollow(FOLLOW_tuple_in_base10428);
                    tuple233=tuple();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =tuple233; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1569:7: dynamicObject
                    {
                    pushFollow(FOLLOW_dynamicObject_in_base10444);
                    dynamicObject234=dynamicObject();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =dynamicObject234; }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1571:7: objectExpression
                    {
                    pushFollow(FOLLOW_objectExpression_in_base10460);
                    objectExpression235=objectExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary = objectExpression235; }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1573:7: selfReference
                    {
                    pushFollow(FOLLOW_selfReference_in_base10476);
                    selfReference236=selfReference();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =selfReference236; }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1575:7: parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_base10492);
                    parExpression237=parExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =parExpression237; }

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1577:7: baseReference
                    {
                    pushFollow(FOLLOW_baseReference_in_base10508);
                    baseReference238=baseReference();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { BaseMemberOrTypeExpression be;
                            if ((baseReference238!=null?baseReference238.isMember:false))
                                be = new BaseMemberExpression(null);
                            else
                                be = new BaseTypeExpression(null);
                            be.setIdentifier((baseReference238!=null?baseReference238.identifier:null));
                            if ((baseReference238!=null?baseReference238.typeArgumentList:null)!=null)
                                be.setTypeArguments((baseReference238!=null?baseReference238.typeArgumentList:null));
                            else
                                be.setTypeArguments( new InferredTypeArguments(null) );
                            primary =be; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return primary;
    }
    // $ANTLR end "base"


    public static class baseReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
        public boolean isMember;
    };


    // $ANTLR start "baseReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1591:1: baseReference returns [Identifier identifier, TypeArgumentList typeArgumentList, \n boolean isMember] : ( memberReference | typeReference ) ;
    public PsiCompatibleCeylonParser.baseReference_return baseReference() throws RecognitionException {
        PsiCompatibleCeylonParser.baseReference_return retval = new PsiCompatibleCeylonParser.baseReference_return();
        retval.start = input.LT(1);


        PsiCompatibleCeylonParser.memberReference_return memberReference239 =null;

        PsiCompatibleCeylonParser.typeReference_return typeReference240 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1593:5: ( ( memberReference | typeReference ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1594:5: ( memberReference | typeReference )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1594:5: ( memberReference | typeReference )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LIDENTIFIER) ) {
                alt144=1;
            }
            else if ( (LA144_0==UIDENTIFIER) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1595:7: memberReference
                    {
                    pushFollow(FOLLOW_memberReference_in_baseReference10550);
                    memberReference239=memberReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (memberReference239!=null?memberReference239.identifier:null);
                            retval.typeArgumentList = (memberReference239!=null?memberReference239.typeArgumentList:null);
                            retval.isMember = true; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1599:7: typeReference
                    {
                    pushFollow(FOLLOW_typeReference_in_baseReference10566);
                    typeReference240=typeReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (typeReference240!=null?typeReference240.identifier:null);
                            retval.typeArgumentList = (typeReference240!=null?typeReference240.typeArgumentList:null);
                            retval.isMember = false; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "baseReference"



    // $ANTLR start "primary"
    // /home/david/git/ceylon-spec/Ceylon.g:1606:1: primary returns [Primary primary] : base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )* ;
    public Primary primary() throws RecognitionException {
        Primary primary = null;


        Primary base241 =null;

        PsiCompatibleCeylonParser.qualifiedReference_return qualifiedReference242 =null;

        IndexExpression indexOrIndexRange243 =null;

        ParameterList parameters244 =null;

        PositionalArgumentList positionalArguments245 =null;

        NamedArgumentList namedArguments246 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1607:5: ( base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1607:7: base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*
            {
            pushFollow(FOLLOW_base_in_primary10601);
            base241=base();

            state._fsp--;
            if (state.failed) return primary;

            if ( state.backtracking==0 ) { primary =base241; }

            // /home/david/git/ceylon-spec/Ceylon.g:1609:5: ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*
            loop145:
            do {
                int alt145=6;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1612:11: qualifiedReference
            	    {
            	    pushFollow(FOLLOW_qualifiedReference_in_primary10634);
            	    qualifiedReference242=qualifiedReference();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { QualifiedMemberOrTypeExpression qe;
            	            if ((qualifiedReference242!=null?qualifiedReference242.isMember:false))
            	                qe = new QualifiedMemberExpression(null);
            	            else
            	                qe = new QualifiedTypeExpression(null);
            	            qe.setPrimary(primary);
            	            qe.setMemberOperator((qualifiedReference242!=null?qualifiedReference242.operator:null));
            	            qe.setIdentifier((qualifiedReference242!=null?qualifiedReference242.identifier:null));
            	            if ((qualifiedReference242!=null?qualifiedReference242.typeArgumentList:null)!=null)
            	                qe.setTypeArguments((qualifiedReference242!=null?qualifiedReference242.typeArgumentList:null));
            	            else 
            	                qe.setTypeArguments( new InferredTypeArguments(null) );
            	            primary =qe; }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1626:9: indexOrIndexRange
            	    {
            	    pushFollow(FOLLOW_indexOrIndexRange_in_primary10652);
            	    indexOrIndexRange243=indexOrIndexRange();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { indexOrIndexRange243.setPrimary(primary);
            	              primary = indexOrIndexRange243; }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1629:9: ( specifierParametersStart )=> parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_primary10678);
            	    parameters244=parameters();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { ParameterizedExpression pe;
            	              if (primary instanceof ParameterizedExpression) {
            	                  pe = (ParameterizedExpression) primary;
            	              } else {
            	                  pe = new ParameterizedExpression(null);
            	                  pe.setPrimary(primary);
            	              }
            	              pe.addParameterList(parameters244);
            	              primary = pe; }

            	    }
            	    break;
            	case 4 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1639:9: positionalArguments
            	    {
            	    pushFollow(FOLLOW_positionalArguments_in_primary10698);
            	    positionalArguments245=positionalArguments();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
            	              ie.setPrimary(primary);
            	              ie.setPositionalArgumentList(positionalArguments245); 
            	              primary =ie; }

            	    }
            	    break;
            	case 5 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1644:9: namedArguments
            	    {
            	    pushFollow(FOLLOW_namedArguments_in_primary10719);
            	    namedArguments246=namedArguments();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
            	              ie.setPrimary(primary);
            	              ie.setNamedArgumentList(namedArguments246);
            	              primary =ie; }

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return primary;
    }
    // $ANTLR end "primary"



    // $ANTLR start "specifierParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1652:1: specifierParametersStart : LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart ) ;
    public void specifierParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1653:5: ( LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1653:7: LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart )
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_specifierParametersStart10753); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1654:5: ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==RPAREN) ) {
                alt147=1;
            }
            else if ( (LA147_0==ALIAS||(LA147_0 >= ASSERT && LA147_0 <= ASSIGN)||(LA147_0 >= BACKTICK && LA147_0 <= BREAK)||(LA147_0 >= CHAR_LITERAL && LA147_0 <= CLASS_DEFINITION)||LA147_0==COMPILER_ANNOTATION||LA147_0==CONTINUE||(LA147_0 >= DECREMENT_OP && LA147_0 <= DIFFERENCE_OP)||LA147_0==DYNAMIC||(LA147_0 >= FLOAT_LITERAL && LA147_0 <= FUNCTION_MODIFIER)||(LA147_0 >= IF_CLAUSE && LA147_0 <= INTERFACE_DEFINITION)||LA147_0==IN_OP||(LA147_0 >= LBRACE && LA147_0 <= LIDENTIFIER)||LA147_0==LPAREN||LA147_0==MODULE||(LA147_0 >= NATURAL_LITERAL && LA147_0 <= NEW)||(LA147_0 >= NOT_OP && LA147_0 <= OBJECT_DEFINITION)||(LA147_0 >= OUT && LA147_0 <= PACKAGE)||LA147_0==PRODUCT_OP||LA147_0==RETURN||(LA147_0 >= SEMICOLON && LA147_0 <= SMALLER_OP)||LA147_0==STRING_LITERAL||LA147_0==STRING_START||(LA147_0 >= SUM_OP && LA147_0 <= SWITCH_CLAUSE)||(LA147_0 >= THIS && LA147_0 <= UIDENTIFIER)||(LA147_0 >= VALUE_MODIFIER && LA147_0 <= WHILE_CLAUSE)) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1655:7: RPAREN ( SPECIFY | COMPUTE | specifierParametersStart )
                    {
                    match(input,RPAREN,FOLLOW_RPAREN_in_specifierParametersStart10769); if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1655:14: ( SPECIFY | COMPUTE | specifierParametersStart )
                    int alt146=3;
                    switch ( input.LA(1) ) {
                    case SPECIFY:
                        {
                        alt146=1;
                        }
                        break;
                    case COMPUTE:
                        {
                        alt146=2;
                        }
                        break;
                    case LPAREN:
                        {
                        alt146=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);

                        throw nvae;

                    }

                    switch (alt146) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1655:15: SPECIFY
                            {
                            match(input,SPECIFY,FOLLOW_SPECIFY_in_specifierParametersStart10772); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1655:23: COMPUTE
                            {
                            match(input,COMPUTE,FOLLOW_COMPUTE_in_specifierParametersStart10774); if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1655:31: specifierParametersStart
                            {
                            pushFollow(FOLLOW_specifierParametersStart_in_specifierParametersStart10776);
                            specifierParametersStart();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1657:7: compilerAnnotations annotatedDeclarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_specifierParametersStart10792);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_annotatedDeclarationStart_in_specifierParametersStart10794);
                    annotatedDeclarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "specifierParametersStart"


    public static class qualifiedReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public MemberOperator operator;
        public TypeArgumentList typeArgumentList;
        public boolean isMember;
    };


    // $ANTLR start "qualifiedReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1661:1: qualifiedReference returns [Identifier identifier, MemberOperator operator, \n TypeArgumentList typeArgumentList, boolean isMember] : memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>) ;
    public PsiCompatibleCeylonParser.qualifiedReference_return qualifiedReference() throws RecognitionException {
        PsiCompatibleCeylonParser.qualifiedReference_return retval = new PsiCompatibleCeylonParser.qualifiedReference_return();
        retval.start = input.LT(1);


        MemberOperator memberSelectionOperator247 =null;

        PsiCompatibleCeylonParser.memberReference_return memberReference248 =null;

        PsiCompatibleCeylonParser.typeReference_return typeReference249 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1663:5: ( memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>) )
            // /home/david/git/ceylon-spec/Ceylon.g:1663:7: memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)
            {
            pushFollow(FOLLOW_memberSelectionOperator_in_qualifiedReference10821);
            memberSelectionOperator247=memberSelectionOperator();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.operator = memberSelectionOperator247;
                    retval.identifier = new Identifier(retval.operator.getToken());
                    retval.identifier.setText("");
                    retval.isMember =true; }

            // /home/david/git/ceylon-spec/Ceylon.g:1668:7: ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1669:9: memberReference
                    {
                    pushFollow(FOLLOW_memberReference_in_qualifiedReference10849);
                    memberReference248=memberReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (memberReference248!=null?memberReference248.identifier:null);
                              retval.typeArgumentList = (memberReference248!=null?memberReference248.typeArgumentList:null); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1672:9: typeReference
                    {
                    pushFollow(FOLLOW_typeReference_in_qualifiedReference10869);
                    typeReference249=typeReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (typeReference249!=null?typeReference249.identifier:null);
                              retval.typeArgumentList = (typeReference249!=null?typeReference249.typeArgumentList:null);  
                              retval.isMember =false; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1676:9: (~ ( LIDENTIFIER | UIDENTIFIER ) )=>
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualifiedReference"



    // $ANTLR start "memberSelectionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:1682:1: memberSelectionOperator returns [MemberOperator operator] : ( MEMBER_OP | SAFE_MEMBER_OP | SPREAD_OP );
    public MemberOperator memberSelectionOperator() throws RecognitionException {
        MemberOperator operator = null;


        Token MEMBER_OP250=null;
        Token SAFE_MEMBER_OP251=null;
        Token SPREAD_OP252=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1683:5: ( MEMBER_OP | SAFE_MEMBER_OP | SPREAD_OP )
            int alt149=3;
            switch ( input.LA(1) ) {
            case MEMBER_OP:
                {
                alt149=1;
                }
                break;
            case SAFE_MEMBER_OP:
                {
                alt149=2;
                }
                break;
            case SPREAD_OP:
                {
                alt149=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }

            switch (alt149) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1683:7: MEMBER_OP
                    {
                    MEMBER_OP250=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_memberSelectionOperator10936); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new MemberOp(MEMBER_OP250); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1685:7: SAFE_MEMBER_OP
                    {
                    SAFE_MEMBER_OP251=(Token)match(input,SAFE_MEMBER_OP,FOLLOW_SAFE_MEMBER_OP_in_memberSelectionOperator10952); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new SafeMemberOp(SAFE_MEMBER_OP251); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1687:7: SPREAD_OP
                    {
                    SPREAD_OP252=(Token)match(input,SPREAD_OP,FOLLOW_SPREAD_OP_in_memberSelectionOperator10968); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new SpreadOp(SPREAD_OP252); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "memberSelectionOperator"



    // $ANTLR start "enumeration"
    // /home/david/git/ceylon-spec/Ceylon.g:1691:1: enumeration returns [SequenceEnumeration sequenceEnumeration] : LBRACE ( sequencedArgument )? RBRACE ;
    public SequenceEnumeration enumeration() throws RecognitionException {
        SequenceEnumeration sequenceEnumeration = null;


        Token LBRACE253=null;
        Token RBRACE255=null;
        SequencedArgument sequencedArgument254 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1692:5: ( LBRACE ( sequencedArgument )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:1692:7: LBRACE ( sequencedArgument )? RBRACE
            {
            LBRACE253=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_enumeration10997); if (state.failed) return sequenceEnumeration;

            if ( state.backtracking==0 ) { sequenceEnumeration = new SequenceEnumeration(LBRACE253); }

            // /home/david/git/ceylon-spec/Ceylon.g:1694:7: ( sequencedArgument )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ALIAS||(LA150_0 >= ASSERT && LA150_0 <= ASSIGN)||(LA150_0 >= BACKTICK && LA150_0 <= BREAK)||(LA150_0 >= CHAR_LITERAL && LA150_0 <= CLASS_DEFINITION)||LA150_0==COMPILER_ANNOTATION||LA150_0==CONTINUE||(LA150_0 >= DECREMENT_OP && LA150_0 <= DIFFERENCE_OP)||LA150_0==DYNAMIC||(LA150_0 >= FLOAT_LITERAL && LA150_0 <= FUNCTION_MODIFIER)||(LA150_0 >= IF_CLAUSE && LA150_0 <= INTERFACE_DEFINITION)||LA150_0==IN_OP||(LA150_0 >= LBRACE && LA150_0 <= LIDENTIFIER)||LA150_0==LPAREN||LA150_0==MODULE||(LA150_0 >= NATURAL_LITERAL && LA150_0 <= NEW)||(LA150_0 >= NOT_OP && LA150_0 <= OBJECT_DEFINITION)||(LA150_0 >= OUT && LA150_0 <= PACKAGE)||LA150_0==PRODUCT_OP||LA150_0==RETURN||(LA150_0 >= SEMICOLON && LA150_0 <= SMALLER_OP)||LA150_0==STRING_LITERAL||LA150_0==STRING_START||(LA150_0 >= SUM_OP && LA150_0 <= SWITCH_CLAUSE)||(LA150_0 >= THIS && LA150_0 <= UIDENTIFIER)||(LA150_0 >= VALUE_MODIFIER && LA150_0 <= WHILE_CLAUSE)) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1695:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_enumeration11025);
                    sequencedArgument254=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return sequenceEnumeration;

                    if ( state.backtracking==0 ) { sequenceEnumeration.setSequencedArgument(sequencedArgument254); }

                    }
                    break;

            }


            RBRACE255=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_enumeration11052); if (state.failed) return sequenceEnumeration;

            if ( state.backtracking==0 ) { sequenceEnumeration.setEndToken(RBRACE255); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return sequenceEnumeration;
    }
    // $ANTLR end "enumeration"



    // $ANTLR start "tuple"
    // /home/david/git/ceylon-spec/Ceylon.g:1702:1: tuple returns [Tuple tuple] : LBRACKET ( sequencedArgument )? RBRACKET ;
    public Tuple tuple() throws RecognitionException {
        Tuple tuple = null;


        Token LBRACKET256=null;
        Token RBRACKET258=null;
        SequencedArgument sequencedArgument257 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1703:5: ( LBRACKET ( sequencedArgument )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1703:7: LBRACKET ( sequencedArgument )? RBRACKET
            {
            LBRACKET256=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tuple11081); if (state.failed) return tuple;

            if ( state.backtracking==0 ) { tuple = new Tuple(LBRACKET256); }

            // /home/david/git/ceylon-spec/Ceylon.g:1705:7: ( sequencedArgument )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ALIAS||(LA151_0 >= ASSERT && LA151_0 <= ASSIGN)||(LA151_0 >= BACKTICK && LA151_0 <= BREAK)||(LA151_0 >= CHAR_LITERAL && LA151_0 <= CLASS_DEFINITION)||LA151_0==COMPILER_ANNOTATION||LA151_0==CONTINUE||(LA151_0 >= DECREMENT_OP && LA151_0 <= DIFFERENCE_OP)||LA151_0==DYNAMIC||(LA151_0 >= FLOAT_LITERAL && LA151_0 <= FUNCTION_MODIFIER)||(LA151_0 >= IF_CLAUSE && LA151_0 <= INTERFACE_DEFINITION)||LA151_0==IN_OP||(LA151_0 >= LBRACE && LA151_0 <= LIDENTIFIER)||LA151_0==LPAREN||LA151_0==MODULE||(LA151_0 >= NATURAL_LITERAL && LA151_0 <= NEW)||(LA151_0 >= NOT_OP && LA151_0 <= OBJECT_DEFINITION)||(LA151_0 >= OUT && LA151_0 <= PACKAGE)||LA151_0==PRODUCT_OP||LA151_0==RETURN||(LA151_0 >= SEMICOLON && LA151_0 <= SMALLER_OP)||LA151_0==STRING_LITERAL||LA151_0==STRING_START||(LA151_0 >= SUM_OP && LA151_0 <= SWITCH_CLAUSE)||(LA151_0 >= THIS && LA151_0 <= UIDENTIFIER)||(LA151_0 >= VALUE_MODIFIER && LA151_0 <= WHILE_CLAUSE)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1706:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_tuple11108);
                    sequencedArgument257=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return tuple;

                    if ( state.backtracking==0 ) { tuple.setSequencedArgument(sequencedArgument257); }

                    }
                    break;

            }


            RBRACKET258=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tuple11135); if (state.failed) return tuple;

            if ( state.backtracking==0 ) { tuple.setEndToken(RBRACKET258); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return tuple;
    }
    // $ANTLR end "tuple"



    // $ANTLR start "dynamicObject"
    // /home/david/git/ceylon-spec/Ceylon.g:1713:1: dynamicObject returns [Dynamic dynamic] : DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET ;
    public Dynamic dynamicObject() throws RecognitionException {
        Dynamic dynamic = null;


        Token DYNAMIC259=null;
        Token LBRACKET260=null;
        Token RBRACKET264=null;
        NamedArgument namedArgument261 =null;

        SpecifiedArgument anonymousArgument262 =null;

        SequencedArgument sequencedArgument263 =null;


         NamedArgumentList nal=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1715:5: ( DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1715:7: DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET
            {
            DYNAMIC259=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_dynamicObject11177); if (state.failed) return dynamic;

            LBRACKET260=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_dynamicObject11179); if (state.failed) return dynamic;

            if ( state.backtracking==0 ) { dynamic = new Dynamic(DYNAMIC259);
                    nal = new NamedArgumentList(LBRACKET260); 
                    dynamic.setNamedArgumentList(nal); }

            // /home/david/git/ceylon-spec/Ceylon.g:1719:7: ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )*
            loop152:
            do {
                int alt152=3;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==COMPILER_ANNOTATION) ) {
                    int LA152_1 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }


                }
                else if ( (LA152_0==IF_CLAUSE) ) {
                    int LA152_3 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==FUNCTION_MODIFIER) ) {
                    int LA152_4 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==VOID_MODIFIER) ) {
                    int LA152_5 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==LPAREN) ) {
                    int LA152_6 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==LET) ) {
                    int LA152_7 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==SWITCH_CLAUSE) ) {
                    int LA152_8 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==NOT_OP) ) {
                    int LA152_9 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==DIFFERENCE_OP) ) {
                    int LA152_10 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==SUM_OP) ) {
                    int LA152_11 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==DECREMENT_OP) ) {
                    int LA152_12 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==INCREMENT_OP) ) {
                    int LA152_13 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==NATURAL_LITERAL) ) {
                    int LA152_14 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==FLOAT_LITERAL) ) {
                    int LA152_15 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==CHAR_LITERAL) ) {
                    int LA152_16 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==STRING_LITERAL) ) {
                    int LA152_17 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==VERBATIM_STRING) ) {
                    int LA152_18 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==STRING_START) ) {
                    int LA152_19 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==BACKTICK) ) {
                    int LA152_20 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==LBRACE) ) {
                    int LA152_21 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==LBRACKET) ) {
                    int LA152_22 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==DYNAMIC) ) {
                    int LA152_23 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==OBJECT_DEFINITION) ) {
                    int LA152_24 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==THIS) ) {
                    int LA152_25 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==SUPER) ) {
                    int LA152_26 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==OUTER) ) {
                    int LA152_27 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==PACKAGE) ) {
                    int LA152_28 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==LIDENTIFIER) ) {
                    int LA152_29 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==UIDENTIFIER) ) {
                    int LA152_30 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt152=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt152=2;
                    }


                }
                else if ( (LA152_0==SMALLER_OP) && (synpred19_Ceylon())) {
                    alt152=1;
                }
                else if ( (LA152_0==VALUE_MODIFIER) && (synpred19_Ceylon())) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1721:9: ( namedArgumentStart )=> namedArgument
            	    {
            	    pushFollow(FOLLOW_namedArgument_in_dynamicObject11230);
            	    namedArgument261=namedArgument();

            	    state._fsp--;
            	    if (state.failed) return dynamic;

            	    if ( state.backtracking==0 ) { if (namedArgument261!=null) 
            	                  nal.addNamedArgument(namedArgument261); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1725:9: ( anonymousArgument )=> anonymousArgument
            	    {
            	    pushFollow(FOLLOW_anonymousArgument_in_dynamicObject11264);
            	    anonymousArgument262=anonymousArgument();

            	    state._fsp--;
            	    if (state.failed) return dynamic;

            	    if ( state.backtracking==0 ) { if (anonymousArgument262!=null) 
            	                  nal.addNamedArgument(anonymousArgument262); }

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1730:7: ( sequencedArgument )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==ALIAS||(LA153_0 >= ASSERT && LA153_0 <= ASSIGN)||(LA153_0 >= BACKTICK && LA153_0 <= BREAK)||(LA153_0 >= CHAR_LITERAL && LA153_0 <= CLASS_DEFINITION)||LA153_0==COMPILER_ANNOTATION||LA153_0==CONTINUE||(LA153_0 >= DECREMENT_OP && LA153_0 <= DIFFERENCE_OP)||LA153_0==DYNAMIC||(LA153_0 >= FLOAT_LITERAL && LA153_0 <= FUNCTION_MODIFIER)||(LA153_0 >= IF_CLAUSE && LA153_0 <= INTERFACE_DEFINITION)||LA153_0==IN_OP||(LA153_0 >= LBRACE && LA153_0 <= LIDENTIFIER)||LA153_0==LPAREN||LA153_0==MODULE||(LA153_0 >= NATURAL_LITERAL && LA153_0 <= NEW)||(LA153_0 >= NOT_OP && LA153_0 <= OBJECT_DEFINITION)||(LA153_0 >= OUT && LA153_0 <= PACKAGE)||LA153_0==PRODUCT_OP||LA153_0==RETURN||(LA153_0 >= SEMICOLON && LA153_0 <= SMALLER_OP)||LA153_0==STRING_LITERAL||LA153_0==STRING_START||(LA153_0 >= SUM_OP && LA153_0 <= SWITCH_CLAUSE)||(LA153_0 >= THIS && LA153_0 <= UIDENTIFIER)||(LA153_0 >= VALUE_MODIFIER && LA153_0 <= WHILE_CLAUSE)) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1731:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_dynamicObject11302);
                    sequencedArgument263=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return dynamic;

                    if ( state.backtracking==0 ) { nal.setSequencedArgument(sequencedArgument263); }

                    }
                    break;

            }


            RBRACKET264=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_dynamicObject11329); if (state.failed) return dynamic;

            if ( state.backtracking==0 ) { nal.setEndToken(RBRACKET264); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return dynamic;
    }
    // $ANTLR end "dynamicObject"



    // $ANTLR start "valueCaseList"
    // /home/david/git/ceylon-spec/Ceylon.g:1738:1: valueCaseList returns [ExpressionList expressionList] :ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )* ;
    public ExpressionList valueCaseList() throws RecognitionException {
        ExpressionList expressionList = null;


        Token c=null;
        Token u=null;
        Term ie1 =null;

        Term ie2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1739:5: (ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1739:7: ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )*
            {
            if ( state.backtracking==0 ) { expressionList = new ExpressionList(null); }

            pushFollow(FOLLOW_intersectionExpression_in_valueCaseList11372);
            ie1=intersectionExpression();

            state._fsp--;
            if (state.failed) return expressionList;

            if ( state.backtracking==0 ) { Expression e = new Expression(null);
                    e.setTerm(ie1);
                    expressionList.addExpression(e); }

            // /home/david/git/ceylon-spec/Ceylon.g:1744:7: ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==COMMA||LA156_0==UNION_OP) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1745:9: (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |)
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1745:9: (c= COMMA |u= UNION_OP )
            	    int alt154=2;
            	    int LA154_0 = input.LA(1);

            	    if ( (LA154_0==COMMA) ) {
            	        alt154=1;
            	    }
            	    else if ( (LA154_0==UNION_OP) ) {
            	        alt154=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return expressionList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 154, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt154) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1746:11: c= COMMA
            	            {
            	            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_valueCaseList11414); if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { expressionList.setEndToken(c); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1748:11: u= UNION_OP
            	            {
            	            u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_valueCaseList11441); if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { expressionList.setEndToken(u); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1751:9: (ie2= intersectionExpression |)
            	    int alt155=2;
            	    int LA155_0 = input.LA(1);

            	    if ( (LA155_0==BACKTICK||LA155_0==CHAR_LITERAL||(LA155_0 >= DECREMENT_OP && LA155_0 <= DIFFERENCE_OP)||LA155_0==DYNAMIC||LA155_0==FLOAT_LITERAL||LA155_0==INCREMENT_OP||(LA155_0 >= LBRACE && LA155_0 <= LBRACKET)||LA155_0==LIDENTIFIER||LA155_0==LPAREN||LA155_0==NATURAL_LITERAL||LA155_0==OBJECT_DEFINITION||(LA155_0 >= OUTER && LA155_0 <= PACKAGE)||LA155_0==STRING_LITERAL||LA155_0==STRING_START||(LA155_0 >= SUM_OP && LA155_0 <= SUPER)||LA155_0==THIS||LA155_0==UIDENTIFIER||LA155_0==VERBATIM_STRING) ) {
            	        alt155=1;
            	    }
            	    else if ( (LA155_0==COMMA||LA155_0==RPAREN||LA155_0==UNION_OP) ) {
            	        alt155=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return expressionList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 155, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt155) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1752:11: ie2= intersectionExpression
            	            {
            	            pushFollow(FOLLOW_intersectionExpression_in_valueCaseList11487);
            	            ie2=intersectionExpression();

            	            state._fsp--;
            	            if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { if (ie2!=null) {
            	                            Expression e = new Expression(null);
            	                            e.setTerm(ie2);
            	                            expressionList.addExpression(e);
            	                            expressionList.setEndToken(null); } }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1758:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expressionList;
    }
    // $ANTLR end "valueCaseList"


    public static class memberReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "memberReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1764:1: memberReference returns [Identifier identifier, \n TypeArgumentList typeArgumentList] : memberName ( ( typeArgumentsStart )=> typeArguments )? ;
    public PsiCompatibleCeylonParser.memberReference_return memberReference() throws RecognitionException {
        PsiCompatibleCeylonParser.memberReference_return retval = new PsiCompatibleCeylonParser.memberReference_return();
        retval.start = input.LT(1);


        Identifier memberName265 =null;

        TypeArgumentList typeArguments266 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1766:5: ( memberName ( ( typeArgumentsStart )=> typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1766:7: memberName ( ( typeArgumentsStart )=> typeArguments )?
            {
            pushFollow(FOLLOW_memberName_in_memberReference11552);
            memberName265=memberName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = memberName265; }

            // /home/david/git/ceylon-spec/Ceylon.g:1768:7: ( ( typeArgumentsStart )=> typeArguments )?
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1769:9: ( typeArgumentsStart )=> typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_memberReference11592);
                    typeArguments266=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments266; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "memberReference"


    public static class typeReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "typeReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1775:1: typeReference returns [Identifier identifier, \n TypeArgumentList typeArgumentList] : typeName ( ( typeArgumentsStart )=> typeArguments )? ;
    public PsiCompatibleCeylonParser.typeReference_return typeReference() throws RecognitionException {
        PsiCompatibleCeylonParser.typeReference_return retval = new PsiCompatibleCeylonParser.typeReference_return();
        retval.start = input.LT(1);


        Identifier typeName267 =null;

        TypeArgumentList typeArguments268 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1777:5: ( typeName ( ( typeArgumentsStart )=> typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1777:7: typeName ( ( typeArgumentsStart )=> typeArguments )?
            {
            pushFollow(FOLLOW_typeName_in_typeReference11632);
            typeName267=typeName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = typeName267; }

            // /home/david/git/ceylon-spec/Ceylon.g:1779:7: ( ( typeArgumentsStart )=> typeArguments )?
            int alt158=2;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1780:9: ( typeArgumentsStart )=> typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_typeReference11673);
                    typeArguments268=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments268; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeReference"



    // $ANTLR start "typeArgumentsStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1789:1: typeArgumentsStart : SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP ) ;
    public void typeArgumentsStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1790:5: ( SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1790:7: SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP )
            {
            match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArgumentsStart11712); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1791:5: ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP )
            int alt159=3;
            switch ( input.LA(1) ) {
            case LBRACE:
            case LBRACKET:
            case UIDENTIFIER:
                {
                alt159=1;
                }
                break;
            case SMALLER_OP:
                {
                int LA159_2 = input.LA(2);

                if ( ((LA159_2 >= LBRACE && LA159_2 <= LBRACKET)||LA159_2==SMALLER_OP||LA159_2==UIDENTIFIER) ) {
                    alt159=1;
                }
                else if ( (LA159_2==EOF) ) {
                    alt159=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 2, input);

                    throw nvae;

                }
                }
                break;
            case LARGER_OP:
                {
                alt159=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }

            switch (alt159) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1792:7: type ( LARGER_OP | SMALLER_OP | COMMA )
                    {
                    pushFollow(FOLLOW_type_in_typeArgumentsStart11726);
                    type();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( input.LA(1)==COMMA||input.LA(1)==LARGER_OP||input.LA(1)==SMALLER_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1795:7: SMALLER_OP
                    {
                    match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArgumentsStart11754); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1797:7: LARGER_OP
                    {
                    match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeArgumentsStart11769); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "typeArgumentsStart"



    // $ANTLR start "indexOrIndexRange"
    // /home/david/git/ceylon-spec/Ceylon.g:1801:1: indexOrIndexRange returns [IndexExpression indexExpression] : LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET ;
    public IndexExpression indexOrIndexRange() throws RecognitionException {
        IndexExpression indexExpression = null;


        Token e1=null;
        Token e2=null;
        Token LBRACKET269=null;
        Token RANGE_OP270=null;
        Token SEGMENT_OP271=null;
        Token RBRACKET272=null;
        Expression i =null;

        Expression l =null;

        Expression u =null;

        Expression s =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1806:5: ( LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1806:7: LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET
            {
            LBRACKET269=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_indexOrIndexRange11817); if (state.failed) return indexExpression;

            if ( state.backtracking==0 ) { indexExpression = new IndexExpression(LBRACKET269); }

            // /home/david/git/ceylon-spec/Ceylon.g:1808:7: (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ELLIPSIS) ) {
                alt161=1;
            }
            else if ( (LA161_0==BACKTICK||LA161_0==CHAR_LITERAL||(LA161_0 >= DECREMENT_OP && LA161_0 <= DIFFERENCE_OP)||LA161_0==DYNAMIC||LA161_0==FLOAT_LITERAL||LA161_0==INCREMENT_OP||(LA161_0 >= LBRACE && LA161_0 <= LBRACKET)||LA161_0==LIDENTIFIER||LA161_0==LPAREN||LA161_0==NATURAL_LITERAL||LA161_0==OBJECT_DEFINITION||(LA161_0 >= OUTER && LA161_0 <= PACKAGE)||LA161_0==STRING_LITERAL||LA161_0==STRING_START||(LA161_0 >= SUM_OP && LA161_0 <= SUPER)||LA161_0==THIS||LA161_0==UIDENTIFIER||LA161_0==VERBATIM_STRING) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return indexExpression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1809:9: e1= ELLIPSIS i= index
                    {
                    e1=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_indexOrIndexRange11845); if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { indexExpression.setEndToken(e1); }

                    pushFollow(FOLLOW_index_in_indexOrIndexRange11867);
                    i=index();

                    state._fsp--;
                    if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { ElementRange er0 = new ElementRange(null);
                              er0.setUpperBound(i);
                              indexExpression.setElementOrRange(er0); 
                              indexExpression.setEndToken(null); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1817:9: l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )?
                    {
                    pushFollow(FOLLOW_index_in_indexOrIndexRange11897);
                    l=index();

                    state._fsp--;
                    if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { Element e = new Element(null);
                              e.setExpression(l); 
                              indexExpression.setElementOrRange(e); }

                    // /home/david/git/ceylon-spec/Ceylon.g:1821:9: (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )?
                    int alt160=4;
                    switch ( input.LA(1) ) {
                        case ELLIPSIS:
                            {
                            alt160=1;
                            }
                            break;
                        case RANGE_OP:
                            {
                            alt160=2;
                            }
                            break;
                        case SEGMENT_OP:
                            {
                            alt160=3;
                            }
                            break;
                    }

                    switch (alt160) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1822:11: e2= ELLIPSIS
                            {
                            e2=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_indexOrIndexRange11931); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(e2);
                                        ElementRange er1 = new ElementRange(null);
                                        er1.setLowerBound(l);
                                        indexExpression.setElementOrRange(er1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1828:11: RANGE_OP u= index
                            {
                            RANGE_OP270=(Token)match(input,RANGE_OP,FOLLOW_RANGE_OP_in_indexOrIndexRange11966); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(RANGE_OP270); }

                            pushFollow(FOLLOW_index_in_indexOrIndexRange11993);
                            u=index();

                            state._fsp--;
                            if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { ElementRange er2 = new ElementRange(null);
                                        er2.setLowerBound(l); 
                                        er2.setUpperBound(u); 
                                        indexExpression.setElementOrRange(er2);
                                        indexExpression.setEndToken(null); }

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1836:11: SEGMENT_OP s= index
                            {
                            SEGMENT_OP271=(Token)match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_indexOrIndexRange12018); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(SEGMENT_OP271); }

                            pushFollow(FOLLOW_index_in_indexOrIndexRange12044);
                            s=index();

                            state._fsp--;
                            if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { ElementRange er3 = new ElementRange(null);
                                        er3.setLowerBound(l); 
                                        er3.setLength(s); 
                                        indexExpression.setElementOrRange(er3);
                                        indexExpression.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;

            }


            RBRACKET272=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_indexOrIndexRange12084); if (state.failed) return indexExpression;

            if ( state.backtracking==0 ) { indexExpression.setEndToken(RBRACKET272); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return indexExpression;
    }
    // $ANTLR end "indexOrIndexRange"



    // $ANTLR start "index"
    // /home/david/git/ceylon-spec/Ceylon.g:1850:1: index returns [Expression expression] : additiveExpression ;
    public Expression index() throws RecognitionException {
        Expression expression = null;


        Term additiveExpression273 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1851:5: ( additiveExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1851:7: additiveExpression
            {
            pushFollow(FOLLOW_additiveExpression_in_index12113);
            additiveExpression273=additiveExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression = new Expression(null);
                    expression.setTerm(additiveExpression273); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "index"



    // $ANTLR start "namedArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:1856:1: namedArguments returns [NamedArgumentList namedArgumentList] : LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE ;
    public NamedArgumentList namedArguments() throws RecognitionException {
        NamedArgumentList namedArgumentList = null;


        Token LBRACE274=null;
        Token RBRACE278=null;
        NamedArgument namedArgument275 =null;

        SpecifiedArgument anonymousArgument276 =null;

        SequencedArgument sequencedArgument277 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1857:5: ( LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:1857:7: LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE
            {
            LBRACE274=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_namedArguments12143); if (state.failed) return namedArgumentList;

            if ( state.backtracking==0 ) { namedArgumentList = new NamedArgumentList(LBRACE274); }

            // /home/david/git/ceylon-spec/Ceylon.g:1859:7: ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )*
            loop162:
            do {
                int alt162=3;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMPILER_ANNOTATION) ) {
                    int LA162_1 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }


                }
                else if ( (LA162_0==IF_CLAUSE) ) {
                    int LA162_3 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==FUNCTION_MODIFIER) ) {
                    int LA162_4 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==VOID_MODIFIER) ) {
                    int LA162_5 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==LPAREN) ) {
                    int LA162_6 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==LET) ) {
                    int LA162_7 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==SWITCH_CLAUSE) ) {
                    int LA162_8 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==NOT_OP) ) {
                    int LA162_9 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==DIFFERENCE_OP) ) {
                    int LA162_10 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==SUM_OP) ) {
                    int LA162_11 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==DECREMENT_OP) ) {
                    int LA162_12 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==INCREMENT_OP) ) {
                    int LA162_13 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==NATURAL_LITERAL) ) {
                    int LA162_14 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==FLOAT_LITERAL) ) {
                    int LA162_15 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==CHAR_LITERAL) ) {
                    int LA162_16 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==STRING_LITERAL) ) {
                    int LA162_17 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==VERBATIM_STRING) ) {
                    int LA162_18 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==STRING_START) ) {
                    int LA162_19 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==BACKTICK) ) {
                    int LA162_20 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==LBRACE) ) {
                    int LA162_21 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==LBRACKET) ) {
                    int LA162_22 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==DYNAMIC) ) {
                    int LA162_23 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==OBJECT_DEFINITION) ) {
                    int LA162_24 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==THIS) ) {
                    int LA162_25 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==SUPER) ) {
                    int LA162_26 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==OUTER) ) {
                    int LA162_27 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==PACKAGE) ) {
                    int LA162_28 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==LIDENTIFIER) ) {
                    int LA162_29 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==UIDENTIFIER) ) {
                    int LA162_30 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt162=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt162=2;
                    }


                }
                else if ( (LA162_0==SMALLER_OP) && (synpred23_Ceylon())) {
                    alt162=1;
                }
                else if ( (LA162_0==VALUE_MODIFIER) && (synpred23_Ceylon())) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1861:9: ( namedArgumentStart )=> namedArgument
            	    {
            	    pushFollow(FOLLOW_namedArgument_in_namedArguments12195);
            	    namedArgument275=namedArgument();

            	    state._fsp--;
            	    if (state.failed) return namedArgumentList;

            	    if ( state.backtracking==0 ) { if (namedArgument275!=null) 
            	                  namedArgumentList.addNamedArgument(namedArgument275); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1865:9: ( anonymousArgument )=> anonymousArgument
            	    {
            	    pushFollow(FOLLOW_anonymousArgument_in_namedArguments12229);
            	    anonymousArgument276=anonymousArgument();

            	    state._fsp--;
            	    if (state.failed) return namedArgumentList;

            	    if ( state.backtracking==0 ) { if (anonymousArgument276!=null) 
            	                  namedArgumentList.addNamedArgument(anonymousArgument276); }

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1870:7: ( sequencedArgument )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==ALIAS||(LA163_0 >= ASSERT && LA163_0 <= ASSIGN)||(LA163_0 >= BACKTICK && LA163_0 <= BREAK)||(LA163_0 >= CHAR_LITERAL && LA163_0 <= CLASS_DEFINITION)||LA163_0==COMPILER_ANNOTATION||LA163_0==CONTINUE||(LA163_0 >= DECREMENT_OP && LA163_0 <= DIFFERENCE_OP)||LA163_0==DYNAMIC||(LA163_0 >= FLOAT_LITERAL && LA163_0 <= FUNCTION_MODIFIER)||(LA163_0 >= IF_CLAUSE && LA163_0 <= INTERFACE_DEFINITION)||LA163_0==IN_OP||(LA163_0 >= LBRACE && LA163_0 <= LIDENTIFIER)||LA163_0==LPAREN||LA163_0==MODULE||(LA163_0 >= NATURAL_LITERAL && LA163_0 <= NEW)||(LA163_0 >= NOT_OP && LA163_0 <= OBJECT_DEFINITION)||(LA163_0 >= OUT && LA163_0 <= PACKAGE)||LA163_0==PRODUCT_OP||LA163_0==RETURN||(LA163_0 >= SEMICOLON && LA163_0 <= SMALLER_OP)||LA163_0==STRING_LITERAL||LA163_0==STRING_START||(LA163_0 >= SUM_OP && LA163_0 <= SWITCH_CLAUSE)||(LA163_0 >= THIS && LA163_0 <= UIDENTIFIER)||(LA163_0 >= VALUE_MODIFIER && LA163_0 <= WHILE_CLAUSE)) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1871:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_namedArguments12267);
                    sequencedArgument277=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return namedArgumentList;

                    if ( state.backtracking==0 ) { namedArgumentList.setSequencedArgument(sequencedArgument277); }

                    }
                    break;

            }


            RBRACE278=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_namedArguments12294); if (state.failed) return namedArgumentList;

            if ( state.backtracking==0 ) { namedArgumentList.setEndToken(RBRACE278); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgumentList;
    }
    // $ANTLR end "namedArguments"



    // $ANTLR start "sequencedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1878:1: sequencedArgument returns [SequencedArgument sequencedArgument] : compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )* ;
    public SequencedArgument sequencedArgument() throws RecognitionException {
        SequencedArgument sequencedArgument = null;


        Token c=null;
        Comprehension c1 =null;

        ListedArgument pa1 =null;

        SpreadArgument sa1 =null;

        Comprehension c2 =null;

        ListedArgument pa2 =null;

        SpreadArgument sa2 =null;

        List<CompilerAnnotation> compilerAnnotations279 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1879:5: ( compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1879:7: compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )*
            {
            pushFollow(FOLLOW_compilerAnnotations_in_sequencedArgument12323);
            compilerAnnotations279=compilerAnnotations();

            state._fsp--;
            if (state.failed) return sequencedArgument;

            if ( state.backtracking==0 ) { sequencedArgument = new SequencedArgument(null);
                    sequencedArgument.getCompilerAnnotations().addAll(compilerAnnotations279); }

            // /home/david/git/ceylon-spec/Ceylon.g:1882:9: ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument )
            int alt164=3;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==FOR_CLAUSE) && (synpred25_Ceylon())) {
                alt164=1;
            }
            else if ( (LA164_0==IF_CLAUSE) ) {
                int LA164_2 = input.LA(2);

                if ( (synpred25_Ceylon()) ) {
                    alt164=1;
                }
                else if ( (true) ) {
                    alt164=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA164_0==BACKTICK||LA164_0==CHAR_LITERAL||(LA164_0 >= DECREMENT_OP && LA164_0 <= DIFFERENCE_OP)||LA164_0==DYNAMIC||LA164_0==FLOAT_LITERAL||LA164_0==FUNCTION_MODIFIER||LA164_0==INCREMENT_OP||(LA164_0 >= LBRACE && LA164_0 <= LIDENTIFIER)||LA164_0==LPAREN||LA164_0==NATURAL_LITERAL||(LA164_0 >= NOT_OP && LA164_0 <= OBJECT_DEFINITION)||(LA164_0 >= OUTER && LA164_0 <= PACKAGE)||LA164_0==STRING_LITERAL||LA164_0==STRING_START||(LA164_0 >= SUM_OP && LA164_0 <= SWITCH_CLAUSE)||LA164_0==THIS||LA164_0==UIDENTIFIER||(LA164_0 >= VERBATIM_STRING && LA164_0 <= VOID_MODIFIER)) ) {
                alt164=2;
            }
            else if ( (LA164_0==PRODUCT_OP) ) {
                alt164=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;

            }
            switch (alt164) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1883:11: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension
                    {
                    pushFollow(FOLLOW_comprehension_in_sequencedArgument12379);
                    c1=comprehension();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (c1!=null)
                                    sequencedArgument.addPositionalArgument(c1); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1888:11: pa1= positionalArgument
                    {
                    pushFollow(FOLLOW_positionalArgument_in_sequencedArgument12416);
                    pa1=positionalArgument();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (pa1!=null)
                                    sequencedArgument.addPositionalArgument(pa1); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1892:11: sa1= spreadArgument
                    {
                    pushFollow(FOLLOW_spreadArgument_in_sequencedArgument12452);
                    sa1=spreadArgument();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (sa1!=null)
                                    sequencedArgument.addPositionalArgument(sa1); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1896:9: (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1897:11: c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |)
            	    {
            	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_sequencedArgument12498); if (state.failed) return sequencedArgument;

            	    if ( state.backtracking==0 ) { sequencedArgument.setEndToken(c); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:1899:11: ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |)
            	    int alt165=4;
            	    int LA165_0 = input.LA(1);

            	    if ( (LA165_0==FOR_CLAUSE) && (synpred26_Ceylon())) {
            	        alt165=1;
            	    }
            	    else if ( (LA165_0==IF_CLAUSE) ) {
            	        int LA165_2 = input.LA(2);

            	        if ( (synpred26_Ceylon()) ) {
            	            alt165=1;
            	        }
            	        else if ( (true) ) {
            	            alt165=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 165, 2, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA165_0==BACKTICK||LA165_0==CHAR_LITERAL||(LA165_0 >= DECREMENT_OP && LA165_0 <= DIFFERENCE_OP)||LA165_0==DYNAMIC||LA165_0==FLOAT_LITERAL||LA165_0==FUNCTION_MODIFIER||LA165_0==INCREMENT_OP||(LA165_0 >= LBRACE && LA165_0 <= LIDENTIFIER)||LA165_0==LPAREN||LA165_0==NATURAL_LITERAL||(LA165_0 >= NOT_OP && LA165_0 <= OBJECT_DEFINITION)||(LA165_0 >= OUTER && LA165_0 <= PACKAGE)||LA165_0==STRING_LITERAL||LA165_0==STRING_START||(LA165_0 >= SUM_OP && LA165_0 <= SWITCH_CLAUSE)||LA165_0==THIS||LA165_0==UIDENTIFIER||(LA165_0 >= VERBATIM_STRING && LA165_0 <= VOID_MODIFIER)) ) {
            	        alt165=2;
            	    }
            	    else if ( (LA165_0==PRODUCT_OP) ) {
            	        alt165=3;
            	    }
            	    else if ( (LA165_0==COMMA||(LA165_0 >= RBRACE && LA165_0 <= RBRACKET)||LA165_0==RPAREN) ) {
            	        alt165=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 165, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt165) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1900:13: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension
            	            {
            	            pushFollow(FOLLOW_comprehension_in_sequencedArgument12564);
            	            c2=comprehension();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (c2!=null) {
            	                              sequencedArgument.addPositionalArgument(c2);
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1906:13: pa2= positionalArgument
            	            {
            	            pushFollow(FOLLOW_positionalArgument_in_sequencedArgument12607);
            	            pa2=positionalArgument();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (pa2!=null) {
            	                              sequencedArgument.addPositionalArgument(pa2); 
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1911:13: sa2= spreadArgument
            	            {
            	            pushFollow(FOLLOW_spreadArgument_in_sequencedArgument12650);
            	            sa2=spreadArgument();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (sa2!=null) {
            	                              sequencedArgument.addPositionalArgument(sa2); 
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 4 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1916:13: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return sequencedArgument;
    }
    // $ANTLR end "sequencedArgument"



    // $ANTLR start "namedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1922:1: namedArgument returns [NamedArgument namedArgument] : compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration ) ;
    public NamedArgument namedArgument() throws RecognitionException {
        NamedArgument namedArgument = null;


        SpecifiedArgument namedSpecifiedArgument280 =null;

        NamedArgument namedArgumentDeclaration281 =null;

        List<CompilerAnnotation> compilerAnnotations282 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1923:5: ( compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1923:7: compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_namedArgument12735);
            compilerAnnotations282=compilerAnnotations();

            state._fsp--;
            if (state.failed) return namedArgument;

            // /home/david/git/ceylon-spec/Ceylon.g:1924:5: ( namedSpecifiedArgument | namedArgumentDeclaration )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==LIDENTIFIER) ) {
                int LA167_1 = input.LA(2);

                if ( (LA167_1==SEMICOLON||LA167_1==SPECIFY) ) {
                    alt167=1;
                }
                else if ( (LA167_1==COMPUTE||LA167_1==LPAREN) ) {
                    alt167=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return namedArgument;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA167_0==DYNAMIC||LA167_0==FUNCTION_MODIFIER||(LA167_0 >= LBRACE && LA167_0 <= LBRACKET)||LA167_0==OBJECT_DEFINITION||LA167_0==SMALLER_OP||LA167_0==UIDENTIFIER||LA167_0==VALUE_MODIFIER||LA167_0==VOID_MODIFIER) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return namedArgument;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }
            switch (alt167) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1925:7: namedSpecifiedArgument
                    {
                    pushFollow(FOLLOW_namedSpecifiedArgument_in_namedArgument12752);
                    namedSpecifiedArgument280=namedSpecifiedArgument();

                    state._fsp--;
                    if (state.failed) return namedArgument;

                    if ( state.backtracking==0 ) { namedArgument = namedSpecifiedArgument280; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1928:7: namedArgumentDeclaration
                    {
                    pushFollow(FOLLOW_namedArgumentDeclaration_in_namedArgument12774);
                    namedArgumentDeclaration281=namedArgumentDeclaration();

                    state._fsp--;
                    if (state.failed) return namedArgument;

                    if ( state.backtracking==0 ) { namedArgument = namedArgumentDeclaration281; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (namedArgument!=null)
                      namedArgument.getCompilerAnnotations().addAll(compilerAnnotations282); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgument;
    }
    // $ANTLR end "namedArgument"



    // $ANTLR start "namedSpecifiedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1935:1: namedSpecifiedArgument returns [SpecifiedArgument specifiedArgument] : memberName ( specifier )? SEMICOLON ;
    public SpecifiedArgument namedSpecifiedArgument() throws RecognitionException {
        SpecifiedArgument specifiedArgument = null;


        Token SEMICOLON285=null;
        Identifier memberName283 =null;

        SpecifierExpression specifier284 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1936:5: ( memberName ( specifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1936:7: memberName ( specifier )? SEMICOLON
            {
            pushFollow(FOLLOW_memberName_in_namedSpecifiedArgument12815);
            memberName283=memberName();

            state._fsp--;
            if (state.failed) return specifiedArgument;

            if ( state.backtracking==0 ) { specifiedArgument = new SpecifiedArgument(null); 
                    specifiedArgument.setIdentifier(memberName283); }

            // /home/david/git/ceylon-spec/Ceylon.g:1939:7: ( specifier )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==SPECIFY) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1940:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_namedSpecifiedArgument12841);
                    specifier284=specifier();

                    state._fsp--;
                    if (state.failed) return specifiedArgument;

                    if ( state.backtracking==0 ) { specifiedArgument.setSpecifierExpression(specifier284); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON285=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_namedSpecifiedArgument12877); if (state.failed) return specifiedArgument;

            if ( state.backtracking==0 ) { specifiedArgument.setEndToken(SEMICOLON285); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifiedArgument;
    }
    // $ANTLR end "namedSpecifiedArgument"



    // $ANTLR start "anonymousArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1948:1: anonymousArgument returns [SpecifiedArgument namedArgument] : functionOrExpression SEMICOLON ;
    public SpecifiedArgument anonymousArgument() throws RecognitionException {
        SpecifiedArgument namedArgument = null;


        Token SEMICOLON287=null;
        Expression functionOrExpression286 =null;


         namedArgument = new SpecifiedArgument(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1950:5: ( functionOrExpression SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1950:7: functionOrExpression SEMICOLON
            {
            pushFollow(FOLLOW_functionOrExpression_in_anonymousArgument12915);
            functionOrExpression286=functionOrExpression();

            state._fsp--;
            if (state.failed) return namedArgument;

            if ( state.backtracking==0 ) { SpecifierExpression se = new SpecifierExpression(null);
                   se.setExpression(functionOrExpression286);
                   namedArgument.setSpecifierExpression(se); }

            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON287=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_anonymousArgument12941); if (state.failed) return namedArgument;

            if ( state.backtracking==0 ) { namedArgument.setEndToken(SEMICOLON287); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgument;
    }
    // $ANTLR end "anonymousArgument"



    // $ANTLR start "objectArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1959:1: objectArgument returns [ObjectArgument declaration] : OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) ;
    public ObjectArgument objectArgument() throws RecognitionException {
        ObjectArgument declaration = null;


        Token OBJECT_DEFINITION288=null;
        Token SEMICOLON293=null;
        Identifier memberNameDeclaration289 =null;

        ExtendedType extendedType290 =null;

        SatisfiedTypes satisfiedTypes291 =null;

        ClassBody classBody292 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1960:5: ( OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1960:7: OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON )
            {
            OBJECT_DEFINITION288=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectArgument12970); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new ObjectArgument(OBJECT_DEFINITION288); 
                    declaration.setType(new ValueModifier(null)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_objectArgument12987);
            memberNameDeclaration289=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration289); }

            // /home/david/git/ceylon-spec/Ceylon.g:1965:7: ( extendedType )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==EXTENDS) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1966:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectArgument13014);
                    extendedType290=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setExtendedType(extendedType290); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1969:7: ( satisfiedTypes )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==SATISFIES) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1970:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectArgument13053);
                    satisfiedTypes291=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setSatisfiedTypes(satisfiedTypes291); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1973:7: ( classBody | SEMICOLON )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==LBRACE) ) {
                alt171=1;
            }
            else if ( (LA171_0==SEMICOLON) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }
            switch (alt171) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1974:9: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_objectArgument13091);
                    classBody292=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setClassBody(classBody292); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1976:9: SEMICOLON
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LBRACE, input)); }

                    SEMICOLON293=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_objectArgument13121); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON293); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "objectArgument"



    // $ANTLR start "voidOrInferredMethodArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1983:1: voidOrInferredMethodArgument returns [MethodArgument declaration] : ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON ) ;
    public MethodArgument voidOrInferredMethodArgument() throws RecognitionException {
        MethodArgument declaration = null;


        Token VOID_MODIFIER294=null;
        Token FUNCTION_MODIFIER295=null;
        Token SEMICOLON300=null;
        Identifier memberNameDeclaration296 =null;

        ParameterList parameters297 =null;

        Block block298 =null;

        SpecifierExpression functionSpecifier299 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1984:5: ( ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1984:7: ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON )
            {
            if ( state.backtracking==0 ) { declaration =new MethodArgument(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:1985:7: ( VOID_MODIFIER | FUNCTION_MODIFIER )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==VOID_MODIFIER) ) {
                alt172=1;
            }
            else if ( (LA172_0==FUNCTION_MODIFIER) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1986:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER294=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodArgument13178); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setType(new VoidModifier(VOID_MODIFIER294)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1989:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER295=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodArgument13206); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setType(new FunctionModifier(FUNCTION_MODIFIER295)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_voidOrInferredMethodArgument13233);
            memberNameDeclaration296=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration296); }

            // /home/david/git/ceylon-spec/Ceylon.g:1994:7: ( parameters )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==LPAREN) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1995:9: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_voidOrInferredMethodArgument13260);
            	    parameters297=parameters();

            	    state._fsp--;
            	    if (state.failed) return declaration;

            	    if ( state.backtracking==0 ) { declaration.addParameterList(parameters297); }

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1998:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==LBRACE) ) {
                alt175=1;
            }
            else if ( (LA175_0==COMPUTE||LA175_0==SEMICOLON||LA175_0==SPECIFY) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }
            switch (alt175) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1999:9: block
                    {
                    pushFollow(FOLLOW_block_in_voidOrInferredMethodArgument13297);
                    block298=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block298); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2002:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2002:9: ( functionSpecifier )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==COMPUTE||LA174_0==SPECIFY) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2003:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_voidOrInferredMethodArgument13338);
                            functionSpecifier299=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(functionSpecifier299); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON300=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidOrInferredMethodArgument13381); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON300); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "voidOrInferredMethodArgument"



    // $ANTLR start "inferredGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2013:1: inferredGetterArgument returns [AttributeArgument declaration] : VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON ) ;
    public AttributeArgument inferredGetterArgument() throws RecognitionException {
        AttributeArgument declaration = null;


        Token VALUE_MODIFIER301=null;
        Token SEMICOLON306=null;
        Identifier memberNameDeclaration302 =null;

        Block block303 =null;

        SpecifierExpression specifier304 =null;

        SpecifierExpression lazySpecifier305 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2014:5: ( VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2014:7: VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON )
            {
            if ( state.backtracking==0 ) { declaration =new AttributeArgument(null); }

            VALUE_MODIFIER301=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_inferredGetterArgument13438); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setType(new ValueModifier(VALUE_MODIFIER301)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_inferredGetterArgument13455);
            memberNameDeclaration302=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration302); }

            // /home/david/git/ceylon-spec/Ceylon.g:2019:7: ( block | ( specifier | lazySpecifier )? SEMICOLON )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==LBRACE) ) {
                alt177=1;
            }
            else if ( (LA177_0==COMPUTE||LA177_0==SEMICOLON||LA177_0==SPECIFY) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }
            switch (alt177) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2020:9: block
                    {
                    pushFollow(FOLLOW_block_in_inferredGetterArgument13482);
                    block303=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block303); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2023:9: ( specifier | lazySpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2023:9: ( specifier | lazySpecifier )?
                    int alt176=3;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==SPECIFY) ) {
                        alt176=1;
                    }
                    else if ( (LA176_0==COMPUTE) ) {
                        alt176=2;
                    }
                    switch (alt176) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2024:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_inferredGetterArgument13523);
                            specifier304=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(specifier304); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2027:11: lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_inferredGetterArgument13559);
                            lazySpecifier305=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(lazySpecifier305); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON306=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inferredGetterArgument13603); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON306); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "inferredGetterArgument"



    // $ANTLR start "typedMethodOrGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2037:1: typedMethodOrGetterArgument returns [TypedArgument declaration] : ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) ) ;
    public TypedArgument typedMethodOrGetterArgument() throws RecognitionException {
        TypedArgument declaration = null;


        Token s1=null;
        Token s2=null;
        Token DYNAMIC308=null;
        Block b1 =null;

        Block b2 =null;

        StaticType type307 =null;

        Identifier memberNameDeclaration309 =null;

        ParameterList parameters310 =null;

        SpecifierExpression functionSpecifier311 =null;

        SpecifierExpression specifier312 =null;

        SpecifierExpression lazySpecifier313 =null;


         MethodArgument marg = new MethodArgument(null);
                    AttributeArgument aarg = new AttributeArgument(null); 
                    declaration =aarg; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2041:5: ( ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2041:7: ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2041:7: ( type | DYNAMIC )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( ((LA178_0 >= LBRACE && LA178_0 <= LBRACKET)||LA178_0==SMALLER_OP||LA178_0==UIDENTIFIER) ) {
                alt178=1;
            }
            else if ( (LA178_0==DYNAMIC) ) {
                alt178=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;

            }
            switch (alt178) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2042:9: type
                    {
                    pushFollow(FOLLOW_type_in_typedMethodOrGetterArgument13671);
                    type307=type();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { marg.setType(type307);
                              aarg.setType(type307); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2046:9: DYNAMIC
                    {
                    DYNAMIC308=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_typedMethodOrGetterArgument13700); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { DynamicModifier dm = new DynamicModifier(DYNAMIC308);
                              marg.setType(dm);
                              aarg.setType(dm); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_typedMethodOrGetterArgument13726);
            memberNameDeclaration309=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { marg.setIdentifier(memberNameDeclaration309);
                    aarg.setIdentifier(memberNameDeclaration309); }

            // /home/david/git/ceylon-spec/Ceylon.g:2054:7: ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LPAREN) ) {
                alt184=1;
            }
            else if ( (LA184_0==COMPUTE||LA184_0==LBRACE||LA184_0==SEMICOLON||LA184_0==SPECIFY) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;

            }
            switch (alt184) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2055:9: ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON )
                    {
                    if ( state.backtracking==0 ) { declaration = marg; }

                    // /home/david/git/ceylon-spec/Ceylon.g:2056:9: ( parameters )+
                    int cnt179=0;
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==LPAREN) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2057:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_typedMethodOrGetterArgument13774);
                    	    parameters310=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { marg.addParameterList(parameters310); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt179 >= 1 ) break loop179;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(179, input);
                                throw eee;
                        }
                        cnt179++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:2060:9: (b1= block | ( functionSpecifier )? s1= SEMICOLON )
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==LBRACE) ) {
                        alt181=1;
                    }
                    else if ( (LA181_0==COMPUTE||LA181_0==SEMICOLON||LA181_0==SPECIFY) ) {
                        alt181=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 0, input);

                        throw nvae;

                    }
                    switch (alt181) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2061:11: b1= block
                            {
                            pushFollow(FOLLOW_block_in_typedMethodOrGetterArgument13821);
                            b1=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { marg.setBlock(b1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2064:11: ( functionSpecifier )? s1= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:2064:11: ( functionSpecifier )?
                            int alt180=2;
                            int LA180_0 = input.LA(1);

                            if ( (LA180_0==COMPUTE||LA180_0==SPECIFY) ) {
                                alt180=1;
                            }
                            switch (alt180) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2065:13: functionSpecifier
                                    {
                                    pushFollow(FOLLOW_functionSpecifier_in_typedMethodOrGetterArgument13870);
                                    functionSpecifier311=functionSpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { marg.setSpecifierExpression(functionSpecifier311); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s1=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument13923); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { expecting=-1; }

                            if ( state.backtracking==0 ) { declaration.setEndToken(s1); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2074:9: (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON )
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2074:9: (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON )
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==LBRACE) ) {
                        alt183=1;
                    }
                    else if ( (LA183_0==COMPUTE||LA183_0==SEMICOLON||LA183_0==SPECIFY) ) {
                        alt183=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);

                        throw nvae;

                    }
                    switch (alt183) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2075:11: b2= block
                            {
                            pushFollow(FOLLOW_block_in_typedMethodOrGetterArgument13989);
                            b2=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { aarg.setBlock(b2); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2078:11: ( specifier | lazySpecifier )? s2= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:2078:11: ( specifier | lazySpecifier )?
                            int alt182=3;
                            int LA182_0 = input.LA(1);

                            if ( (LA182_0==SPECIFY) ) {
                                alt182=1;
                            }
                            else if ( (LA182_0==COMPUTE) ) {
                                alt182=2;
                            }
                            switch (alt182) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2079:13: specifier
                                    {
                                    pushFollow(FOLLOW_specifier_in_typedMethodOrGetterArgument14038);
                                    specifier312=specifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(specifier312); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2082:13: lazySpecifier
                                    {
                                    pushFollow(FOLLOW_lazySpecifier_in_typedMethodOrGetterArgument14080);
                                    lazySpecifier313=lazySpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(lazySpecifier313); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s2=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument14134); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { expecting=-1; }

                            if ( state.backtracking==0 ) { declaration.setEndToken(s2); }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "typedMethodOrGetterArgument"



    // $ANTLR start "untypedMethodOrGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2093:1: untypedMethodOrGetterArgument returns [TypedArgument declaration] : memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON ;
    public TypedArgument untypedMethodOrGetterArgument() throws RecognitionException {
        TypedArgument declaration = null;


        Token SEMICOLON318=null;
        Identifier memberName314 =null;

        ParameterList parameters315 =null;

        SpecifierExpression functionSpecifier316 =null;

        SpecifierExpression lazySpecifier317 =null;


         MethodArgument marg = new MethodArgument(null);
                    marg.setType(new FunctionModifier(null));
                    AttributeArgument aarg = new AttributeArgument(null);
                    aarg.setType(new ValueModifier(null));
                    declaration =aarg; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2099:5: ( memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:2099:7: memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON
            {
            pushFollow(FOLLOW_memberName_in_untypedMethodOrGetterArgument14206);
            memberName314=memberName();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { marg.setIdentifier(memberName314);
                    aarg.setIdentifier(memberName314); }

            // /home/david/git/ceylon-spec/Ceylon.g:2102:7: ( ( parameters )+ ( functionSpecifier ) | lazySpecifier )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==LPAREN) ) {
                alt186=1;
            }
            else if ( (LA186_0==COMPUTE) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2103:9: ( parameters )+ ( functionSpecifier )
                    {
                    if ( state.backtracking==0 ) { declaration = marg; }

                    // /home/david/git/ceylon-spec/Ceylon.g:2104:9: ( parameters )+
                    int cnt185=0;
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==LPAREN) ) {
                            alt185=1;
                        }


                        switch (alt185) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2105:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_untypedMethodOrGetterArgument14255);
                    	    parameters315=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { marg.addParameterList(parameters315); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt185 >= 1 ) break loop185;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(185, input);
                                throw eee;
                        }
                        cnt185++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:2108:9: ( functionSpecifier )
                    // /home/david/git/ceylon-spec/Ceylon.g:2109:11: functionSpecifier
                    {
                    pushFollow(FOLLOW_functionSpecifier_in_untypedMethodOrGetterArgument14300);
                    functionSpecifier316=functionSpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { marg.setSpecifierExpression(functionSpecifier316); }

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2117:11: lazySpecifier
                    {
                    pushFollow(FOLLOW_lazySpecifier_in_untypedMethodOrGetterArgument14378);
                    lazySpecifier317=lazySpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(lazySpecifier317); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON318=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_untypedMethodOrGetterArgument14424); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { expecting=-1; }

            if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON318); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "untypedMethodOrGetterArgument"



    // $ANTLR start "namedArgumentDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:2127:1: namedArgumentDeclaration returns [NamedArgument declaration] : ( objectArgument | typedMethodOrGetterArgument | voidOrInferredMethodArgument | inferredGetterArgument | untypedMethodOrGetterArgument );
    public NamedArgument namedArgumentDeclaration() throws RecognitionException {
        NamedArgument declaration = null;


        ObjectArgument objectArgument319 =null;

        TypedArgument typedMethodOrGetterArgument320 =null;

        MethodArgument voidOrInferredMethodArgument321 =null;

        AttributeArgument inferredGetterArgument322 =null;

        TypedArgument untypedMethodOrGetterArgument323 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2128:5: ( objectArgument | typedMethodOrGetterArgument | voidOrInferredMethodArgument | inferredGetterArgument | untypedMethodOrGetterArgument )
            int alt187=5;
            switch ( input.LA(1) ) {
            case OBJECT_DEFINITION:
                {
                alt187=1;
                }
                break;
            case DYNAMIC:
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt187=2;
                }
                break;
            case FUNCTION_MODIFIER:
            case VOID_MODIFIER:
                {
                alt187=3;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt187=4;
                }
                break;
            case LIDENTIFIER:
                {
                alt187=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }

            switch (alt187) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2128:7: objectArgument
                    {
                    pushFollow(FOLLOW_objectArgument_in_namedArgumentDeclaration14461);
                    objectArgument319=objectArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =objectArgument319; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2130:7: typedMethodOrGetterArgument
                    {
                    pushFollow(FOLLOW_typedMethodOrGetterArgument_in_namedArgumentDeclaration14477);
                    typedMethodOrGetterArgument320=typedMethodOrGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =typedMethodOrGetterArgument320; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2132:7: voidOrInferredMethodArgument
                    {
                    pushFollow(FOLLOW_voidOrInferredMethodArgument_in_namedArgumentDeclaration14493);
                    voidOrInferredMethodArgument321=voidOrInferredMethodArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =voidOrInferredMethodArgument321; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2134:7: inferredGetterArgument
                    {
                    pushFollow(FOLLOW_inferredGetterArgument_in_namedArgumentDeclaration14509);
                    inferredGetterArgument322=inferredGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =inferredGetterArgument322; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2136:7: untypedMethodOrGetterArgument
                    {
                    pushFollow(FOLLOW_untypedMethodOrGetterArgument_in_namedArgumentDeclaration14525);
                    untypedMethodOrGetterArgument323=untypedMethodOrGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =untypedMethodOrGetterArgument323; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "namedArgumentDeclaration"



    // $ANTLR start "namedArgumentStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2143:1: namedArgumentStart : compilerAnnotations ( specificationStart | declarationStart ) ;
    public void namedArgumentStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2144:5: ( compilerAnnotations ( specificationStart | declarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2144:7: compilerAnnotations ( specificationStart | declarationStart )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_namedArgumentStart14553);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2145:7: ( specificationStart | declarationStart )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==LIDENTIFIER) ) {
                alt188=1;
            }
            else if ( (LA188_0==ALIAS||LA188_0==ASSIGN||LA188_0==CLASS_DEFINITION||LA188_0==DYNAMIC||LA188_0==FUNCTION_MODIFIER||LA188_0==INTERFACE_DEFINITION||(LA188_0 >= LBRACE && LA188_0 <= LBRACKET)||LA188_0==NEW||LA188_0==OBJECT_DEFINITION||LA188_0==SMALLER_OP||LA188_0==UIDENTIFIER||LA188_0==VALUE_MODIFIER||LA188_0==VOID_MODIFIER) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2145:8: specificationStart
                    {
                    pushFollow(FOLLOW_specificationStart_in_namedArgumentStart14563);
                    specificationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2145:29: declarationStart
                    {
                    pushFollow(FOLLOW_declarationStart_in_namedArgumentStart14567);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "namedArgumentStart"



    // $ANTLR start "namedAnnotationArgumentsStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2148:1: namedAnnotationArgumentsStart : LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE ) ;
    public void namedAnnotationArgumentsStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2149:5: ( LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2149:7: LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE )
            {
            match(input,LBRACE,FOLLOW_LBRACE_in_namedAnnotationArgumentsStart14585); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2149:14: ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE )
            int alt189=3;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==COMPILER_ANNOTATION) ) {
                int LA189_1 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==LIDENTIFIER) ) {
                int LA189_2 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==VALUE_MODIFIER) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==FUNCTION_MODIFIER) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==VOID_MODIFIER) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==ASSIGN) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==INTERFACE_DEFINITION) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==CLASS_DEFINITION) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==OBJECT_DEFINITION) ) {
                int LA189_9 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==NEW) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==ALIAS) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==UIDENTIFIER) ) {
                int LA189_12 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==SMALLER_OP) && (synpred27_Ceylon())) {
                alt189=1;
            }
            else if ( (LA189_0==LBRACKET) ) {
                int LA189_14 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==LBRACE) ) {
                int LA189_15 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==DYNAMIC) ) {
                int LA189_16 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==BACKTICK||LA189_0==CHAR_LITERAL||(LA189_0 >= DECREMENT_OP && LA189_0 <= DIFFERENCE_OP)||LA189_0==FLOAT_LITERAL||LA189_0==INCREMENT_OP||LA189_0==LPAREN||LA189_0==NATURAL_LITERAL||LA189_0==NOT_OP||(LA189_0 >= OUTER && LA189_0 <= PACKAGE)||LA189_0==STRING_LITERAL||LA189_0==STRING_START||(LA189_0 >= SUM_OP && LA189_0 <= SUPER)||LA189_0==THIS||LA189_0==VERBATIM_STRING) ) {
                alt189=2;
            }
            else if ( (LA189_0==RBRACE) ) {
                alt189=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }
            switch (alt189) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2149:15: ( namedArgumentStart )=> namedArgumentStart
                    {
                    pushFollow(FOLLOW_namedArgumentStart_in_namedAnnotationArgumentsStart14592);
                    namedArgumentStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2149:58: iterableArgumentStart
                    {
                    pushFollow(FOLLOW_iterableArgumentStart_in_namedAnnotationArgumentsStart14596);
                    iterableArgumentStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2149:82: RBRACE
                    {
                    match(input,RBRACE,FOLLOW_RBRACE_in_namedAnnotationArgumentsStart14600); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "namedAnnotationArgumentsStart"



    // $ANTLR start "iterableArgumentStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2152:1: iterableArgumentStart : compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE ) ;
    public void iterableArgumentStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2153:5: ( compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2153:7: compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_iterableArgumentStart14618);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_expression_in_iterableArgumentStart14620);
            expression();

            state._fsp--;
            if (state.failed) return ;

            if ( input.LA(1)==COMMA||input.LA(1)==RBRACE||input.LA(1)==SEMICOLON ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "iterableArgumentStart"



    // $ANTLR start "specificationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2157:1: specificationStart : LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE ) ;
    public void specificationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2158:5: ( LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2158:7: LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE )
            {
            match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_specificationStart14646); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2158:19: ( parameters )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==LPAREN) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2158:19: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_specificationStart14648);
            	    parameters();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            if ( input.LA(1)==COMPUTE||input.LA(1)==SPECIFY ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "specificationStart"



    // $ANTLR start "parExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2161:1: parExpression returns [Expression expression] : LPAREN functionOrExpression RPAREN ;
    public Expression parExpression() throws RecognitionException {
        Expression expression = null;


        Token LPAREN324=null;
        Token RPAREN326=null;
        Expression functionOrExpression325 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2162:5: ( LPAREN functionOrExpression RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:2162:7: LPAREN functionOrExpression RPAREN
            {
            LPAREN324=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parExpression14677); if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression = new Expression(LPAREN324); }

            pushFollow(FOLLOW_functionOrExpression_in_parExpression14694);
            functionOrExpression325=functionOrExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { if (functionOrExpression325!=null)
                        expression.setTerm(functionOrExpression325.getTerm()); }

            RPAREN326=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parExpression14710); if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression.setEndToken(RPAREN326); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "parExpression"



    // $ANTLR start "positionalArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:2171:1: positionalArguments returns [PositionalArgumentList positionalArgumentList] : LPAREN (sa= sequencedArgument )? RPAREN ;
    public PositionalArgumentList positionalArguments() throws RecognitionException {
        PositionalArgumentList positionalArgumentList = null;


        Token LPAREN327=null;
        Token RPAREN328=null;
        SequencedArgument sa =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2172:5: ( LPAREN (sa= sequencedArgument )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:2172:7: LPAREN (sa= sequencedArgument )? RPAREN
            {
            LPAREN327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_positionalArguments14747); if (state.failed) return positionalArgumentList;

            if ( state.backtracking==0 ) { positionalArgumentList = new PositionalArgumentList(LPAREN327); }

            // /home/david/git/ceylon-spec/Ceylon.g:2174:7: (sa= sequencedArgument )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==ALIAS||(LA191_0 >= ASSERT && LA191_0 <= ASSIGN)||(LA191_0 >= BACKTICK && LA191_0 <= BREAK)||(LA191_0 >= CHAR_LITERAL && LA191_0 <= CLASS_DEFINITION)||LA191_0==COMPILER_ANNOTATION||LA191_0==CONTINUE||(LA191_0 >= DECREMENT_OP && LA191_0 <= DIFFERENCE_OP)||LA191_0==DYNAMIC||(LA191_0 >= FLOAT_LITERAL && LA191_0 <= FUNCTION_MODIFIER)||(LA191_0 >= IF_CLAUSE && LA191_0 <= INTERFACE_DEFINITION)||LA191_0==IN_OP||(LA191_0 >= LBRACE && LA191_0 <= LIDENTIFIER)||LA191_0==LPAREN||LA191_0==MODULE||(LA191_0 >= NATURAL_LITERAL && LA191_0 <= NEW)||(LA191_0 >= NOT_OP && LA191_0 <= OBJECT_DEFINITION)||(LA191_0 >= OUT && LA191_0 <= PACKAGE)||LA191_0==PRODUCT_OP||LA191_0==RETURN||(LA191_0 >= SEMICOLON && LA191_0 <= SMALLER_OP)||LA191_0==STRING_LITERAL||LA191_0==STRING_START||(LA191_0 >= SUM_OP && LA191_0 <= SWITCH_CLAUSE)||(LA191_0 >= THIS && LA191_0 <= UIDENTIFIER)||(LA191_0 >= VALUE_MODIFIER && LA191_0 <= WHILE_CLAUSE)) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2175:9: sa= sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_positionalArguments14776);
                    sa=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return positionalArgumentList;

                    if ( state.backtracking==0 ) { if (sa!=null) {
                                  for (PositionalArgument pa: sa.getPositionalArguments())
                                      positionalArgumentList.addPositionalArgument(pa);
                                  //TODO: this is really nasty, PositionalArgumentList should have
                                  //      or be a SequencedArgument, not copy its PositionalArguments!
                                  positionalArgumentList.setEndToken(sa.getMainEndToken()); } }

                    }
                    break;

            }


            RPAREN328=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_positionalArguments14803); if (state.failed) return positionalArgumentList;

            if ( state.backtracking==0 ) { positionalArgumentList.setEndToken(RPAREN328); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgumentList;
    }
    // $ANTLR end "positionalArguments"



    // $ANTLR start "positionalArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2187:1: positionalArgument returns [ListedArgument positionalArgument] : functionOrExpression ;
    public ListedArgument positionalArgument() throws RecognitionException {
        ListedArgument positionalArgument = null;


        Expression functionOrExpression329 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2188:5: ( functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:2188:7: functionOrExpression
            {
            if ( state.backtracking==0 ) { positionalArgument = new ListedArgument(null); }

            pushFollow(FOLLOW_functionOrExpression_in_positionalArgument14840);
            functionOrExpression329=functionOrExpression();

            state._fsp--;
            if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { positionalArgument.setExpression(functionOrExpression329); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgument;
    }
    // $ANTLR end "positionalArgument"



    // $ANTLR start "spreadArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2193:1: spreadArgument returns [SpreadArgument positionalArgument] : PRODUCT_OP unionExpression ;
    public SpreadArgument spreadArgument() throws RecognitionException {
        SpreadArgument positionalArgument = null;


        Token PRODUCT_OP330=null;
        Term unionExpression331 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2194:5: ( PRODUCT_OP unionExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:2194:7: PRODUCT_OP unionExpression
            {
            PRODUCT_OP330=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_spreadArgument14869); if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { positionalArgument = new SpreadArgument(PRODUCT_OP330); }

            pushFollow(FOLLOW_unionExpression_in_spreadArgument14885);
            unionExpression331=unionExpression();

            state._fsp--;
            if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { Expression e = new Expression(null);
                    e.setTerm(unionExpression331);
                    positionalArgument.setExpression(e); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgument;
    }
    // $ANTLR end "spreadArgument"



    // $ANTLR start "anonParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2202:1: anonParametersStart : LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart ) ;
    public void anonParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2203:5: ( LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2203:7: LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart )
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_anonParametersStart14910); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2204:5: ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart )
            int alt193=3;
            switch ( input.LA(1) ) {
            case RPAREN:
                {
                alt193=1;
                }
                break;
            case LIDENTIFIER:
                {
                int LA193_2 = input.LA(2);

                if ( (LA193_2==COMMA||LA193_2==RPAREN) ) {
                    alt193=2;
                }
                else if ( (LA193_2==ALIAS||LA193_2==ASSIGN||LA193_2==CLASS_DEFINITION||LA193_2==DYNAMIC||LA193_2==FUNCTION_MODIFIER||LA193_2==INTERFACE_DEFINITION||(LA193_2 >= LBRACE && LA193_2 <= LBRACKET)||LA193_2==LIDENTIFIER||LA193_2==LPAREN||LA193_2==NEW||LA193_2==OBJECT_DEFINITION||LA193_2==SMALLER_OP||LA193_2==UIDENTIFIER||LA193_2==VALUE_MODIFIER||LA193_2==VOID_MODIFIER) ) {
                    alt193=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSIGN:
            case CLASS_DEFINITION:
            case COMPILER_ANNOTATION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case INTERFACE_DEFINITION:
            case LBRACE:
            case LBRACKET:
            case NEW:
            case OBJECT_DEFINITION:
            case SMALLER_OP:
            case STRING_LITERAL:
            case UIDENTIFIER:
            case VALUE_MODIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt193=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }

            switch (alt193) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2205:7: RPAREN
                    {
                    match(input,RPAREN,FOLLOW_RPAREN_in_anonParametersStart14926); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2206:7: LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) )
                    {
                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_anonParametersStart14934); if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:2206:19: ( COMMA | RPAREN ( COMPUTE | LBRACE ) )
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==COMMA) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==RPAREN) ) {
                        alt192=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 192, 0, input);

                        throw nvae;

                    }
                    switch (alt192) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2206:20: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_anonParametersStart14937); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2206:28: RPAREN ( COMPUTE | LBRACE )
                            {
                            match(input,RPAREN,FOLLOW_RPAREN_in_anonParametersStart14941); if (state.failed) return ;

                            if ( input.LA(1)==COMPUTE||input.LA(1)==LBRACE ) {
                                input.consume();
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2207:7: compilerAnnotations annotatedDeclarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_anonParametersStart14957);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_annotatedDeclarationStart_in_anonParametersStart14959);
                    annotatedDeclarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "anonParametersStart"



    // $ANTLR start "nonemptyParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2211:1: nonemptyParametersStart : LPAREN compilerAnnotations annotatedDeclarationStart ;
    public void nonemptyParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2212:5: ( LPAREN compilerAnnotations annotatedDeclarationStart )
            // /home/david/git/ceylon-spec/Ceylon.g:2212:7: LPAREN compilerAnnotations annotatedDeclarationStart
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_nonemptyParametersStart14983); if (state.failed) return ;

            pushFollow(FOLLOW_compilerAnnotations_in_nonemptyParametersStart14985);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotatedDeclarationStart_in_nonemptyParametersStart14987);
            annotatedDeclarationStart();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nonemptyParametersStart"



    // $ANTLR start "functionOrExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2215:1: functionOrExpression returns [Expression expression] : ( ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction | conditionalExpression | switchExpression |e= expression );
    public Expression functionOrExpression() throws RecognitionException {
        Expression expression = null;


        Expression e =null;

        FunctionArgument anonymousFunction332 =null;

        Term conditionalExpression333 =null;

        SwitchExpression switchExpression334 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2216:5: ( ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction | conditionalExpression | switchExpression |e= expression )
            int alt194=4;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==FUNCTION_MODIFIER) && (synpred28_Ceylon())) {
                alt194=1;
            }
            else if ( (LA194_0==VOID_MODIFIER) && (synpred28_Ceylon())) {
                alt194=1;
            }
            else if ( (LA194_0==LPAREN) ) {
                int LA194_3 = input.LA(2);

                if ( (synpred28_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expression;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA194_0==IF_CLAUSE||LA194_0==LET) ) {
                alt194=2;
            }
            else if ( (LA194_0==SWITCH_CLAUSE) ) {
                alt194=3;
            }
            else if ( (LA194_0==BACKTICK||LA194_0==CHAR_LITERAL||(LA194_0 >= DECREMENT_OP && LA194_0 <= DIFFERENCE_OP)||LA194_0==DYNAMIC||LA194_0==FLOAT_LITERAL||LA194_0==INCREMENT_OP||(LA194_0 >= LBRACE && LA194_0 <= LBRACKET)||LA194_0==LIDENTIFIER||LA194_0==NATURAL_LITERAL||(LA194_0 >= NOT_OP && LA194_0 <= OBJECT_DEFINITION)||(LA194_0 >= OUTER && LA194_0 <= PACKAGE)||LA194_0==STRING_LITERAL||LA194_0==STRING_START||(LA194_0 >= SUM_OP && LA194_0 <= SUPER)||LA194_0==THIS||LA194_0==UIDENTIFIER||LA194_0==VERBATIM_STRING) ) {
                alt194=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;

            }
            switch (alt194) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2216:7: ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction
                    {
                    pushFollow(FOLLOW_anonymousFunction_in_functionOrExpression15024);
                    anonymousFunction332=anonymousFunction();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(anonymousFunction332); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2220:7: conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_functionOrExpression15040);
                    conditionalExpression333=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null); 
                            expression.setTerm(conditionalExpression333); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2223:7: switchExpression
                    {
                    pushFollow(FOLLOW_switchExpression_in_functionOrExpression15056);
                    switchExpression334=switchExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null); 
                            expression.setTerm(switchExpression334); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2226:7: e= expression
                    {
                    pushFollow(FOLLOW_expression_in_functionOrExpression15074);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = e; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "functionOrExpression"



    // $ANTLR start "let"
    // /home/david/git/ceylon-spec/Ceylon.g:2230:1: let returns [LetExpression let] : letClause ;
    public LetExpression let() throws RecognitionException {
        LetExpression let = null;


        LetClause letClause335 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2231:5: ( letClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2231:7: letClause
            {
            pushFollow(FOLLOW_letClause_in_let15103);
            letClause335=letClause();

            state._fsp--;
            if (state.failed) return let;

            if ( state.backtracking==0 ) { let = new LetExpression(null);
                    let.setLetClause(letClause335); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return let;
    }
    // $ANTLR end "let"



    // $ANTLR start "patternStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2236:1: patternStart : ( ( variable ENTRY_OP )=> variable ENTRY_OP | tuplePatternStart );
    public void patternStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2237:5: ( ( variable ENTRY_OP )=> variable ENTRY_OP | tuplePatternStart )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==COMPILER_ANNOTATION) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==UIDENTIFIER) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==SMALLER_OP) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==LBRACKET) ) {
                int LA195_4 = input.LA(2);

                if ( (synpred29_Ceylon()) ) {
                    alt195=1;
                }
                else if ( (true) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA195_0==LBRACE) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==VOID_MODIFIER) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==FUNCTION_MODIFIER) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==VALUE_MODIFIER) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else if ( (LA195_0==LIDENTIFIER) && (synpred29_Ceylon())) {
                alt195=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2237:7: ( variable ENTRY_OP )=> variable ENTRY_OP
                    {
                    pushFollow(FOLLOW_variable_in_patternStart15136);
                    variable();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_patternStart15138); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2238:7: tuplePatternStart
                    {
                    pushFollow(FOLLOW_tuplePatternStart_in_patternStart15149);
                    tuplePatternStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "patternStart"



    // $ANTLR start "letVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:2241:1: letVariable returns [Statement statement] : ( ( patternStart )=> pattern | variable ) ( specifier )? ;
    public Statement letVariable() throws RecognitionException {
        Statement statement = null;


        Pattern pattern336 =null;

        Variable variable337 =null;

        SpecifierExpression specifier338 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2242:5: ( ( ( patternStart )=> pattern | variable ) ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2242:7: ( ( patternStart )=> pattern | variable ) ( specifier )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2242:7: ( ( patternStart )=> pattern | variable )
            int alt196=2;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA196_1 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA196_2 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA196_3 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA196_4 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA196_5 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA196_6 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA196_7 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA196_8 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA196_9 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt196=1;
                }
                else if ( (true) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;

            }

            switch (alt196) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2243:9: ( patternStart )=> pattern
                    {
                    pushFollow(FOLLOW_pattern_in_letVariable15186);
                    pattern336=pattern();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { Destructure d = new Destructure(null);
                              d.setPattern(pattern336);
                              statement = d; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2248:9: variable
                    {
                    pushFollow(FOLLOW_variable_in_letVariable15214);
                    variable337=variable();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =variable337; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:2251:7: ( specifier )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==SPECIFY) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2252:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_letVariable15250);
                    specifier338=specifier();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { if (statement instanceof Destructure)
                                ((Destructure) statement).setSpecifierExpression(specifier338);
                              else if (statement instanceof Variable)
                                ((Variable) statement).setSpecifierExpression(specifier338); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "letVariable"



    // $ANTLR start "letClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2260:1: letClause returns [LetClause letClause] : LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch ;
    public LetClause letClause() throws RecognitionException {
        LetClause letClause = null;


        Token LET339=null;
        Token LPAREN340=null;
        Token COMMA341=null;
        Token RPAREN342=null;
        Statement v1 =null;

        Statement v2 =null;

        Expression conditionalBranch343 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2261:5: ( LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2261:7: LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch
            {
            LET339=(Token)match(input,LET,FOLLOW_LET_in_letClause15290); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause = new LetClause(LET339); }

            LPAREN340=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_letClause15306); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setEndToken(LPAREN340); }

            // /home/david/git/ceylon-spec/Ceylon.g:2265:7: (v1= letVariable ( COMMA v2= letVariable )* )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==COMPILER_ANNOTATION||LA199_0==FUNCTION_MODIFIER||(LA199_0 >= LBRACE && LA199_0 <= LBRACKET)||LA199_0==LIDENTIFIER||LA199_0==SMALLER_OP||LA199_0==UIDENTIFIER||LA199_0==VALUE_MODIFIER||LA199_0==VOID_MODIFIER) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2266:9: v1= letVariable ( COMMA v2= letVariable )*
                    {
                    pushFollow(FOLLOW_letVariable_in_letClause15334);
                    v1=letVariable();

                    state._fsp--;
                    if (state.failed) return letClause;

                    if ( state.backtracking==0 ) { letClause.setEndToken(null);
                              letClause.addVariable(v1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2269:9: ( COMMA v2= letVariable )*
                    loop198:
                    do {
                        int alt198=2;
                        int LA198_0 = input.LA(1);

                        if ( (LA198_0==COMMA) ) {
                            alt198=1;
                        }


                        switch (alt198) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2270:11: COMMA v2= letVariable
                    	    {
                    	    COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_letClause15366); if (state.failed) return letClause;

                    	    if ( state.backtracking==0 ) { letClause.setEndToken(COMMA341); }

                    	    pushFollow(FOLLOW_letVariable_in_letClause15392);
                    	    v2=letVariable();

                    	    state._fsp--;
                    	    if (state.failed) return letClause;

                    	    if ( state.backtracking==0 ) { letClause.setEndToken(null); 
                    	                letClause.addVariable(v2); }

                    	    }
                    	    break;

                    	default :
                    	    break loop198;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_letClause15432); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setEndToken(RPAREN342); }

            pushFollow(FOLLOW_conditionalBranch_in_letClause15448);
            conditionalBranch343=conditionalBranch();

            state._fsp--;
            if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setExpression(conditionalBranch343); 
                    letClause.setEndToken(null); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return letClause;
    }
    // $ANTLR end "letClause"



    // $ANTLR start "conditionalExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2284:1: conditionalExpression returns [Term term] : ( ifExpression | let );
    public Term conditionalExpression() throws RecognitionException {
        Term term = null;


        IfExpression ifExpression344 =null;

        LetExpression let345 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2285:5: ( ifExpression | let )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==IF_CLAUSE) ) {
                alt200=1;
            }
            else if ( (LA200_0==LET) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;

            }
            switch (alt200) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2285:7: ifExpression
                    {
                    pushFollow(FOLLOW_ifExpression_in_conditionalExpression15477);
                    ifExpression344=ifExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = ifExpression344; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2287:7: let
                    {
                    pushFollow(FOLLOW_let_in_conditionalExpression15493);
                    let345=let();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = let345; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "conditionalExpression"



    // $ANTLR start "switchExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2291:1: switchExpression returns [SwitchExpression term] : switchHeader caseExpressions ;
    public SwitchExpression switchExpression() throws RecognitionException {
        SwitchExpression term = null;


        SwitchClause switchHeader346 =null;

        SwitchCaseList caseExpressions347 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2292:5: ( switchHeader caseExpressions )
            // /home/david/git/ceylon-spec/Ceylon.g:2292:7: switchHeader caseExpressions
            {
            pushFollow(FOLLOW_switchHeader_in_switchExpression15522);
            switchHeader346=switchHeader();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = new SwitchExpression(null);
                    term.setSwitchClause(switchHeader346); }

            pushFollow(FOLLOW_caseExpressions_in_switchExpression15538);
            caseExpressions347=caseExpressions();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term.setSwitchCaseList(caseExpressions347);
                    //TODO: huge copy/paste job from switchCaseElse 
                    Identifier id = null;
                    Switched sw = switchHeader346.getSwitched();
                    if (sw!=null) {
                      Expression ex = sw.getExpression();
                      if (ex!=null && ex.getTerm() instanceof BaseMemberExpression) {
                        id = ((BaseMemberExpression) ex.getTerm()).getIdentifier();
                      }
                      TypedDeclaration var = switchHeader346.getSwitched().getVariable();
                      if (var!=null) {
                        id = var.getIdentifier();
                      }
                    }
                    if (id!=null) {
                      for (CaseClause cc: caseExpressions347.getCaseClauses()) {
                        CaseItem item = cc.getCaseItem();
                        if (item instanceof IsCase) {
                          IsCase ic = (IsCase) item;
                          Variable v = new Variable(null);
                          v.setType(new SyntheticVariable(null));
                          v.setIdentifier(id);
                          SpecifierExpression se = new SpecifierExpression(null);
                          Expression e = new Expression(null);
                          BaseMemberExpression bme = new BaseMemberExpression(null);
                          bme.setIdentifier(id);
                          bme.setTypeArguments( new InferredTypeArguments(null) );
                          e.setTerm(bme);
                          se.setExpression(e);
                          v.setSpecifierExpression(se);
                          ic.setVariable(v);
                        }
                      } 
                      ElseClause ec = caseExpressions347.getElseClause();
                      if (ec!=null) {
                        Variable ev = new Variable(null);
                        ev.setType(new SyntheticVariable(null));
                        SpecifierExpression ese = new SpecifierExpression(null);
                        Expression ee = new Expression(null);
                        BaseMemberExpression ebme = new BaseMemberExpression(null);
                        ebme.setTypeArguments( new InferredTypeArguments(null) );
                        ee.setTerm(ebme);
                        ese.setExpression(ee);
                        ev.setSpecifierExpression(ese);
                        ec.setVariable(ev);
                        ebme.setIdentifier(id);
                        ev.setIdentifier(id);
                      }
                    } 
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "switchExpression"



    // $ANTLR start "caseExpressions"
    // /home/david/git/ceylon-spec/Ceylon.g:2348:1: caseExpressions returns [SwitchCaseList switchCaseList] : ( caseExpression )+ ( defaultCaseExpression )? ;
    public SwitchCaseList caseExpressions() throws RecognitionException {
        SwitchCaseList switchCaseList = null;


        CaseClause caseExpression348 =null;

        ElseClause defaultCaseExpression349 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2349:5: ( ( caseExpression )+ ( defaultCaseExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2349:7: ( caseExpression )+ ( defaultCaseExpression )?
            {
            if ( state.backtracking==0 ) { switchCaseList = new SwitchCaseList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:2350:7: ( caseExpression )+
            int cnt201=0;
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==CASE_CLAUSE) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2351:9: caseExpression
            	    {
            	    pushFollow(FOLLOW_caseExpression_in_caseExpressions15585);
            	    caseExpression348=caseExpression();

            	    state._fsp--;
            	    if (state.failed) return switchCaseList;

            	    if ( state.backtracking==0 ) { switchCaseList.addCaseClause(caseExpression348); }

            	    }
            	    break;

            	default :
            	    if ( cnt201 >= 1 ) break loop201;
            	    if (state.backtracking>0) {state.failed=true; return switchCaseList;}
                        EarlyExitException eee =
                            new EarlyExitException(201, input);
                        throw eee;
                }
                cnt201++;
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:2354:7: ( defaultCaseExpression )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==ELSE_CLAUSE) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2355:9: defaultCaseExpression
                    {
                    pushFollow(FOLLOW_defaultCaseExpression_in_caseExpressions15622);
                    defaultCaseExpression349=defaultCaseExpression();

                    state._fsp--;
                    if (state.failed) return switchCaseList;

                    if ( state.backtracking==0 ) { switchCaseList.setElseClause(defaultCaseExpression349); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switchCaseList;
    }
    // $ANTLR end "caseExpressions"



    // $ANTLR start "caseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2360:1: caseExpression returns [CaseClause clause] : CASE_CLAUSE caseItemList conditionalBranch ;
    public CaseClause caseExpression() throws RecognitionException {
        CaseClause clause = null;


        Token CASE_CLAUSE350=null;
        CaseItem caseItemList351 =null;

        Expression conditionalBranch352 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2361:5: ( CASE_CLAUSE caseItemList conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2361:7: CASE_CLAUSE caseItemList conditionalBranch
            {
            CASE_CLAUSE350=(Token)match(input,CASE_CLAUSE,FOLLOW_CASE_CLAUSE_in_caseExpression15666); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CaseClause(CASE_CLAUSE350); }

            pushFollow(FOLLOW_caseItemList_in_caseExpression15683);
            caseItemList351=caseItemList();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCaseItem(caseItemList351); }

            pushFollow(FOLLOW_conditionalBranch_in_caseExpression15699);
            conditionalBranch352=conditionalBranch();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setExpression(conditionalBranch352); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "caseExpression"



    // $ANTLR start "defaultCaseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2369:1: defaultCaseExpression returns [ElseClause clause] : ELSE_CLAUSE conditionalBranch ;
    public ElseClause defaultCaseExpression() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE353=null;
        Expression conditionalBranch354 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2370:5: ( ELSE_CLAUSE conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2370:7: ELSE_CLAUSE conditionalBranch
            {
            ELSE_CLAUSE353=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_defaultCaseExpression15728); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE353); }

            pushFollow(FOLLOW_conditionalBranch_in_defaultCaseExpression15745);
            conditionalBranch354=conditionalBranch();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setExpression(conditionalBranch354); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "defaultCaseExpression"



    // $ANTLR start "ifExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2376:1: ifExpression returns [IfExpression term] : IF_CLAUSE thenElseClauses ;
    public IfExpression ifExpression() throws RecognitionException {
        IfExpression term = null;


        Token IF_CLAUSE355=null;
        PsiCompatibleCeylonParser.thenElseClauses_return thenElseClauses356 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2377:5: ( IF_CLAUSE thenElseClauses )
            // /home/david/git/ceylon-spec/Ceylon.g:2377:7: IF_CLAUSE thenElseClauses
            {
            IF_CLAUSE355=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifExpression15774); if (state.failed) return term;

            if ( state.backtracking==0 ) { term = new IfExpression(IF_CLAUSE355); }

            pushFollow(FOLLOW_thenElseClauses_in_ifExpression15790);
            thenElseClauses356=thenElseClauses();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { IfClause ic = (thenElseClauses356!=null?thenElseClauses356.ifClause:null);
                    ElseClause ec = (thenElseClauses356!=null?thenElseClauses356.elseClause:null);
                    ConditionList cl = (thenElseClauses356!=null?thenElseClauses356.conditionList:null);
                    term.setIfClause(ic);
                    term.setElseClause(ec);
                    if (cl!=null) {
                      if (ic==null) {
                        ic = new IfClause(null);
                        term.setIfClause(ic);
                      }
                      ic.setConditionList(cl); 
                      if (cl!=null) {
                        List<Condition> conditions = cl.getConditions();
                        if (conditions.size()==1) {
                          Condition c = conditions.get(0);
                          Identifier id = null;
                          Type t = null;
                          if (c instanceof ExistsOrNonemptyCondition) {
                            Statement s = ((ExistsOrNonemptyCondition)c).getVariable();
                            if (s instanceof Variable) {
                              Variable v = (Variable) s;
                              t = v.getType();
                              id = v.getIdentifier();
                            }
                          }
                          else if (c instanceof IsCondition) {
                            Variable v = (Variable) ((IsCondition)c).getVariable();
                            if (v!=null) {
                              t = v.getType();
                              id = v.getIdentifier();
                            }
                          }
                          if (id!=null && ec!=null && t instanceof SyntheticVariable) { 
                            Variable ev = new Variable(null);
                            ev.setType(new SyntheticVariable(null));
                            SpecifierExpression ese = new SpecifierExpression(null);
                            Expression ee = new Expression(null);
                            BaseMemberExpression ebme = new BaseMemberExpression(null);
                            ebme.setTypeArguments( new InferredTypeArguments(null) );
                            ee.setTerm(ebme);
                            ese.setExpression(ee);
                            ev.setSpecifierExpression(ese);
                            ec.setVariable(ev);
                            ev.setIdentifier(id);
                            ebme.setIdentifier(id);
                          }
                        }
                      }        
                    } 
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "ifExpression"



    // $ANTLR start "conditionalBranch"
    // /home/david/git/ceylon-spec/Ceylon.g:2432:1: conditionalBranch returns [Expression expression] : ( conditionalExpression | disjunctionExpression );
    public Expression conditionalBranch() throws RecognitionException {
        Expression expression = null;


        Term conditionalExpression357 =null;

        Term disjunctionExpression358 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2433:5: ( conditionalExpression | disjunctionExpression )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==IF_CLAUSE||LA203_0==LET) ) {
                alt203=1;
            }
            else if ( (LA203_0==BACKTICK||LA203_0==CHAR_LITERAL||(LA203_0 >= DECREMENT_OP && LA203_0 <= DIFFERENCE_OP)||LA203_0==DYNAMIC||LA203_0==FLOAT_LITERAL||LA203_0==INCREMENT_OP||(LA203_0 >= LBRACE && LA203_0 <= LBRACKET)||LA203_0==LIDENTIFIER||LA203_0==LPAREN||LA203_0==NATURAL_LITERAL||(LA203_0 >= NOT_OP && LA203_0 <= OBJECT_DEFINITION)||(LA203_0 >= OUTER && LA203_0 <= PACKAGE)||LA203_0==STRING_LITERAL||LA203_0==STRING_START||(LA203_0 >= SUM_OP && LA203_0 <= SUPER)||LA203_0==THIS||LA203_0==UIDENTIFIER||LA203_0==VERBATIM_STRING) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }
            switch (alt203) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2433:7: conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalBranch15819);
                    conditionalExpression357=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(conditionalExpression357); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2436:7: disjunctionExpression
                    {
                    pushFollow(FOLLOW_disjunctionExpression_in_conditionalBranch15835);
                    disjunctionExpression358=disjunctionExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(disjunctionExpression358); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "conditionalBranch"


    public static class thenElseClauses_return extends ParserRuleReturnScope {
        public IfClause ifClause;
        public ElseClause elseClause;
        public ConditionList conditionList;
    };


    // $ANTLR start "thenElseClauses"
    // /home/david/git/ceylon-spec/Ceylon.g:2441:1: thenElseClauses returns [IfClause ifClause, ElseClause elseClause, ConditionList conditionList] : conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch ;
    public PsiCompatibleCeylonParser.thenElseClauses_return thenElseClauses() throws RecognitionException {
        PsiCompatibleCeylonParser.thenElseClauses_return retval = new PsiCompatibleCeylonParser.thenElseClauses_return();
        retval.start = input.LT(1);


        Token THEN_CLAUSE360=null;
        Token ELSE_CLAUSE361=null;
        Expression cb1 =null;

        Expression cb2 =null;

        ConditionList conditions359 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2442:5: ( conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2442:7: conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch
            {
            pushFollow(FOLLOW_conditions_in_thenElseClauses15864);
            conditions359=conditions();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.conditionList = conditions359; }

            THEN_CLAUSE360=(Token)match(input,THEN_CLAUSE,FOLLOW_THEN_CLAUSE_in_thenElseClauses15880); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.ifClause = new IfClause(THEN_CLAUSE360); }

            pushFollow(FOLLOW_conditionalBranch_in_thenElseClauses15898);
            cb1=conditionalBranch();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.ifClause.setExpression(cb1); }

            ELSE_CLAUSE361=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_thenElseClauses15914); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.elseClause = new ElseClause(ELSE_CLAUSE361); }

            pushFollow(FOLLOW_conditionalBranch_in_thenElseClauses15932);
            cb2=conditionalBranch();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.elseClause.setExpression(cb2); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "thenElseClauses"



    // $ANTLR start "anonymousFunction"
    // /home/david/git/ceylon-spec/Ceylon.g:2454:1: anonymousFunction returns [FunctionArgument function] : ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block ) ;
    public FunctionArgument anonymousFunction() throws RecognitionException {
        FunctionArgument function = null;


        Token FUNCTION_MODIFIER362=null;
        Token VOID_MODIFIER363=null;
        ParameterList p1 =null;

        ParameterList p2 =null;

        Expression fe =null;

        Block block364 =null;


         function = new FunctionArgument(null);
                    function.setType(new FunctionModifier(null)); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2457:5: ( ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2457:7: ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2457:7: ( FUNCTION_MODIFIER | VOID_MODIFIER )?
            int alt204=3;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==FUNCTION_MODIFIER) ) {
                alt204=1;
            }
            else if ( (LA204_0==VOID_MODIFIER) ) {
                alt204=2;
            }
            switch (alt204) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2458:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER362=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_anonymousFunction15980); if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setType(new FunctionModifier(FUNCTION_MODIFIER362)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2461:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER363=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_anonymousFunction16008); if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setType(new VoidModifier(VOID_MODIFIER363)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_parameters_in_anonymousFunction16037);
            p1=parameters();

            state._fsp--;
            if (state.failed) return function;

            if ( state.backtracking==0 ) { function.addParameterList(p1); }

            // /home/david/git/ceylon-spec/Ceylon.g:2466:7: (p2= parameters )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==LPAREN) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2467:9: p2= parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_anonymousFunction16066);
            	    p2=parameters();

            	    state._fsp--;
            	    if (state.failed) return function;

            	    if ( state.backtracking==0 ) { function.addParameterList(p2); }

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:2470:7: ( COMPUTE fe= functionOrExpression | block )
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==COMPUTE) ) {
                alt206=1;
            }
            else if ( (LA206_0==LBRACE) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return function;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;

            }
            switch (alt206) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2471:9: COMPUTE fe= functionOrExpression
                    {
                    match(input,COMPUTE,FOLLOW_COMPUTE_in_anonymousFunction16104); if (state.failed) return function;

                    pushFollow(FOLLOW_functionOrExpression_in_anonymousFunction16125);
                    fe=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setExpression(fe); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2476:9: block
                    {
                    pushFollow(FOLLOW_block_in_anonymousFunction16153);
                    block364=block();

                    state._fsp--;
                    if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setBlock(block364); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return function;
    }
    // $ANTLR end "anonymousFunction"



    // $ANTLR start "comprehension"
    // /home/david/git/ceylon-spec/Ceylon.g:2481:1: comprehension returns [Comprehension comprehension] : ( forComprehensionClause | ifComprehensionClause );
    public Comprehension comprehension() throws RecognitionException {
        Comprehension comprehension = null;


        ForComprehensionClause forComprehensionClause365 =null;

        IfComprehensionClause ifComprehensionClause366 =null;


         comprehension = new Comprehension(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2483:5: ( forComprehensionClause | ifComprehensionClause )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==FOR_CLAUSE) ) {
                alt207=1;
            }
            else if ( (LA207_0==IF_CLAUSE) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return comprehension;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }
            switch (alt207) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2483:7: forComprehensionClause
                    {
                    pushFollow(FOLLOW_forComprehensionClause_in_comprehension16201);
                    forComprehensionClause365=forComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehension;

                    if ( state.backtracking==0 ) { comprehension.setInitialComprehensionClause(forComprehensionClause365); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2485:7: ifComprehensionClause
                    {
                    pushFollow(FOLLOW_ifComprehensionClause_in_comprehension16217);
                    ifComprehensionClause366=ifComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehension;

                    if ( state.backtracking==0 ) { comprehension.setInitialComprehensionClause(ifComprehensionClause366); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehension;
    }
    // $ANTLR end "comprehension"



    // $ANTLR start "comprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2489:1: comprehensionClause returns [ComprehensionClause comprehensionClause] : ( forComprehensionClause | ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause | expressionComprehensionClause );
    public ComprehensionClause comprehensionClause() throws RecognitionException {
        ComprehensionClause comprehensionClause = null;


        ForComprehensionClause forComprehensionClause367 =null;

        IfComprehensionClause ifComprehensionClause368 =null;

        ExpressionComprehensionClause expressionComprehensionClause369 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2490:5: ( forComprehensionClause | ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause | expressionComprehensionClause )
            int alt208=3;
            switch ( input.LA(1) ) {
            case FOR_CLAUSE:
                {
                alt208=1;
                }
                break;
            case IF_CLAUSE:
                {
                int LA208_2 = input.LA(2);

                if ( (synpred31_Ceylon()) ) {
                    alt208=2;
                }
                else if ( (true) ) {
                    alt208=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 2, input);

                    throw nvae;

                }
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case COMMA:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case DYNAMIC:
            case FLOAT_LITERAL:
            case FUNCTION_MODIFIER:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case NOT_OP:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case RBRACE:
            case RBRACKET:
            case RPAREN:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case SWITCH_CLAUSE:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;

            }

            switch (alt208) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2490:7: forComprehensionClause
                    {
                    pushFollow(FOLLOW_forComprehensionClause_in_comprehensionClause16246);
                    forComprehensionClause367=forComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = forComprehensionClause367; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2492:7: ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause
                    {
                    pushFollow(FOLLOW_ifComprehensionClause_in_comprehensionClause16281);
                    ifComprehensionClause368=ifComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = ifComprehensionClause368; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2495:7: expressionComprehensionClause
                    {
                    pushFollow(FOLLOW_expressionComprehensionClause_in_comprehensionClause16298);
                    expressionComprehensionClause369=expressionComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = expressionComprehensionClause369; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "comprehensionClause"



    // $ANTLR start "expressionComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2499:1: expressionComprehensionClause returns [ExpressionComprehensionClause comprehensionClause] : ( functionOrExpression |);
    public ExpressionComprehensionClause expressionComprehensionClause() throws RecognitionException {
        ExpressionComprehensionClause comprehensionClause = null;


        Expression functionOrExpression370 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2500:5: ( functionOrExpression |)
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==BACKTICK||LA209_0==CHAR_LITERAL||(LA209_0 >= DECREMENT_OP && LA209_0 <= DIFFERENCE_OP)||LA209_0==DYNAMIC||LA209_0==FLOAT_LITERAL||LA209_0==FUNCTION_MODIFIER||LA209_0==IF_CLAUSE||LA209_0==INCREMENT_OP||(LA209_0 >= LBRACE && LA209_0 <= LIDENTIFIER)||LA209_0==LPAREN||LA209_0==NATURAL_LITERAL||(LA209_0 >= NOT_OP && LA209_0 <= OBJECT_DEFINITION)||(LA209_0 >= OUTER && LA209_0 <= PACKAGE)||LA209_0==STRING_LITERAL||LA209_0==STRING_START||(LA209_0 >= SUM_OP && LA209_0 <= SWITCH_CLAUSE)||LA209_0==THIS||LA209_0==UIDENTIFIER||(LA209_0 >= VERBATIM_STRING && LA209_0 <= VOID_MODIFIER)) ) {
                alt209=1;
            }
            else if ( (LA209_0==COMMA||(LA209_0 >= RBRACE && LA209_0 <= RBRACKET)||LA209_0==RPAREN) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2500:7: functionOrExpression
                    {
                    pushFollow(FOLLOW_functionOrExpression_in_expressionComprehensionClause16328);
                    functionOrExpression370=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = new ExpressionComprehensionClause(null);
                            comprehensionClause.setExpression(functionOrExpression370); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2503:7: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                              new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "expressionComprehensionClause"



    // $ANTLR start "forComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2507:1: forComprehensionClause returns [ForComprehensionClause comprehensionClause] : FOR_CLAUSE forIterator comprehensionClause ;
    public ForComprehensionClause forComprehensionClause() throws RecognitionException {
        ForComprehensionClause comprehensionClause = null;


        Token FOR_CLAUSE371=null;
        ForIterator forIterator372 =null;

        ComprehensionClause comprehensionClause373 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2508:5: ( FOR_CLAUSE forIterator comprehensionClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2508:7: FOR_CLAUSE forIterator comprehensionClause
            {
            FOR_CLAUSE371=(Token)match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_forComprehensionClause16365); if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause = new ForComprehensionClause(FOR_CLAUSE371); }

            pushFollow(FOLLOW_forIterator_in_forComprehensionClause16381);
            forIterator372=forIterator();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setForIterator(forIterator372); }

            pushFollow(FOLLOW_comprehensionClause_in_forComprehensionClause16397);
            comprehensionClause373=comprehensionClause();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setComprehensionClause(comprehensionClause373); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "forComprehensionClause"



    // $ANTLR start "ifComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2516:1: ifComprehensionClause returns [IfComprehensionClause comprehensionClause] : IF_CLAUSE conditions comprehensionClause ;
    public IfComprehensionClause ifComprehensionClause() throws RecognitionException {
        IfComprehensionClause comprehensionClause = null;


        Token IF_CLAUSE374=null;
        ConditionList conditions375 =null;

        ComprehensionClause comprehensionClause376 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2517:5: ( IF_CLAUSE conditions comprehensionClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2517:7: IF_CLAUSE conditions comprehensionClause
            {
            IF_CLAUSE374=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifComprehensionClause16430); if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause = new IfComprehensionClause(IF_CLAUSE374); }

            pushFollow(FOLLOW_conditions_in_ifComprehensionClause16446);
            conditions375=conditions();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setConditionList(conditions375); }

            pushFollow(FOLLOW_comprehensionClause_in_ifComprehensionClause16462);
            comprehensionClause376=comprehensionClause();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setComprehensionClause(comprehensionClause376); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "ifComprehensionClause"



    // $ANTLR start "assignmentExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2525:1: assignmentExpression returns [Term term] : ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )? ;
    public Term assignmentExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        Expression ee2 =null;

        AssignmentOp assignmentOperator377 =null;


         QualifiedMemberOrTypeExpression qe=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2527:5: (ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2527:7: ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )?
            {
            pushFollow(FOLLOW_thenElseExpression_in_assignmentExpression16506);
            ee1=thenElseExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2529:7: ( assignmentOperator ee2= functionOrExpression )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==ADD_SPECIFY||LA210_0==AND_SPECIFY||LA210_0==COMPLEMENT_SPECIFY||LA210_0==DIVIDE_SPECIFY||LA210_0==INTERSECT_SPECIFY||LA210_0==MULTIPLY_SPECIFY||LA210_0==OR_SPECIFY||LA210_0==REMAINDER_SPECIFY||LA210_0==SPECIFY||LA210_0==SUBTRACT_SPECIFY||LA210_0==UNION_SPECIFY) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2530:9: assignmentOperator ee2= functionOrExpression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_assignmentExpression16532);
                    assignmentOperator377=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { assignmentOperator377.setLeftTerm(term);
                              term = assignmentOperator377; }

                    pushFollow(FOLLOW_functionOrExpression_in_assignmentExpression16555);
                    ee2=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { if (ee2!=null)
                                  assignmentOperator377.setRightTerm(ee2.getTerm()); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "assignmentExpression"



    // $ANTLR start "assignmentOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2539:1: assignmentOperator returns [AssignmentOp operator] : ( SPECIFY | ADD_SPECIFY | SUBTRACT_SPECIFY | MULTIPLY_SPECIFY | DIVIDE_SPECIFY | REMAINDER_SPECIFY | INTERSECT_SPECIFY | UNION_SPECIFY | COMPLEMENT_SPECIFY | AND_SPECIFY | OR_SPECIFY );
    public AssignmentOp assignmentOperator() throws RecognitionException {
        AssignmentOp operator = null;


        Token SPECIFY378=null;
        Token ADD_SPECIFY379=null;
        Token SUBTRACT_SPECIFY380=null;
        Token MULTIPLY_SPECIFY381=null;
        Token DIVIDE_SPECIFY382=null;
        Token REMAINDER_SPECIFY383=null;
        Token INTERSECT_SPECIFY384=null;
        Token UNION_SPECIFY385=null;
        Token COMPLEMENT_SPECIFY386=null;
        Token AND_SPECIFY387=null;
        Token OR_SPECIFY388=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2540:5: ( SPECIFY | ADD_SPECIFY | SUBTRACT_SPECIFY | MULTIPLY_SPECIFY | DIVIDE_SPECIFY | REMAINDER_SPECIFY | INTERSECT_SPECIFY | UNION_SPECIFY | COMPLEMENT_SPECIFY | AND_SPECIFY | OR_SPECIFY )
            int alt211=11;
            switch ( input.LA(1) ) {
            case SPECIFY:
                {
                alt211=1;
                }
                break;
            case ADD_SPECIFY:
                {
                alt211=2;
                }
                break;
            case SUBTRACT_SPECIFY:
                {
                alt211=3;
                }
                break;
            case MULTIPLY_SPECIFY:
                {
                alt211=4;
                }
                break;
            case DIVIDE_SPECIFY:
                {
                alt211=5;
                }
                break;
            case REMAINDER_SPECIFY:
                {
                alt211=6;
                }
                break;
            case INTERSECT_SPECIFY:
                {
                alt211=7;
                }
                break;
            case UNION_SPECIFY:
                {
                alt211=8;
                }
                break;
            case COMPLEMENT_SPECIFY:
                {
                alt211=9;
                }
                break;
            case AND_SPECIFY:
                {
                alt211=10;
                }
                break;
            case OR_SPECIFY:
                {
                alt211=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;

            }

            switch (alt211) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2540:7: SPECIFY
                    {
                    SPECIFY378=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_assignmentOperator16595); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AssignOp(SPECIFY378); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2541:7: ADD_SPECIFY
                    {
                    ADD_SPECIFY379=(Token)match(input,ADD_SPECIFY,FOLLOW_ADD_SPECIFY_in_assignmentOperator16605); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AddAssignOp(ADD_SPECIFY379); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2542:7: SUBTRACT_SPECIFY
                    {
                    SUBTRACT_SPECIFY380=(Token)match(input,SUBTRACT_SPECIFY,FOLLOW_SUBTRACT_SPECIFY_in_assignmentOperator16615); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SubtractAssignOp(SUBTRACT_SPECIFY380); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2543:7: MULTIPLY_SPECIFY
                    {
                    MULTIPLY_SPECIFY381=(Token)match(input,MULTIPLY_SPECIFY,FOLLOW_MULTIPLY_SPECIFY_in_assignmentOperator16625); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new MultiplyAssignOp(MULTIPLY_SPECIFY381); }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2544:7: DIVIDE_SPECIFY
                    {
                    DIVIDE_SPECIFY382=(Token)match(input,DIVIDE_SPECIFY,FOLLOW_DIVIDE_SPECIFY_in_assignmentOperator16635); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DivideAssignOp(DIVIDE_SPECIFY382); }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2545:7: REMAINDER_SPECIFY
                    {
                    REMAINDER_SPECIFY383=(Token)match(input,REMAINDER_SPECIFY,FOLLOW_REMAINDER_SPECIFY_in_assignmentOperator16645); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RemainderAssignOp(REMAINDER_SPECIFY383); }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2546:7: INTERSECT_SPECIFY
                    {
                    INTERSECT_SPECIFY384=(Token)match(input,INTERSECT_SPECIFY,FOLLOW_INTERSECT_SPECIFY_in_assignmentOperator16655); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IntersectAssignOp(INTERSECT_SPECIFY384); }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2547:7: UNION_SPECIFY
                    {
                    UNION_SPECIFY385=(Token)match(input,UNION_SPECIFY,FOLLOW_UNION_SPECIFY_in_assignmentOperator16665); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new UnionAssignOp(UNION_SPECIFY385); }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2548:7: COMPLEMENT_SPECIFY
                    {
                    COMPLEMENT_SPECIFY386=(Token)match(input,COMPLEMENT_SPECIFY,FOLLOW_COMPLEMENT_SPECIFY_in_assignmentOperator16675); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ComplementAssignOp(COMPLEMENT_SPECIFY386); }

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2549:7: AND_SPECIFY
                    {
                    AND_SPECIFY387=(Token)match(input,AND_SPECIFY,FOLLOW_AND_SPECIFY_in_assignmentOperator16685); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AndAssignOp(AND_SPECIFY387); }

                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2550:7: OR_SPECIFY
                    {
                    OR_SPECIFY388=(Token)match(input,OR_SPECIFY,FOLLOW_OR_SPECIFY_in_assignmentOperator16695); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new OrAssignOp(OR_SPECIFY388); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "assignmentOperator"



    // $ANTLR start "thenElseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2553:1: thenElseExpression returns [Term term] : de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )* ;
    public Term thenElseExpression() throws RecognitionException {
        Term term = null;


        Term de1 =null;

        Term de2 =null;

        BinaryOperatorExpression thenElseOperator389 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2554:5: (de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2554:7: de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )*
            {
            pushFollow(FOLLOW_disjunctionExpression_in_thenElseExpression16720);
            de1=disjunctionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = de1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2556:7: ( thenElseOperator de2= disjunctionExpression )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==ELSE_CLAUSE||LA212_0==THEN_CLAUSE) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2557:9: thenElseOperator de2= disjunctionExpression
            	    {
            	    pushFollow(FOLLOW_thenElseOperator_in_thenElseExpression16746);
            	    thenElseOperator389=thenElseOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { thenElseOperator389.setLeftTerm(term);
            	              term = thenElseOperator389; }

            	    pushFollow(FOLLOW_disjunctionExpression_in_thenElseExpression16768);
            	    de2=disjunctionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { thenElseOperator389.setRightTerm(de2); }

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "thenElseExpression"



    // $ANTLR start "thenElseOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2565:1: thenElseOperator returns [BinaryOperatorExpression operator] : ( ELSE_CLAUSE | THEN_CLAUSE );
    public BinaryOperatorExpression thenElseOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token ELSE_CLAUSE390=null;
        Token THEN_CLAUSE391=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2566:5: ( ELSE_CLAUSE | THEN_CLAUSE )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==ELSE_CLAUSE) ) {
                alt213=1;
            }
            else if ( (LA213_0==THEN_CLAUSE) ) {
                alt213=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;

            }
            switch (alt213) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2566:7: ELSE_CLAUSE
                    {
                    ELSE_CLAUSE390=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_thenElseOperator16808); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DefaultOp(ELSE_CLAUSE390); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2568:7: THEN_CLAUSE
                    {
                    THEN_CLAUSE391=(Token)match(input,THEN_CLAUSE,FOLLOW_THEN_CLAUSE_in_thenElseOperator16825); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ThenOp(THEN_CLAUSE391); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "thenElseOperator"



    // $ANTLR start "disjunctionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2572:1: disjunctionExpression returns [Term term] : me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )* ;
    public Term disjunctionExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        OrOp disjunctionOperator392 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2573:5: (me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2573:7: me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )*
            {
            pushFollow(FOLLOW_conjunctionExpression_in_disjunctionExpression16856);
            me1=conjunctionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2575:7: ( disjunctionOperator me2= conjunctionExpression )*
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==OR_OP) ) {
                    alt214=1;
                }


                switch (alt214) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2576:9: disjunctionOperator me2= conjunctionExpression
            	    {
            	    pushFollow(FOLLOW_disjunctionOperator_in_disjunctionExpression16882);
            	    disjunctionOperator392=disjunctionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { disjunctionOperator392.setLeftTerm(term);
            	              term = disjunctionOperator392; }

            	    pushFollow(FOLLOW_conjunctionExpression_in_disjunctionExpression16905);
            	    me2=conjunctionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { disjunctionOperator392.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "disjunctionExpression"



    // $ANTLR start "disjunctionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2584:1: disjunctionOperator returns [OrOp operator] : OR_OP ;
    public OrOp disjunctionOperator() throws RecognitionException {
        OrOp operator = null;


        Token OR_OP393=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2585:5: ( OR_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2585:7: OR_OP
            {
            OR_OP393=(Token)match(input,OR_OP,FOLLOW_OR_OP_in_disjunctionOperator16945); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new OrOp(OR_OP393); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "disjunctionOperator"



    // $ANTLR start "conjunctionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2589:1: conjunctionExpression returns [Term term] : me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )* ;
    public Term conjunctionExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        AndOp conjunctionOperator394 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2590:5: (me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2590:7: me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )*
            {
            pushFollow(FOLLOW_logicalNegationExpression_in_conjunctionExpression16977);
            me1=logicalNegationExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2592:7: ( conjunctionOperator me2= logicalNegationExpression )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( (LA215_0==AND_OP) ) {
                    alt215=1;
                }


                switch (alt215) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2593:9: conjunctionOperator me2= logicalNegationExpression
            	    {
            	    pushFollow(FOLLOW_conjunctionOperator_in_conjunctionExpression17003);
            	    conjunctionOperator394=conjunctionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { conjunctionOperator394.setLeftTerm(term);
            	              term = conjunctionOperator394; }

            	    pushFollow(FOLLOW_logicalNegationExpression_in_conjunctionExpression17026);
            	    me2=logicalNegationExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { conjunctionOperator394.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "conjunctionExpression"



    // $ANTLR start "conjunctionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2601:1: conjunctionOperator returns [AndOp operator] : AND_OP ;
    public AndOp conjunctionOperator() throws RecognitionException {
        AndOp operator = null;


        Token AND_OP395=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2602:5: ( AND_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2602:7: AND_OP
            {
            AND_OP395=(Token)match(input,AND_OP,FOLLOW_AND_OP_in_conjunctionOperator17066); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new AndOp(AND_OP395); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "conjunctionOperator"



    // $ANTLR start "logicalNegationExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2606:1: logicalNegationExpression returns [Term term] : ( notOperator le= logicalNegationExpression | equalityExpression );
    public Term logicalNegationExpression() throws RecognitionException {
        Term term = null;


        Term le =null;

        NotOp notOperator396 =null;

        Term equalityExpression397 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2607:5: ( notOperator le= logicalNegationExpression | equalityExpression )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==NOT_OP) ) {
                alt216=1;
            }
            else if ( (LA216_0==BACKTICK||LA216_0==CHAR_LITERAL||(LA216_0 >= DECREMENT_OP && LA216_0 <= DIFFERENCE_OP)||LA216_0==DYNAMIC||LA216_0==FLOAT_LITERAL||LA216_0==INCREMENT_OP||(LA216_0 >= LBRACE && LA216_0 <= LBRACKET)||LA216_0==LIDENTIFIER||LA216_0==LPAREN||LA216_0==NATURAL_LITERAL||LA216_0==OBJECT_DEFINITION||(LA216_0 >= OUTER && LA216_0 <= PACKAGE)||LA216_0==STRING_LITERAL||LA216_0==STRING_START||(LA216_0 >= SUM_OP && LA216_0 <= SUPER)||LA216_0==THIS||LA216_0==UIDENTIFIER||LA216_0==VERBATIM_STRING) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }
            switch (alt216) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2607:7: notOperator le= logicalNegationExpression
                    {
                    pushFollow(FOLLOW_notOperator_in_logicalNegationExpression17096);
                    notOperator396=notOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = notOperator396; }

                    pushFollow(FOLLOW_logicalNegationExpression_in_logicalNegationExpression17115);
                    le=logicalNegationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { notOperator396.setTerm(le); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2611:7: equalityExpression
                    {
                    pushFollow(FOLLOW_equalityExpression_in_logicalNegationExpression17131);
                    equalityExpression397=equalityExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = equalityExpression397; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "logicalNegationExpression"



    // $ANTLR start "notOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2615:1: notOperator returns [NotOp operator] : NOT_OP ;
    public NotOp notOperator() throws RecognitionException {
        NotOp operator = null;


        Token NOT_OP398=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2616:5: ( NOT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2616:7: NOT_OP
            {
            NOT_OP398=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_notOperator17160); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new NotOp(NOT_OP398); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "notOperator"



    // $ANTLR start "equalityExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2620:1: equalityExpression returns [Term term] : ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )? ;
    public Term equalityExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        Term ee2 =null;

        BinaryOperatorExpression equalityOperator399 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2621:5: (ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2621:7: ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )?
            {
            pushFollow(FOLLOW_comparisonExpression_in_equalityExpression17192);
            ee1=comparisonExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2623:7: ( equalityOperator ee2= comparisonExpression )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==EQUAL_OP||LA217_0==IDENTICAL_OP||LA217_0==NOT_EQUAL_OP) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2624:9: equalityOperator ee2= comparisonExpression
                    {
                    pushFollow(FOLLOW_equalityOperator_in_equalityExpression17218);
                    equalityOperator399=equalityOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { equalityOperator399.setLeftTerm(term);
                              term = equalityOperator399; }

                    pushFollow(FOLLOW_comparisonExpression_in_equalityExpression17241);
                    ee2=comparisonExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { equalityOperator399.setRightTerm(ee2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "equalityExpression"



    // $ANTLR start "equalityOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2632:1: equalityOperator returns [BinaryOperatorExpression operator] : ( EQUAL_OP | NOT_EQUAL_OP | IDENTICAL_OP );
    public BinaryOperatorExpression equalityOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token EQUAL_OP400=null;
        Token NOT_EQUAL_OP401=null;
        Token IDENTICAL_OP402=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2633:5: ( EQUAL_OP | NOT_EQUAL_OP | IDENTICAL_OP )
            int alt218=3;
            switch ( input.LA(1) ) {
            case EQUAL_OP:
                {
                alt218=1;
                }
                break;
            case NOT_EQUAL_OP:
                {
                alt218=2;
                }
                break;
            case IDENTICAL_OP:
                {
                alt218=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }

            switch (alt218) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2633:7: EQUAL_OP
                    {
                    EQUAL_OP400=(Token)match(input,EQUAL_OP,FOLLOW_EQUAL_OP_in_equalityOperator17281); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new EqualOp(EQUAL_OP400); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2635:7: NOT_EQUAL_OP
                    {
                    NOT_EQUAL_OP401=(Token)match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_equalityOperator17298); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new NotEqualOp(NOT_EQUAL_OP401); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2637:7: IDENTICAL_OP
                    {
                    IDENTICAL_OP402=(Token)match(input,IDENTICAL_OP,FOLLOW_IDENTICAL_OP_in_equalityOperator17314); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IdenticalOp(IDENTICAL_OP402); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "equalityOperator"



    // $ANTLR start "comparisonExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2641:1: comparisonExpression returns [Term term] : ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )? ;
    public Term comparisonExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        BinaryOperatorExpression co1 =null;

        Term ee2 =null;

        ComparisonOp lo1 =null;

        Term ee3 =null;

        ComparisonOp so1 =null;

        Term ee4 =null;

        ComparisonOp so2 =null;

        Term ee5 =null;

        TypeOperatorExpression to1 =null;

        StaticType t1 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2642:5: (ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2642:7: ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )?
            {
            pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17345);
            ee1=existenceEmptinessExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2644:7: (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )?
            int alt220=5;
            switch ( input.LA(1) ) {
                case COMPARE_OP:
                case IN_OP:
                    {
                    alt220=1;
                    }
                    break;
                case LARGER_OP:
                case LARGE_AS_OP:
                    {
                    alt220=2;
                    }
                    break;
                case SMALLER_OP:
                case SMALL_AS_OP:
                    {
                    alt220=3;
                    }
                    break;
                case CASE_TYPES:
                case EXTENDS:
                case IS_OP:
                case SATISFIES:
                    {
                    alt220=4;
                    }
                    break;
            }

            switch (alt220) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2645:9: co1= comparisonOperator ee2= existenceEmptinessExpression
                    {
                    pushFollow(FOLLOW_comparisonOperator_in_comparisonExpression17373);
                    co1=comparisonOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { co1.setLeftTerm(term);
                              term = co1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17396);
                    ee2=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { co1.setRightTerm(ee2); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2650:9: lo1= largerOperator ee3= existenceEmptinessExpression
                    {
                    pushFollow(FOLLOW_largerOperator_in_comparisonExpression17418);
                    lo1=largerOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { lo1.setLeftTerm(term);
                              term = lo1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17441);
                    ee3=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { lo1.setRightTerm(ee3); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2655:9: so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )?
                    {
                    pushFollow(FOLLOW_smallerOperator_in_comparisonExpression17463);
                    so1=smallerOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { so1.setLeftTerm(term);
                              term = so1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17486);
                    ee4=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { so1.setRightTerm(ee4); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2660:9: (so2= smallerOperator ee5= existenceEmptinessExpression )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( ((LA219_0 >= SMALLER_OP && LA219_0 <= SMALL_AS_OP)) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2661:11: so2= smallerOperator ee5= existenceEmptinessExpression
                            {
                            pushFollow(FOLLOW_smallerOperator_in_comparisonExpression17521);
                            so2=smallerOperator();

                            state._fsp--;
                            if (state.failed) return term;

                            pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17535);
                            ee5=existenceEmptinessExpression();

                            state._fsp--;
                            if (state.failed) return term;

                            if ( state.backtracking==0 ) { WithinOp w = new WithinOp(null); 
                                        Bound lb = so1 instanceof SmallerOp ?
                                            new OpenBound(null) : new ClosedBound(null);
                                        lb.setTerm(ee1);
                                        Bound ub = so2 instanceof SmallerOp ?
                                            new OpenBound(null) : new ClosedBound(null);
                                        ub.setTerm(ee5);
                                        w.setLowerBound(lb);
                                        w.setUpperBound(ub);
                                        w.setTerm(ee4);
                                        term = w; }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2675:9: to1= typeOperator t1= type
                    {
                    pushFollow(FOLLOW_typeOperator_in_comparisonExpression17570);
                    to1=typeOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { to1.setTerm(ee1); 
                              term = to1; }

                    pushFollow(FOLLOW_type_in_comparisonExpression17592);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { to1.setType(t1); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "comparisonExpression"



    // $ANTLR start "smallerOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2689:1: smallerOperator returns [ComparisonOp operator] : ( SMALL_AS_OP | SMALLER_OP );
    public ComparisonOp smallerOperator() throws RecognitionException {
        ComparisonOp operator = null;


        Token SMALL_AS_OP403=null;
        Token SMALLER_OP404=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2690:5: ( SMALL_AS_OP | SMALLER_OP )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==SMALL_AS_OP) ) {
                alt221=1;
            }
            else if ( (LA221_0==SMALLER_OP) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;

            }
            switch (alt221) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2690:7: SMALL_AS_OP
                    {
                    SMALL_AS_OP403=(Token)match(input,SMALL_AS_OP,FOLLOW_SMALL_AS_OP_in_smallerOperator17638); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SmallAsOp(SMALL_AS_OP403); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2692:7: SMALLER_OP
                    {
                    SMALLER_OP404=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_smallerOperator17654); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SmallerOp(SMALLER_OP404); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "smallerOperator"



    // $ANTLR start "largerOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2696:1: largerOperator returns [ComparisonOp operator] : ( LARGE_AS_OP | LARGER_OP );
    public ComparisonOp largerOperator() throws RecognitionException {
        ComparisonOp operator = null;


        Token LARGE_AS_OP405=null;
        Token LARGER_OP406=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2697:5: ( LARGE_AS_OP | LARGER_OP )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==LARGE_AS_OP) ) {
                alt222=1;
            }
            else if ( (LA222_0==LARGER_OP) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;

            }
            switch (alt222) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2697:7: LARGE_AS_OP
                    {
                    LARGE_AS_OP405=(Token)match(input,LARGE_AS_OP,FOLLOW_LARGE_AS_OP_in_largerOperator17683); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new LargeAsOp(LARGE_AS_OP405); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2699:7: LARGER_OP
                    {
                    LARGER_OP406=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_largerOperator17699); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new LargerOp(LARGER_OP406); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "largerOperator"



    // $ANTLR start "comparisonOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2703:1: comparisonOperator returns [BinaryOperatorExpression operator] : ( COMPARE_OP | IN_OP );
    public BinaryOperatorExpression comparisonOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token COMPARE_OP407=null;
        Token IN_OP408=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2704:5: ( COMPARE_OP | IN_OP )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==COMPARE_OP) ) {
                alt223=1;
            }
            else if ( (LA223_0==IN_OP) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;

            }
            switch (alt223) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2704:7: COMPARE_OP
                    {
                    COMPARE_OP407=(Token)match(input,COMPARE_OP,FOLLOW_COMPARE_OP_in_comparisonOperator17728); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new CompareOp(COMPARE_OP407); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2706:7: IN_OP
                    {
                    IN_OP408=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_comparisonOperator17745); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new InOp(IN_OP408); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "comparisonOperator"



    // $ANTLR start "typeOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2710:1: typeOperator returns [TypeOperatorExpression operator] : ( IS_OP | EXTENDS | SATISFIES | CASE_TYPES );
    public TypeOperatorExpression typeOperator() throws RecognitionException {
        TypeOperatorExpression operator = null;


        Token IS_OP409=null;
        Token EXTENDS410=null;
        Token SATISFIES411=null;
        Token CASE_TYPES412=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2711:5: ( IS_OP | EXTENDS | SATISFIES | CASE_TYPES )
            int alt224=4;
            switch ( input.LA(1) ) {
            case IS_OP:
                {
                alt224=1;
                }
                break;
            case EXTENDS:
                {
                alt224=2;
                }
                break;
            case SATISFIES:
                {
                alt224=3;
                }
                break;
            case CASE_TYPES:
                {
                alt224=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;

            }

            switch (alt224) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2711:7: IS_OP
                    {
                    IS_OP409=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_typeOperator17774); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IsOp(IS_OP409); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2713:7: EXTENDS
                    {
                    EXTENDS410=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_typeOperator17790); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Extends(EXTENDS410); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2715:7: SATISFIES
                    {
                    SATISFIES411=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_typeOperator17806); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Satisfies(SATISFIES411); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2717:7: CASE_TYPES
                    {
                    CASE_TYPES412=(Token)match(input,CASE_TYPES,FOLLOW_CASE_TYPES_in_typeOperator17822); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new OfOp(CASE_TYPES412); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "typeOperator"



    // $ANTLR start "existenceEmptinessExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2721:1: existenceEmptinessExpression returns [Term term] : de1= entryRangeExpression (eno1= existsNonemptyOperator )? ;
    public Term existenceEmptinessExpression() throws RecognitionException {
        Term term = null;


        Term de1 =null;

        UnaryOperatorExpression eno1 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2722:5: (de1= entryRangeExpression (eno1= existsNonemptyOperator )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2722:7: de1= entryRangeExpression (eno1= existsNonemptyOperator )?
            {
            pushFollow(FOLLOW_entryRangeExpression_in_existenceEmptinessExpression17853);
            de1=entryRangeExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = de1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2724:7: (eno1= existsNonemptyOperator )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==EXISTS||LA225_0==NONEMPTY) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2725:9: eno1= existsNonemptyOperator
                    {
                    pushFollow(FOLLOW_existsNonemptyOperator_in_existenceEmptinessExpression17881);
                    eno1=existsNonemptyOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = eno1;
                              eno1.setTerm(de1); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "existenceEmptinessExpression"



    // $ANTLR start "existsNonemptyOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2735:1: existsNonemptyOperator returns [UnaryOperatorExpression operator] : ( EXISTS | NONEMPTY );
    public UnaryOperatorExpression existsNonemptyOperator() throws RecognitionException {
        UnaryOperatorExpression operator = null;


        Token EXISTS413=null;
        Token NONEMPTY414=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2736:5: ( EXISTS | NONEMPTY )
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==EXISTS) ) {
                alt226=1;
            }
            else if ( (LA226_0==NONEMPTY) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;

            }
            switch (alt226) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2736:7: EXISTS
                    {
                    EXISTS413=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsNonemptyOperator17927); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Exists(EXISTS413); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2738:7: NONEMPTY
                    {
                    NONEMPTY414=(Token)match(input,NONEMPTY,FOLLOW_NONEMPTY_in_existsNonemptyOperator17944); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Nonempty(NONEMPTY414); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "existsNonemptyOperator"



    // $ANTLR start "entryRangeExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2742:1: entryRangeExpression returns [Term term] : ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )? ;
    public Term entryRangeExpression() throws RecognitionException {
        Term term = null;


        Term ae1 =null;

        Term ae2 =null;

        BinaryOperatorExpression rangeIntervalEntryOperator415 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2743:5: (ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2743:7: ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )?
            {
            pushFollow(FOLLOW_additiveExpression_in_entryRangeExpression17975);
            ae1=additiveExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ae1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2745:7: ( rangeIntervalEntryOperator ae2= additiveExpression )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==ENTRY_OP||LA227_0==RANGE_OP||LA227_0==SEGMENT_OP) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2746:9: rangeIntervalEntryOperator ae2= additiveExpression
                    {
                    pushFollow(FOLLOW_rangeIntervalEntryOperator_in_entryRangeExpression18001);
                    rangeIntervalEntryOperator415=rangeIntervalEntryOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { rangeIntervalEntryOperator415.setLeftTerm(term);
                              term = rangeIntervalEntryOperator415; }

                    pushFollow(FOLLOW_additiveExpression_in_entryRangeExpression18024);
                    ae2=additiveExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { rangeIntervalEntryOperator415.setRightTerm(ae2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "entryRangeExpression"



    // $ANTLR start "rangeIntervalEntryOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2754:1: rangeIntervalEntryOperator returns [BinaryOperatorExpression operator] : ( RANGE_OP | SEGMENT_OP | ENTRY_OP );
    public BinaryOperatorExpression rangeIntervalEntryOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token RANGE_OP416=null;
        Token SEGMENT_OP417=null;
        Token ENTRY_OP418=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2755:5: ( RANGE_OP | SEGMENT_OP | ENTRY_OP )
            int alt228=3;
            switch ( input.LA(1) ) {
            case RANGE_OP:
                {
                alt228=1;
                }
                break;
            case SEGMENT_OP:
                {
                alt228=2;
                }
                break;
            case ENTRY_OP:
                {
                alt228=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }

            switch (alt228) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2755:7: RANGE_OP
                    {
                    RANGE_OP416=(Token)match(input,RANGE_OP,FOLLOW_RANGE_OP_in_rangeIntervalEntryOperator18064); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RangeOp(RANGE_OP416); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2757:7: SEGMENT_OP
                    {
                    SEGMENT_OP417=(Token)match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_rangeIntervalEntryOperator18081); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SegmentOp(SEGMENT_OP417); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2759:7: ENTRY_OP
                    {
                    ENTRY_OP418=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_rangeIntervalEntryOperator18097); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new EntryOp(ENTRY_OP418); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "rangeIntervalEntryOperator"



    // $ANTLR start "additiveExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2763:1: additiveExpression returns [Term term] : me1= scaleExpression ( additiveOperator me2= scaleExpression )* ;
    public Term additiveExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        BinaryOperatorExpression additiveOperator419 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2764:5: (me1= scaleExpression ( additiveOperator me2= scaleExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2764:7: me1= scaleExpression ( additiveOperator me2= scaleExpression )*
            {
            pushFollow(FOLLOW_scaleExpression_in_additiveExpression18128);
            me1=scaleExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2766:7: ( additiveOperator me2= scaleExpression )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==DIFFERENCE_OP||LA229_0==SUM_OP) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2767:9: additiveOperator me2= scaleExpression
            	    {
            	    pushFollow(FOLLOW_additiveOperator_in_additiveExpression18154);
            	    additiveOperator419=additiveOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { additiveOperator419.setLeftTerm(term);
            	              term = additiveOperator419; }

            	    pushFollow(FOLLOW_scaleExpression_in_additiveExpression18177);
            	    me2=scaleExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { additiveOperator419.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "additiveExpression"



    // $ANTLR start "additiveOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2775:1: additiveOperator returns [BinaryOperatorExpression operator] : ( SUM_OP | DIFFERENCE_OP );
    public BinaryOperatorExpression additiveOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token SUM_OP420=null;
        Token DIFFERENCE_OP421=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2776:5: ( SUM_OP | DIFFERENCE_OP )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==SUM_OP) ) {
                alt230=1;
            }
            else if ( (LA230_0==DIFFERENCE_OP) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;

            }
            switch (alt230) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2776:7: SUM_OP
                    {
                    SUM_OP420=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_additiveOperator18217); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SumOp(SUM_OP420); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2778:7: DIFFERENCE_OP
                    {
                    DIFFERENCE_OP421=(Token)match(input,DIFFERENCE_OP,FOLLOW_DIFFERENCE_OP_in_additiveOperator18234); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DifferenceOp(DIFFERENCE_OP421); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "additiveOperator"



    // $ANTLR start "scaleExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2782:1: scaleExpression returns [Term term] : multiplicativeExpression ( scaleOperator se= scaleExpression )? ;
    public Term scaleExpression() throws RecognitionException {
        Term term = null;


        Term se =null;

        Term multiplicativeExpression422 =null;

        ScaleOp scaleOperator423 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2783:5: ( multiplicativeExpression ( scaleOperator se= scaleExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2783:7: multiplicativeExpression ( scaleOperator se= scaleExpression )?
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_scaleExpression18263);
            multiplicativeExpression422=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = multiplicativeExpression422; }

            // /home/david/git/ceylon-spec/Ceylon.g:2785:7: ( scaleOperator se= scaleExpression )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==SCALE_OP) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2786:9: scaleOperator se= scaleExpression
                    {
                    pushFollow(FOLLOW_scaleOperator_in_scaleExpression18289);
                    scaleOperator423=scaleOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { scaleOperator423.setLeftTerm(term);
                              term = scaleOperator423; }

                    pushFollow(FOLLOW_scaleExpression_in_scaleExpression18311);
                    se=scaleExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { scaleOperator423.setRightTerm(se); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "scaleExpression"



    // $ANTLR start "multiplicativeExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2794:1: multiplicativeExpression returns [Term term] : ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )* ;
    public Term multiplicativeExpression() throws RecognitionException {
        Term term = null;


        Term ue1 =null;

        Term ue2 =null;

        BinaryOperatorExpression multiplicativeOperator424 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2795:5: (ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2795:7: ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )*
            {
            pushFollow(FOLLOW_unionExpression_in_multiplicativeExpression18353);
            ue1=unionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ue1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2797:7: ( multiplicativeOperator ue2= unionExpression )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( ((LA232_0 >= PRODUCT_OP && LA232_0 <= QUOTIENT_OP)||LA232_0==REMAINDER_OP) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2798:9: multiplicativeOperator ue2= unionExpression
            	    {
            	    pushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression18379);
            	    multiplicativeOperator424=multiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { multiplicativeOperator424.setLeftTerm(term);
            	              term = multiplicativeOperator424; }

            	    pushFollow(FOLLOW_unionExpression_in_multiplicativeExpression18402);
            	    ue2=unionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { multiplicativeOperator424.setRightTerm(ue2); }

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "multiplicativeExpression"



    // $ANTLR start "multiplicativeOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2806:1: multiplicativeOperator returns [BinaryOperatorExpression operator] : ( PRODUCT_OP | QUOTIENT_OP | REMAINDER_OP );
    public BinaryOperatorExpression multiplicativeOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token PRODUCT_OP425=null;
        Token QUOTIENT_OP426=null;
        Token REMAINDER_OP427=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2807:5: ( PRODUCT_OP | QUOTIENT_OP | REMAINDER_OP )
            int alt233=3;
            switch ( input.LA(1) ) {
            case PRODUCT_OP:
                {
                alt233=1;
                }
                break;
            case QUOTIENT_OP:
                {
                alt233=2;
                }
                break;
            case REMAINDER_OP:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }

            switch (alt233) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2807:7: PRODUCT_OP
                    {
                    PRODUCT_OP425=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_multiplicativeOperator18442); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ProductOp(PRODUCT_OP425); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2809:7: QUOTIENT_OP
                    {
                    QUOTIENT_OP426=(Token)match(input,QUOTIENT_OP,FOLLOW_QUOTIENT_OP_in_multiplicativeOperator18459); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new QuotientOp(QUOTIENT_OP426); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2811:7: REMAINDER_OP
                    {
                    REMAINDER_OP427=(Token)match(input,REMAINDER_OP,FOLLOW_REMAINDER_OP_in_multiplicativeOperator18475); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RemainderOp(REMAINDER_OP427); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "multiplicativeOperator"



    // $ANTLR start "unionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2815:1: unionExpression returns [Term term] : ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )* ;
    public Term unionExpression() throws RecognitionException {
        Term term = null;


        Term ie1 =null;

        Term ie2 =null;

        BinaryOperatorExpression unionOperator428 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2816:5: (ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2816:7: ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )*
            {
            pushFollow(FOLLOW_intersectionExpression_in_unionExpression18506);
            ie1=intersectionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ie1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2818:7: ( unionOperator ie2= intersectionExpression )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==COMPLEMENT_OP||LA234_0==UNION_OP) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2819:9: unionOperator ie2= intersectionExpression
            	    {
            	    pushFollow(FOLLOW_unionOperator_in_unionExpression18532);
            	    unionOperator428=unionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { unionOperator428.setLeftTerm(term);
            	              term = unionOperator428; }

            	    pushFollow(FOLLOW_intersectionExpression_in_unionExpression18555);
            	    ie2=intersectionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { unionOperator428.setRightTerm(ie2); }

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "unionExpression"



    // $ANTLR start "unionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2827:1: unionOperator returns [BinaryOperatorExpression operator] : ( UNION_OP | COMPLEMENT_OP );
    public BinaryOperatorExpression unionOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token UNION_OP429=null;
        Token COMPLEMENT_OP430=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2828:5: ( UNION_OP | COMPLEMENT_OP )
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==UNION_OP) ) {
                alt235=1;
            }
            else if ( (LA235_0==COMPLEMENT_OP) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;

            }
            switch (alt235) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2828:7: UNION_OP
                    {
                    UNION_OP429=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_unionOperator18599); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new UnionOp(UNION_OP429); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2830:7: COMPLEMENT_OP
                    {
                    COMPLEMENT_OP430=(Token)match(input,COMPLEMENT_OP,FOLLOW_COMPLEMENT_OP_in_unionOperator18615); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ComplementOp(COMPLEMENT_OP430); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "unionOperator"



    // $ANTLR start "intersectionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2834:1: intersectionExpression returns [Term term] : ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )* ;
    public Term intersectionExpression() throws RecognitionException {
        Term term = null;


        Term ne1 =null;

        Term ne2 =null;

        BinaryOperatorExpression intersectionOperator431 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2835:5: (ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2835:7: ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )*
            {
            pushFollow(FOLLOW_negationComplementExpression_in_intersectionExpression18646);
            ne1=negationComplementExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ne1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2837:7: ( intersectionOperator ne2= negationComplementExpression )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==INTERSECTION_OP) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2838:9: intersectionOperator ne2= negationComplementExpression
            	    {
            	    pushFollow(FOLLOW_intersectionOperator_in_intersectionExpression18672);
            	    intersectionOperator431=intersectionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { intersectionOperator431.setLeftTerm(term);
            	              term = intersectionOperator431; }

            	    pushFollow(FOLLOW_negationComplementExpression_in_intersectionExpression18695);
            	    ne2=negationComplementExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { intersectionOperator431.setRightTerm(ne2); }

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "intersectionExpression"



    // $ANTLR start "intersectionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2846:1: intersectionOperator returns [BinaryOperatorExpression operator] : INTERSECTION_OP ;
    public BinaryOperatorExpression intersectionOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token INTERSECTION_OP432=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2847:5: ( INTERSECTION_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2847:7: INTERSECTION_OP
            {
            INTERSECTION_OP432=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_intersectionOperator18739); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new IntersectionOp(INTERSECTION_OP432); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "intersectionOperator"



    // $ANTLR start "negationComplementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2851:1: negationComplementExpression returns [Term term] : ( unaryMinusOrComplementOperator ne= negationComplementExpression | exponentiationExpression );
    public Term negationComplementExpression() throws RecognitionException {
        Term term = null;


        Term ne =null;

        UnaryOperatorExpression unaryMinusOrComplementOperator433 =null;

        Term exponentiationExpression434 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2852:5: ( unaryMinusOrComplementOperator ne= negationComplementExpression | exponentiationExpression )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==DIFFERENCE_OP||LA237_0==SUM_OP) ) {
                alt237=1;
            }
            else if ( (LA237_0==BACKTICK||LA237_0==CHAR_LITERAL||LA237_0==DECREMENT_OP||LA237_0==DYNAMIC||LA237_0==FLOAT_LITERAL||LA237_0==INCREMENT_OP||(LA237_0 >= LBRACE && LA237_0 <= LBRACKET)||LA237_0==LIDENTIFIER||LA237_0==LPAREN||LA237_0==NATURAL_LITERAL||LA237_0==OBJECT_DEFINITION||(LA237_0 >= OUTER && LA237_0 <= PACKAGE)||LA237_0==STRING_LITERAL||LA237_0==STRING_START||LA237_0==SUPER||LA237_0==THIS||LA237_0==UIDENTIFIER||LA237_0==VERBATIM_STRING) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;

            }
            switch (alt237) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2852:7: unaryMinusOrComplementOperator ne= negationComplementExpression
                    {
                    pushFollow(FOLLOW_unaryMinusOrComplementOperator_in_negationComplementExpression18768);
                    unaryMinusOrComplementOperator433=unaryMinusOrComplementOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = unaryMinusOrComplementOperator433; }

                    pushFollow(FOLLOW_negationComplementExpression_in_negationComplementExpression18787);
                    ne=negationComplementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { unaryMinusOrComplementOperator433.setTerm(ne); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2856:7: exponentiationExpression
                    {
                    pushFollow(FOLLOW_exponentiationExpression_in_negationComplementExpression18803);
                    exponentiationExpression434=exponentiationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = exponentiationExpression434; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "negationComplementExpression"



    // $ANTLR start "unaryMinusOrComplementOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2860:1: unaryMinusOrComplementOperator returns [UnaryOperatorExpression operator] : ( DIFFERENCE_OP | SUM_OP );
    public UnaryOperatorExpression unaryMinusOrComplementOperator() throws RecognitionException {
        UnaryOperatorExpression operator = null;


        Token DIFFERENCE_OP435=null;
        Token SUM_OP436=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2861:5: ( DIFFERENCE_OP | SUM_OP )
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==DIFFERENCE_OP) ) {
                alt238=1;
            }
            else if ( (LA238_0==SUM_OP) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;

            }
            switch (alt238) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2861:7: DIFFERENCE_OP
                    {
                    DIFFERENCE_OP435=(Token)match(input,DIFFERENCE_OP,FOLLOW_DIFFERENCE_OP_in_unaryMinusOrComplementOperator18832); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new NegativeOp(DIFFERENCE_OP435); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2863:7: SUM_OP
                    {
                    SUM_OP436=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_unaryMinusOrComplementOperator18849); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PositiveOp(SUM_OP436); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "unaryMinusOrComplementOperator"



    // $ANTLR start "exponentiationExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2867:1: exponentiationExpression returns [Term term] : incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )? ;
    public Term exponentiationExpression() throws RecognitionException {
        Term term = null;


        Term ee =null;

        Term incrementDecrementExpression437 =null;

        PowerOp exponentiationOperator438 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2868:5: ( incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2868:7: incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )?
            {
            pushFollow(FOLLOW_incrementDecrementExpression_in_exponentiationExpression18878);
            incrementDecrementExpression437=incrementDecrementExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = incrementDecrementExpression437; }

            // /home/david/git/ceylon-spec/Ceylon.g:2870:7: ( exponentiationOperator ee= exponentiationExpression )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==POWER_OP) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2871:9: exponentiationOperator ee= exponentiationExpression
                    {
                    pushFollow(FOLLOW_exponentiationOperator_in_exponentiationExpression18904);
                    exponentiationOperator438=exponentiationOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { exponentiationOperator438.setLeftTerm(term);
                              term = exponentiationOperator438; }

                    pushFollow(FOLLOW_exponentiationExpression_in_exponentiationExpression18926);
                    ee=exponentiationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { exponentiationOperator438.setRightTerm(ee); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "exponentiationExpression"



    // $ANTLR start "exponentiationOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2879:1: exponentiationOperator returns [PowerOp operator] : POWER_OP ;
    public PowerOp exponentiationOperator() throws RecognitionException {
        PowerOp operator = null;


        Token POWER_OP439=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2880:5: ( POWER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2880:7: POWER_OP
            {
            POWER_OP439=(Token)match(input,POWER_OP,FOLLOW_POWER_OP_in_exponentiationOperator18966); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new PowerOp(POWER_OP439); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "exponentiationOperator"



    // $ANTLR start "scaleOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2884:1: scaleOperator returns [ScaleOp operator] : SCALE_OP ;
    public ScaleOp scaleOperator() throws RecognitionException {
        ScaleOp operator = null;


        Token SCALE_OP440=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2885:5: ( SCALE_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2885:7: SCALE_OP
            {
            SCALE_OP440=(Token)match(input,SCALE_OP,FOLLOW_SCALE_OP_in_scaleOperator18996); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new ScaleOp(SCALE_OP440); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "scaleOperator"



    // $ANTLR start "incrementDecrementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2889:1: incrementDecrementExpression returns [Term term] : ( prefixOperator ie= incrementDecrementExpression | postfixIncrementDecrementExpression );
    public Term incrementDecrementExpression() throws RecognitionException {
        Term term = null;


        Term ie =null;

        PrefixOperatorExpression prefixOperator441 =null;

        Term postfixIncrementDecrementExpression442 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2890:5: ( prefixOperator ie= incrementDecrementExpression | postfixIncrementDecrementExpression )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==DECREMENT_OP||LA240_0==INCREMENT_OP) ) {
                alt240=1;
            }
            else if ( (LA240_0==BACKTICK||LA240_0==CHAR_LITERAL||LA240_0==DYNAMIC||LA240_0==FLOAT_LITERAL||(LA240_0 >= LBRACE && LA240_0 <= LBRACKET)||LA240_0==LIDENTIFIER||LA240_0==LPAREN||LA240_0==NATURAL_LITERAL||LA240_0==OBJECT_DEFINITION||(LA240_0 >= OUTER && LA240_0 <= PACKAGE)||LA240_0==STRING_LITERAL||LA240_0==STRING_START||LA240_0==SUPER||LA240_0==THIS||LA240_0==UIDENTIFIER||LA240_0==VERBATIM_STRING) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;

            }
            switch (alt240) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2890:7: prefixOperator ie= incrementDecrementExpression
                    {
                    pushFollow(FOLLOW_prefixOperator_in_incrementDecrementExpression19026);
                    prefixOperator441=prefixOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = prefixOperator441; }

                    pushFollow(FOLLOW_incrementDecrementExpression_in_incrementDecrementExpression19044);
                    ie=incrementDecrementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { prefixOperator441.setTerm(ie); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2894:7: postfixIncrementDecrementExpression
                    {
                    pushFollow(FOLLOW_postfixIncrementDecrementExpression_in_incrementDecrementExpression19060);
                    postfixIncrementDecrementExpression442=postfixIncrementDecrementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = postfixIncrementDecrementExpression442; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "incrementDecrementExpression"



    // $ANTLR start "prefixOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2898:1: prefixOperator returns [PrefixOperatorExpression operator] : ( DECREMENT_OP | INCREMENT_OP );
    public PrefixOperatorExpression prefixOperator() throws RecognitionException {
        PrefixOperatorExpression operator = null;


        Token DECREMENT_OP443=null;
        Token INCREMENT_OP444=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2899:5: ( DECREMENT_OP | INCREMENT_OP )
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==DECREMENT_OP) ) {
                alt241=1;
            }
            else if ( (LA241_0==INCREMENT_OP) ) {
                alt241=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }
            switch (alt241) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2899:7: DECREMENT_OP
                    {
                    DECREMENT_OP443=(Token)match(input,DECREMENT_OP,FOLLOW_DECREMENT_OP_in_prefixOperator19089); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DecrementOp(DECREMENT_OP443); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2901:7: INCREMENT_OP
                    {
                    INCREMENT_OP444=(Token)match(input,INCREMENT_OP,FOLLOW_INCREMENT_OP_in_prefixOperator19106); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IncrementOp(INCREMENT_OP444); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "prefixOperator"



    // $ANTLR start "postfixIncrementDecrementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2905:1: postfixIncrementDecrementExpression returns [Term term] : primary ( postfixOperator )* ;
    public Term postfixIncrementDecrementExpression() throws RecognitionException {
        Term term = null;


        Primary primary445 =null;

        PostfixOperatorExpression postfixOperator446 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2906:5: ( primary ( postfixOperator )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2906:7: primary ( postfixOperator )*
            {
            pushFollow(FOLLOW_primary_in_postfixIncrementDecrementExpression19136);
            primary445=primary();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = primary445; }

            // /home/david/git/ceylon-spec/Ceylon.g:2908:7: ( postfixOperator )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==DECREMENT_OP||LA242_0==INCREMENT_OP) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2909:9: postfixOperator
            	    {
            	    pushFollow(FOLLOW_postfixOperator_in_postfixIncrementDecrementExpression19164);
            	    postfixOperator446=postfixOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { postfixOperator446.setTerm(term);
            	              term = postfixOperator446; }

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "postfixIncrementDecrementExpression"



    // $ANTLR start "postfixOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2915:1: postfixOperator returns [PostfixOperatorExpression operator] : ( DECREMENT_OP | INCREMENT_OP );
    public PostfixOperatorExpression postfixOperator() throws RecognitionException {
        PostfixOperatorExpression operator = null;


        Token DECREMENT_OP447=null;
        Token INCREMENT_OP448=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2916:5: ( DECREMENT_OP | INCREMENT_OP )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==DECREMENT_OP) ) {
                alt243=1;
            }
            else if ( (LA243_0==INCREMENT_OP) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;

            }
            switch (alt243) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2916:7: DECREMENT_OP
                    {
                    DECREMENT_OP447=(Token)match(input,DECREMENT_OP,FOLLOW_DECREMENT_OP_in_postfixOperator19204); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PostfixDecrementOp(DECREMENT_OP447); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2918:7: INCREMENT_OP
                    {
                    INCREMENT_OP448=(Token)match(input,INCREMENT_OP,FOLLOW_INCREMENT_OP_in_postfixOperator19221); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PostfixIncrementOp(INCREMENT_OP448); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "postfixOperator"



    // $ANTLR start "selfReference"
    // /home/david/git/ceylon-spec/Ceylon.g:2922:1: selfReference returns [Atom atom] : ( THIS | SUPER | OUTER | PACKAGE );
    public Atom selfReference() throws RecognitionException {
        Atom atom = null;


        Token THIS449=null;
        Token SUPER450=null;
        Token OUTER451=null;
        Token PACKAGE452=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2923:5: ( THIS | SUPER | OUTER | PACKAGE )
            int alt244=4;
            switch ( input.LA(1) ) {
            case THIS:
                {
                alt244=1;
                }
                break;
            case SUPER:
                {
                alt244=2;
                }
                break;
            case OUTER:
                {
                alt244=3;
                }
                break;
            case PACKAGE:
                {
                alt244=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return atom;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }

            switch (alt244) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2923:7: THIS
                    {
                    THIS449=(Token)match(input,THIS,FOLLOW_THIS_in_selfReference19251); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new This(THIS449); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2925:7: SUPER
                    {
                    SUPER450=(Token)match(input,SUPER,FOLLOW_SUPER_in_selfReference19267); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Super(SUPER450); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2927:7: OUTER
                    {
                    OUTER451=(Token)match(input,OUTER,FOLLOW_OUTER_in_selfReference19284); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Outer(OUTER451); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2929:7: PACKAGE
                    {
                    PACKAGE452=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_selfReference19300); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Package(PACKAGE452); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return atom;
    }
    // $ANTLR end "selfReference"



    // $ANTLR start "nonstringLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:2933:1: nonstringLiteral returns [Literal literal] : ( NATURAL_LITERAL | FLOAT_LITERAL | CHAR_LITERAL );
    public Literal nonstringLiteral() throws RecognitionException {
        Literal literal = null;


        Token NATURAL_LITERAL453=null;
        Token FLOAT_LITERAL454=null;
        Token CHAR_LITERAL455=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2934:5: ( NATURAL_LITERAL | FLOAT_LITERAL | CHAR_LITERAL )
            int alt245=3;
            switch ( input.LA(1) ) {
            case NATURAL_LITERAL:
                {
                alt245=1;
                }
                break;
            case FLOAT_LITERAL:
                {
                alt245=2;
                }
                break;
            case CHAR_LITERAL:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return literal;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2934:7: NATURAL_LITERAL
                    {
                    NATURAL_LITERAL453=(Token)match(input,NATURAL_LITERAL,FOLLOW_NATURAL_LITERAL_in_nonstringLiteral19333); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new NaturalLiteral(NATURAL_LITERAL453); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2936:7: FLOAT_LITERAL
                    {
                    FLOAT_LITERAL454=(Token)match(input,FLOAT_LITERAL,FOLLOW_FLOAT_LITERAL_in_nonstringLiteral19350); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new FloatLiteral(FLOAT_LITERAL454); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2938:7: CHAR_LITERAL
                    {
                    CHAR_LITERAL455=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_nonstringLiteral19367); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new CharLiteral(CHAR_LITERAL455); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return literal;
    }
    // $ANTLR end "nonstringLiteral"



    // $ANTLR start "stringLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:2942:1: stringLiteral returns [StringLiteral stringLiteral] : ( STRING_LITERAL | VERBATIM_STRING );
    public StringLiteral stringLiteral() throws RecognitionException {
        StringLiteral stringLiteral = null;


        Token STRING_LITERAL456=null;
        Token VERBATIM_STRING457=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2943:5: ( STRING_LITERAL | VERBATIM_STRING )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==STRING_LITERAL) ) {
                alt246=1;
            }
            else if ( (LA246_0==VERBATIM_STRING) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stringLiteral;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;

            }
            switch (alt246) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2943:7: STRING_LITERAL
                    {
                    STRING_LITERAL456=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringLiteral19397); if (state.failed) return stringLiteral;

                    if ( state.backtracking==0 ) { stringLiteral = new StringLiteral(STRING_LITERAL456); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2945:7: VERBATIM_STRING
                    {
                    VERBATIM_STRING457=(Token)match(input,VERBATIM_STRING,FOLLOW_VERBATIM_STRING_in_stringLiteral19414); if (state.failed) return stringLiteral;

                    if ( state.backtracking==0 ) { stringLiteral = new StringLiteral(VERBATIM_STRING457); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return stringLiteral;
    }
    // $ANTLR end "stringLiteral"



    // $ANTLR start "stringExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2949:1: stringExpression returns [Atom atom] : (sl1= stringLiteral | STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END );
    public Atom stringExpression() throws RecognitionException {
        Atom atom = null;


        Token STRING_START458=null;
        Token STRING_MID459=null;
        Token STRING_END460=null;
        StringLiteral sl1 =null;

        Expression e1 =null;

        Expression e2 =null;


         StringTemplate st=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2951:5: (sl1= stringLiteral | STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END )
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==STRING_LITERAL||LA248_0==VERBATIM_STRING) ) {
                alt248=1;
            }
            else if ( (LA248_0==STRING_START) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return atom;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }
            switch (alt248) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2951:7: sl1= stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_stringExpression19454);
                    sl1=stringLiteral();

                    state._fsp--;
                    if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom =sl1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2953:7: STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END
                    {
                    STRING_START458=(Token)match(input,STRING_START,FOLLOW_STRING_START_in_stringExpression19470); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { st = new StringTemplate(null);
                            st.addStringLiteral(new StringLiteral(STRING_START458));
                            atom =st; }

                    pushFollow(FOLLOW_expression_in_stringExpression19488);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return atom;

                    if ( state.backtracking==0 ) { if (e1!=null) 
                                st.addExpression(e1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2960:7: ( STRING_MID e2= expression )*
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);

                        if ( (LA247_0==STRING_MID) ) {
                            alt247=1;
                        }


                        switch (alt247) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2961:9: STRING_MID e2= expression
                    	    {
                    	    STRING_MID459=(Token)match(input,STRING_MID,FOLLOW_STRING_MID_in_stringExpression19514); if (state.failed) return atom;

                    	    if ( state.backtracking==0 ) { st.addStringLiteral(new StringLiteral(STRING_MID459)); }

                    	    pushFollow(FOLLOW_expression_in_stringExpression19536);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return atom;

                    	    if ( state.backtracking==0 ) { if (e2!=null) 
                    	                  st.addExpression(e2); }

                    	    }
                    	    break;

                    	default :
                    	    break loop247;
                        }
                    } while (true);


                    STRING_END460=(Token)match(input,STRING_END,FOLLOW_STRING_END_in_stringExpression19563); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { st.addStringLiteral(new StringLiteral(STRING_END460)); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return atom;
    }
    // $ANTLR end "stringExpression"



    // $ANTLR start "typeArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:2971:1: typeArguments returns [TypeArgumentList typeArgumentList] : SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP ;
    public TypeArgumentList typeArguments() throws RecognitionException {
        TypeArgumentList typeArgumentList = null;


        Token c=null;
        Token SMALLER_OP461=null;
        Token LARGER_OP462=null;
        TypeVariance v1 =null;

        StaticType ta1 =null;

        StaticType ta0 =null;

        TypeVariance v2 =null;

        StaticType ta2 =null;

        StaticType ta3 =null;


         TypeVariance v=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2973:5: ( SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2973:7: SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP
            {
            SMALLER_OP461=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArguments19601); if (state.failed) return typeArgumentList;

            if ( state.backtracking==0 ) { typeArgumentList = new TypeArgumentList(SMALLER_OP461); }

            // /home/david/git/ceylon-spec/Ceylon.g:2975:7: ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==IN_OP||(LA255_0 >= LBRACE && LA255_0 <= LBRACKET)||LA255_0==OUT||LA255_0==SMALLER_OP||LA255_0==UIDENTIFIER) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2976:9: (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )*
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2976:9: (v1= variance (ta1= type )? |ta0= type )
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==IN_OP||LA250_0==OUT) ) {
                        alt250=1;
                    }
                    else if ( ((LA250_0 >= LBRACE && LA250_0 <= LBRACKET)||LA250_0==SMALLER_OP||LA250_0==UIDENTIFIER) ) {
                        alt250=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 0, input);

                        throw nvae;

                    }
                    switch (alt250) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2977:11: v1= variance (ta1= type )?
                            {
                            pushFollow(FOLLOW_variance_in_typeArguments19641);
                            v1=variance();

                            state._fsp--;
                            if (state.failed) return typeArgumentList;

                            if ( state.backtracking==0 ) { v = v1; }

                            // /home/david/git/ceylon-spec/Ceylon.g:2979:11: (ta1= type )?
                            int alt249=2;
                            int LA249_0 = input.LA(1);

                            if ( ((LA249_0 >= LBRACE && LA249_0 <= LBRACKET)||LA249_0==SMALLER_OP||LA249_0==UIDENTIFIER) ) {
                                alt249=1;
                            }
                            switch (alt249) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2980:13: ta1= type
                                    {
                                    pushFollow(FOLLOW_type_in_typeArguments19681);
                                    ta1=type();

                                    state._fsp--;
                                    if (state.failed) return typeArgumentList;

                                    if ( state.backtracking==0 ) { if (ta1!=null)
                                                      typeArgumentList.addType(ta1);
                                                  if (v!=null && ta1!=null) 
                                                      ta1.setTypeVariance(v); }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2987:11: ta0= type
                            {
                            pushFollow(FOLLOW_type_in_typeArguments19732);
                            ta0=type();

                            state._fsp--;
                            if (state.failed) return typeArgumentList;

                            if ( state.backtracking==0 ) { if (ta0!=null)
                                            typeArgumentList.addType(ta0); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:2991:9: (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )*
                    loop254:
                    do {
                        int alt254=2;
                        int LA254_0 = input.LA(1);

                        if ( (LA254_0==COMMA) ) {
                            alt254=1;
                        }


                        switch (alt254) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2992:11: c= COMMA (v2= variance (ta2= type |) | (ta3= type |) )
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments19778); if (state.failed) return typeArgumentList;

                    	    if ( state.backtracking==0 ) { typeArgumentList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:2994:11: (v2= variance (ta2= type |) | (ta3= type |) )
                    	    int alt253=2;
                    	    int LA253_0 = input.LA(1);

                    	    if ( (LA253_0==IN_OP||LA253_0==OUT) ) {
                    	        alt253=1;
                    	    }
                    	    else if ( (LA253_0==COMMA||LA253_0==LARGER_OP||(LA253_0 >= LBRACE && LA253_0 <= LBRACKET)||LA253_0==SMALLER_OP||LA253_0==UIDENTIFIER) ) {
                    	        alt253=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 253, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt253) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:2995:13: v2= variance (ta2= type |)
                    	            {
                    	            pushFollow(FOLLOW_variance_in_typeArguments19818);
                    	            v2=variance();

                    	            state._fsp--;
                    	            if (state.failed) return typeArgumentList;

                    	            if ( state.backtracking==0 ) { v = v2; }

                    	            // /home/david/git/ceylon-spec/Ceylon.g:2997:13: (ta2= type |)
                    	            int alt251=2;
                    	            int LA251_0 = input.LA(1);

                    	            if ( ((LA251_0 >= LBRACE && LA251_0 <= LBRACKET)||LA251_0==SMALLER_OP||LA251_0==UIDENTIFIER) ) {
                    	                alt251=1;
                    	            }
                    	            else if ( (LA251_0==COMMA||LA251_0==LARGER_OP) ) {
                    	                alt251=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 251, 0, input);

                    	                throw nvae;

                    	            }
                    	            switch (alt251) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:2998:15: ta2= type
                    	                    {
                    	                    pushFollow(FOLLOW_type_in_typeArguments19864);
                    	                    ta2=type();

                    	                    state._fsp--;
                    	                    if (state.failed) return typeArgumentList;

                    	                    if ( state.backtracking==0 ) { if (ta2!=null) {
                    	                                        typeArgumentList.addType(ta2);
                    	                                        if (v!=null && ta2!=null) 
                    	                                            ta2.setTypeVariance(v);
                    	                                        typeArgumentList.setEndToken(null); } }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:3004:15: 
                    	                    {
                    	                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                                          new MismatchedTokenException(UIDENTIFIER, input)); }

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3008:13: (ta3= type |)
                    	            {
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3008:13: (ta3= type |)
                    	            int alt252=2;
                    	            int LA252_0 = input.LA(1);

                    	            if ( ((LA252_0 >= LBRACE && LA252_0 <= LBRACKET)||LA252_0==SMALLER_OP||LA252_0==UIDENTIFIER) ) {
                    	                alt252=1;
                    	            }
                    	            else if ( (LA252_0==COMMA||LA252_0==LARGER_OP) ) {
                    	                alt252=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 252, 0, input);

                    	                throw nvae;

                    	            }
                    	            switch (alt252) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:3009:15: ta3= type
                    	                    {
                    	                    pushFollow(FOLLOW_type_in_typeArguments19955);
                    	                    ta3=type();

                    	                    state._fsp--;
                    	                    if (state.failed) return typeArgumentList;

                    	                    if ( state.backtracking==0 ) { if (ta3!=null) {
                    	                                        typeArgumentList.addType(ta3);
                    	                                        typeArgumentList.setEndToken(null); } }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:3013:15: 
                    	                    {
                    	                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                                      new MismatchedTokenException(UIDENTIFIER, input)); }

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop254;
                        }
                    } while (true);


                    }
                    break;

            }


            LARGER_OP462=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeArguments20041); if (state.failed) return typeArgumentList;

            if ( state.backtracking==0 ) { typeArgumentList.setEndToken(LARGER_OP462); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeArgumentList;
    }
    // $ANTLR end "typeArguments"



    // $ANTLR start "variadicType"
    // /home/david/git/ceylon-spec/Ceylon.g:3023:1: variadicType returns [Type type] : ( ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )? |t= type );
    public Type variadicType() throws RecognitionException {
        Type type = null;


        Token PRODUCT_OP463=null;
        Token SUM_OP464=null;
        StaticType at =null;

        StaticType t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3024:5: ( ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )? |t= type )
            int alt257=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA257_1 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA257_2 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA257_3 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA257_4 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }

            switch (alt257) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3024:7: ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )?
                    {
                    pushFollow(FOLLOW_unionType_in_variadicType20089);
                    at=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = at; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3027:7: ( PRODUCT_OP | SUM_OP )?
                    int alt256=3;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==PRODUCT_OP) ) {
                        alt256=1;
                    }
                    else if ( (LA256_0==SUM_OP) ) {
                        alt256=2;
                    }
                    switch (alt256) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3028:9: PRODUCT_OP
                            {
                            PRODUCT_OP463=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_variadicType20115); if (state.failed) return type;

                            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(null);
                                      st.setType(at); 
                                      st.setEndToken(PRODUCT_OP463);
                                      type = st; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3034:9: SUM_OP
                            {
                            SUM_OP464=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_variadicType20143); if (state.failed) return type;

                            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(null);
                                      st.setType(at); 
                                      st.setEndToken(SUM_OP464);
                                      st.setAtLeastOne(true);
                                      type = st; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3041:7: t= type
                    {
                    pushFollow(FOLLOW_type_in_variadicType20172);
                    t=type();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = t; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "variadicType"



    // $ANTLR start "defaultedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3045:1: defaultedType returns [Type type] : ( ( type ( SPECIFY ) )=>t= type ( SPECIFY )? | variadicType );
    public Type defaultedType() throws RecognitionException {
        Type type = null;


        Token SPECIFY465=null;
        StaticType t =null;

        Type variadicType466 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3046:5: ( ( type ( SPECIFY ) )=>t= type ( SPECIFY )? | variadicType )
            int alt259=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA259_1 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA259_2 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA259_3 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA259_4 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;

            }

            switch (alt259) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3046:7: ( type ( SPECIFY ) )=>t= type ( SPECIFY )?
                    {
                    pushFollow(FOLLOW_type_in_defaultedType20218);
                    t=type();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = t; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3049:7: ( SPECIFY )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==SPECIFY) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3050:9: SPECIFY
                            {
                            SPECIFY465=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_defaultedType20244); if (state.failed) return type;

                            if ( state.backtracking==0 ) { DefaultedType st = new DefaultedType(null);
                                      st.setType(t); 
                                      st.setEndToken(SPECIFY465);
                                      type = st; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3056:7: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_defaultedType20271);
                    variadicType466=variadicType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =variadicType466; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "defaultedType"



    // $ANTLR start "spreadType"
    // /home/david/git/ceylon-spec/Ceylon.g:3060:1: spreadType returns [Type type] : PRODUCT_OP (sp= unionType )? ;
    public Type spreadType() throws RecognitionException {
        Type type = null;


        Token PRODUCT_OP467=null;
        StaticType sp =null;


         SpreadType spt = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3062:5: ( PRODUCT_OP (sp= unionType )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3062:7: PRODUCT_OP (sp= unionType )?
            {
            PRODUCT_OP467=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_spreadType20309); if (state.failed) return type;

            if ( state.backtracking==0 ) { spt = new SpreadType(PRODUCT_OP467);
                    type =spt; }

            // /home/david/git/ceylon-spec/Ceylon.g:3065:7: (sp= unionType )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( ((LA260_0 >= LBRACE && LA260_0 <= LBRACKET)||LA260_0==SMALLER_OP||LA260_0==UIDENTIFIER) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3066:9: sp= unionType
                    {
                    pushFollow(FOLLOW_unionType_in_spreadType20337);
                    sp=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { spt.setType(sp); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "spreadType"



    // $ANTLR start "tupleType"
    // /home/david/git/ceylon-spec/Ceylon.g:3071:1: tupleType returns [TupleType type] : LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET ;
    public TupleType tupleType() throws RecognitionException {
        TupleType type = null;


        Token c=null;
        Token LBRACKET468=null;
        Token RBRACKET469=null;
        Type spt =null;

        Type t1 =null;

        Type t2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3072:5: ( LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:3072:7: LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET
            {
            LBRACKET468=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tupleType20377); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new TupleType(LBRACKET468); }

            // /home/david/git/ceylon-spec/Ceylon.g:3074:7: (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )?
            int alt262=3;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==PRODUCT_OP) ) {
                alt262=1;
            }
            else if ( ((LA262_0 >= LBRACE && LA262_0 <= LBRACKET)||LA262_0==SMALLER_OP||LA262_0==UIDENTIFIER) ) {
                alt262=2;
            }
            switch (alt262) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3075:9: spt= spreadType
                    {
                    pushFollow(FOLLOW_spreadType_in_tupleType20405);
                    spt=spreadType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.addElementType(spt); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3078:9: t1= defaultedType (c= COMMA t2= defaultedType )*
                    {
                    pushFollow(FOLLOW_defaultedType_in_tupleType20435);
                    t1=defaultedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.addElementType(t1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3080:9: (c= COMMA t2= defaultedType )*
                    loop261:
                    do {
                        int alt261=2;
                        int LA261_0 = input.LA(1);

                        if ( (LA261_0==COMMA) ) {
                            alt261=1;
                        }


                        switch (alt261) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3081:11: c= COMMA t2= defaultedType
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_tupleType20469); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { type.setEndToken(c); }

                    	    pushFollow(FOLLOW_defaultedType_in_tupleType20495);
                    	    t2=defaultedType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { type.addElementType(t2);
                    	                type.setEndToken(null); }

                    	    }
                    	    break;

                    	default :
                    	    break loop261;
                        }
                    } while (true);


                    }
                    break;

            }


            RBRACKET469=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tupleType20535); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(RBRACKET469); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "tupleType"



    // $ANTLR start "groupedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3092:1: groupedType returns [GroupedType type] : SMALLER_OP t= type LARGER_OP ;
    public GroupedType groupedType() throws RecognitionException {
        GroupedType type = null;


        Token SMALLER_OP470=null;
        Token LARGER_OP471=null;
        StaticType t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3093:5: ( SMALLER_OP t= type LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:3093:7: SMALLER_OP t= type LARGER_OP
            {
            SMALLER_OP470=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_groupedType20564); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new GroupedType(SMALLER_OP470); }

            pushFollow(FOLLOW_type_in_groupedType20582);
            t=type();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setType(t); }

            LARGER_OP471=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_groupedType20598); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(LARGER_OP471); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "groupedType"



    // $ANTLR start "iterableType"
    // /home/david/git/ceylon-spec/Ceylon.g:3101:1: iterableType returns [IterableType type] : LBRACE (t= variadicType )? RBRACE ;
    public IterableType iterableType() throws RecognitionException {
        IterableType type = null;


        Token LBRACE472=null;
        Token RBRACE473=null;
        Type t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3102:4: ( LBRACE (t= variadicType )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:3102:6: LBRACE (t= variadicType )? RBRACE
            {
            LBRACE472=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_iterableType20626); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new IterableType(LBRACE472); }

            // /home/david/git/ceylon-spec/Ceylon.g:3104:6: (t= variadicType )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( ((LA263_0 >= LBRACE && LA263_0 <= LBRACKET)||LA263_0==SMALLER_OP||LA263_0==UIDENTIFIER) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3105:8: t= variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_iterableType20651);
                    t=variadicType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.setElementType(t); }

                    }
                    break;

            }


            RBRACE473=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_iterableType20675); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(RBRACE473); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "iterableType"



    // $ANTLR start "type"
    // /home/david/git/ceylon-spec/Ceylon.g:3112:1: type returns [StaticType type] : t1= unionType ( ENTRY_OP (t2= unionType ) )? ;
    public StaticType type() throws RecognitionException {
        StaticType type = null;


        Token ENTRY_OP474=null;
        StaticType t1 =null;

        StaticType t2 =null;


         EntryType bt=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3114:5: (t1= unionType ( ENTRY_OP (t2= unionType ) )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3114:7: t1= unionType ( ENTRY_OP (t2= unionType ) )?
            {
            pushFollow(FOLLOW_unionType_in_type20713);
            t1=unionType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =t1; }

            // /home/david/git/ceylon-spec/Ceylon.g:3116:7: ( ENTRY_OP (t2= unionType ) )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==ENTRY_OP) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3117:9: ENTRY_OP (t2= unionType )
                    {
                    ENTRY_OP474=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_type20739); if (state.failed) return type;

                    if ( state.backtracking==0 ) { bt=new EntryType(null);
                              bt.setKeyType(type);
                              bt.setEndToken(ENTRY_OP474); 
                              type =bt; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3122:9: (t2= unionType )
                    // /home/david/git/ceylon-spec/Ceylon.g:3123:11: t2= unionType
                    {
                    pushFollow(FOLLOW_unionType_in_type20773);
                    t2=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { bt.setValueType(t2);
                                bt.setEndToken(null); }

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "type"



    // $ANTLR start "unionType"
    // /home/david/git/ceylon-spec/Ceylon.g:3132:1: unionType returns [StaticType type] : it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )? ;
    public StaticType unionType() throws RecognitionException {
        StaticType type = null;


        Token u=null;
        StaticType it1 =null;

        StaticType it2 =null;


         UnionType ut=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3134:5: (it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3134:7: it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )?
            {
            pushFollow(FOLLOW_intersectionType_in_unionType20838);
            it1=intersectionType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type = it1;
                    ut = new UnionType(null);
                    ut.addStaticType(type); }

            // /home/david/git/ceylon-spec/Ceylon.g:3138:7: ( (u= UNION_OP (it2= intersectionType ) )+ )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==UNION_OP) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3139:9: (u= UNION_OP (it2= intersectionType ) )+
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3139:9: (u= UNION_OP (it2= intersectionType ) )+
                    int cnt265=0;
                    loop265:
                    do {
                        int alt265=2;
                        int LA265_0 = input.LA(1);

                        if ( (LA265_0==UNION_OP) ) {
                            alt265=1;
                        }


                        switch (alt265) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3140:11: u= UNION_OP (it2= intersectionType )
                    	    {
                    	    u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_unionType20879); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { ut.setEndToken(u); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3142:11: (it2= intersectionType )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3143:13: it2= intersectionType
                    	    {
                    	    pushFollow(FOLLOW_intersectionType_in_unionType20919);
                    	    it2=intersectionType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { if (it2!=null) {
                    	                      ut.addStaticType(it2);
                    	                      ut.setEndToken(null); 
                    	                  } }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt265 >= 1 ) break loop265;
                    	    if (state.backtracking>0) {state.failed=true; return type;}
                                EarlyExitException eee =
                                    new EarlyExitException(265, input);
                                throw eee;
                        }
                        cnt265++;
                    } while (true);


                    if ( state.backtracking==0 ) { type = ut; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "unionType"



    // $ANTLR start "intersectionType"
    // /home/david/git/ceylon-spec/Ceylon.g:3156:1: intersectionType returns [StaticType type] : at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )? ;
    public StaticType intersectionType() throws RecognitionException {
        StaticType type = null;


        Token i=null;
        StaticType at1 =null;

        StaticType at2 =null;


         IntersectionType it=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3158:5: (at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3158:7: at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )?
            {
            pushFollow(FOLLOW_abbreviatedType_in_intersectionType21009);
            at1=abbreviatedType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type = at1;
                    it = new IntersectionType(null);
                    it.addStaticType(type); }

            // /home/david/git/ceylon-spec/Ceylon.g:3162:7: ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==INTERSECTION_OP) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3163:9: (i= INTERSECTION_OP (at2= abbreviatedType ) )+
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3163:9: (i= INTERSECTION_OP (at2= abbreviatedType ) )+
                    int cnt267=0;
                    loop267:
                    do {
                        int alt267=2;
                        int LA267_0 = input.LA(1);

                        if ( (LA267_0==INTERSECTION_OP) ) {
                            alt267=1;
                        }


                        switch (alt267) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3164:11: i= INTERSECTION_OP (at2= abbreviatedType )
                    	    {
                    	    i=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_intersectionType21050); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { it.setEndToken(i); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3166:11: (at2= abbreviatedType )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3167:13: at2= abbreviatedType
                    	    {
                    	    pushFollow(FOLLOW_abbreviatedType_in_intersectionType21090);
                    	    at2=abbreviatedType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { if (at2!=null) {
                    	                      it.addStaticType(at2);
                    	                      it.setEndToken(null); 
                    	                  } }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt267 >= 1 ) break loop267;
                    	    if (state.backtracking>0) {state.failed=true; return type;}
                                EarlyExitException eee =
                                    new EarlyExitException(267, input);
                                throw eee;
                        }
                        cnt267++;
                    } while (true);


                    if ( state.backtracking==0 ) { type = it; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "intersectionType"



    // $ANTLR start "qualifiedOrTupleType"
    // /home/david/git/ceylon-spec/Ceylon.g:3180:1: qualifiedOrTupleType returns [StaticType type] : ( qualifiedType | tupleType | iterableType );
    public StaticType qualifiedOrTupleType() throws RecognitionException {
        StaticType type = null;


        StaticType qualifiedType475 =null;

        TupleType tupleType476 =null;

        IterableType iterableType477 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3181:5: ( qualifiedType | tupleType | iterableType )
            int alt269=3;
            switch ( input.LA(1) ) {
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt269=1;
                }
                break;
            case LBRACKET:
                {
                alt269=2;
                }
                break;
            case LBRACE:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;

            }

            switch (alt269) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3181:7: qualifiedType
                    {
                    pushFollow(FOLLOW_qualifiedType_in_qualifiedOrTupleType21169);
                    qualifiedType475=qualifiedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =qualifiedType475; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3183:7: tupleType
                    {
                    pushFollow(FOLLOW_tupleType_in_qualifiedOrTupleType21186);
                    tupleType476=tupleType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =tupleType476; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3185:7: iterableType
                    {
                    pushFollow(FOLLOW_iterableType_in_qualifiedOrTupleType21203);
                    iterableType477=iterableType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =iterableType477; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "qualifiedOrTupleType"



    // $ANTLR start "abbreviatedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3195:1: abbreviatedType returns [StaticType type] : qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )* ;
    public StaticType abbreviatedType() throws RecognitionException {
        StaticType type = null;


        Token OPTIONAL479=null;
        Token LBRACKET480=null;
        Token NATURAL_LITERAL481=null;
        Token RBRACKET482=null;
        Token LPAREN483=null;
        Token COMMA484=null;
        Token RPAREN485=null;
        Type spt =null;

        Type t1 =null;

        Type t2 =null;

        StaticType qualifiedOrTupleType478 =null;


         FunctionType bt=null; SequenceType st=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3197:5: ( qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3197:7: qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )*
            {
            pushFollow(FOLLOW_qualifiedOrTupleType_in_abbreviatedType21244);
            qualifiedOrTupleType478=qualifiedOrTupleType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =qualifiedOrTupleType478; }

            // /home/david/git/ceylon-spec/Ceylon.g:3199:7: ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )*
            loop273:
            do {
                int alt273=4;
                switch ( input.LA(1) ) {
                case OPTIONAL:
                    {
                    alt273=1;
                    }
                    break;
                case LBRACKET:
                    {
                    alt273=2;
                    }
                    break;
                case LPAREN:
                    {
                    alt273=3;
                    }
                    break;

                }

                switch (alt273) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3200:9: OPTIONAL
            	    {
            	    OPTIONAL479=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_abbreviatedType21270); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { OptionalType ot = new OptionalType(null);
            	              ot.setDefiniteType(type);
            	              ot.setEndToken(OPTIONAL479);
            	              type =ot; }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3205:9: LBRACKET ( NATURAL_LITERAL )? RBRACKET
            	    {
            	    LBRACKET480=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_abbreviatedType21291); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { st = new SequenceType(null);
            	              st.setElementType(type);
            	              st.setEndToken(LBRACKET480); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:3209:9: ( NATURAL_LITERAL )?
            	    int alt270=2;
            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==NATURAL_LITERAL) ) {
            	        alt270=1;
            	    }
            	    switch (alt270) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3210:11: NATURAL_LITERAL
            	            {
            	            NATURAL_LITERAL481=(Token)match(input,NATURAL_LITERAL,FOLLOW_NATURAL_LITERAL_in_abbreviatedType21323); if (state.failed) return type;

            	            if ( state.backtracking==0 ) { st.setLength(new NaturalLiteral(NATURAL_LITERAL481)); 
            	                        st.setEndToken(NATURAL_LITERAL481); }

            	            }
            	            break;

            	    }


            	    RBRACKET482=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_abbreviatedType21357); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { st.setEndToken(RBRACKET482);
            	              type =st; }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3217:9: LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN
            	    {
            	    LPAREN483=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_abbreviatedType21378); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { bt = new FunctionType(null);
            	              bt.setEndToken(LPAREN483);
            	              bt.setReturnType(type);
            	              type =bt; }

            	    // /home/david/git/ceylon-spec/Ceylon.g:3222:11: (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )?
            	    int alt272=3;
            	    int LA272_0 = input.LA(1);

            	    if ( (LA272_0==PRODUCT_OP) ) {
            	        alt272=1;
            	    }
            	    else if ( ((LA272_0 >= LBRACE && LA272_0 <= LBRACKET)||LA272_0==SMALLER_OP||LA272_0==UIDENTIFIER) ) {
            	        alt272=2;
            	    }
            	    switch (alt272) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3223:13: spt= spreadType
            	            {
            	            pushFollow(FOLLOW_spreadType_in_abbreviatedType21416);
            	            spt=spreadType();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            if ( state.backtracking==0 ) { bt.addArgumentType(spt); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3226:13: t1= defaultedType ( COMMA t2= defaultedType )*
            	            {
            	            pushFollow(FOLLOW_defaultedType_in_abbreviatedType21458);
            	            t1=defaultedType();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            if ( state.backtracking==0 ) { if (t1!=null)
            	                              bt.addArgumentType(t1); }

            	            // /home/david/git/ceylon-spec/Ceylon.g:3229:13: ( COMMA t2= defaultedType )*
            	            loop271:
            	            do {
            	                int alt271=2;
            	                int LA271_0 = input.LA(1);

            	                if ( (LA271_0==COMMA) ) {
            	                    alt271=1;
            	                }


            	                switch (alt271) {
            	            	case 1 :
            	            	    // /home/david/git/ceylon-spec/Ceylon.g:3230:15: COMMA t2= defaultedType
            	            	    {
            	            	    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_abbreviatedType21502); if (state.failed) return type;

            	            	    if ( state.backtracking==0 ) { bt.setEndToken(COMMA484); }

            	            	    pushFollow(FOLLOW_defaultedType_in_abbreviatedType21536);
            	            	    t2=defaultedType();

            	            	    state._fsp--;
            	            	    if (state.failed) return type;

            	            	    if ( state.backtracking==0 ) { if (t2!=null)
            	            	                        bt.addArgumentType(t2); }

            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop271;
            	                }
            	            } while (true);


            	            }
            	            break;

            	    }


            	    RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_abbreviatedType21590); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { bt.setEndToken(RPAREN485); }

            	    }
            	    break;

            	default :
            	    break loop273;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "abbreviatedType"



    // $ANTLR start "baseType"
    // /home/david/git/ceylon-spec/Ceylon.g:3242:1: baseType returns [StaticType type] : (ot= typeNameWithArguments | groupedType );
    public StaticType baseType() throws RecognitionException {
        StaticType type = null;


        PsiCompatibleCeylonParser.typeNameWithArguments_return ot =null;

        GroupedType groupedType486 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3243:5: (ot= typeNameWithArguments | groupedType )
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==UIDENTIFIER) ) {
                alt274=1;
            }
            else if ( (LA274_0==SMALLER_OP) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;

            }
            switch (alt274) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3244:7: ot= typeNameWithArguments
                    {
                    pushFollow(FOLLOW_typeNameWithArguments_in_baseType21639);
                    ot=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { BaseType bt = new BaseType(null);
                            bt.setIdentifier((ot!=null?ot.identifier:null));
                            if ((ot!=null?ot.typeArgumentList:null)!=null)
                                bt.setTypeArgumentList((ot!=null?ot.typeArgumentList:null));
                            type =bt; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3251:7: groupedType
                    {
                    pushFollow(FOLLOW_groupedType_in_baseType21661);
                    groupedType486=groupedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =groupedType486; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "baseType"



    // $ANTLR start "qualifiedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3255:1: qualifiedType returns [StaticType type] : baseType ( MEMBER_OP it= typeNameWithArguments )* ;
    public StaticType qualifiedType() throws RecognitionException {
        StaticType type = null;


        Token MEMBER_OP488=null;
        PsiCompatibleCeylonParser.typeNameWithArguments_return it =null;

        StaticType baseType487 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3256:5: ( baseType ( MEMBER_OP it= typeNameWithArguments )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3256:7: baseType ( MEMBER_OP it= typeNameWithArguments )*
            {
            pushFollow(FOLLOW_baseType_in_qualifiedType21690);
            baseType487=baseType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =baseType487; }

            // /home/david/git/ceylon-spec/Ceylon.g:3258:7: ( MEMBER_OP it= typeNameWithArguments )*
            loop275:
            do {
                int alt275=2;
                int LA275_0 = input.LA(1);

                if ( (LA275_0==MEMBER_OP) ) {
                    int LA275_2 = input.LA(2);

                    if ( (LA275_2==UIDENTIFIER) ) {
                        alt275=1;
                    }


                }


                switch (alt275) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3259:9: MEMBER_OP it= typeNameWithArguments
            	    {
            	    MEMBER_OP488=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_qualifiedType21716); if (state.failed) return type;

            	    pushFollow(FOLLOW_typeNameWithArguments_in_qualifiedType21729);
            	    it=typeNameWithArguments();

            	    state._fsp--;
            	    if (state.failed) return type;

            	    if ( state.backtracking==0 ) { QualifiedType qt = new QualifiedType(MEMBER_OP488);
            	              qt.setIdentifier((it!=null?it.identifier:null));
            	              if ((it!=null?it.typeArgumentList:null)!=null)
            	                  qt.setTypeArgumentList((it!=null?it.typeArgumentList:null));
            	              qt.setOuterType(type);
            	              type =qt; }

            	    }
            	    break;

            	default :
            	    break loop275;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "qualifiedType"


    public static class typeNameWithArguments_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "typeNameWithArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:3270:1: typeNameWithArguments returns [Identifier identifier, TypeArgumentList typeArgumentList] : typeName ( typeArguments )? ;
    public PsiCompatibleCeylonParser.typeNameWithArguments_return typeNameWithArguments() throws RecognitionException {
        PsiCompatibleCeylonParser.typeNameWithArguments_return retval = new PsiCompatibleCeylonParser.typeNameWithArguments_return();
        retval.start = input.LT(1);


        Identifier typeName489 =null;

        TypeArgumentList typeArguments490 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3271:5: ( typeName ( typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3271:7: typeName ( typeArguments )?
            {
            pushFollow(FOLLOW_typeName_in_typeNameWithArguments21769);
            typeName489=typeName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = typeName489; }

            // /home/david/git/ceylon-spec/Ceylon.g:3273:7: ( typeArguments )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==SMALLER_OP) ) {
                int LA276_1 = input.LA(2);

                if ( (LA276_1==IN_OP||LA276_1==LARGER_OP||(LA276_1 >= LBRACE && LA276_1 <= LBRACKET)||LA276_1==OUT||LA276_1==SMALLER_OP||LA276_1==UIDENTIFIER) ) {
                    alt276=1;
                }
            }
            switch (alt276) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3274:9: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_typeNameWithArguments21796);
                    typeArguments490=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments490; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeNameWithArguments"



    // $ANTLR start "annotations"
    // /home/david/git/ceylon-spec/Ceylon.g:3279:1: annotations returns [AnnotationList annotationList] : ( stringLiteral )? ( annotation )* ;
    public AnnotationList annotations() throws RecognitionException {
        AnnotationList annotationList = null;


        StringLiteral stringLiteral491 =null;

        Annotation annotation492 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3280:5: ( ( stringLiteral )? ( annotation )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3280:7: ( stringLiteral )? ( annotation )*
            {
            if ( state.backtracking==0 ) { annotationList = new AnnotationList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3281:7: ( stringLiteral )?
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==STRING_LITERAL||LA277_0==VERBATIM_STRING) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3282:11: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotations21860);
                    stringLiteral491=stringLiteral();

                    state._fsp--;
                    if (state.failed) return annotationList;

                    if ( state.backtracking==0 ) { if (stringLiteral491.getToken().getType()==VERBATIM_STRING)
                                    stringLiteral491.getToken().setType(AVERBATIM_STRING);
                                else
                                    stringLiteral491.getToken().setType(ASTRING_LITERAL);
                                AnonymousAnnotation aa = new AnonymousAnnotation(null);
                                aa.setStringLiteral(stringLiteral491);
                                annotationList.setAnonymousAnnotation(aa); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:3291:7: ( annotation )*
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==LIDENTIFIER) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3292:9: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations21899);
            	    annotation492=annotation();

            	    state._fsp--;
            	    if (state.failed) return annotationList;

            	    if ( state.backtracking==0 ) { annotationList.addAnnotation(annotation492); 
            	              new com.redhat.ceylon.compiler.typechecker.tree.Visitor() { 
            	                  public void visit(StringLiteral that) {
            	                      if (that.getToken().getType()==VERBATIM_STRING)
            	                          that.getToken().setType(AVERBATIM_STRING);
            	                      else
            	                          that.getToken().setType(ASTRING_LITERAL);
            	                  }
            	              }.visit(annotation492); }

            	    }
            	    break;

            	default :
            	    break loop278;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotationList;
    }
    // $ANTLR end "annotations"



    // $ANTLR start "annotation"
    // /home/david/git/ceylon-spec/Ceylon.g:3305:1: annotation returns [Annotation annotation] : annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |) ;
    public Annotation annotation() throws RecognitionException {
        Annotation annotation = null;


        Identifier annotationName493 =null;

        PositionalArgumentList positionalArguments494 =null;

        NamedArgumentList namedArguments495 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3306:5: ( annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |) )
            // /home/david/git/ceylon-spec/Ceylon.g:3306:7: annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |)
            {
            pushFollow(FOLLOW_annotationName_in_annotation21940);
            annotationName493=annotationName();

            state._fsp--;
            if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation = new Annotation(null);
                    BaseMemberExpression bme = new BaseMemberExpression(null);
                    bme.setIdentifier(annotationName493);
                    bme.setTypeArguments( new InferredTypeArguments(null) );
                    annotation.setPrimary(bme); }

            // /home/david/git/ceylon-spec/Ceylon.g:3312:5: ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |)
            int alt279=3;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt279=1;
                }
                break;
            case LBRACE:
                {
                int LA279_2 = input.LA(2);

                if ( (synpred34_Ceylon()) ) {
                    alt279=2;
                }
                else if ( (true) ) {
                    alt279=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return annotation;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 279, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSERT:
            case ASSIGN:
            case CLASS_DEFINITION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case IMPORT:
            case INTERFACE_DEFINITION:
            case LBRACKET:
            case LIDENTIFIER:
            case MODULE:
            case NEW:
            case OBJECT_DEFINITION:
            case PACKAGE:
            case SMALLER_OP:
            case UIDENTIFIER:
            case VALUE_MODIFIER:
            case VOID_MODIFIER:
                {
                alt279=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return annotation;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;

            }

            switch (alt279) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3313:7: positionalArguments
                    {
                    pushFollow(FOLLOW_positionalArguments_in_annotation21963);
                    positionalArguments494=positionalArguments();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setPositionalArgumentList(positionalArguments494); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3315:7: ( namedAnnotationArgumentsStart )=> namedArguments
                    {
                    pushFollow(FOLLOW_namedArguments_in_annotation21992);
                    namedArguments495=namedArguments();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setNamedArgumentList(namedArguments495); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3318:7: 
                    {
                    if ( state.backtracking==0 ) { annotation.setPositionalArgumentList(new PositionalArgumentList(null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotation;
    }
    // $ANTLR end "annotation"



    // $ANTLR start "prefixOperatorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:3322:1: prefixOperatorStart : ( DIFFERENCE_OP | INCREMENT_OP | DECREMENT_OP | COMPLEMENT_OP );
    public void prefixOperatorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3323:5: ( DIFFERENCE_OP | INCREMENT_OP | DECREMENT_OP | COMPLEMENT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:
            {
            if ( input.LA(1)==COMPLEMENT_OP||(input.LA(1) >= DECREMENT_OP && input.LA(1) <= DIFFERENCE_OP)||input.LA(1)==INCREMENT_OP ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "prefixOperatorStart"



    // $ANTLR start "compilerAnnotations"
    // /home/david/git/ceylon-spec/Ceylon.g:3329:1: compilerAnnotations returns [List<CompilerAnnotation> annotations] : ( compilerAnnotation )* ;
    public List<CompilerAnnotation> compilerAnnotations() throws RecognitionException {
        List<CompilerAnnotation> annotations = null;


        CompilerAnnotation compilerAnnotation496 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3330:5: ( ( compilerAnnotation )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3330:7: ( compilerAnnotation )*
            {
            if ( state.backtracking==0 ) { annotations = new ArrayList<CompilerAnnotation>(); }

            // /home/david/git/ceylon-spec/Ceylon.g:3331:5: ( compilerAnnotation )*
            loop280:
            do {
                int alt280=2;
                int LA280_0 = input.LA(1);

                if ( (LA280_0==COMPILER_ANNOTATION) ) {
                    alt280=1;
                }


                switch (alt280) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3332:7: compilerAnnotation
            	    {
            	    pushFollow(FOLLOW_compilerAnnotation_in_compilerAnnotations22096);
            	    compilerAnnotation496=compilerAnnotation();

            	    state._fsp--;
            	    if (state.failed) return annotations;

            	    if ( state.backtracking==0 ) { annotations.add(compilerAnnotation496); }

            	    }
            	    break;

            	default :
            	    break loop280;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotations;
    }
    // $ANTLR end "compilerAnnotations"



    // $ANTLR start "compilerAnnotation"
    // /home/david/git/ceylon-spec/Ceylon.g:3337:1: compilerAnnotation returns [CompilerAnnotation annotation] : COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )? ;
    public CompilerAnnotation compilerAnnotation() throws RecognitionException {
        CompilerAnnotation annotation = null;


        Token COMPILER_ANNOTATION497=null;
        Identifier annotationName498 =null;

        StringLiteral stringLiteral499 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3338:5: ( COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3338:7: COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )?
            {
            COMPILER_ANNOTATION497=(Token)match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_compilerAnnotation22136); if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation =new CompilerAnnotation(COMPILER_ANNOTATION497); }

            pushFollow(FOLLOW_annotationName_in_compilerAnnotation22153);
            annotationName498=annotationName();

            state._fsp--;
            if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation.setIdentifier(annotationName498); }

            // /home/david/git/ceylon-spec/Ceylon.g:3342:7: ( SEGMENT_OP stringLiteral )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==SEGMENT_OP) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3343:11: SEGMENT_OP stringLiteral
                    {
                    match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_compilerAnnotation22183); if (state.failed) return annotation;

                    pushFollow(FOLLOW_stringLiteral_in_compilerAnnotation22195);
                    stringLiteral499=stringLiteral();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setStringLiteral(stringLiteral499); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotation;
    }
    // $ANTLR end "compilerAnnotation"



    // $ANTLR start "conditions"
    // /home/david/git/ceylon-spec/Ceylon.g:3349:1: conditions returns [ConditionList conditionList] : LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN ;
    public ConditionList conditions() throws RecognitionException {
        ConditionList conditionList = null;


        Token c=null;
        Token LPAREN500=null;
        Token RPAREN501=null;
        Condition c1 =null;

        Condition c2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3350:5: ( LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3350:7: LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN
            {
            LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_conditions22237); if (state.failed) return conditionList;

            if ( state.backtracking==0 ) { conditionList = new ConditionList(LPAREN500); }

            // /home/david/git/ceylon-spec/Ceylon.g:3352:7: (c1= condition (c= COMMA (c2= condition |) )* )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==BACKTICK||LA284_0==CHAR_LITERAL||(LA284_0 >= DECREMENT_OP && LA284_0 <= DIFFERENCE_OP)||LA284_0==DYNAMIC||LA284_0==EXISTS||LA284_0==FLOAT_LITERAL||LA284_0==FUNCTION_MODIFIER||LA284_0==IF_CLAUSE||LA284_0==INCREMENT_OP||LA284_0==IS_OP||(LA284_0 >= LBRACE && LA284_0 <= LIDENTIFIER)||LA284_0==LPAREN||LA284_0==NATURAL_LITERAL||LA284_0==NONEMPTY||(LA284_0 >= NOT_OP && LA284_0 <= OBJECT_DEFINITION)||(LA284_0 >= OUTER && LA284_0 <= PACKAGE)||LA284_0==SATISFIES||LA284_0==STRING_LITERAL||LA284_0==STRING_START||(LA284_0 >= SUM_OP && LA284_0 <= SWITCH_CLAUSE)||LA284_0==THIS||LA284_0==UIDENTIFIER||(LA284_0 >= VERBATIM_STRING && LA284_0 <= VOID_MODIFIER)) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3353:7: c1= condition (c= COMMA (c2= condition |) )*
                    {
                    pushFollow(FOLLOW_condition_in_conditions22263);
                    c1=condition();

                    state._fsp--;
                    if (state.failed) return conditionList;

                    if ( state.backtracking==0 ) { if (c1!=null) 
                                conditionList.addCondition(c1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3356:7: (c= COMMA (c2= condition |) )*
                    loop283:
                    do {
                        int alt283=2;
                        int LA283_0 = input.LA(1);

                        if ( (LA283_0==COMMA) ) {
                            alt283=1;
                        }


                        switch (alt283) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3356:9: c= COMMA (c2= condition |)
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_conditions22283); if (state.failed) return conditionList;

                    	    if ( state.backtracking==0 ) { conditionList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3358:9: (c2= condition |)
                    	    int alt282=2;
                    	    int LA282_0 = input.LA(1);

                    	    if ( (LA282_0==BACKTICK||LA282_0==CHAR_LITERAL||(LA282_0 >= DECREMENT_OP && LA282_0 <= DIFFERENCE_OP)||LA282_0==DYNAMIC||LA282_0==EXISTS||LA282_0==FLOAT_LITERAL||LA282_0==FUNCTION_MODIFIER||LA282_0==IF_CLAUSE||LA282_0==INCREMENT_OP||LA282_0==IS_OP||(LA282_0 >= LBRACE && LA282_0 <= LIDENTIFIER)||LA282_0==LPAREN||LA282_0==NATURAL_LITERAL||LA282_0==NONEMPTY||(LA282_0 >= NOT_OP && LA282_0 <= OBJECT_DEFINITION)||(LA282_0 >= OUTER && LA282_0 <= PACKAGE)||LA282_0==SATISFIES||LA282_0==STRING_LITERAL||LA282_0==STRING_START||(LA282_0 >= SUM_OP && LA282_0 <= SWITCH_CLAUSE)||LA282_0==THIS||LA282_0==UIDENTIFIER||(LA282_0 >= VERBATIM_STRING && LA282_0 <= VOID_MODIFIER)) ) {
                    	        alt282=1;
                    	    }
                    	    else if ( (LA282_0==COMMA||LA282_0==RPAREN) ) {
                    	        alt282=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return conditionList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 282, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt282) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3359:11: c2= condition
                    	            {
                    	            pushFollow(FOLLOW_condition_in_conditions22318);
                    	            c2=condition();

                    	            state._fsp--;
                    	            if (state.failed) return conditionList;

                    	            if ( state.backtracking==0 ) { if (c2!=null) 
                    	                            conditionList.addCondition(c2);
                    	                        conditionList.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3363:11: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                          new MismatchedTokenException(LIDENTIFIER, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop283;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN501=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_conditions22380); if (state.failed) return conditionList;

            if ( state.backtracking==0 ) { conditionList.setEndToken(RPAREN501); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return conditionList;
    }
    // $ANTLR end "conditions"



    // $ANTLR start "condition"
    // /home/david/git/ceylon-spec/Ceylon.g:3372:1: condition returns [Condition condition] : ( existsCondition | nonemptyCondition | isCondition | satisfiesCondition | booleanCondition );
    public Condition condition() throws RecognitionException {
        Condition condition = null;


        ExistsCondition existsCondition502 =null;

        NonemptyCondition nonemptyCondition503 =null;

        IsCondition isCondition504 =null;

        SatisfiesCondition satisfiesCondition505 =null;

        BooleanCondition booleanCondition506 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3373:5: ( existsCondition | nonemptyCondition | isCondition | satisfiesCondition | booleanCondition )
            int alt285=5;
            switch ( input.LA(1) ) {
            case NOT_OP:
                {
                switch ( input.LA(2) ) {
                case EXISTS:
                    {
                    alt285=1;
                    }
                    break;
                case NONEMPTY:
                    {
                    alt285=2;
                    }
                    break;
                case IS_OP:
                    {
                    alt285=3;
                    }
                    break;
                case BACKTICK:
                case CHAR_LITERAL:
                case DECREMENT_OP:
                case DIFFERENCE_OP:
                case DYNAMIC:
                case FLOAT_LITERAL:
                case INCREMENT_OP:
                case LBRACE:
                case LBRACKET:
                case LIDENTIFIER:
                case LPAREN:
                case NATURAL_LITERAL:
                case NOT_OP:
                case OBJECT_DEFINITION:
                case OUTER:
                case PACKAGE:
                case STRING_LITERAL:
                case STRING_START:
                case SUM_OP:
                case SUPER:
                case THIS:
                case UIDENTIFIER:
                case VERBATIM_STRING:
                    {
                    alt285=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 1, input);

                    throw nvae;

                }

                }
                break;
            case EXISTS:
                {
                alt285=1;
                }
                break;
            case NONEMPTY:
                {
                alt285=2;
                }
                break;
            case IS_OP:
                {
                alt285=3;
                }
                break;
            case SATISFIES:
                {
                alt285=4;
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case DYNAMIC:
            case FLOAT_LITERAL:
            case FUNCTION_MODIFIER:
            case IF_CLAUSE:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case SWITCH_CLAUSE:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt285=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;

            }

            switch (alt285) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3373:7: existsCondition
                    {
                    pushFollow(FOLLOW_existsCondition_in_condition22409);
                    existsCondition502=existsCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =existsCondition502; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3375:7: nonemptyCondition
                    {
                    pushFollow(FOLLOW_nonemptyCondition_in_condition22425);
                    nonemptyCondition503=nonemptyCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =nonemptyCondition503; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3377:7: isCondition
                    {
                    pushFollow(FOLLOW_isCondition_in_condition22441);
                    isCondition504=isCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =isCondition504; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3379:7: satisfiesCondition
                    {
                    pushFollow(FOLLOW_satisfiesCondition_in_condition22458);
                    satisfiesCondition505=satisfiesCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =satisfiesCondition505; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3381:7: booleanCondition
                    {
                    pushFollow(FOLLOW_booleanCondition_in_condition22474);
                    booleanCondition506=booleanCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =booleanCondition506; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "condition"



    // $ANTLR start "booleanCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3385:1: booleanCondition returns [BooleanCondition condition] : functionOrExpression ;
    public BooleanCondition booleanCondition() throws RecognitionException {
        BooleanCondition condition = null;


        Expression functionOrExpression507 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3386:5: ( functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:3386:7: functionOrExpression
            {
            if ( state.backtracking==0 ) { condition = new BooleanCondition(null); }

            pushFollow(FOLLOW_functionOrExpression_in_booleanCondition22515);
            functionOrExpression507=functionOrExpression();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setExpression(functionOrExpression507); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "booleanCondition"



    // $ANTLR start "existsCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
    public ExistsCondition existsCondition() throws RecognitionException {
        ExistsCondition condition = null;


        Token NOT_OP508=null;
        Token EXISTS509=null;
        Statement letVariable510 =null;

        Variable impliedVariable511 =null;

        Expression expression512 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3392:7: ( NOT_OP )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==NOT_OP) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3393:9: NOT_OP
                    {
                    NOT_OP508=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_existsCondition22558); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new ExistsCondition(NOT_OP508);
                              condition.setNot(true); }

                    }
                    break;

            }


            EXISTS509=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsCondition22585); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new ExistsCondition(EXISTS509); }

            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            int alt287=3;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==LBRACKET) ) {
                int LA287_1 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==COMPILER_ANNOTATION) && (synpred36_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==UIDENTIFIER) ) {
                int LA287_3 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==SMALLER_OP) && (synpred36_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==LBRACE) ) {
                int LA287_5 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==VOID_MODIFIER) && (synpred36_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==FUNCTION_MODIFIER) && (synpred36_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==VALUE_MODIFIER) && (synpred36_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==LIDENTIFIER) ) {
                int LA287_9 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (synpred37_Ceylon()) ) {
                    alt287=2;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==BACKTICK||LA287_0==CHAR_LITERAL||(LA287_0 >= DECREMENT_OP && LA287_0 <= DIFFERENCE_OP)||LA287_0==DYNAMIC||LA287_0==FLOAT_LITERAL||LA287_0==INCREMENT_OP||LA287_0==LPAREN||LA287_0==NATURAL_LITERAL||(LA287_0 >= NOT_OP && LA287_0 <= OBJECT_DEFINITION)||(LA287_0 >= OUTER && LA287_0 <= PACKAGE)||LA287_0==STRING_LITERAL||LA287_0==STRING_START||(LA287_0 >= SUM_OP && LA287_0 <= SUPER)||LA287_0==THIS||LA287_0==VERBATIM_STRING) ) {
                alt287=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;

            }
            switch (alt287) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
                    {
                    pushFollow(FOLLOW_letVariable_in_existsCondition22643);
                    letVariable510=letVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(letVariable510); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3405:9: ( LIDENTIFIER )=> impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_existsCondition22677);
                    impliedVariable511=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable511); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3407:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_existsCondition22697);
                    expression512=expression();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setBrokenExpression(expression512); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "existsCondition"



    // $ANTLR start "nonemptyCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
    public NonemptyCondition nonemptyCondition() throws RecognitionException {
        NonemptyCondition condition = null;


        Token NOT_OP513=null;
        Token NONEMPTY514=null;
        Statement letVariable515 =null;

        Variable impliedVariable516 =null;

        Expression expression517 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3413:7: ( NOT_OP )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==NOT_OP) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3414:9: NOT_OP
                    {
                    NOT_OP513=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_nonemptyCondition22750); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new NonemptyCondition(NOT_OP513);
                              condition.setNot(true); }

                    }
                    break;

            }


            NONEMPTY514=(Token)match(input,NONEMPTY,FOLLOW_NONEMPTY_in_nonemptyCondition22777); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new NonemptyCondition(NONEMPTY514); }

            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            int alt289=3;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==LBRACKET) ) {
                int LA289_1 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt289=1;
                }
                else if ( (true) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA289_0==COMPILER_ANNOTATION) && (synpred39_Ceylon())) {
                alt289=1;
            }
            else if ( (LA289_0==UIDENTIFIER) ) {
                int LA289_3 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt289=1;
                }
                else if ( (true) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA289_0==SMALLER_OP) && (synpred39_Ceylon())) {
                alt289=1;
            }
            else if ( (LA289_0==LBRACE) ) {
                int LA289_5 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt289=1;
                }
                else if ( (true) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA289_0==VOID_MODIFIER) && (synpred39_Ceylon())) {
                alt289=1;
            }
            else if ( (LA289_0==FUNCTION_MODIFIER) && (synpred39_Ceylon())) {
                alt289=1;
            }
            else if ( (LA289_0==VALUE_MODIFIER) && (synpred39_Ceylon())) {
                alt289=1;
            }
            else if ( (LA289_0==LIDENTIFIER) ) {
                int LA289_9 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt289=1;
                }
                else if ( (synpred40_Ceylon()) ) {
                    alt289=2;
                }
                else if ( (true) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA289_0==BACKTICK||LA289_0==CHAR_LITERAL||(LA289_0 >= DECREMENT_OP && LA289_0 <= DIFFERENCE_OP)||LA289_0==DYNAMIC||LA289_0==FLOAT_LITERAL||LA289_0==INCREMENT_OP||LA289_0==LPAREN||LA289_0==NATURAL_LITERAL||(LA289_0 >= NOT_OP && LA289_0 <= OBJECT_DEFINITION)||(LA289_0 >= OUTER && LA289_0 <= PACKAGE)||LA289_0==STRING_LITERAL||LA289_0==STRING_START||(LA289_0 >= SUM_OP && LA289_0 <= SUPER)||LA289_0==THIS||LA289_0==VERBATIM_STRING) ) {
                alt289=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;

            }
            switch (alt289) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
                    {
                    pushFollow(FOLLOW_letVariable_in_nonemptyCondition22835);
                    letVariable515=letVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(letVariable515); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3426:9: ( LIDENTIFIER )=> impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_nonemptyCondition22869);
                    impliedVariable516=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable516); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3428:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_nonemptyCondition22890);
                    expression517=expression();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setBrokenExpression(expression517); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "nonemptyCondition"



    // $ANTLR start "isCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3433:1: isCondition returns [IsCondition condition] : ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable ) ;
    public IsCondition isCondition() throws RecognitionException {
        IsCondition condition = null;


        Token NOT_OP518=null;
        Token IS_OP519=null;
        Variable v =null;

        StaticType type520 =null;

        Variable impliedVariable521 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3434:5: ( ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3434:7: ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3434:7: ( NOT_OP )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==NOT_OP) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3435:9: NOT_OP
                    {
                    NOT_OP518=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_isCondition22939); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new IsCondition(NOT_OP518);
                              condition.setNot(true); }

                    }
                    break;

            }


            IS_OP519=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_isCondition22966); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new IsCondition(IS_OP519); }

            pushFollow(FOLLOW_type_in_isCondition22983);
            type520=type();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setType(type520); }

            // /home/david/git/ceylon-spec/Ceylon.g:3444:7: ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable )
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LIDENTIFIER) ) {
                int LA291_1 = input.LA(2);

                if ( (LA291_1==SPECIFY) && (synpred41_Ceylon())) {
                    alt291=1;
                }
                else if ( (LA291_1==COMMA||LA291_1==RPAREN) ) {
                    alt291=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);

                throw nvae;

            }
            switch (alt291) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3445:9: ( LIDENTIFIER SPECIFY )=>v= isConditionVariable
                    {
                    pushFollow(FOLLOW_isConditionVariable_in_isCondition23027);
                    v=isConditionVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(v); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3449:9: impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_isCondition23055);
                    impliedVariable521=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable521); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "isCondition"



    // $ANTLR start "isConditionVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3454:1: isConditionVariable returns [Variable variable] : memberName specifier ;
    public Variable isConditionVariable() throws RecognitionException {
        Variable variable = null;


        Identifier memberName522 =null;

        SpecifierExpression specifier523 =null;


         variable = new Variable(null);
                    variable.setType(new ValueModifier(null));  
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3457:5: ( memberName specifier )
            // /home/david/git/ceylon-spec/Ceylon.g:3457:7: memberName specifier
            {
            pushFollow(FOLLOW_memberName_in_isConditionVariable23104);
            memberName522=memberName();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.setIdentifier(memberName522); }

            pushFollow(FOLLOW_specifier_in_isConditionVariable23120);
            specifier523=specifier();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.setSpecifierExpression(specifier523); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "isConditionVariable"



    // $ANTLR start "satisfiesCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3463:1: satisfiesCondition returns [SatisfiesCondition condition] : SATISFIES type typeName ;
    public SatisfiesCondition satisfiesCondition() throws RecognitionException {
        SatisfiesCondition condition = null;


        Token SATISFIES524=null;
        StaticType type525 =null;

        Identifier typeName526 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3464:5: ( SATISFIES type typeName )
            // /home/david/git/ceylon-spec/Ceylon.g:3464:7: SATISFIES type typeName
            {
            SATISFIES524=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiesCondition23149); if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition = new SatisfiesCondition(SATISFIES524); }

            pushFollow(FOLLOW_type_in_satisfiesCondition23166);
            type525=type();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setType(type525); }

            pushFollow(FOLLOW_typeName_in_satisfiesCondition23183);
            typeName526=typeName();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setIdentifier(typeName526); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "satisfiesCondition"



    // $ANTLR start "controlStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:3472:1: controlStatement returns [ControlStatement controlStatement] : ( ifElse | switchCaseElse | whileLoop | forElse | tryCatchFinally | dynamic );
    public ControlStatement controlStatement() throws RecognitionException {
        ControlStatement controlStatement = null;


        IfStatement ifElse527 =null;

        SwitchStatement switchCaseElse528 =null;

        WhileStatement whileLoop529 =null;

        ForStatement forElse530 =null;

        TryCatchStatement tryCatchFinally531 =null;

        DynamicStatement dynamic532 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3473:5: ( ifElse | switchCaseElse | whileLoop | forElse | tryCatchFinally | dynamic )
            int alt292=6;
            switch ( input.LA(1) ) {
            case IF_CLAUSE:
                {
                alt292=1;
                }
                break;
            case SWITCH_CLAUSE:
                {
                alt292=2;
                }
                break;
            case WHILE_CLAUSE:
                {
                alt292=3;
                }
                break;
            case FOR_CLAUSE:
                {
                alt292=4;
                }
                break;
            case TRY_CLAUSE:
                {
                alt292=5;
                }
                break;
            case DYNAMIC:
                {
                alt292=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return controlStatement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);

                throw nvae;

            }

            switch (alt292) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3473:7: ifElse
                    {
                    pushFollow(FOLLOW_ifElse_in_controlStatement23212);
                    ifElse527=ifElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =ifElse527; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3475:7: switchCaseElse
                    {
                    pushFollow(FOLLOW_switchCaseElse_in_controlStatement23229);
                    switchCaseElse528=switchCaseElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =switchCaseElse528; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3477:7: whileLoop
                    {
                    pushFollow(FOLLOW_whileLoop_in_controlStatement23246);
                    whileLoop529=whileLoop();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =whileLoop529; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3479:7: forElse
                    {
                    pushFollow(FOLLOW_forElse_in_controlStatement23263);
                    forElse530=forElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =forElse530; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3481:7: tryCatchFinally
                    {
                    pushFollow(FOLLOW_tryCatchFinally_in_controlStatement23280);
                    tryCatchFinally531=tryCatchFinally();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =tryCatchFinally531; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3483:7: dynamic
                    {
                    pushFollow(FOLLOW_dynamic_in_controlStatement23296);
                    dynamic532=dynamic();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =dynamic532; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return controlStatement;
    }
    // $ANTLR end "controlStatement"



    // $ANTLR start "controlBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3487:1: controlBlock returns [Block block] : ( ( LBRACE )=>b= block |) ;
    public Block controlBlock() throws RecognitionException {
        Block block = null;


        Block b =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3488:5: ( ( ( LBRACE )=>b= block |) )
            // /home/david/git/ceylon-spec/Ceylon.g:3488:7: ( ( LBRACE )=>b= block |)
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3488:7: ( ( LBRACE )=>b= block |)
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==LBRACE) ) {
                int LA293_1 = input.LA(2);

                if ( (synpred42_Ceylon()) ) {
                    alt293=1;
                }
                else if ( (true) ) {
                    alt293=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return block;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 293, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA293_0==ALIAS||(LA293_0 >= ASSERT && LA293_0 <= ASSIGN)||(LA293_0 >= BACKTICK && LA293_0 <= BREAK)||(LA293_0 >= CATCH_CLAUSE && LA293_0 <= CLASS_DEFINITION)||LA293_0==COMPILER_ANNOTATION||LA293_0==CONTINUE||(LA293_0 >= DECREMENT_OP && LA293_0 <= DIFFERENCE_OP)||LA293_0==DYNAMIC||LA293_0==ELSE_CLAUSE||(LA293_0 >= FINALLY_CLAUSE && LA293_0 <= FUNCTION_MODIFIER)||LA293_0==IF_CLAUSE||(LA293_0 >= INCREMENT_OP && LA293_0 <= INTERFACE_DEFINITION)||LA293_0==LBRACKET||LA293_0==LIDENTIFIER||LA293_0==LPAREN||(LA293_0 >= NATURAL_LITERAL && LA293_0 <= NEW)||(LA293_0 >= NOT_OP && LA293_0 <= OBJECT_DEFINITION)||(LA293_0 >= OUTER && LA293_0 <= PACKAGE)||LA293_0==RBRACE||LA293_0==RETURN||LA293_0==SMALLER_OP||LA293_0==STRING_LITERAL||LA293_0==STRING_START||(LA293_0 >= SUM_OP && LA293_0 <= SWITCH_CLAUSE)||(LA293_0 >= THIS && LA293_0 <= TRY_CLAUSE)||LA293_0==UIDENTIFIER||(LA293_0 >= VALUE_MODIFIER && LA293_0 <= WHILE_CLAUSE)) ) {
                alt293=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return block;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;

            }
            switch (alt293) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3488:9: ( LBRACE )=>b= block
                    {
                    pushFollow(FOLLOW_block_in_controlBlock23334);
                    b=block();

                    state._fsp--;
                    if (state.failed) return block;

                    if ( state.backtracking==0 ) { block =b; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3490:9: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                    new MismatchedTokenException(LBRACE, input)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "controlBlock"



    // $ANTLR start "dynamic"
    // /home/david/git/ceylon-spec/Ceylon.g:3495:1: dynamic returns [DynamicStatement statement] : DYNAMIC block ;
    public DynamicStatement dynamic() throws RecognitionException {
        DynamicStatement statement = null;


        Token DYNAMIC533=null;
        Block block534 =null;


         DynamicClause dc = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3497:5: ( DYNAMIC block )
            // /home/david/git/ceylon-spec/Ceylon.g:3497:7: DYNAMIC block
            {
            if ( state.backtracking==0 ) { statement =new DynamicStatement(null); }

            DYNAMIC533=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_dynamic23400); if (state.failed) return statement;

            if ( state.backtracking==0 ) { dc = new DynamicClause(DYNAMIC533);
                    statement.setDynamicClause(dc); }

            pushFollow(FOLLOW_block_in_dynamic23417);
            block534=block();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { dc.setBlock(block534); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "dynamic"



    // $ANTLR start "ifElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3505:1: ifElse returns [IfStatement statement] : ifBlock ( elseBlock )? ;
    public IfStatement ifElse() throws RecognitionException {
        IfStatement statement = null;


        IfClause ifBlock535 =null;

        ElseClause elseBlock536 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3506:5: ( ifBlock ( elseBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3506:7: ifBlock ( elseBlock )?
            {
            if ( state.backtracking==0 ) { statement =new IfStatement(null); }

            pushFollow(FOLLOW_ifBlock_in_ifElse23454);
            ifBlock535=ifBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setIfClause(ifBlock535); }

            // /home/david/git/ceylon-spec/Ceylon.g:3509:7: ( elseBlock )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==ELSE_CLAUSE) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3510:9: elseBlock
                    {
                    pushFollow(FOLLOW_elseBlock_in_ifElse23482);
                    elseBlock536=elseBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { ElseClause ec = elseBlock536;
                              statement.setElseClause(ec);
                              ConditionList cl = ifBlock535.getConditionList();
                              if (cl!=null) {
                                List<Condition> conditions = cl.getConditions();
                                if (conditions.size()==1) {
                                  Condition c = conditions.get(0);
                                  Identifier id = null;
                                  Type t = null;
                                  if (c instanceof ExistsOrNonemptyCondition) {
                                    Statement s = ((ExistsOrNonemptyCondition)c).getVariable();
                                    if (s instanceof Variable) {
                                      Variable v = (Variable) s;
                                      t = v.getType();
                                      id = v.getIdentifier();
                                    }
                                  }
                                  else if (c instanceof IsCondition) {
                                    Variable v = (Variable) ((IsCondition)c).getVariable();
                                    if (v!=null) {
                                      t = v.getType();
                                      id = v.getIdentifier();
                                    }
                                  }
                                  if (id!=null && ec!=null && t instanceof SyntheticVariable) { 
                                    Variable ev = new Variable(null);
                                    ev.setType(new SyntheticVariable(null));
                                    SpecifierExpression ese = new SpecifierExpression(null);
                                    Expression ee = new Expression(null);
                                    BaseMemberExpression ebme = new BaseMemberExpression(null);
                                    ebme.setTypeArguments( new InferredTypeArguments(null) );
                                    ee.setTerm(ebme);
                                    ese.setExpression(ee);
                                    ev.setSpecifierExpression(ese);
                                    ec.setVariable(ev);
                                    ev.setIdentifier(id);
                                    ebme.setIdentifier(id);
                                  }
                                }
                              }
                            }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "ifElse"



    // $ANTLR start "ifBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3555:1: ifBlock returns [IfClause clause] : IF_CLAUSE conditions controlBlock ;
    public IfClause ifBlock() throws RecognitionException {
        IfClause clause = null;


        Token IF_CLAUSE537=null;
        ConditionList conditions538 =null;

        Block controlBlock539 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3556:5: ( IF_CLAUSE conditions controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3556:7: IF_CLAUSE conditions controlBlock
            {
            IF_CLAUSE537=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifBlock23522); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new IfClause(IF_CLAUSE537); }

            pushFollow(FOLLOW_conditions_in_ifBlock23539);
            conditions538=conditions();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setConditionList(conditions538); }

            pushFollow(FOLLOW_controlBlock_in_ifBlock23555);
            controlBlock539=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock539); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "ifBlock"



    // $ANTLR start "elseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3564:1: elseBlock returns [ElseClause clause] : ELSE_CLAUSE ( elseIf | block ) ;
    public ElseClause elseBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE540=null;
        Block elseIf541 =null;

        Block block542 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3565:5: ( ELSE_CLAUSE ( elseIf | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3565:7: ELSE_CLAUSE ( elseIf | block )
            {
            ELSE_CLAUSE540=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_elseBlock23584); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE540); }

            // /home/david/git/ceylon-spec/Ceylon.g:3567:7: ( elseIf | block )
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==IF_CLAUSE) ) {
                alt295=1;
            }
            else if ( (LA295_0==LBRACE) ) {
                alt295=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return clause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);

                throw nvae;

            }
            switch (alt295) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3568:9: elseIf
                    {
                    pushFollow(FOLLOW_elseIf_in_elseBlock23611);
                    elseIf541=elseIf();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(elseIf541); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3571:9: block
                    {
                    pushFollow(FOLLOW_block_in_elseBlock23641);
                    block542=block();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(block542); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "elseBlock"



    // $ANTLR start "elseIf"
    // /home/david/git/ceylon-spec/Ceylon.g:3576:1: elseIf returns [Block block] : ifElse ;
    public Block elseIf() throws RecognitionException {
        Block block = null;


        IfStatement ifElse543 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3577:5: ( ifElse )
            // /home/david/git/ceylon-spec/Ceylon.g:3577:7: ifElse
            {
            pushFollow(FOLLOW_ifElse_in_elseIf23680);
            ifElse543=ifElse();

            state._fsp--;
            if (state.failed) return block;

            if ( state.backtracking==0 ) { block = new Block(null);
                    block.addStatement(ifElse543); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "elseIf"



    // $ANTLR start "switchCaseElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3582:1: switchCaseElse returns [SwitchStatement statement] : switchHeader cases ;
    public SwitchStatement switchCaseElse() throws RecognitionException {
        SwitchStatement statement = null;


        SwitchClause switchHeader544 =null;

        SwitchCaseList cases545 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3583:5: ( switchHeader cases )
            // /home/david/git/ceylon-spec/Ceylon.g:3583:7: switchHeader cases
            {
            if ( state.backtracking==0 ) { statement = new SwitchStatement(null); }

            pushFollow(FOLLOW_switchHeader_in_switchCaseElse23717);
            switchHeader544=switchHeader();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setSwitchClause(switchHeader544); }

            pushFollow(FOLLOW_cases_in_switchCaseElse23734);
            cases545=cases();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setSwitchCaseList(cases545);
                    Identifier id = null;
                    Switched sw = switchHeader544.getSwitched();
                    if (sw!=null) {
                      Expression ex = sw.getExpression();
                      if (ex!=null && ex.getTerm() instanceof BaseMemberExpression) {
                        id = ((BaseMemberExpression) ex.getTerm()).getIdentifier();
                      }
                      TypedDeclaration var = sw.getVariable();
                      if (var!=null) {
                        id = var.getIdentifier();
                      }
                    }
                    if (id!=null) {
                      for (CaseClause cc: cases545.getCaseClauses()) {
                        CaseItem item = cc.getCaseItem();
                        if (item instanceof IsCase) {
                          IsCase ic = (IsCase) item;
                          Variable v = new Variable(null);
                          v.setType(new SyntheticVariable(null));
                          SpecifierExpression se = new SpecifierExpression(null);
                          Expression e = new Expression(null);
                          BaseMemberExpression bme = new BaseMemberExpression(null);
                          bme.setTypeArguments( new InferredTypeArguments(null) );
                          e.setTerm(bme);
                          se.setExpression(e);
                          v.setSpecifierExpression(se);
                          ic.setVariable(v);
                          bme.setIdentifier(id);
                          v.setIdentifier(id);
                        }
                      }
                      ElseClause ec = cases545.getElseClause();
                      if (ec!=null) {
                        Variable ev = new Variable(null);
                        ev.setType(new SyntheticVariable(null));
                        SpecifierExpression ese = new SpecifierExpression(null);
                        Expression ee = new Expression(null);
                        BaseMemberExpression ebme = new BaseMemberExpression(null);
                        ebme.setTypeArguments( new InferredTypeArguments(null) );
                        ee.setTerm(ebme);
                        ese.setExpression(ee);
                        ev.setSpecifierExpression(ese);
                        ec.setVariable(ev);
                        ebme.setIdentifier(id);
                        ev.setIdentifier(id);
                      }
                    }
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "switchCaseElse"



    // $ANTLR start "switchHeader"
    // /home/david/git/ceylon-spec/Ceylon.g:3638:1: switchHeader returns [SwitchClause clause] : SWITCH_CLAUSE LPAREN ( switched )? RPAREN ;
    public SwitchClause switchHeader() throws RecognitionException {
        SwitchClause clause = null;


        Token SWITCH_CLAUSE546=null;
        Switched switched547 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3639:5: ( SWITCH_CLAUSE LPAREN ( switched )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3639:7: SWITCH_CLAUSE LPAREN ( switched )? RPAREN
            {
            SWITCH_CLAUSE546=(Token)match(input,SWITCH_CLAUSE,FOLLOW_SWITCH_CLAUSE_in_switchHeader23763); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new SwitchClause(SWITCH_CLAUSE546); }

            match(input,LPAREN,FOLLOW_LPAREN_in_switchHeader23780); if (state.failed) return clause;

            // /home/david/git/ceylon-spec/Ceylon.g:3642:7: ( switched )?
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==BACKTICK||LA296_0==CHAR_LITERAL||LA296_0==COMPILER_ANNOTATION||(LA296_0 >= DECREMENT_OP && LA296_0 <= DIFFERENCE_OP)||LA296_0==DYNAMIC||LA296_0==FLOAT_LITERAL||LA296_0==FUNCTION_MODIFIER||LA296_0==INCREMENT_OP||(LA296_0 >= LBRACE && LA296_0 <= LBRACKET)||LA296_0==LIDENTIFIER||LA296_0==LPAREN||LA296_0==NATURAL_LITERAL||(LA296_0 >= NOT_OP && LA296_0 <= OBJECT_DEFINITION)||(LA296_0 >= OUTER && LA296_0 <= PACKAGE)||LA296_0==SMALLER_OP||LA296_0==STRING_LITERAL||LA296_0==STRING_START||(LA296_0 >= SUM_OP && LA296_0 <= SUPER)||LA296_0==THIS||LA296_0==UIDENTIFIER||(LA296_0 >= VALUE_MODIFIER && LA296_0 <= VOID_MODIFIER)) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3643:9: switched
                    {
                    pushFollow(FOLLOW_switched_in_switchHeader23799);
                    switched547=switched();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setSwitched(switched547); }

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_switchHeader23827); if (state.failed) return clause;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "switchHeader"



    // $ANTLR start "switched"
    // /home/david/git/ceylon-spec/Ceylon.g:3649:1: switched returns [Switched switched] : ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) ;
    public Switched switched() throws RecognitionException {
        Switched switched = null;


        Variable specifiedVariable548 =null;

        Expression expression549 =null;


         switched = new Switched(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3651:5: ( ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3651:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3651:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==COMPILER_ANNOTATION) && (synpred43_Ceylon())) {
                alt297=1;
            }
            else if ( (LA297_0==UIDENTIFIER) ) {
                int LA297_2 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt297=1;
                }
                else if ( (true) ) {
                    alt297=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 297, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA297_0==SMALLER_OP) && (synpred43_Ceylon())) {
                alt297=1;
            }
            else if ( (LA297_0==LBRACKET) ) {
                int LA297_4 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt297=1;
                }
                else if ( (true) ) {
                    alt297=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 297, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA297_0==LBRACE) ) {
                int LA297_5 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt297=1;
                }
                else if ( (true) ) {
                    alt297=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 297, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA297_0==VOID_MODIFIER) && (synpred43_Ceylon())) {
                alt297=1;
            }
            else if ( (LA297_0==FUNCTION_MODIFIER) && (synpred43_Ceylon())) {
                alt297=1;
            }
            else if ( (LA297_0==VALUE_MODIFIER) && (synpred43_Ceylon())) {
                alt297=1;
            }
            else if ( (LA297_0==LIDENTIFIER) ) {
                int LA297_9 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt297=1;
                }
                else if ( (true) ) {
                    alt297=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 297, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA297_0==BACKTICK||LA297_0==CHAR_LITERAL||(LA297_0 >= DECREMENT_OP && LA297_0 <= DIFFERENCE_OP)||LA297_0==DYNAMIC||LA297_0==FLOAT_LITERAL||LA297_0==INCREMENT_OP||LA297_0==LPAREN||LA297_0==NATURAL_LITERAL||(LA297_0 >= NOT_OP && LA297_0 <= OBJECT_DEFINITION)||(LA297_0 >= OUTER && LA297_0 <= PACKAGE)||LA297_0==STRING_LITERAL||LA297_0==STRING_START||(LA297_0 >= SUM_OP && LA297_0 <= SUPER)||LA297_0==THIS||LA297_0==VERBATIM_STRING) ) {
                alt297=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return switched;}
                NoViableAltException nvae =
                    new NoViableAltException("", 297, 0, input);

                throw nvae;

            }
            switch (alt297) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3651:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable
                    {
                    pushFollow(FOLLOW_specifiedVariable_in_switched23878);
                    specifiedVariable548=specifiedVariable();

                    state._fsp--;
                    if (state.failed) return switched;

                    if ( state.backtracking==0 ) { switched.setVariable(specifiedVariable548); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3654:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_switched23898);
                    expression549=expression();

                    state._fsp--;
                    if (state.failed) return switched;

                    if ( state.backtracking==0 ) { switched.setExpression(expression549); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switched;
    }
    // $ANTLR end "switched"



    // $ANTLR start "cases"
    // /home/david/git/ceylon-spec/Ceylon.g:3659:1: cases returns [SwitchCaseList switchCaseList] : ( caseBlock )+ ( defaultCaseBlock )? ;
    public SwitchCaseList cases() throws RecognitionException {
        SwitchCaseList switchCaseList = null;


        CaseClause caseBlock550 =null;

        ElseClause defaultCaseBlock551 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3660:5: ( ( caseBlock )+ ( defaultCaseBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3660:7: ( caseBlock )+ ( defaultCaseBlock )?
            {
            if ( state.backtracking==0 ) { switchCaseList = new SwitchCaseList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3661:7: ( caseBlock )+
            int cnt298=0;
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);

                if ( (LA298_0==CASE_CLAUSE) ) {
                    alt298=1;
                }


                switch (alt298) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3662:9: caseBlock
            	    {
            	    pushFollow(FOLLOW_caseBlock_in_cases23955);
            	    caseBlock550=caseBlock();

            	    state._fsp--;
            	    if (state.failed) return switchCaseList;

            	    if ( state.backtracking==0 ) { switchCaseList.addCaseClause(caseBlock550); }

            	    }
            	    break;

            	default :
            	    if ( cnt298 >= 1 ) break loop298;
            	    if (state.backtracking>0) {state.failed=true; return switchCaseList;}
                        EarlyExitException eee =
                            new EarlyExitException(298, input);
                        throw eee;
                }
                cnt298++;
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:3665:7: ( defaultCaseBlock )?
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==ELSE_CLAUSE) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3666:9: defaultCaseBlock
                    {
                    pushFollow(FOLLOW_defaultCaseBlock_in_cases23992);
                    defaultCaseBlock551=defaultCaseBlock();

                    state._fsp--;
                    if (state.failed) return switchCaseList;

                    if ( state.backtracking==0 ) { switchCaseList.setElseClause(defaultCaseBlock551); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switchCaseList;
    }
    // $ANTLR end "cases"



    // $ANTLR start "caseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3671:1: caseBlock returns [CaseClause clause] : CASE_CLAUSE caseItemList block ;
    public CaseClause caseBlock() throws RecognitionException {
        CaseClause clause = null;


        Token CASE_CLAUSE552=null;
        CaseItem caseItemList553 =null;

        Block block554 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3672:5: ( CASE_CLAUSE caseItemList block )
            // /home/david/git/ceylon-spec/Ceylon.g:3672:7: CASE_CLAUSE caseItemList block
            {
            CASE_CLAUSE552=(Token)match(input,CASE_CLAUSE,FOLLOW_CASE_CLAUSE_in_caseBlock24036); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CaseClause(CASE_CLAUSE552); }

            pushFollow(FOLLOW_caseItemList_in_caseBlock24053);
            caseItemList553=caseItemList();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCaseItem(caseItemList553); }

            pushFollow(FOLLOW_block_in_caseBlock24069);
            block554=block();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(block554); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "caseBlock"



    // $ANTLR start "defaultCaseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3680:1: defaultCaseBlock returns [ElseClause clause] : ELSE_CLAUSE block ;
    public ElseClause defaultCaseBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE555=null;
        Block block556 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3681:5: ( ELSE_CLAUSE block )
            // /home/david/git/ceylon-spec/Ceylon.g:3681:7: ELSE_CLAUSE block
            {
            ELSE_CLAUSE555=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_defaultCaseBlock24098); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE555); }

            pushFollow(FOLLOW_block_in_defaultCaseBlock24115);
            block556=block();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(block556); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "defaultCaseBlock"



    // $ANTLR start "caseItemList"
    // /home/david/git/ceylon-spec/Ceylon.g:3687:1: caseItemList returns [CaseItem item] : LPAREN (ci= caseItem )? RPAREN ;
    public CaseItem caseItemList() throws RecognitionException {
        CaseItem item = null;


        Token RPAREN557=null;
        CaseItem ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3688:5: ( LPAREN (ci= caseItem )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3688:7: LPAREN (ci= caseItem )? RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_caseItemList24144); if (state.failed) return item;

            // /home/david/git/ceylon-spec/Ceylon.g:3689:7: (ci= caseItem )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==BACKTICK||LA300_0==CHAR_LITERAL||(LA300_0 >= DECREMENT_OP && LA300_0 <= DIFFERENCE_OP)||LA300_0==DYNAMIC||LA300_0==FLOAT_LITERAL||LA300_0==INCREMENT_OP||LA300_0==IS_OP||(LA300_0 >= LBRACE && LA300_0 <= LBRACKET)||LA300_0==LIDENTIFIER||LA300_0==LPAREN||LA300_0==NATURAL_LITERAL||LA300_0==OBJECT_DEFINITION||(LA300_0 >= OUTER && LA300_0 <= PACKAGE)||LA300_0==SATISFIES||LA300_0==STRING_LITERAL||LA300_0==STRING_START||(LA300_0 >= SUM_OP && LA300_0 <= SUPER)||LA300_0==THIS||LA300_0==UIDENTIFIER||LA300_0==VERBATIM_STRING) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3690:9: ci= caseItem
                    {
                    pushFollow(FOLLOW_caseItem_in_caseItemList24165);
                    ci=caseItem();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item = ci; }

                    }
                    break;

            }


            RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_caseItemList24192); if (state.failed) return item;

            if ( state.backtracking==0 ) { if (item!=null) 
                        item.setEndToken(RPAREN557); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "caseItemList"



    // $ANTLR start "caseItem"
    // /home/david/git/ceylon-spec/Ceylon.g:3698:1: caseItem returns [CaseItem item] : ( ( IS_OP )=> isCaseCondition | ( SATISFIES )=> satisfiesCaseCondition | matchCaseCondition );
    public CaseItem caseItem() throws RecognitionException {
        CaseItem item = null;


        IsCase isCaseCondition558 =null;

        SatisfiesCase satisfiesCaseCondition559 =null;

        MatchCase matchCaseCondition560 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3699:5: ( ( IS_OP )=> isCaseCondition | ( SATISFIES )=> satisfiesCaseCondition | matchCaseCondition )
            int alt301=3;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==IS_OP) && (synpred44_Ceylon())) {
                alt301=1;
            }
            else if ( (LA301_0==SATISFIES) && (synpred45_Ceylon())) {
                alt301=2;
            }
            else if ( (LA301_0==BACKTICK||LA301_0==CHAR_LITERAL||(LA301_0 >= DECREMENT_OP && LA301_0 <= DIFFERENCE_OP)||LA301_0==DYNAMIC||LA301_0==FLOAT_LITERAL||LA301_0==INCREMENT_OP||(LA301_0 >= LBRACE && LA301_0 <= LBRACKET)||LA301_0==LIDENTIFIER||LA301_0==LPAREN||LA301_0==NATURAL_LITERAL||LA301_0==OBJECT_DEFINITION||(LA301_0 >= OUTER && LA301_0 <= PACKAGE)||LA301_0==STRING_LITERAL||LA301_0==STRING_START||(LA301_0 >= SUM_OP && LA301_0 <= SUPER)||LA301_0==THIS||LA301_0==UIDENTIFIER||LA301_0==VERBATIM_STRING) ) {
                alt301=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return item;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;

            }
            switch (alt301) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3699:7: ( IS_OP )=> isCaseCondition
                    {
                    pushFollow(FOLLOW_isCaseCondition_in_caseItem24226);
                    isCaseCondition558=isCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =isCaseCondition558; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3701:7: ( SATISFIES )=> satisfiesCaseCondition
                    {
                    pushFollow(FOLLOW_satisfiesCaseCondition_in_caseItem24247);
                    satisfiesCaseCondition559=satisfiesCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =satisfiesCaseCondition559; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3703:7: matchCaseCondition
                    {
                    pushFollow(FOLLOW_matchCaseCondition_in_caseItem24263);
                    matchCaseCondition560=matchCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =matchCaseCondition560; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "caseItem"



    // $ANTLR start "matchCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3707:1: matchCaseCondition returns [MatchCase item] : valueCaseList ;
    public MatchCase matchCaseCondition() throws RecognitionException {
        MatchCase item = null;


        ExpressionList valueCaseList561 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3708:5: ( valueCaseList )
            // /home/david/git/ceylon-spec/Ceylon.g:3708:7: valueCaseList
            {
            pushFollow(FOLLOW_valueCaseList_in_matchCaseCondition24292);
            valueCaseList561=valueCaseList();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new MatchCase(null);
                    item.setExpressionList(valueCaseList561); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "matchCaseCondition"



    // $ANTLR start "isCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3713:1: isCaseCondition returns [IsCase item] : IS_OP type ;
    public IsCase isCaseCondition() throws RecognitionException {
        IsCase item = null;


        Token IS_OP562=null;
        StaticType type563 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3714:5: ( IS_OP type )
            // /home/david/git/ceylon-spec/Ceylon.g:3714:7: IS_OP type
            {
            IS_OP562=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_isCaseCondition24321); if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new IsCase(IS_OP562); }

            pushFollow(FOLLOW_type_in_isCaseCondition24338);
            type563=type();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item.setType(type563); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "isCaseCondition"



    // $ANTLR start "satisfiesCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3720:1: satisfiesCaseCondition returns [SatisfiesCase item] : SATISFIES type ;
    public SatisfiesCase satisfiesCaseCondition() throws RecognitionException {
        SatisfiesCase item = null;


        Token SATISFIES564=null;
        StaticType type565 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3721:5: ( SATISFIES type )
            // /home/david/git/ceylon-spec/Ceylon.g:3721:7: SATISFIES type
            {
            SATISFIES564=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiesCaseCondition24367); if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new SatisfiesCase(SATISFIES564); }

            pushFollow(FOLLOW_type_in_satisfiesCaseCondition24384);
            type565=type();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item.setType(type565); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "satisfiesCaseCondition"



    // $ANTLR start "forElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3727:1: forElse returns [ForStatement statement] : forBlock ( failBlock )? ;
    public ForStatement forElse() throws RecognitionException {
        ForStatement statement = null;


        ForClause forBlock566 =null;

        ElseClause failBlock567 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3728:5: ( forBlock ( failBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3728:7: forBlock ( failBlock )?
            {
            if ( state.backtracking==0 ) { statement =new ForStatement(null); }

            pushFollow(FOLLOW_forBlock_in_forElse24421);
            forBlock566=forBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setForClause(forBlock566); }

            // /home/david/git/ceylon-spec/Ceylon.g:3731:7: ( failBlock )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==ELSE_CLAUSE) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3732:9: failBlock
                    {
                    pushFollow(FOLLOW_failBlock_in_forElse24448);
                    failBlock567=failBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setElseClause(failBlock567); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "forElse"



    // $ANTLR start "forBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3737:1: forBlock returns [ForClause clause] : FOR_CLAUSE forIterator controlBlock ;
    public ForClause forBlock() throws RecognitionException {
        ForClause clause = null;


        Token FOR_CLAUSE568=null;
        ForIterator forIterator569 =null;

        Block controlBlock570 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3738:5: ( FOR_CLAUSE forIterator controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3738:7: FOR_CLAUSE forIterator controlBlock
            {
            FOR_CLAUSE568=(Token)match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_forBlock24488); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ForClause(FOR_CLAUSE568); }

            pushFollow(FOLLOW_forIterator_in_forBlock24505);
            forIterator569=forIterator();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setForIterator(forIterator569); }

            pushFollow(FOLLOW_controlBlock_in_forBlock24522);
            controlBlock570=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock570); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "forBlock"



    // $ANTLR start "failBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3746:1: failBlock returns [ElseClause clause] : ELSE_CLAUSE controlBlock ;
    public ElseClause failBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE571=null;
        Block controlBlock572 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3747:5: ( ELSE_CLAUSE controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3747:7: ELSE_CLAUSE controlBlock
            {
            ELSE_CLAUSE571=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_failBlock24551); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE571); }

            pushFollow(FOLLOW_controlBlock_in_failBlock24568);
            controlBlock572=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock572); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "failBlock"



    // $ANTLR start "forIterator"
    // /home/david/git/ceylon-spec/Ceylon.g:3753:1: forIterator returns [ForIterator iterator] : LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN ;
    public ForIterator forIterator() throws RecognitionException {
        ForIterator iterator = null;


        Token LPAREN573=null;
        Token RPAREN577=null;
        Pattern pattern574 =null;

        Variable variable575 =null;

        SpecifierExpression containment576 =null;


         ValueIterator vi = null;
                    PatternIterator pi = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3756:5: ( LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3756:7: LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN
            {
            LPAREN573=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forIterator24606); if (state.failed) return iterator;

            if ( state.backtracking==0 ) { vi = new ValueIterator(LPAREN573); 
                  pi = new PatternIterator(LPAREN573); 
                  iterator = vi; }

            // /home/david/git/ceylon-spec/Ceylon.g:3760:5: ( ( ( patternStart )=> pattern | variable ) ( containment )? )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==COMPILER_ANNOTATION||LA305_0==FUNCTION_MODIFIER||(LA305_0 >= LBRACE && LA305_0 <= LBRACKET)||LA305_0==LIDENTIFIER||LA305_0==SMALLER_OP||LA305_0==UIDENTIFIER||LA305_0==VALUE_MODIFIER||LA305_0==VOID_MODIFIER) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3761:7: ( ( patternStart )=> pattern | variable ) ( containment )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3761:7: ( ( patternStart )=> pattern | variable )
                    int alt303=2;
                    switch ( input.LA(1) ) {
                    case LBRACKET:
                        {
                        int LA303_1 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case COMPILER_ANNOTATION:
                        {
                        int LA303_2 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case UIDENTIFIER:
                        {
                        int LA303_3 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case SMALLER_OP:
                        {
                        int LA303_4 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 4, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LBRACE:
                        {
                        int LA303_5 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 5, input);

                            throw nvae;

                        }
                        }
                        break;
                    case VOID_MODIFIER:
                        {
                        int LA303_6 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 6, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FUNCTION_MODIFIER:
                        {
                        int LA303_7 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case VALUE_MODIFIER:
                        {
                        int LA303_8 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LIDENTIFIER:
                        {
                        int LA303_9 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt303=1;
                        }
                        else if ( (true) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return iterator;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 303, 0, input);

                        throw nvae;

                    }

                    switch (alt303) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3762:9: ( patternStart )=> pattern
                            {
                            pushFollow(FOLLOW_pattern_in_forIterator24643);
                            pattern574=pattern();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { pi.setPattern(pattern574);
                                      iterator = pi; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3766:9: variable
                            {
                            pushFollow(FOLLOW_variable_in_forIterator24671);
                            variable575=variable();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { vi.setVariable(variable575); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:3769:7: ( containment )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==IN_OP) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3770:9: containment
                            {
                            pushFollow(FOLLOW_containment_in_forIterator24707);
                            containment576=containment();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { iterator.setSpecifierExpression(containment576); }

                            }
                            break;

                    }


                    }
                    break;

            }


            RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forIterator24739); if (state.failed) return iterator;

            if ( state.backtracking==0 ) { iterator.setEndToken(RPAREN577); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return iterator;
    }
    // $ANTLR end "forIterator"



    // $ANTLR start "containment"
    // /home/david/git/ceylon-spec/Ceylon.g:3778:1: containment returns [SpecifierExpression specifierExpression] : IN_OP ( expression )? ;
    public SpecifierExpression containment() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token IN_OP578=null;
        Expression expression579 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3779:5: ( IN_OP ( expression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3779:7: IN_OP ( expression )?
            {
            IN_OP578=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_containment24770); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new SpecifierExpression(IN_OP578); }

            // /home/david/git/ceylon-spec/Ceylon.g:3781:7: ( expression )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==BACKTICK||LA306_0==CHAR_LITERAL||(LA306_0 >= DECREMENT_OP && LA306_0 <= DIFFERENCE_OP)||LA306_0==DYNAMIC||LA306_0==FLOAT_LITERAL||LA306_0==INCREMENT_OP||(LA306_0 >= LBRACE && LA306_0 <= LBRACKET)||LA306_0==LIDENTIFIER||LA306_0==LPAREN||LA306_0==NATURAL_LITERAL||(LA306_0 >= NOT_OP && LA306_0 <= OBJECT_DEFINITION)||(LA306_0 >= OUTER && LA306_0 <= PACKAGE)||LA306_0==STRING_LITERAL||LA306_0==STRING_START||(LA306_0 >= SUM_OP && LA306_0 <= SUPER)||LA306_0==THIS||LA306_0==UIDENTIFIER||LA306_0==VERBATIM_STRING) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3781:8: expression
                    {
                    pushFollow(FOLLOW_expression_in_containment24788);
                    expression579=expression();

                    state._fsp--;
                    if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression.setExpression(expression579); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "containment"



    // $ANTLR start "whileLoop"
    // /home/david/git/ceylon-spec/Ceylon.g:3785:1: whileLoop returns [WhileStatement statement] : whileBlock ;
    public WhileStatement whileLoop() throws RecognitionException {
        WhileStatement statement = null;


        WhileClause whileBlock580 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3786:5: ( whileBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3786:7: whileBlock
            {
            if ( state.backtracking==0 ) { statement = new WhileStatement(null); }

            pushFollow(FOLLOW_whileBlock_in_whileLoop24831);
            whileBlock580=whileBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setWhileClause(whileBlock580); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "whileLoop"



    // $ANTLR start "whileBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3791:1: whileBlock returns [WhileClause clause] : WHILE_CLAUSE conditions controlBlock ;
    public WhileClause whileBlock() throws RecognitionException {
        WhileClause clause = null;


        Token WHILE_CLAUSE581=null;
        ConditionList conditions582 =null;

        Block controlBlock583 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3792:5: ( WHILE_CLAUSE conditions controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3792:7: WHILE_CLAUSE conditions controlBlock
            {
            WHILE_CLAUSE581=(Token)match(input,WHILE_CLAUSE,FOLLOW_WHILE_CLAUSE_in_whileBlock24860); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new WhileClause(WHILE_CLAUSE581); }

            pushFollow(FOLLOW_conditions_in_whileBlock24876);
            conditions582=conditions();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setConditionList(conditions582); }

            pushFollow(FOLLOW_controlBlock_in_whileBlock24892);
            controlBlock583=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock583); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "whileBlock"



    // $ANTLR start "tryCatchFinally"
    // /home/david/git/ceylon-spec/Ceylon.g:3800:1: tryCatchFinally returns [TryCatchStatement statement] : tryBlock ( catchBlock )* ( finallyBlock )? ;
    public TryCatchStatement tryCatchFinally() throws RecognitionException {
        TryCatchStatement statement = null;


        TryClause tryBlock584 =null;

        CatchClause catchBlock585 =null;

        FinallyClause finallyBlock586 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3801:5: ( tryBlock ( catchBlock )* ( finallyBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3801:7: tryBlock ( catchBlock )* ( finallyBlock )?
            {
            if ( state.backtracking==0 ) { statement = new TryCatchStatement(null); }

            pushFollow(FOLLOW_tryBlock_in_tryCatchFinally24929);
            tryBlock584=tryBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setTryClause(tryBlock584); }

            // /home/david/git/ceylon-spec/Ceylon.g:3804:7: ( catchBlock )*
            loop307:
            do {
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( (LA307_0==CATCH_CLAUSE) ) {
                    alt307=1;
                }


                switch (alt307) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3805:9: catchBlock
            	    {
            	    pushFollow(FOLLOW_catchBlock_in_tryCatchFinally24956);
            	    catchBlock585=catchBlock();

            	    state._fsp--;
            	    if (state.failed) return statement;

            	    if ( state.backtracking==0 ) { statement.addCatchClause(catchBlock585); }

            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:3808:7: ( finallyBlock )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==FINALLY_CLAUSE) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3809:9: finallyBlock
                    {
                    pushFollow(FOLLOW_finallyBlock_in_tryCatchFinally24995);
                    finallyBlock586=finallyBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setFinallyClause(finallyBlock586); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "tryCatchFinally"



    // $ANTLR start "tryBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3814:1: tryBlock returns [TryClause clause] : TRY_CLAUSE ( resources controlBlock | block ) ;
    public TryClause tryBlock() throws RecognitionException {
        TryClause clause = null;


        Token TRY_CLAUSE587=null;
        ResourceList resources588 =null;

        Block controlBlock589 =null;

        Block block590 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3815:5: ( TRY_CLAUSE ( resources controlBlock | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3815:7: TRY_CLAUSE ( resources controlBlock | block )
            {
            TRY_CLAUSE587=(Token)match(input,TRY_CLAUSE,FOLLOW_TRY_CLAUSE_in_tryBlock25035); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new TryClause(TRY_CLAUSE587); }

            // /home/david/git/ceylon-spec/Ceylon.g:3817:7: ( resources controlBlock | block )
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==LPAREN) ) {
                alt309=1;
            }
            else if ( (LA309_0==LBRACE) ) {
                alt309=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return clause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);

                throw nvae;

            }
            switch (alt309) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3818:9: resources controlBlock
                    {
                    pushFollow(FOLLOW_resources_in_tryBlock25062);
                    resources588=resources();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setResourceList(resources588); }

                    pushFollow(FOLLOW_controlBlock_in_tryBlock25082);
                    controlBlock589=controlBlock();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(controlBlock589); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3823:9: block
                    {
                    pushFollow(FOLLOW_block_in_tryBlock25110);
                    block590=block();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(block590); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "tryBlock"



    // $ANTLR start "catchBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3828:1: catchBlock returns [CatchClause clause] : CATCH_CLAUSE catchVariable controlBlock ;
    public CatchClause catchBlock() throws RecognitionException {
        CatchClause clause = null;


        Token CATCH_CLAUSE591=null;
        CatchVariable catchVariable592 =null;

        Block controlBlock593 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3829:5: ( CATCH_CLAUSE catchVariable controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3829:7: CATCH_CLAUSE catchVariable controlBlock
            {
            CATCH_CLAUSE591=(Token)match(input,CATCH_CLAUSE,FOLLOW_CATCH_CLAUSE_in_catchBlock25149); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CatchClause(CATCH_CLAUSE591); }

            pushFollow(FOLLOW_catchVariable_in_catchBlock25166);
            catchVariable592=catchVariable();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCatchVariable(catchVariable592); }

            pushFollow(FOLLOW_controlBlock_in_catchBlock25182);
            controlBlock593=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock593); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "catchBlock"



    // $ANTLR start "catchVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3837:1: catchVariable returns [CatchVariable catchVariable] : LPAREN ( variable )? RPAREN ;
    public CatchVariable catchVariable() throws RecognitionException {
        CatchVariable catchVariable = null;


        Token LPAREN594=null;
        Token RPAREN596=null;
        Variable variable595 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3838:5: ( LPAREN ( variable )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3838:7: LPAREN ( variable )? RPAREN
            {
            LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchVariable25211); if (state.failed) return catchVariable;

            if ( state.backtracking==0 ) { catchVariable =new CatchVariable(LPAREN594); }

            // /home/david/git/ceylon-spec/Ceylon.g:3840:7: ( variable )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==ALIAS||(LA310_0 >= ASSERT && LA310_0 <= ASSIGN)||(LA310_0 >= BACKTICK && LA310_0 <= BREAK)||(LA310_0 >= CHAR_LITERAL && LA310_0 <= CLASS_DEFINITION)||LA310_0==COMPILER_ANNOTATION||LA310_0==CONTINUE||(LA310_0 >= DECREMENT_OP && LA310_0 <= DIFFERENCE_OP)||LA310_0==DYNAMIC||(LA310_0 >= FLOAT_LITERAL && LA310_0 <= FUNCTION_MODIFIER)||(LA310_0 >= IF_CLAUSE && LA310_0 <= INTERFACE_DEFINITION)||LA310_0==IN_OP||(LA310_0 >= LBRACE && LA310_0 <= LIDENTIFIER)||LA310_0==LPAREN||LA310_0==MODULE||(LA310_0 >= NATURAL_LITERAL && LA310_0 <= NEW)||(LA310_0 >= NOT_OP && LA310_0 <= OBJECT_DEFINITION)||(LA310_0 >= OUT && LA310_0 <= PACKAGE)||LA310_0==PRODUCT_OP||LA310_0==RETURN||(LA310_0 >= SEMICOLON && LA310_0 <= SMALLER_OP)||LA310_0==STRING_LITERAL||LA310_0==STRING_START||(LA310_0 >= SUM_OP && LA310_0 <= SWITCH_CLAUSE)||(LA310_0 >= THIS && LA310_0 <= UIDENTIFIER)||(LA310_0 >= VALUE_MODIFIER && LA310_0 <= WHILE_CLAUSE)) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3841:7: variable
                    {
                    pushFollow(FOLLOW_variable_in_catchVariable25236);
                    variable595=variable();

                    state._fsp--;
                    if (state.failed) return catchVariable;

                    if ( state.backtracking==0 ) { catchVariable.setVariable(variable595); }

                    }
                    break;

            }


            RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchVariable25262); if (state.failed) return catchVariable;

            if ( state.backtracking==0 ) { catchVariable.setEndToken(RPAREN596); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return catchVariable;
    }
    // $ANTLR end "catchVariable"



    // $ANTLR start "finallyBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3849:1: finallyBlock returns [FinallyClause clause] : FINALLY_CLAUSE controlBlock ;
    public FinallyClause finallyBlock() throws RecognitionException {
        FinallyClause clause = null;


        Token FINALLY_CLAUSE597=null;
        Block controlBlock598 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3850:5: ( FINALLY_CLAUSE controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3850:7: FINALLY_CLAUSE controlBlock
            {
            FINALLY_CLAUSE597=(Token)match(input,FINALLY_CLAUSE,FOLLOW_FINALLY_CLAUSE_in_finallyBlock25293); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new FinallyClause(FINALLY_CLAUSE597); }

            pushFollow(FOLLOW_controlBlock_in_finallyBlock25310);
            controlBlock598=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock598); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "finallyBlock"



    // $ANTLR start "resources"
    // /home/david/git/ceylon-spec/Ceylon.g:3856:1: resources returns [ResourceList resources] : LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN ;
    public ResourceList resources() throws RecognitionException {
        ResourceList resources = null;


        Token c=null;
        Token LPAREN599=null;
        Token RPAREN600=null;
        Resource r1 =null;

        Resource r2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3857:5: ( LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3857:7: LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN
            {
            LPAREN599=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_resources25339); if (state.failed) return resources;

            if ( state.backtracking==0 ) { resources = new ResourceList(LPAREN599); }

            // /home/david/git/ceylon-spec/Ceylon.g:3859:5: (r1= resource (c= COMMA r2= resource )* )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==BACKTICK||LA312_0==CHAR_LITERAL||LA312_0==COMPILER_ANNOTATION||(LA312_0 >= DECREMENT_OP && LA312_0 <= DIFFERENCE_OP)||LA312_0==DYNAMIC||LA312_0==FLOAT_LITERAL||LA312_0==FUNCTION_MODIFIER||LA312_0==INCREMENT_OP||(LA312_0 >= LBRACE && LA312_0 <= LBRACKET)||LA312_0==LIDENTIFIER||LA312_0==LPAREN||LA312_0==NATURAL_LITERAL||(LA312_0 >= NOT_OP && LA312_0 <= OBJECT_DEFINITION)||(LA312_0 >= OUTER && LA312_0 <= PACKAGE)||LA312_0==SMALLER_OP||LA312_0==STRING_LITERAL||LA312_0==STRING_START||(LA312_0 >= SUM_OP && LA312_0 <= SUPER)||LA312_0==THIS||LA312_0==UIDENTIFIER||(LA312_0 >= VALUE_MODIFIER && LA312_0 <= VOID_MODIFIER)) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3860:7: r1= resource (c= COMMA r2= resource )*
                    {
                    pushFollow(FOLLOW_resource_in_resources25362);
                    r1=resource();

                    state._fsp--;
                    if (state.failed) return resources;

                    if ( state.backtracking==0 ) { resources.addResource(r1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3862:7: (c= COMMA r2= resource )*
                    loop311:
                    do {
                        int alt311=2;
                        int LA311_0 = input.LA(1);

                        if ( (LA311_0==COMMA) ) {
                            alt311=1;
                        }


                        switch (alt311) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3863:9: c= COMMA r2= resource
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_resources25390); if (state.failed) return resources;

                    	    if ( state.backtracking==0 ) { resources.setEndToken(c); }

                    	    pushFollow(FOLLOW_resource_in_resources25413);
                    	    r2=resource();

                    	    state._fsp--;
                    	    if (state.failed) return resources;

                    	    if ( state.backtracking==0 ) { resources.addResource(r2);
                    	              resources.setEndToken(null); }

                    	    }
                    	    break;

                    	default :
                    	    break loop311;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_resources25445); if (state.failed) return resources;

            if ( state.backtracking==0 ) { resources.setEndToken(RPAREN600); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return resources;
    }
    // $ANTLR end "resources"



    // $ANTLR start "resource"
    // /home/david/git/ceylon-spec/Ceylon.g:3874:1: resource returns [Resource resource] : ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) ;
    public Resource resource() throws RecognitionException {
        Resource resource = null;


        Variable specifiedVariable601 =null;

        Expression expression602 =null;


         resource = new Resource(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3876:5: ( ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3876:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3876:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==COMPILER_ANNOTATION) && (synpred47_Ceylon())) {
                alt313=1;
            }
            else if ( (LA313_0==UIDENTIFIER) ) {
                int LA313_2 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt313=1;
                }
                else if ( (true) ) {
                    alt313=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA313_0==SMALLER_OP) && (synpred47_Ceylon())) {
                alt313=1;
            }
            else if ( (LA313_0==LBRACKET) ) {
                int LA313_4 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt313=1;
                }
                else if ( (true) ) {
                    alt313=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA313_0==LBRACE) ) {
                int LA313_5 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt313=1;
                }
                else if ( (true) ) {
                    alt313=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA313_0==VOID_MODIFIER) && (synpred47_Ceylon())) {
                alt313=1;
            }
            else if ( (LA313_0==FUNCTION_MODIFIER) && (synpred47_Ceylon())) {
                alt313=1;
            }
            else if ( (LA313_0==VALUE_MODIFIER) && (synpred47_Ceylon())) {
                alt313=1;
            }
            else if ( (LA313_0==LIDENTIFIER) ) {
                int LA313_9 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt313=1;
                }
                else if ( (true) ) {
                    alt313=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA313_0==BACKTICK||LA313_0==CHAR_LITERAL||(LA313_0 >= DECREMENT_OP && LA313_0 <= DIFFERENCE_OP)||LA313_0==DYNAMIC||LA313_0==FLOAT_LITERAL||LA313_0==INCREMENT_OP||LA313_0==LPAREN||LA313_0==NATURAL_LITERAL||(LA313_0 >= NOT_OP && LA313_0 <= OBJECT_DEFINITION)||(LA313_0 >= OUTER && LA313_0 <= PACKAGE)||LA313_0==STRING_LITERAL||LA313_0==STRING_START||(LA313_0 >= SUM_OP && LA313_0 <= SUPER)||LA313_0==THIS||LA313_0==VERBATIM_STRING) ) {
                alt313=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return resource;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);

                throw nvae;

            }
            switch (alt313) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3876:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable
                    {
                    pushFollow(FOLLOW_specifiedVariable_in_resource25502);
                    specifiedVariable601=specifiedVariable();

                    state._fsp--;
                    if (state.failed) return resource;

                    if ( state.backtracking==0 ) { resource.setVariable(specifiedVariable601); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3879:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_resource25522);
                    expression602=expression();

                    state._fsp--;
                    if (state.failed) return resource;

                    if ( state.backtracking==0 ) { resource.setExpression(expression602); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return resource;
    }
    // $ANTLR end "resource"



    // $ANTLR start "specifiedVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3884:1: specifiedVariable returns [Variable variable] : v= variable ( specifier )? ;
    public Variable specifiedVariable() throws RecognitionException {
        Variable variable = null;


        Variable v =null;

        SpecifierExpression specifier603 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3885:5: (v= variable ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3885:7: v= variable ( specifier )?
            {
            pushFollow(FOLLOW_variable_in_specifiedVariable25563);
            v=variable();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable = v; }

            // /home/david/git/ceylon-spec/Ceylon.g:3887:7: ( specifier )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==SPECIFY) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3888:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_specifiedVariable25590);
                    specifier603=specifier();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setSpecifierExpression(specifier603); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "specifiedVariable"



    // $ANTLR start "variable"
    // /home/david/git/ceylon-spec/Ceylon.g:3893:1: variable returns [Variable variable] : compilerAnnotations var ;
    public Variable variable() throws RecognitionException {
        Variable variable = null;


        Variable var604 =null;

        List<CompilerAnnotation> compilerAnnotations605 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3894:5: ( compilerAnnotations var )
            // /home/david/git/ceylon-spec/Ceylon.g:3894:7: compilerAnnotations var
            {
            pushFollow(FOLLOW_compilerAnnotations_in_variable25630);
            compilerAnnotations605=compilerAnnotations();

            state._fsp--;
            if (state.failed) return variable;

            pushFollow(FOLLOW_var_in_variable25638);
            var604=var();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable =var604;
                    variable.getCompilerAnnotations().addAll(compilerAnnotations605); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "variable"



    // $ANTLR start "var"
    // /home/david/git/ceylon-spec/Ceylon.g:3900:1: var returns [Variable variable] : ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName (p2= parameters )* ) ;
    public Variable var() throws RecognitionException {
        Variable variable = null;


        Token VOID_MODIFIER607=null;
        Token FUNCTION_MODIFIER608=null;
        Token VALUE_MODIFIER609=null;
        Identifier mn1 =null;

        ParameterList p1 =null;

        Identifier mn2 =null;

        ParameterList p2 =null;

        StaticType type606 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3901:5: ( ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName (p2= parameters )* ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3901:7: ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName (p2= parameters )* )
            {
            if ( state.backtracking==0 ) { variable = new Variable(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3902:5: ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName (p2= parameters )* )
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==FUNCTION_MODIFIER||(LA318_0 >= LBRACE && LA318_0 <= LBRACKET)||LA318_0==SMALLER_OP||LA318_0==UIDENTIFIER||LA318_0==VALUE_MODIFIER||LA318_0==VOID_MODIFIER) ) {
                alt318=1;
            }
            else if ( (LA318_0==LIDENTIFIER) ) {
                alt318=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return variable;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);

                throw nvae;

            }
            switch (alt318) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3903:7: ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )*
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3903:7: ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER )
                    int alt315=4;
                    switch ( input.LA(1) ) {
                    case LBRACE:
                    case LBRACKET:
                    case SMALLER_OP:
                    case UIDENTIFIER:
                        {
                        alt315=1;
                        }
                        break;
                    case VOID_MODIFIER:
                        {
                        alt315=2;
                        }
                        break;
                    case FUNCTION_MODIFIER:
                        {
                        alt315=3;
                        }
                        break;
                    case VALUE_MODIFIER:
                        {
                        alt315=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return variable;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 315, 0, input);

                        throw nvae;

                    }

                    switch (alt315) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3903:9: type
                            {
                            pushFollow(FOLLOW_type_in_var25687);
                            type606=type();

                            state._fsp--;
                            if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(type606); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3905:9: VOID_MODIFIER
                            {
                            VOID_MODIFIER607=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_var25708); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new VoidModifier(VOID_MODIFIER607)); }

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3907:9: FUNCTION_MODIFIER
                            {
                            FUNCTION_MODIFIER608=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_var25728); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new FunctionModifier(FUNCTION_MODIFIER608)); }

                            }
                            break;
                        case 4 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3909:9: VALUE_MODIFIER
                            {
                            VALUE_MODIFIER609=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_var25748); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new ValueModifier(VALUE_MODIFIER609)); }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_memberName_in_var25776);
                    mn1=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(mn1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3914:7: (p1= parameters )*
                    loop316:
                    do {
                        int alt316=2;
                        int LA316_0 = input.LA(1);

                        if ( (LA316_0==LPAREN) ) {
                            alt316=1;
                        }


                        switch (alt316) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3915:9: p1= parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_var25806);
                    	    p1=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return variable;

                    	    if ( state.backtracking==0 ) { variable.addParameterList(p1); }

                    	    }
                    	    break;

                    	default :
                    	    break loop316;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3919:7: mn2= memberName (p2= parameters )*
                    {
                    if ( state.backtracking==0 ) { variable.setType( new ValueModifier(null) ); }

                    pushFollow(FOLLOW_memberName_in_var25850);
                    mn2=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(mn2); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3922:7: (p2= parameters )*
                    loop317:
                    do {
                        int alt317=2;
                        int LA317_0 = input.LA(1);

                        if ( (LA317_0==LPAREN) ) {
                            alt317=1;
                        }


                        switch (alt317) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3923:9: p2= parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_var25878);
                    	    p2=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return variable;

                    	    if ( state.backtracking==0 ) { variable.setType( new FunctionModifier(null) );
                    	              variable.addParameterList(p2); }

                    	    }
                    	    break;

                    	default :
                    	    break loop317;
                        }
                    } while (true);


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "var"



    // $ANTLR start "impliedVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3930:1: impliedVariable returns [Variable variable] : memberName ;
    public Variable impliedVariable() throws RecognitionException {
        Variable variable = null;


        Identifier memberName610 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3931:5: ( memberName )
            // /home/david/git/ceylon-spec/Ceylon.g:3931:7: memberName
            {
            pushFollow(FOLLOW_memberName_in_impliedVariable25924);
            memberName610=memberName();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { Variable v = new Variable(null);
                    v.setType(new SyntheticVariable(null));
                    v.setIdentifier(memberName610);
                    SpecifierExpression se = new SpecifierExpression(null);
                    Expression e = new Expression(null);
                    BaseMemberExpression bme = new BaseMemberExpression(null);
                    bme.setIdentifier(memberName610);
                    bme.setTypeArguments( new InferredTypeArguments(null) );
                    e.setTerm(bme);
                    se.setExpression(e);
                    v.setSpecifierExpression(se); 
                    variable = v; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "impliedVariable"



    // $ANTLR start "metaLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:3947:1: metaLiteral returns [MetaLiteral meta] : d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK ;
    public MetaLiteral metaLiteral() throws RecognitionException {
        MetaLiteral meta = null;


        Token d1=null;
        Token vo=null;
        Token fo=null;
        Token o1=null;
        Token o2=null;
        Token d2=null;
        Token MODULE611=null;
        Token PACKAGE612=null;
        Token CLASS_DEFINITION613=null;
        Token NEW614=null;
        Token INTERFACE_DEFINITION615=null;
        Token ALIAS616=null;
        Token TYPE_CONSTRAINT617=null;
        Token VALUE_MODIFIER618=null;
        Token OBJECT_DEFINITION619=null;
        Token FUNCTION_MODIFIER620=null;
        ImportPath p1 =null;

        ImportPath p2 =null;

        StaticType ct =null;

        Identifier ot =null;

        StaticType nt =null;

        StaticType it =null;

        StaticType at =null;

        StaticType tt =null;

        StaticType vt =null;

        Identifier vom =null;

        Identifier vm =null;

        TypeArgumentList ta6 =null;

        StaticType ft =null;

        Identifier fom =null;

        Identifier fm =null;

        TypeArgumentList ta5 =null;

        Identifier m1 =null;

        TypeArgumentList ta1 =null;

        GroupedType gt =null;

        Identifier m2 =null;

        TypeArgumentList ta2 =null;

        Identifier mn =null;

        Identifier m4 =null;

        StaticType t =null;

        Identifier m3 =null;

        TypeArgumentList ta3 =null;


         TypeLiteral tl=null; 
                    MemberLiteral ml=null; 
                    PackageLiteral p=null;
                    ModuleLiteral m=null; 
                    ClassLiteral c=null;
                    InterfaceLiteral i=null;
                    NewLiteral n=null;
                    AliasLiteral a=null;
                    TypeParameterLiteral tp=null;
                    ValueLiteral v=null;
                    FunctionLiteral f=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3959:5: (d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK )
            // /home/david/git/ceylon-spec/Ceylon.g:3959:7: d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK
            {
            d1=(Token)match(input,BACKTICK,FOLLOW_BACKTICK_in_metaLiteral25966); if (state.failed) return meta;

            if ( state.backtracking==0 ) { tl = new TypeLiteral(d1);
                    meta = tl; }

            // /home/david/git/ceylon-spec/Ceylon.g:3962:5: ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? )
            int alt339=14;
            switch ( input.LA(1) ) {
            case MODULE:
                {
                alt339=1;
                }
                break;
            case PACKAGE:
                {
                alt339=2;
                }
                break;
            case CLASS_DEFINITION:
                {
                alt339=3;
                }
                break;
            case NEW:
                {
                alt339=4;
                }
                break;
            case INTERFACE_DEFINITION:
                {
                alt339=5;
                }
                break;
            case ALIAS:
                {
                alt339=6;
                }
                break;
            case TYPE_CONSTRAINT:
                {
                alt339=7;
                }
                break;
            case OBJECT_DEFINITION:
            case VALUE_MODIFIER:
                {
                alt339=8;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt339=9;
                }
                break;
            case UIDENTIFIER:
                {
                int LA339_11 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt339=10;
                }
                else if ( (true) ) {
                    alt339=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 11, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA339_12 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt339=10;
                }
                else if ( (synpred49_Ceylon()) ) {
                    alt339=11;
                }
                else if ( (true) ) {
                    alt339=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 12, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA339_13 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt339=10;
                }
                else if ( (true) ) {
                    alt339=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 13, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA339_14 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt339=10;
                }
                else if ( (true) ) {
                    alt339=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 14, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA339_15 = input.LA(2);

                if ( (synpred50_Ceylon()) ) {
                    alt339=12;
                }
                else if ( (true) ) {
                    alt339=14;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 15, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return meta;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;

            }

            switch (alt339) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3963:7: MODULE (p1= packagePath )?
                    {
                    MODULE611=(Token)match(input,MODULE,FOLLOW_MODULE_in_metaLiteral25988); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { m = new ModuleLiteral(d1);
                            m.setEndToken(MODULE611); 
                            meta =m; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3967:7: (p1= packagePath )?
                    int alt319=2;
                    int LA319_0 = input.LA(1);

                    if ( (LA319_0==LIDENTIFIER||LA319_0==UIDENTIFIER) ) {
                        alt319=1;
                    }
                    switch (alt319) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3968:9: p1= packagePath
                            {
                            pushFollow(FOLLOW_packagePath_in_metaLiteral26016);
                            p1=packagePath();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { m.setImportPath(p1); 
                                      m.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3973:7: PACKAGE (p2= packagePath )?
                    {
                    PACKAGE612=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_metaLiteral26049); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { p = new PackageLiteral(d1);
                            p.setEndToken(PACKAGE612); 
                            meta =p; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3977:7: (p2= packagePath )?
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==LIDENTIFIER||LA320_0==UIDENTIFIER) ) {
                        alt320=1;
                    }
                    switch (alt320) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3978:9: p2= packagePath
                            {
                            pushFollow(FOLLOW_packagePath_in_metaLiteral26077);
                            p2=packagePath();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { p.setImportPath(p2); 
                                      p.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3983:7: CLASS_DEFINITION (ct= type |ot= memberName )?
                    {
                    CLASS_DEFINITION613=(Token)match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_metaLiteral26110); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { c = new ClassLiteral(d1);
                            c.setEndToken(CLASS_DEFINITION613); 
                            meta =c; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3987:7: (ct= type |ot= memberName )?
                    int alt321=3;
                    int LA321_0 = input.LA(1);

                    if ( ((LA321_0 >= LBRACE && LA321_0 <= LBRACKET)||LA321_0==SMALLER_OP||LA321_0==UIDENTIFIER) ) {
                        alt321=1;
                    }
                    else if ( (LA321_0==LIDENTIFIER) ) {
                        alt321=2;
                    }
                    switch (alt321) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3988:9: ct= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26138);
                            ct=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { c.setType(ct); 
                                      c.setEndToken(null); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3992:9: ot= memberName
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26168);
                            ot=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                      bme.setIdentifier(ot);
                                      bme.setTypeArguments(new InferredTypeArguments(null));
                                      c.setObjectExpression(bme); }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3999:7: NEW (nt= type )?
                    {
                    NEW614=(Token)match(input,NEW,FOLLOW_NEW_in_metaLiteral26201); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { n = new NewLiteral(d1);
                            n.setEndToken(NEW614); 
                            meta =n; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4003:7: (nt= type )?
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( ((LA322_0 >= LBRACE && LA322_0 <= LBRACKET)||LA322_0==SMALLER_OP||LA322_0==UIDENTIFIER) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4004:9: nt= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26229);
                            nt=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { n.setType(nt); 
                                      n.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4009:7: INTERFACE_DEFINITION (it= type )?
                    {
                    INTERFACE_DEFINITION615=(Token)match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_metaLiteral26262); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { i = new InterfaceLiteral(d1);
                            i.setEndToken(INTERFACE_DEFINITION615); 
                            meta =i; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4013:7: (it= type )?
                    int alt323=2;
                    int LA323_0 = input.LA(1);

                    if ( ((LA323_0 >= LBRACE && LA323_0 <= LBRACKET)||LA323_0==SMALLER_OP||LA323_0==UIDENTIFIER) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4014:9: it= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26290);
                            it=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { i.setType(it); 
                                      i.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4019:7: ALIAS (at= type )?
                    {
                    ALIAS616=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_metaLiteral26323); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { a = new AliasLiteral(d1);
                            a.setEndToken(ALIAS616); 
                            meta =a; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4023:7: (at= type )?
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( ((LA324_0 >= LBRACE && LA324_0 <= LBRACKET)||LA324_0==SMALLER_OP||LA324_0==UIDENTIFIER) ) {
                        alt324=1;
                    }
                    switch (alt324) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4024:9: at= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26351);
                            at=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { a.setType(at); 
                                      a.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4029:7: TYPE_CONSTRAINT (tt= type )?
                    {
                    TYPE_CONSTRAINT617=(Token)match(input,TYPE_CONSTRAINT,FOLLOW_TYPE_CONSTRAINT_in_metaLiteral26384); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { tp = new TypeParameterLiteral(d1);
                            tp.setEndToken(TYPE_CONSTRAINT617); 
                            meta =tp; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4033:7: (tt= type )?
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( ((LA325_0 >= LBRACE && LA325_0 <= LBRACKET)||LA325_0==SMALLER_OP||LA325_0==UIDENTIFIER) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4034:9: tt= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26412);
                            tt=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { tp.setType(tt); 
                                    tp.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4039:7: ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:4039:7: ( VALUE_MODIFIER | OBJECT_DEFINITION )
                    int alt326=2;
                    int LA326_0 = input.LA(1);

                    if ( (LA326_0==VALUE_MODIFIER) ) {
                        alt326=1;
                    }
                    else if ( (LA326_0==OBJECT_DEFINITION) ) {
                        alt326=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return meta;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 326, 0, input);

                        throw nvae;

                    }
                    switch (alt326) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4040:9: VALUE_MODIFIER
                            {
                            VALUE_MODIFIER618=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_metaLiteral26455); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v = new ValueLiteral(d1);
                                      v.setEndToken(VALUE_MODIFIER618); 
                                      meta =v; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4045:9: OBJECT_DEFINITION
                            {
                            OBJECT_DEFINITION619=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_metaLiteral26483); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v = new ValueLiteral(d1);
                                      v.setEndToken(OBJECT_DEFINITION619);
                                      v.setBroken(true); 
                                      meta =v; }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4051:7: ( (vt= type |vom= memberName ) vo= MEMBER_OP )?
                    int alt328=2;
                    int LA328_0 = input.LA(1);

                    if ( ((LA328_0 >= LBRACE && LA328_0 <= LBRACKET)||LA328_0==SMALLER_OP||LA328_0==UIDENTIFIER) ) {
                        alt328=1;
                    }
                    else if ( (LA328_0==LIDENTIFIER) ) {
                        int LA328_2 = input.LA(2);

                        if ( (LA328_2==MEMBER_OP) ) {
                            alt328=1;
                        }
                    }
                    switch (alt328) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4052:9: (vt= type |vom= memberName ) vo= MEMBER_OP
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:4052:9: (vt= type |vom= memberName )
                            int alt327=2;
                            int LA327_0 = input.LA(1);

                            if ( ((LA327_0 >= LBRACE && LA327_0 <= LBRACKET)||LA327_0==SMALLER_OP||LA327_0==UIDENTIFIER) ) {
                                alt327=1;
                            }
                            else if ( (LA327_0==LIDENTIFIER) ) {
                                alt327=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return meta;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 327, 0, input);

                                throw nvae;

                            }
                            switch (alt327) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4053:11: vt= type
                                    {
                                    pushFollow(FOLLOW_type_in_metaLiteral26533);
                                    vt=type();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { v.setType(vt); 
                                                v.setEndToken(null); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4057:11: vom= memberName
                                    {
                                    pushFollow(FOLLOW_memberName_in_metaLiteral26569);
                                    vom=memberName();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                                bme.setIdentifier(vom);
                                                bme.setTypeArguments(new InferredTypeArguments(null));
                                                v.setObjectExpression(bme);
                                                v.setEndToken(null); }

                                    }
                                    break;

                            }


                            vo=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral26603); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v.setEndToken(vo); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4067:7: (vm= memberName (ta6= typeArguments )? )?
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( (LA330_0==LIDENTIFIER) ) {
                        alt330=1;
                    }
                    switch (alt330) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4068:9: vm= memberName (ta6= typeArguments )?
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26642);
                            vm=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v.setIdentifier(vm); 
                                      v.setEndToken(null); }

                            // /home/david/git/ceylon-spec/Ceylon.g:4071:9: (ta6= typeArguments )?
                            int alt329=2;
                            int LA329_0 = input.LA(1);

                            if ( (LA329_0==SMALLER_OP) ) {
                                alt329=1;
                            }
                            switch (alt329) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4073:11: ta6= typeArguments
                                    {
                                    pushFollow(FOLLOW_typeArguments_in_metaLiteral26687);
                                    ta6=typeArguments();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { v.setTypeArgumentList(ta6); }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4078:7: FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )?
                    {
                    FUNCTION_MODIFIER620=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_metaLiteral26733); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { f = new FunctionLiteral(d1);
                            f.setEndToken(FUNCTION_MODIFIER620); 
                            meta =f; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4082:7: ( (ft= type |fom= memberName ) fo= MEMBER_OP )?
                    int alt332=2;
                    int LA332_0 = input.LA(1);

                    if ( ((LA332_0 >= LBRACE && LA332_0 <= LBRACKET)||LA332_0==SMALLER_OP||LA332_0==UIDENTIFIER) ) {
                        alt332=1;
                    }
                    else if ( (LA332_0==LIDENTIFIER) ) {
                        int LA332_2 = input.LA(2);

                        if ( (LA332_2==MEMBER_OP) ) {
                            alt332=1;
                        }
                    }
                    switch (alt332) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4083:9: (ft= type |fom= memberName ) fo= MEMBER_OP
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:4083:9: (ft= type |fom= memberName )
                            int alt331=2;
                            int LA331_0 = input.LA(1);

                            if ( ((LA331_0 >= LBRACE && LA331_0 <= LBRACKET)||LA331_0==SMALLER_OP||LA331_0==UIDENTIFIER) ) {
                                alt331=1;
                            }
                            else if ( (LA331_0==LIDENTIFIER) ) {
                                alt331=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return meta;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 331, 0, input);

                                throw nvae;

                            }
                            switch (alt331) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4084:11: ft= type
                                    {
                                    pushFollow(FOLLOW_type_in_metaLiteral26773);
                                    ft=type();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { f.setType(ft); 
                                                f.setEndToken(null); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4088:11: fom= memberName
                                    {
                                    pushFollow(FOLLOW_memberName_in_metaLiteral26809);
                                    fom=memberName();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                                bme.setIdentifier(fom);
                                                bme.setTypeArguments(new InferredTypeArguments(null));
                                                f.setObjectExpression(bme);
                                                f.setEndToken(null); }

                                    }
                                    break;

                            }


                            fo=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral26843); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { f.setEndToken(fo); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4098:7: (fm= memberName (ta5= typeArguments )? )?
                    int alt334=2;
                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==LIDENTIFIER) ) {
                        alt334=1;
                    }
                    switch (alt334) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4099:9: fm= memberName (ta5= typeArguments )?
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26882);
                            fm=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { f.setIdentifier(fm); 
                                      f.setEndToken(null); }

                            // /home/david/git/ceylon-spec/Ceylon.g:4102:9: (ta5= typeArguments )?
                            int alt333=2;
                            int LA333_0 = input.LA(1);

                            if ( (LA333_0==SMALLER_OP) ) {
                                alt333=1;
                            }
                            switch (alt333) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4104:11: ta5= typeArguments
                                    {
                                    pushFollow(FOLLOW_typeArguments_in_metaLiteral26927);
                                    ta5=typeArguments();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { f.setTypeArgumentList(ta5); }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4109:7: ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_abbreviatedType_in_metaLiteral26997);
                    at=abbreviatedType();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setType(at); }

                    o1=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27015); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o1); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27033);
                    m1=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m1); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4119:7: (ta1= typeArguments )?
                    int alt335=2;
                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==SMALLER_OP) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4120:9: ta1= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27061);
                            ta1=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta1); }

                            }
                            break;

                    }


                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4124:7: ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_groupedType_in_metaLiteral27119);
                    gt=groupedType();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setType(gt); }

                    o2=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27137); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o2); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27155);
                    m2=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m2); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4134:7: (ta2= typeArguments )?
                    int alt336=2;
                    int LA336_0 = input.LA(1);

                    if ( (LA336_0==SMALLER_OP) ) {
                        alt336=1;
                    }
                    switch (alt336) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4135:9: ta2= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27183);
                            ta2=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta2); }

                            }
                            break;

                    }


                    }
                    break;
                case 12 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4139:7: ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27240);
                    mn=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                            bme.setIdentifier(mn);
                            bme.setTypeArguments(new InferredTypeArguments(null));
                            ml.setObjectExpression(bme); }

                    o1=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27258); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o1); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27276);
                    m4=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m4); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4152:7: (ta1= typeArguments )?
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==SMALLER_OP) ) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4153:9: ta1= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27304);
                            ta1=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta1); }

                            }
                            break;

                    }


                    }
                    break;
                case 13 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4157:7: t= type
                    {
                    pushFollow(FOLLOW_type_in_metaLiteral27340);
                    t=type();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { tl = new TypeLiteral(d1);
                            meta = tl;
                            tl.setType(t); }

                    }
                    break;
                case 14 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4162:7: m3= memberName (ta3= typeArguments )?
                    {
                    pushFollow(FOLLOW_memberName_in_metaLiteral27365);
                    m3=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml;
                            ml.setIdentifier(m3); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4166:7: (ta3= typeArguments )?
                    int alt338=2;
                    int LA338_0 = input.LA(1);

                    if ( (LA338_0==SMALLER_OP) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4167:9: ta3= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27393);
                            ta3=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta3); }

                            }
                            break;

                    }


                    }
                    break;

            }


            d2=(Token)match(input,BACKTICK,FOLLOW_BACKTICK_in_metaLiteral27428); if (state.failed) return meta;

            if ( state.backtracking==0 ) { meta.setEndToken(d2); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return meta;
    }
    // $ANTLR end "metaLiteral"

    // $ANTLR start synpred1_Ceylon
    public void synpred1_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:93:9: ( annotatedModuleDescriptorStart )
        // /home/david/git/ceylon-spec/Ceylon.g:93:10: annotatedModuleDescriptorStart
        {
        pushFollow(FOLLOW_annotatedModuleDescriptorStart_in_synpred1_Ceylon164);
        annotatedModuleDescriptorStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Ceylon

    // $ANTLR start synpred2_Ceylon
    public void synpred2_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:97:9: ( annotatedPackageDescriptorStart )
        // /home/david/git/ceylon-spec/Ceylon.g:97:10: annotatedPackageDescriptorStart
        {
        pushFollow(FOLLOW_annotatedPackageDescriptorStart_in_synpred2_Ceylon207);
        annotatedPackageDescriptorStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Ceylon

    // $ANTLR start synpred3_Ceylon
    public void synpred3_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:473:9: ( compilerAnnotations declarationStart )
        // /home/david/git/ceylon-spec/Ceylon.g:473:10: compilerAnnotations declarationStart
        {
        pushFollow(FOLLOW_compilerAnnotations_in_synpred3_Ceylon2744);
        compilerAnnotations();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_declarationStart_in_synpred3_Ceylon2746);
        declarationStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Ceylon

    // $ANTLR start synpred4_Ceylon
    public void synpred4_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:482:7: ( tuplePatternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:482:8: tuplePatternStart
        {
        pushFollow(FOLLOW_tuplePatternStart_in_synpred4_Ceylon2819);
        tuplePatternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Ceylon

    // $ANTLR start synpred5_Ceylon
    public void synpred5_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:491:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:491:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred5_Ceylon2884);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred5_Ceylon2886); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Ceylon

    // $ANTLR start synpred6_Ceylon
    public void synpred6_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:495:7: ( tuplePattern ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:495:8: tuplePattern ENTRY_OP
        {
        pushFollow(FOLLOW_tuplePattern_in_synpred6_Ceylon2922);
        tuplePattern();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred6_Ceylon2924); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Ceylon

    // $ANTLR start synpred7_Ceylon
    public void synpred7_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:499:7: ( tuplePatternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:499:8: tuplePatternStart
        {
        pushFollow(FOLLOW_tuplePatternStart_in_synpred7_Ceylon2960);
        tuplePatternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Ceylon

    // $ANTLR start synpred8_Ceylon
    public void synpred8_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:509:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:509:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred8_Ceylon3032);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred8_Ceylon3034); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Ceylon

    // $ANTLR start synpred9_Ceylon
    public void synpred9_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:513:7: ( tuplePattern ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:513:8: tuplePattern ENTRY_OP
        {
        pushFollow(FOLLOW_tuplePattern_in_synpred9_Ceylon3070);
        tuplePattern();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred9_Ceylon3072); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Ceylon

    // $ANTLR start synpred10_Ceylon
    public void synpred10_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:549:9: ( compilerAnnotations ( unionType )? PRODUCT_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:549:10: compilerAnnotations ( unionType )? PRODUCT_OP
        {
        pushFollow(FOLLOW_compilerAnnotations_in_synpred10_Ceylon3361);
        compilerAnnotations();

        state._fsp--;
        if (state.failed) return ;

        // /home/david/git/ceylon-spec/Ceylon.g:549:30: ( unionType )?
        int alt340=2;
        int LA340_0 = input.LA(1);

        if ( ((LA340_0 >= LBRACE && LA340_0 <= LBRACKET)||LA340_0==SMALLER_OP||LA340_0==UIDENTIFIER) ) {
            alt340=1;
        }
        switch (alt340) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:549:30: unionType
                {
                pushFollow(FOLLOW_unionType_in_synpred10_Ceylon3363);
                unionType();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_synpred10_Ceylon3366); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Ceylon

    // $ANTLR start synpred11_Ceylon
    public void synpred11_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1290:9: ( destructureStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1290:10: destructureStart
        {
        pushFollow(FOLLOW_destructureStart_in_synpred11_Ceylon8473);
        destructureStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Ceylon

    // $ANTLR start synpred12_Ceylon
    public void synpred12_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1292:9: ( annotatedDeclarationStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1292:10: annotatedDeclarationStart
        {
        pushFollow(FOLLOW_annotatedDeclarationStart_in_synpred12_Ceylon8499);
        annotatedDeclarationStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Ceylon

    // $ANTLR start synpred13_Ceylon
    public void synpred13_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1294:9: ( annotatedAssertionStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1294:10: annotatedAssertionStart
        {
        pushFollow(FOLLOW_annotatedAssertionStart_in_synpred13_Ceylon8527);
        annotatedAssertionStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Ceylon

    // $ANTLR start synpred14_Ceylon
    public void synpred14_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1296:9: ( annotationListStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1296:10: annotationListStart
        {
        pushFollow(FOLLOW_annotationListStart_in_synpred14_Ceylon8553);
        annotationListStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Ceylon

    // $ANTLR start synpred15_Ceylon
    public void synpred15_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1313:7: ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )
        int alt341=2;
        int LA341_0 = input.LA(1);

        if ( (LA341_0==INTERFACE_DEFINITION) ) {
            alt341=1;
        }
        else if ( (LA341_0==DYNAMIC) ) {
            alt341=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 341, 0, input);

            throw nvae;

        }
        switch (alt341) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1313:8: INTERFACE_DEFINITION
                {
                match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_synpred15_Ceylon8678); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1313:29: DYNAMIC UIDENTIFIER
                {
                match(input,DYNAMIC,FOLLOW_DYNAMIC_in_synpred15_Ceylon8680); if (state.failed) return ;

                match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_synpred15_Ceylon8682); if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred15_Ceylon

    // $ANTLR start synpred16_Ceylon
    public void synpred16_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1340:8: ( unambiguousType )
        // /home/david/git/ceylon-spec/Ceylon.g:1340:9: unambiguousType
        {
        pushFollow(FOLLOW_unambiguousType_in_synpred16_Ceylon8857);
        unambiguousType();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Ceylon

    // $ANTLR start synpred17_Ceylon
    public void synpred17_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1629:9: ( specifierParametersStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1629:10: specifierParametersStart
        {
        pushFollow(FOLLOW_specifierParametersStart_in_synpred17_Ceylon10674);
        specifierParametersStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Ceylon

    // $ANTLR start synpred18_Ceylon
    public void synpred18_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1676:9: (~ ( LIDENTIFIER | UIDENTIFIER ) )
        // /home/david/git/ceylon-spec/Ceylon.g:
        {
        if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= LET)||(input.LA(1) >= LINE_COMMENT && input.LA(1) <= TYPE_CONSTRAINT)||(input.LA(1) >= UIdentifierPrefix && input.LA(1) <= WS) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred18_Ceylon

    // $ANTLR start synpred19_Ceylon
    public void synpred19_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1721:9: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1721:10: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred19_Ceylon11216);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Ceylon

    // $ANTLR start synpred20_Ceylon
    public void synpred20_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1725:9: ( anonymousArgument )
        // /home/david/git/ceylon-spec/Ceylon.g:1725:10: anonymousArgument
        {
        pushFollow(FOLLOW_anonymousArgument_in_synpred20_Ceylon11251);
        anonymousArgument();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Ceylon

    // $ANTLR start synpred21_Ceylon
    public void synpred21_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1769:9: ( typeArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1769:10: typeArgumentsStart
        {
        pushFollow(FOLLOW_typeArgumentsStart_in_synpred21_Ceylon11579);
        typeArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Ceylon

    // $ANTLR start synpred22_Ceylon
    public void synpred22_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1780:9: ( typeArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1780:10: typeArgumentsStart
        {
        pushFollow(FOLLOW_typeArgumentsStart_in_synpred22_Ceylon11660);
        typeArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Ceylon

    // $ANTLR start synpred23_Ceylon
    public void synpred23_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1861:9: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1861:10: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred23_Ceylon12181);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Ceylon

    // $ANTLR start synpred24_Ceylon
    public void synpred24_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1865:9: ( anonymousArgument )
        // /home/david/git/ceylon-spec/Ceylon.g:1865:10: anonymousArgument
        {
        pushFollow(FOLLOW_anonymousArgument_in_synpred24_Ceylon12216);
        anonymousArgument();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Ceylon

    // $ANTLR start synpred25_Ceylon
    public void synpred25_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1883:11: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )
        int alt342=2;
        int LA342_0 = input.LA(1);

        if ( (LA342_0==FOR_CLAUSE) ) {
            alt342=1;
        }
        else if ( (LA342_0==IF_CLAUSE) ) {
            alt342=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 342, 0, input);

            throw nvae;

        }
        switch (alt342) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1883:12: FOR_CLAUSE
                {
                match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_synpred25_Ceylon12354); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1883:25: IF_CLAUSE conditions ~ THEN_CLAUSE
                {
                match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred25_Ceylon12358); if (state.failed) return ;

                pushFollow(FOLLOW_conditions_in_synpred25_Ceylon12360);
                conditions();

                state._fsp--;
                if (state.failed) return ;

                if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
                    input.consume();
                    state.errorRecovery=false;
                    state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }
    }
    // $ANTLR end synpred25_Ceylon

    // $ANTLR start synpred26_Ceylon
    public void synpred26_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1900:13: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )
        int alt343=2;
        int LA343_0 = input.LA(1);

        if ( (LA343_0==FOR_CLAUSE) ) {
            alt343=1;
        }
        else if ( (LA343_0==IF_CLAUSE) ) {
            alt343=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 343, 0, input);

            throw nvae;

        }
        switch (alt343) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1900:14: FOR_CLAUSE
                {
                match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_synpred26_Ceylon12537); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1900:27: IF_CLAUSE conditions ~ THEN_CLAUSE
                {
                match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred26_Ceylon12541); if (state.failed) return ;

                pushFollow(FOLLOW_conditions_in_synpred26_Ceylon12543);
                conditions();

                state._fsp--;
                if (state.failed) return ;

                if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
                    input.consume();
                    state.errorRecovery=false;
                    state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }
    }
    // $ANTLR end synpred26_Ceylon

    // $ANTLR start synpred27_Ceylon
    public void synpred27_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2149:15: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:2149:16: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred27_Ceylon14589);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Ceylon

    // $ANTLR start synpred28_Ceylon
    public void synpred28_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2216:7: ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )
        int alt344=3;
        switch ( input.LA(1) ) {
        case FUNCTION_MODIFIER:
            {
            alt344=1;
            }
            break;
        case VOID_MODIFIER:
            {
            alt344=2;
            }
            break;
        case LPAREN:
            {
            alt344=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 344, 0, input);

            throw nvae;

        }

        switch (alt344) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:2216:8: FUNCTION_MODIFIER
                {
                match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_synpred28_Ceylon15009); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:2216:26: VOID_MODIFIER
                {
                match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_synpred28_Ceylon15011); if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:2216:40: anonParametersStart
                {
                pushFollow(FOLLOW_anonParametersStart_in_synpred28_Ceylon15013);
                anonParametersStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred28_Ceylon

    // $ANTLR start synpred29_Ceylon
    public void synpred29_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2237:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:2237:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred29_Ceylon15129);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred29_Ceylon15131); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Ceylon

    // $ANTLR start synpred30_Ceylon
    public void synpred30_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2243:9: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:2243:10: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred30_Ceylon15181);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Ceylon

    // $ANTLR start synpred31_Ceylon
    public void synpred31_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2492:7: ( IF_CLAUSE conditions ~ THEN_CLAUSE )
        // /home/david/git/ceylon-spec/Ceylon.g:2492:8: IF_CLAUSE conditions ~ THEN_CLAUSE
        {
        match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred31_Ceylon16264); if (state.failed) return ;

        pushFollow(FOLLOW_conditions_in_synpred31_Ceylon16266);
        conditions();

        state._fsp--;
        if (state.failed) return ;

        if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred31_Ceylon

    // $ANTLR start synpred32_Ceylon
    public void synpred32_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3024:7: ( unionType ( PRODUCT_OP | SUM_OP ) )
        // /home/david/git/ceylon-spec/Ceylon.g:3024:8: unionType ( PRODUCT_OP | SUM_OP )
        {
        pushFollow(FOLLOW_unionType_in_synpred32_Ceylon20071);
        unionType();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred32_Ceylon

    // $ANTLR start synpred33_Ceylon
    public void synpred33_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3046:7: ( type ( SPECIFY ) )
        // /home/david/git/ceylon-spec/Ceylon.g:3046:8: type ( SPECIFY )
        {
        pushFollow(FOLLOW_type_in_synpred33_Ceylon20202);
        type();

        state._fsp--;
        if (state.failed) return ;

        // /home/david/git/ceylon-spec/Ceylon.g:3046:13: ( SPECIFY )
        // /home/david/git/ceylon-spec/Ceylon.g:3046:14: SPECIFY
        {
        match(input,SPECIFY,FOLLOW_SPECIFY_in_synpred33_Ceylon20205); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred33_Ceylon

    // $ANTLR start synpred34_Ceylon
    public void synpred34_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3315:7: ( namedAnnotationArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3315:8: namedAnnotationArgumentsStart
        {
        pushFollow(FOLLOW_namedAnnotationArgumentsStart_in_synpred34_Ceylon21980);
        namedAnnotationArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Ceylon

    // $ANTLR start synpred35_Ceylon
    public void synpred35_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3401:10: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3401:11: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred35_Ceylon22615);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_Ceylon

    // $ANTLR start synpred36_Ceylon
    public void synpred36_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3401:9: ( ( patternStart )=> patternStart | compilerAnnotations ( declarationStart | specificationStart ) )
        int alt346=2;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            int LA346_1 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 1, input);

                throw nvae;

            }
            }
            break;
        case UIDENTIFIER:
            {
            int LA346_2 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 2, input);

                throw nvae;

            }
            }
            break;
        case SMALLER_OP:
            {
            int LA346_3 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 3, input);

                throw nvae;

            }
            }
            break;
        case LBRACKET:
            {
            int LA346_4 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 4, input);

                throw nvae;

            }
            }
            break;
        case LBRACE:
            {
            int LA346_5 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 5, input);

                throw nvae;

            }
            }
            break;
        case VOID_MODIFIER:
            {
            int LA346_6 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 6, input);

                throw nvae;

            }
            }
            break;
        case FUNCTION_MODIFIER:
            {
            int LA346_7 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 7, input);

                throw nvae;

            }
            }
            break;
        case VALUE_MODIFIER:
            {
            int LA346_8 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 8, input);

                throw nvae;

            }
            }
            break;
        case LIDENTIFIER:
            {
            int LA346_9 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 9, input);

                throw nvae;

            }
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case INTERFACE_DEFINITION:
        case NEW:
        case OBJECT_DEFINITION:
            {
            alt346=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 346, 0, input);

            throw nvae;

        }

        switch (alt346) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3401:10: ( patternStart )=> patternStart
                {
                pushFollow(FOLLOW_patternStart_in_synpred36_Ceylon22620);
                patternStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3401:43: compilerAnnotations ( declarationStart | specificationStart )
                {
                pushFollow(FOLLOW_compilerAnnotations_in_synpred36_Ceylon22624);
                compilerAnnotations();

                state._fsp--;
                if (state.failed) return ;

                // /home/david/git/ceylon-spec/Ceylon.g:3401:63: ( declarationStart | specificationStart )
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==ALIAS||LA345_0==ASSIGN||LA345_0==CLASS_DEFINITION||LA345_0==DYNAMIC||LA345_0==FUNCTION_MODIFIER||LA345_0==INTERFACE_DEFINITION||(LA345_0 >= LBRACE && LA345_0 <= LBRACKET)||LA345_0==NEW||LA345_0==OBJECT_DEFINITION||LA345_0==SMALLER_OP||LA345_0==UIDENTIFIER||LA345_0==VALUE_MODIFIER||LA345_0==VOID_MODIFIER) ) {
                    alt345=1;
                }
                else if ( (LA345_0==LIDENTIFIER) ) {
                    alt345=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 0, input);

                    throw nvae;

                }
                switch (alt345) {
                    case 1 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3401:64: declarationStart
                        {
                        pushFollow(FOLLOW_declarationStart_in_synpred36_Ceylon22627);
                        declarationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3401:81: specificationStart
                        {
                        pushFollow(FOLLOW_specificationStart_in_synpred36_Ceylon22629);
                        specificationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }
    }
    // $ANTLR end synpred36_Ceylon

    // $ANTLR start synpred37_Ceylon
    public void synpred37_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3405:9: ( LIDENTIFIER )
        // /home/david/git/ceylon-spec/Ceylon.g:3405:10: LIDENTIFIER
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred37_Ceylon22673); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_Ceylon

    // $ANTLR start synpred38_Ceylon
    public void synpred38_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3422:10: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3422:11: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred38_Ceylon22807);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_Ceylon

    // $ANTLR start synpred39_Ceylon
    public void synpred39_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3422:9: ( ( patternStart )=> patternStart | compilerAnnotations ( declarationStart | specificationStart ) )
        int alt348=2;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            int LA348_1 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 1, input);

                throw nvae;

            }
            }
            break;
        case UIDENTIFIER:
            {
            int LA348_2 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 2, input);

                throw nvae;

            }
            }
            break;
        case SMALLER_OP:
            {
            int LA348_3 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 3, input);

                throw nvae;

            }
            }
            break;
        case LBRACKET:
            {
            int LA348_4 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 4, input);

                throw nvae;

            }
            }
            break;
        case LBRACE:
            {
            int LA348_5 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 5, input);

                throw nvae;

            }
            }
            break;
        case VOID_MODIFIER:
            {
            int LA348_6 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 6, input);

                throw nvae;

            }
            }
            break;
        case FUNCTION_MODIFIER:
            {
            int LA348_7 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 7, input);

                throw nvae;

            }
            }
            break;
        case VALUE_MODIFIER:
            {
            int LA348_8 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 8, input);

                throw nvae;

            }
            }
            break;
        case LIDENTIFIER:
            {
            int LA348_9 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt348=1;
            }
            else if ( (true) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 9, input);

                throw nvae;

            }
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case INTERFACE_DEFINITION:
        case NEW:
        case OBJECT_DEFINITION:
            {
            alt348=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 348, 0, input);

            throw nvae;

        }

        switch (alt348) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3422:10: ( patternStart )=> patternStart
                {
                pushFollow(FOLLOW_patternStart_in_synpred39_Ceylon22812);
                patternStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3422:43: compilerAnnotations ( declarationStart | specificationStart )
                {
                pushFollow(FOLLOW_compilerAnnotations_in_synpred39_Ceylon22816);
                compilerAnnotations();

                state._fsp--;
                if (state.failed) return ;

                // /home/david/git/ceylon-spec/Ceylon.g:3422:63: ( declarationStart | specificationStart )
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==ALIAS||LA347_0==ASSIGN||LA347_0==CLASS_DEFINITION||LA347_0==DYNAMIC||LA347_0==FUNCTION_MODIFIER||LA347_0==INTERFACE_DEFINITION||(LA347_0 >= LBRACE && LA347_0 <= LBRACKET)||LA347_0==NEW||LA347_0==OBJECT_DEFINITION||LA347_0==SMALLER_OP||LA347_0==UIDENTIFIER||LA347_0==VALUE_MODIFIER||LA347_0==VOID_MODIFIER) ) {
                    alt347=1;
                }
                else if ( (LA347_0==LIDENTIFIER) ) {
                    alt347=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 347, 0, input);

                    throw nvae;

                }
                switch (alt347) {
                    case 1 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3422:64: declarationStart
                        {
                        pushFollow(FOLLOW_declarationStart_in_synpred39_Ceylon22819);
                        declarationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3422:81: specificationStart
                        {
                        pushFollow(FOLLOW_specificationStart_in_synpred39_Ceylon22821);
                        specificationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }
    }
    // $ANTLR end synpred39_Ceylon

    // $ANTLR start synpred40_Ceylon
    public void synpred40_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3426:9: ( LIDENTIFIER )
        // /home/david/git/ceylon-spec/Ceylon.g:3426:10: LIDENTIFIER
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred40_Ceylon22865); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_Ceylon

    // $ANTLR start synpred41_Ceylon
    public void synpred41_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3445:9: ( LIDENTIFIER SPECIFY )
        // /home/david/git/ceylon-spec/Ceylon.g:3445:10: LIDENTIFIER SPECIFY
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred41_Ceylon23010); if (state.failed) return ;

        match(input,SPECIFY,FOLLOW_SPECIFY_in_synpred41_Ceylon23012); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_Ceylon

    // $ANTLR start synpred42_Ceylon
    public void synpred42_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3488:9: ( LBRACE )
        // /home/david/git/ceylon-spec/Ceylon.g:3488:10: LBRACE
        {
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred42_Ceylon23328); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_Ceylon

    // $ANTLR start synpred43_Ceylon
    public void synpred43_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3651:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )
        int alt349=3;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            alt349=1;
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case FUNCTION_MODIFIER:
        case INTERFACE_DEFINITION:
        case LBRACE:
        case LBRACKET:
        case NEW:
        case OBJECT_DEFINITION:
        case SMALLER_OP:
        case UIDENTIFIER:
        case VALUE_MODIFIER:
        case VOID_MODIFIER:
            {
            alt349=2;
            }
            break;
        case LIDENTIFIER:
            {
            alt349=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 349, 0, input);

            throw nvae;

        }

        switch (alt349) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3651:10: COMPILER_ANNOTATION
                {
                match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_synpred43_Ceylon23860); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3651:30: declarationStart
                {
                pushFollow(FOLLOW_declarationStart_in_synpred43_Ceylon23862);
                declarationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:3651:47: specificationStart
                {
                pushFollow(FOLLOW_specificationStart_in_synpred43_Ceylon23864);
                specificationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred43_Ceylon

    // $ANTLR start synpred44_Ceylon
    public void synpred44_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3699:7: ( IS_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:3699:8: IS_OP
        {
        match(input,IS_OP,FOLLOW_IS_OP_in_synpred44_Ceylon24223); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_Ceylon

    // $ANTLR start synpred45_Ceylon
    public void synpred45_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3701:7: ( SATISFIES )
        // /home/david/git/ceylon-spec/Ceylon.g:3701:8: SATISFIES
        {
        match(input,SATISFIES,FOLLOW_SATISFIES_in_synpred45_Ceylon24244); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_Ceylon

    // $ANTLR start synpred46_Ceylon
    public void synpred46_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3762:9: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3762:10: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred46_Ceylon24638);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_Ceylon

    // $ANTLR start synpred47_Ceylon
    public void synpred47_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3876:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )
        int alt350=3;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            alt350=1;
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case FUNCTION_MODIFIER:
        case INTERFACE_DEFINITION:
        case LBRACE:
        case LBRACKET:
        case NEW:
        case OBJECT_DEFINITION:
        case SMALLER_OP:
        case UIDENTIFIER:
        case VALUE_MODIFIER:
        case VOID_MODIFIER:
            {
            alt350=2;
            }
            break;
        case LIDENTIFIER:
            {
            alt350=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 350, 0, input);

            throw nvae;

        }

        switch (alt350) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3876:10: COMPILER_ANNOTATION
                {
                match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_synpred47_Ceylon25484); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3876:30: declarationStart
                {
                pushFollow(FOLLOW_declarationStart_in_synpred47_Ceylon25486);
                declarationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:3876:47: specificationStart
                {
                pushFollow(FOLLOW_specificationStart_in_synpred47_Ceylon25488);
                specificationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred47_Ceylon

    // $ANTLR start synpred48_Ceylon
    public void synpred48_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4109:7: ( abbreviatedType MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4109:8: abbreviatedType MEMBER_OP
        {
        pushFollow(FOLLOW_abbreviatedType_in_synpred48_Ceylon26974);
        abbreviatedType();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred48_Ceylon26976); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred48_Ceylon

    // $ANTLR start synpred49_Ceylon
    public void synpred49_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4124:7: ( groupedType MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4124:8: groupedType MEMBER_OP
        {
        pushFollow(FOLLOW_groupedType_in_synpred49_Ceylon27096);
        groupedType();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred49_Ceylon27098); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_Ceylon

    // $ANTLR start synpred50_Ceylon
    public void synpred50_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4139:7: ( memberName MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4139:8: memberName MEMBER_OP
        {
        pushFollow(FOLLOW_memberName_in_synpred50_Ceylon27217);
        memberName();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred50_Ceylon27219); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_Ceylon

    // Delegated rules

    public boolean synpred46_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred37_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred13_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred25_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred9_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred7_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred49_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred16_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred12_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred20_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred8_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred42_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred28_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred30_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred48_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred32_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred44_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred27_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred22_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred3_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred26_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred43_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred35_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred45_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred24_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred34_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred41_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred15_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred10_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred1_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred38_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred2_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred36_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred6_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred23_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred11_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred14_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred40_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred18_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred31_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred29_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred4_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred21_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred47_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred50_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred17_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred33_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred39_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred5_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred19_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    static final String DFA1_eotS =
        "\10\uffff";
    static final String DFA1_eofS =
        "\1\3\7\uffff";
    static final String DFA1_minS =
        "\1\7\1\105\2\uffff\1\7\1\160\2\7";
    static final String DFA1_maxS =
        "\1\u0083\1\105\2\uffff\1\u0083\1\u0082\2\u0083";
    static final String DFA1_acceptS =
        "\2\uffff\1\1\1\2\4\uffff";
    static final String DFA1_specialS =
        "\10\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\5\uffff\1\3\1\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff"+
            "\1\3\4\uffff\1\3\3\uffff\1\3\5\uffff\1\3\5\uffff\1\3\11\uffff"+
            "\1\2\1\3\4\uffff\1\3\14\uffff\1\3\3\uffff\3\3",
            "\1\4",
            "",
            "",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\16\uffff\1\5\1\2\1\3\4\uffff\1"+
            "\3\14\uffff\1\3\3\uffff\3\3",
            "\1\6\21\uffff\1\7",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\17\uffff\1\2\1\3\4\uffff\1\3\14"+
            "\uffff\1\3\3\uffff\3\3",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\17\uffff\1\2\1\3\4\uffff\1\3\14"+
            "\uffff\1\3\3\uffff\3\3"
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "83:7: (ca= compilerAnnotations SEMICOLON )?";
        }
    }
    static final String DFA145_eotS =
        "\100\uffff";
    static final String DFA145_eofS =
        "\100\uffff";
    static final String DFA145_minS =
        "\1\5\73\uffff\1\0\3\uffff";
    static final String DFA145_maxS =
        "\1\u0080\73\uffff\1\0\3\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\6\66\uffff\1\1\2\uffff\1\2\1\uffff\1\5\1\3\1\4";
    static final String DFA145_specialS =
        "\74\uffff\1\0\3\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\2\1\3\uffff\2\1\1\uffff\3\1\2\uffff"+
            "\3\1\3\uffff\6\1\11\uffff\1\1\2\uffff\1\1\1\uffff\4\1\2\uffff"+
            "\2\1\1\75\1\73\4\uffff\1\74\1\uffff\1\70\1\uffff\1\1\4\uffff"+
            "\2\1\3\uffff\2\1\4\uffff\10\1\1\uffff\1\1\1\70\7\1\1\70\1\1"+
            "\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\6\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 1609:5: ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_60 = input.LA(1);

                         
                        int index145_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index145_60);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA148_eotS =
        "\100\uffff";
    static final String DFA148_eofS =
        "\100\uffff";
    static final String DFA148_minS =
        "\1\5\77\uffff";
    static final String DFA148_maxS =
        "\1\u0080\77\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\2\75\3";
    static final String DFA148_specialS =
        "\1\0\77\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\60\2\uffff\1\46\1\70\11\uffff\1\55\1\42\3\uffff\1\7\1\31"+
            "\1\uffff\1\12\1\67\1\51\2\uffff\1\3\1\22\1\63\3\uffff\1\23\1"+
            "\54\1\26\1\43\1\27\1\40\11\uffff\1\45\2\uffff\1\4\1\uffff\1"+
            "\6\1\65\1\32\1\37\2\uffff\1\34\1\33\1\77\1\75\1\uffff\1\1\2"+
            "\uffff\1\76\1\uffff\1\72\1\uffff\1\62\4\uffff\1\30\1\44\3\uffff"+
            "\1\47\1\71\4\uffff\1\5\1\15\1\16\1\24\1\13\1\14\1\17\1\64\1"+
            "\uffff\1\11\1\73\1\41\1\20\1\25\1\50\1\36\1\35\1\57\1\74\1\53"+
            "\1\uffff\1\52\1\uffff\1\61\1\21\3\uffff\1\56\4\uffff\1\2\1\uffff"+
            "\1\10\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "1668:7: ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_0 = input.LA(1);

                         
                        int index148_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA148_0==LIDENTIFIER) ) {s = 1;}

                        else if ( (LA148_0==UIDENTIFIER) ) {s = 2;}

                        else if ( (LA148_0==DECREMENT_OP) && (synpred18_Ceylon())) {s = 3;}

                        else if ( (LA148_0==INCREMENT_OP) && (synpred18_Ceylon())) {s = 4;}

                        else if ( (LA148_0==POWER_OP) && (synpred18_Ceylon())) {s = 5;}

                        else if ( (LA148_0==INTERSECTION_OP) && (synpred18_Ceylon())) {s = 6;}

                        else if ( (LA148_0==COMMA) && (synpred18_Ceylon())) {s = 7;}

                        else if ( (LA148_0==UNION_OP) && (synpred18_Ceylon())) {s = 8;}

                        else if ( (LA148_0==RPAREN) && (synpred18_Ceylon())) {s = 9;}

                        else if ( (LA148_0==COMPLEMENT_OP) && (synpred18_Ceylon())) {s = 10;}

                        else if ( (LA148_0==RBRACE) && (synpred18_Ceylon())) {s = 11;}

                        else if ( (LA148_0==RBRACKET) && (synpred18_Ceylon())) {s = 12;}

                        else if ( (LA148_0==PRODUCT_OP) && (synpred18_Ceylon())) {s = 13;}

                        else if ( (LA148_0==QUOTIENT_OP) && (synpred18_Ceylon())) {s = 14;}

                        else if ( (LA148_0==REMAINDER_OP) && (synpred18_Ceylon())) {s = 15;}

                        else if ( (LA148_0==SCALE_OP) && (synpred18_Ceylon())) {s = 16;}

                        else if ( (LA148_0==SUM_OP) && (synpred18_Ceylon())) {s = 17;}

                        else if ( (LA148_0==DIFFERENCE_OP) && (synpred18_Ceylon())) {s = 18;}

                        else if ( (LA148_0==ELLIPSIS) && (synpred18_Ceylon())) {s = 19;}

                        else if ( (LA148_0==RANGE_OP) && (synpred18_Ceylon())) {s = 20;}

                        else if ( (LA148_0==SEGMENT_OP) && (synpred18_Ceylon())) {s = 21;}

                        else if ( (LA148_0==ENTRY_OP) && (synpred18_Ceylon())) {s = 22;}

                        else if ( (LA148_0==EXISTS) && (synpred18_Ceylon())) {s = 23;}

                        else if ( (LA148_0==NONEMPTY) && (synpred18_Ceylon())) {s = 24;}

                        else if ( (LA148_0==COMPARE_OP) && (synpred18_Ceylon())) {s = 25;}

                        else if ( (LA148_0==IN_OP) && (synpred18_Ceylon())) {s = 26;}

                        else if ( (LA148_0==LARGE_AS_OP) && (synpred18_Ceylon())) {s = 27;}

                        else if ( (LA148_0==LARGER_OP) && (synpred18_Ceylon())) {s = 28;}

                        else if ( (LA148_0==SMALL_AS_OP) && (synpred18_Ceylon())) {s = 29;}

                        else if ( (LA148_0==SMALLER_OP) && (synpred18_Ceylon())) {s = 30;}

                        else if ( (LA148_0==IS_OP) && (synpred18_Ceylon())) {s = 31;}

                        else if ( (LA148_0==EXTENDS) && (synpred18_Ceylon())) {s = 32;}

                        else if ( (LA148_0==SATISFIES) && (synpred18_Ceylon())) {s = 33;}

                        else if ( (LA148_0==CASE_TYPES) && (synpred18_Ceylon())) {s = 34;}

                        else if ( (LA148_0==EQUAL_OP) && (synpred18_Ceylon())) {s = 35;}

                        else if ( (LA148_0==NOT_EQUAL_OP) && (synpred18_Ceylon())) {s = 36;}

                        else if ( (LA148_0==IDENTICAL_OP) && (synpred18_Ceylon())) {s = 37;}

                        else if ( (LA148_0==AND_OP) && (synpred18_Ceylon())) {s = 38;}

                        else if ( (LA148_0==OR_OP) && (synpred18_Ceylon())) {s = 39;}

                        else if ( (LA148_0==SEMICOLON) && (synpred18_Ceylon())) {s = 40;}

                        else if ( (LA148_0==COMPUTE) && (synpred18_Ceylon())) {s = 41;}

                        else if ( (LA148_0==STRING_MID) && (synpred18_Ceylon())) {s = 42;}

                        else if ( (LA148_0==STRING_END) && (synpred18_Ceylon())) {s = 43;}

                        else if ( (LA148_0==ELSE_CLAUSE) && (synpred18_Ceylon())) {s = 44;}

                        else if ( (LA148_0==CASE_CLAUSE) && (synpred18_Ceylon())) {s = 45;}

                        else if ( (LA148_0==THEN_CLAUSE) && (synpred18_Ceylon())) {s = 46;}

                        else if ( (LA148_0==SPECIFY) && (synpred18_Ceylon())) {s = 47;}

                        else if ( (LA148_0==ADD_SPECIFY) && (synpred18_Ceylon())) {s = 48;}

                        else if ( (LA148_0==SUBTRACT_SPECIFY) && (synpred18_Ceylon())) {s = 49;}

                        else if ( (LA148_0==MULTIPLY_SPECIFY) && (synpred18_Ceylon())) {s = 50;}

                        else if ( (LA148_0==DIVIDE_SPECIFY) && (synpred18_Ceylon())) {s = 51;}

                        else if ( (LA148_0==REMAINDER_SPECIFY) && (synpred18_Ceylon())) {s = 52;}

                        else if ( (LA148_0==INTERSECT_SPECIFY) && (synpred18_Ceylon())) {s = 53;}

                        else if ( (LA148_0==UNION_SPECIFY) && (synpred18_Ceylon())) {s = 54;}

                        else if ( (LA148_0==COMPLEMENT_SPECIFY) && (synpred18_Ceylon())) {s = 55;}

                        else if ( (LA148_0==AND_SPECIFY) && (synpred18_Ceylon())) {s = 56;}

                        else if ( (LA148_0==OR_SPECIFY) && (synpred18_Ceylon())) {s = 57;}

                        else if ( (LA148_0==MEMBER_OP) && (synpred18_Ceylon())) {s = 58;}

                        else if ( (LA148_0==SAFE_MEMBER_OP) && (synpred18_Ceylon())) {s = 59;}

                        else if ( (LA148_0==SPREAD_OP) && (synpred18_Ceylon())) {s = 60;}

                        else if ( (LA148_0==LBRACKET) && (synpred18_Ceylon())) {s = 61;}

                        else if ( (LA148_0==LPAREN) && (synpred18_Ceylon())) {s = 62;}

                        else if ( (LA148_0==LBRACE) && (synpred18_Ceylon())) {s = 63;}

                         
                        input.seek(index148_0);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA157_eotS =
        "\77\uffff";
    static final String DFA157_eofS =
        "\77\uffff";
    static final String DFA157_minS =
        "\1\5\1\0\75\uffff";
    static final String DFA157_maxS =
        "\1\u0080\1\0\75\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\73\uffff\1\1";
    static final String DFA157_specialS =
        "\1\uffff\1\0\75\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\2\2\3\uffff\2\2\1\uffff\3\2\2\uffff"+
            "\3\2\3\uffff\6\2\11\uffff\1\2\2\uffff\1\2\1\uffff\4\2\2\uffff"+
            "\4\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\4\uffff\2\2\3\uffff"+
            "\2\2\4\uffff\10\2\1\uffff\6\2\1\1\4\2\1\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\6\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "1768:7: ( ( typeArgumentsStart )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred21_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA158_eotS =
        "\77\uffff";
    static final String DFA158_eofS =
        "\77\uffff";
    static final String DFA158_minS =
        "\1\5\1\0\75\uffff";
    static final String DFA158_maxS =
        "\1\u0080\1\0\75\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\2\73\uffff\1\1";
    static final String DFA158_specialS =
        "\1\uffff\1\0\75\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\2\2\3\uffff\2\2\1\uffff\3\2\2\uffff"+
            "\3\2\3\uffff\6\2\11\uffff\1\2\2\uffff\1\2\1\uffff\4\2\2\uffff"+
            "\4\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\4\uffff\2\2\3\uffff"+
            "\2\2\4\uffff\10\2\1\uffff\6\2\1\1\4\2\1\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\6\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "1779:7: ( ( typeArgumentsStart )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_1 = input.LA(1);

                         
                        int index158_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred22_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_compilerAnnotations_in_compilationUnit86 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_compilationUnit96 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit134 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_moduleDescriptor_in_compilationUnit177 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_packageDescriptor_in_compilationUnit220 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_toplevelDeclaration_in_compilationUnit248 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RBRACE_in_compilationUnit268 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_EOF_in_compilationUnit295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_toplevelDeclaration318 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_declaration_in_toplevelDeclaration329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_annotatedModuleDescriptorStart354 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000820L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_annotatedModuleDescriptorStart356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MODULE_in_annotatedModuleDescriptorStart358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_annotatedPackageDescriptorStart375 = new BitSet(new long[]{0x0000000000000000L,0x0001000004000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_annotatedPackageDescriptorStart377 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PACKAGE_in_annotatedPackageDescriptorStart379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_moduleDescriptor400 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000820L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_moduleDescriptor402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MODULE_in_moduleDescriptor410 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_moduleDescriptor427 = new BitSet(new long[]{0x0000000000400000L,0x0001000000000000L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_moduleDescriptor453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_moduleDescriptor481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_importModuleList_in_moduleDescriptor507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_importModuleList536 = new BitSet(new long[]{0x0080000004000000L,0x0001000100000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_compilerAnnotations_in_importModuleList562 = new BitSet(new long[]{0x0080000000000000L,0x0001000000000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_importModuleList564 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_importModule_in_importModuleList574 = new BitSet(new long[]{0x0080000004000000L,0x0001000100000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_RBRACE_in_importModuleList601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_packageDescriptor630 = new BitSet(new long[]{0x0000000000000000L,0x0001000004000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_packageDescriptor632 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDescriptor640 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_packageDescriptor657 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_packageDescriptor673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importModule702 = new BitSet(new long[]{0x0000000000400000L,0x2001000000000020L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_importModule731 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_importModule761 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_packagePath_in_importModule789 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_importModule827 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_importModule857 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_importModule884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration913 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000024L});
    public static final BitSet FOLLOW_packagePath_in_importDeclaration941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_importElementList_in_importDeclaration977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_importElementList1019 = new BitSet(new long[]{0x0000004004000000L,0x2000000100000020L});
    public static final BitSet FOLLOW_importElement_in_importElementList1042 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_importElementList1073 = new BitSet(new long[]{0x0000004005000000L,0x2000000100000020L});
    public static final BitSet FOLLOW_importElement_in_importElementList1108 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_importWildcard_in_importElementList1136 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_importWildcard_in_importElementList1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_importElementList1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_importElement1241 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_importName_in_importElement1251 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000004L});
    public static final BitSet FOLLOW_SPECIFY_in_importElement1270 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000024L});
    public static final BitSet FOLLOW_importName_in_importElement1304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_importElementList_in_importElement1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_importWildcard1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_importName1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_importName1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageName_in_packagePath1493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_packagePath1524 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000420L});
    public static final BitSet FOLLOW_packageName_in_packagePath1559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_packageName1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_packageName1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_typeName1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_annotationName1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_memberName1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_memberNameDeclaration1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_memberNameDeclaration1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_typeNameDeclaration1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_typeNameDeclaration1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectDeclaration1864 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_objectDeclaration1880 = new BitSet(new long[]{0x0000080000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectDeclaration1907 = new BitSet(new long[]{0x0000000000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectDeclaration1946 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000004L});
    public static final BitSet FOLLOW_classBody_in_objectDeclaration1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_objectDeclaration2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectExpression2053 = new BitSet(new long[]{0x0000080000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectExpression2080 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectExpression2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_objectExpression2147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodDeclaration2195 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodDeclaration2215 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_voidOrInferredMethodDeclaration2241 = new BitSet(new long[]{0x0000000024000000L,0x10002C0000000104L});
    public static final BitSet FOLLOW_typeParameters_in_voidOrInferredMethodDeclaration2267 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_parameters_in_voidOrInferredMethodDeclaration2312 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_typeConstraints_in_voidOrInferredMethodDeclaration2356 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_voidOrInferredMethodDeclaration2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_voidOrInferredMethodDeclaration2446 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidOrInferredMethodDeclaration2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_setterDeclaration2538 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_setterDeclaration2555 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_setterDeclaration2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_setterDeclaration2624 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_setterDeclaration2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuplePatternStart2702 = new BitSet(new long[]{0x0202000804801080L,0x200008002011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_compilerAnnotations_in_tuplePatternStart2720 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000020L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_tuplePatternStart2722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_tuplePatternStart2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_tuplePatternStart2761 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_tuplePatternStart2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_tuplePatternStart2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_variableOrTuplePattern2824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variablePattern_in_variableOrTuplePattern2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_pattern2899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_pattern2937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_pattern2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variablePattern_in_pattern2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_tupleOrEntryPattern3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_tupleOrEntryPattern3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_tupleOrEntryPattern3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_variablePattern3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuplePattern3165 = new BitSet(new long[]{0x0002000004000000L,0x200008022000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variadicPattern_in_tuplePattern3193 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_tuplePattern3227 = new BitSet(new long[]{0x0002000004000000L,0x200008002000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variadicPattern_in_tuplePattern3267 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tuplePattern3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicVariable_in_variadicPattern3379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_variadicPattern3408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_variadicVariable3455 = new BitSet(new long[]{0x0000000000000000L,0x200008002000000CL});
    public static final BitSet FOLLOW_unionType_in_variadicVariable3481 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_variadicVariable3518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_variadicVariable3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableOrTuplePattern_in_keyItemPattern3604 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_keyItemPattern3620 = new BitSet(new long[]{0x0002000004000002L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variableOrTuplePattern_in_keyItemPattern3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructure3688 = new BitSet(new long[]{0x0002000004000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_tupleOrEntryPattern_in_destructure3704 = new BitSet(new long[]{0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_specifier_in_destructure3730 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_destructure3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_inferredAttributeDeclaration3805 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_inferredAttributeDeclaration3822 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_specifier_in_inferredAttributeDeclaration3861 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_inferredAttributeDeclaration3896 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_inferredAttributeDeclaration3939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_inferredAttributeDeclaration3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_typedMethodOrAttributeDeclaration4028 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_typedMethodOrAttributeDeclaration4048 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_typedMethodOrAttributeDeclaration4074 = new BitSet(new long[]{0x0000000020000000L,0x00002C0000000104L});
    public static final BitSet FOLLOW_typeParameters_in_typedMethodOrAttributeDeclaration4123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_typedMethodOrAttributeDeclaration4168 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_typeConstraints_in_typedMethodOrAttributeDeclaration4223 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_typedMethodOrAttributeDeclaration4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_typedMethodOrAttributeDeclaration4333 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_typedMethodOrAttributeDeclaration4440 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_typedMethodOrAttributeDeclaration4478 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_typedMethodOrAttributeDeclaration4565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_interfaceDeclaration4624 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_interfaceDeclaration4653 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_interfaceDeclaration4679 = new BitSet(new long[]{0x0000000024100000L,0x10002C8000000004L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceDeclaration4706 = new BitSet(new long[]{0x0000000024100000L,0x1000248000000004L});
    public static final BitSet FOLLOW_caseTypes_in_interfaceDeclaration4744 = new BitSet(new long[]{0x0000000024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_interfaceDeclaration4798 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000004L});
    public static final BitSet FOLLOW_typeConstraints_in_interfaceDeclaration4835 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceDeclaration4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSpecifier_in_interfaceDeclaration4923 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceDeclaration4967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_classDeclaration5015 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_classDeclaration5032 = new BitSet(new long[]{0x0000080024100000L,0x10002C8000000104L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration5058 = new BitSet(new long[]{0x0000080024100000L,0x1000248000000104L});
    public static final BitSet FOLLOW_parameters_in_classDeclaration5095 = new BitSet(new long[]{0x0000080024100000L,0x1000248000000004L});
    public static final BitSet FOLLOW_caseTypes_in_classDeclaration5132 = new BitSet(new long[]{0x0000080024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_extendedType_in_classDeclaration5178 = new BitSet(new long[]{0x0000000024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_classDeclaration5216 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000004L});
    public static final BitSet FOLLOW_typeConstraints_in_classDeclaration5253 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration5300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classSpecifier_in_classDeclaration5341 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_classDeclaration5384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_constructor5423 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_constructor5439 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_parameters_in_constructor5465 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_delegatedConstructor_in_constructor5506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_constructor5533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_delegatedConstructor5562 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_delegatedConstructor5590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_aliasDeclaration5630 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_aliasDeclaration5646 = new BitSet(new long[]{0x0000000024000000L,0x10002C0000000000L});
    public static final BitSet FOLLOW_typeParameters_in_aliasDeclaration5673 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000000L});
    public static final BitSet FOLLOW_typeConstraints_in_aliasDeclaration5711 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_typeSpecifier_in_aliasDeclaration5748 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_aliasDeclaration5783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_assertion5812 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_ASSERT_in_assertion5820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_assertion5836 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_assertion5860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_block5889 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_block5916 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_block5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_interfaceBody5976 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_interfaceBody6003 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_interfaceBody6030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_classBody6059 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_classBody6085 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_classBody6112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_extendedType6141 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_extendedType6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_classSpecifier6221 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_classSpecifier6250 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_classSpecifier6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000500L});
    public static final BitSet FOLLOW_MEMBER_OP_in_classInstantiation6382 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_SUPER_in_classInstantiation6429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_classInstantiation6431 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_positionalArguments_in_classInstantiation6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiedTypes6531 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_satisfiedTypes6561 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_satisfiedTypes6613 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_COMMA_in_satisfiedTypes6648 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_UNION_OP_in_satisfiedTypes6650 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_satisfiedTypes6696 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_CASE_TYPES_in_caseTypes6748 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_caseType_in_caseTypes6766 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_caseTypes6808 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_COMMA_in_caseTypes6844 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_caseTypes6846 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_caseType_in_caseTypes6892 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_abbreviatedType_in_caseType6946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_caseType6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACTED_TYPE_in_abstractedType6998 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_abstractedType7014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters7043 = new BitSet(new long[]{0x0002000804000000L,0x200108200000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_parameterDeclarationOrRef_in_parameters7071 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_parameters7106 = new BitSet(new long[]{0x0002000805000000L,0x200108200000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_parameterDeclarationOrRef_in_parameters7146 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters7226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_parameter7255 = new BitSet(new long[]{0x0002000800000000L,0x200108000000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotations_in_parameter7263 = new BitSet(new long[]{0x0002000800000000L,0x200008000000000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_parameterDeclaration_in_parameter7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_parameterDeclaration7324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_parameterDeclaration7344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_parameterDeclaration7364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_parameterDeclaration7384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_parameterDeclaration7404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_parameterDeclaration7430 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000100L});
    public static final BitSet FOLLOW_specifier_in_parameterDeclaration7468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_in_parameterDeclaration7521 = new BitSet(new long[]{0x0000000020000002L,0x0000200000000100L});
    public static final BitSet FOLLOW_functionSpecifier_in_parameterDeclaration7566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_parameterRef7618 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_parameterRef7644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameterRef_in_parameterDeclarationOrRef7692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_in_parameterDeclarationOrRef7717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeParameters7746 = new BitSet(new long[]{0x1000000004000000L,0x2000000001000020L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters7764 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters7792 = new BitSet(new long[]{0x1000000005000000L,0x2000000001000021L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters7826 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeParameters7877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_typeParameter7914 = new BitSet(new long[]{0x1000000000000000L,0x2000000001000020L});
    public static final BitSet FOLLOW_variance_in_typeParameter7933 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_typeParameter7963 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_typeDefault_in_typeParameter7989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_variance8037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_variance8053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_typeConstraint8086 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_TYPE_CONSTRAINT_in_typeConstraint8094 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_typeConstraint8110 = new BitSet(new long[]{0x0000000000100012L,0x0000008000000100L});
    public static final BitSet FOLLOW_parameters_in_typeConstraint8144 = new BitSet(new long[]{0x0000000000100012L,0x0000008000000000L});
    public static final BitSet FOLLOW_caseTypes_in_typeConstraint8181 = new BitSet(new long[]{0x0000000000000012L,0x0000008000000000L});
    public static final BitSet FOLLOW_satisfiedTypes_in_typeConstraint8225 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_abstractedType_in_typeConstraint8263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeConstraint_in_typeConstraints8321 = new BitSet(new long[]{0x0000000004000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_annotationListStart8358 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000020L,0x000000000000000AL});
    public static final BitSet FOLLOW_annotation_in_annotationListStart8360 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000020L,0x000000000000000AL});
    public static final BitSet FOLLOW_set_in_annotationListStart8370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructureStart8397 = new BitSet(new long[]{0x0002000004000000L,0x2000000000000028L,0x000000000000000AL});
    public static final BitSet FOLLOW_compilerAnnotations_in_destructureStart8399 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000028L,0x000000000000000AL});
    public static final BitSet FOLLOW_LBRACKET_in_destructureStart8409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_destructureStart8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_destructureStart8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructureStart8415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_destructureStart8417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_destructureStart8419 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_destructureStart8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_declarationOrStatement8454 = new BitSet(new long[]{0x0343800B40C19880L,0x2E7508100619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_destructure_in_declarationOrStatement8478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarationOrStatement8506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assertion_in_declarationOrStatement8532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarationOrStatement8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_declarationOrStatement8582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_declaration8638 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_classDeclaration_in_declaration8661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_declaration8687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aliasDeclaration_in_declaration8703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectDeclaration_in_declaration8719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setterDeclaration_in_declaration8735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidOrInferredMethodDeclaration_in_declaration8751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredAttributeDeclaration_in_declaration8767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedMethodOrAttributeDeclaration_in_declaration8783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_declaration8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotatedDeclarationStart8842 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_annotation_in_annotatedDeclarationStart8845 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_unambiguousType_in_annotatedDeclarationStart8862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_annotatedDeclarationStart8866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotatedAssertionStart8884 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotation_in_annotatedAssertionStart8887 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000020L});
    public static final BitSet FOLLOW_ASSERT_in_annotatedAssertionStart8890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_declarationStart8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_declarationStart8918 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_declarationStart8933 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_declarationStart8948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_declarationStart8956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_declarationStart8964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_declarationStart8972 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_declarationStart8987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_declarationStart8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_declarationStart9004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_declarationStart9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_declarationStart9014 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart9016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9044 = new BitSet(new long[]{0x0000010000000000L,0x0000000000200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9064 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9068 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9070 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9083 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9107 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_unambiguousType9118 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9127 = new BitSet(new long[]{0x0000010000000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9130 = new BitSet(new long[]{0x0000010000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9136 = new BitSet(new long[]{0x0000010000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9156 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9158 = new BitSet(new long[]{0x0000000000000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9170 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9174 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9176 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_unambiguousType9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_unambiguousType9209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9217 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9226 = new BitSet(new long[]{0x0000010001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9229 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9233 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9235 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9256 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9258 = new BitSet(new long[]{0x0000000001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9269 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9273 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9275 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_COMMA_in_unambiguousType9305 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9316 = new BitSet(new long[]{0x0000010001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9319 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9323 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9325 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9350 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9352 = new BitSet(new long[]{0x0000000001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9366 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9370 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9372 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_unambiguousType9403 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directiveStatement_in_statement9437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_controlStatement_in_statement9453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionOrSpecificationStatement_in_statement9469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionOrSpecificationStatement9507 = new BitSet(new long[]{0x0000000021000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_expressionOrSpecificationStatement9543 = new BitSet(new long[]{0x0000000001000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_expressionOrSpecificationStatement9588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_expressionOrSpecificationStatement9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_directiveStatement9667 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_directiveStatement9684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnDirective_in_directive9713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwDirective_in_directive9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakDirective_in_directive9745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueDirective_in_directive9761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnDirective9790 = new BitSet(new long[]{0x0142800B00408002L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_returnDirective9817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throwDirective9857 = new BitSet(new long[]{0x0100800B00408002L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_throwDirective9884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakDirective9924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continueDirective9953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_typeSpecifier9992 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_SPECIFY_in_typeSpecifier10021 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_typeSpecifier10058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_typeDefault10098 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_typeDefault10115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_specifier10144 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_specifier10160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_lazySpecifier10189 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_lazySpecifier10205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_functionSpecifier10244 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_SPECIFY_in_functionSpecifier10272 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_functionSpecifier10298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonstringLiteral_in_base10364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_base10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaLiteral_in_base10396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_in_base10412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_base10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamicObject_in_base10444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectExpression_in_base10460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selfReference_in_base10476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_base10492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseReference_in_base10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberReference_in_baseReference10550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeReference_in_baseReference10566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_in_primary10601 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_qualifiedReference_in_primary10634 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_indexOrIndexRange_in_primary10652 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_parameters_in_primary10678 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_positionalArguments_in_primary10698 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_namedArguments_in_primary10719 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_LPAREN_in_specifierParametersStart10753 = new BitSet(new long[]{0x0202000804801080L,0x200108200011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RPAREN_in_specifierParametersStart10769 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_SPECIFY_in_specifierParametersStart10772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_specifierParametersStart10774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifierParametersStart_in_specifierParametersStart10776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_specifierParametersStart10792 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_specifierParametersStart10794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberSelectionOperator_in_qualifiedReference10821 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberReference_in_qualifiedReference10849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeReference_in_qualifiedReference10869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEMBER_OP_in_memberSelectionOperator10936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAFE_MEMBER_OP_in_memberSelectionOperator10952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPREAD_OP_in_memberSelectionOperator10968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_enumeration10997 = new BitSet(new long[]{0x0143800B04408000L,0x227500012618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_enumeration11025 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_enumeration11052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuple11081 = new BitSet(new long[]{0x0143800B04408000L,0x227500022618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_tuple11108 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tuple11135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_dynamicObject11177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACKET_in_dynamicObject11179 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgument_in_dynamicObject11230 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_anonymousArgument_in_dynamicObject11264 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_sequencedArgument_in_dynamicObject11302 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_dynamicObject11329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionExpression_in_valueCaseList11372 = new BitSet(new long[]{0x0000000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_valueCaseList11414 = new BitSet(new long[]{0x0100800B01408002L,0xA23500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_UNION_OP_in_valueCaseList11441 = new BitSet(new long[]{0x0100800B01408002L,0xA23500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_intersectionExpression_in_valueCaseList11487 = new BitSet(new long[]{0x0000000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_memberName_in_memberReference11552 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_memberReference11592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_typeReference11632 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_typeReference11673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArgumentsStart11712 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArgumentsStart11726 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000001L});
    public static final BitSet FOLLOW_set_in_typeArgumentsStart11734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArgumentsStart11754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeArgumentsStart11769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_indexOrIndexRange11817 = new BitSet(new long[]{0x0100804B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_ELLIPSIS_in_indexOrIndexRange11845 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11867 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11897 = new BitSet(new long[]{0x0000004000000000L,0x0000020280000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_indexOrIndexRange11931 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RANGE_OP_in_indexOrIndexRange11966 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11993 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_indexOrIndexRange12018 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange12044 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_indexOrIndexRange12084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_index12113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_namedArguments12143 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgument_in_namedArguments12195 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_anonymousArgument_in_namedArguments12229 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_sequencedArgument_in_namedArguments12267 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_namedArguments12294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_sequencedArgument12323 = new BitSet(new long[]{0x0143800B00408000L,0x227500002618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehension_in_sequencedArgument12379 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_positionalArgument_in_sequencedArgument12416 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_spreadArgument_in_sequencedArgument12452 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_sequencedArgument12498 = new BitSet(new long[]{0x0143800B01408002L,0x227500002618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehension_in_sequencedArgument12564 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_positionalArgument_in_sequencedArgument12607 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_spreadArgument_in_sequencedArgument12650 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_namedArgument12735 = new BitSet(new long[]{0x0002000800000000L,0x200008000010002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_namedSpecifiedArgument_in_namedArgument12752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentDeclaration_in_namedArgument12774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_namedSpecifiedArgument12815 = new BitSet(new long[]{0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_specifier_in_namedSpecifiedArgument12841 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_namedSpecifiedArgument12877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_anonymousArgument12915 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_anonymousArgument12941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectArgument12970 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_objectArgument12987 = new BitSet(new long[]{0x0000080000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectArgument13014 = new BitSet(new long[]{0x0000000000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectArgument13053 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000004L});
    public static final BitSet FOLLOW_classBody_in_objectArgument13091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_objectArgument13121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodArgument13178 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodArgument13206 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_voidOrInferredMethodArgument13233 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_parameters_in_voidOrInferredMethodArgument13260 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_block_in_voidOrInferredMethodArgument13297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_voidOrInferredMethodArgument13338 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidOrInferredMethodArgument13381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_inferredGetterArgument13438 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_inferredGetterArgument13455 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_inferredGetterArgument13482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_inferredGetterArgument13523 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_inferredGetterArgument13559 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_inferredGetterArgument13603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typedMethodOrGetterArgument13671 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_typedMethodOrGetterArgument13700 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_typedMethodOrGetterArgument13726 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_parameters_in_typedMethodOrGetterArgument13774 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_block_in_typedMethodOrGetterArgument13821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_typedMethodOrGetterArgument13870 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument13923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_typedMethodOrGetterArgument13989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_typedMethodOrGetterArgument14038 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_typedMethodOrGetterArgument14080 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument14134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_untypedMethodOrGetterArgument14206 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_untypedMethodOrGetterArgument14255 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_functionSpecifier_in_untypedMethodOrGetterArgument14300 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_untypedMethodOrGetterArgument14378 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_untypedMethodOrGetterArgument14424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectArgument_in_namedArgumentDeclaration14461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedMethodOrGetterArgument_in_namedArgumentDeclaration14477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidOrInferredMethodArgument_in_namedArgumentDeclaration14493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredGetterArgument_in_namedArgumentDeclaration14509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_untypedMethodOrGetterArgument_in_namedArgumentDeclaration14525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_namedArgumentStart14553 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_specificationStart_in_namedArgumentStart14563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_namedArgumentStart14567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_namedAnnotationArgumentsStart14585 = new BitSet(new long[]{0x0302800B04C09080L,0x223508010619812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgumentStart_in_namedAnnotationArgumentsStart14592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterableArgumentStart_in_namedAnnotationArgumentsStart14596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACE_in_namedAnnotationArgumentsStart14600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_iterableArgumentStart14618 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_iterableArgumentStart14620 = new BitSet(new long[]{0x0000000001000000L,0x0000040100000000L});
    public static final BitSet FOLLOW_set_in_iterableArgumentStart14622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_specificationStart14646 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_parameters_in_specificationStart14648 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_set_in_specificationStart14651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parExpression14677 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_parExpression14694 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parExpression14710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_positionalArguments14747 = new BitSet(new long[]{0x0143800B04408000L,0x227500202618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_positionalArguments14776 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_positionalArguments14803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_positionalArgument14840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_spreadArgument14869 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_unionExpression_in_spreadArgument14885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_anonParametersStart14910 = new BitSet(new long[]{0x0202000804801080L,0x200108200011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RPAREN_in_anonParametersStart14926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_anonParametersStart14934 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_anonParametersStart14937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_anonParametersStart14941 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_anonParametersStart14943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_anonParametersStart14957 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_anonParametersStart14959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_nonemptyParametersStart14983 = new BitSet(new long[]{0x0202000804801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_compilerAnnotations_in_nonemptyParametersStart14985 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_nonemptyParametersStart14987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousFunction_in_functionOrExpression15024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_functionOrExpression15040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchExpression_in_functionOrExpression15056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_functionOrExpression15074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letClause_in_let15103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_patternStart15136 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_patternStart15138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_patternStart15149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_letVariable15186 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_variable_in_letVariable15214 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_letVariable15250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause15290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_letClause15306 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_letVariable_in_letClause15334 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_letClause15366 = new BitSet(new long[]{0x0002000004000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_letVariable_in_letClause15392 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_letClause15432 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_letClause15448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpression_in_conditionalExpression15477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_in_conditionalExpression15493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchHeader_in_switchExpression15522 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_caseExpressions_in_switchExpression15538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_caseExpressions15585 = new BitSet(new long[]{0x0000008000080002L});
    public static final BitSet FOLLOW_defaultCaseExpression_in_caseExpressions15622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_CLAUSE_in_caseExpression15666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_caseItemList_in_caseExpression15683 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_caseExpression15699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_defaultCaseExpression15728 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_defaultCaseExpression15745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifExpression15774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_thenElseClauses_in_ifExpression15790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalBranch15819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_disjunctionExpression_in_conditionalBranch15835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditions_in_thenElseClauses15864 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_THEN_CLAUSE_in_thenElseClauses15880 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_thenElseClauses15898 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_thenElseClauses15914 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_thenElseClauses15932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_anonymousFunction15980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_anonymousFunction16008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_anonymousFunction16037 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_parameters_in_anonymousFunction16066 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_COMPUTE_in_anonymousFunction16104 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_anonymousFunction16125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymousFunction16153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forComprehensionClause_in_comprehension16201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifComprehensionClause_in_comprehension16217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forComprehensionClause_in_comprehensionClause16246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifComprehensionClause_in_comprehensionClause16281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionComprehensionClause_in_comprehensionClause16298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_expressionComprehensionClause16328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_forComprehensionClause16365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_forIterator_in_forComprehensionClause16381 = new BitSet(new long[]{0x0143800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehensionClause_in_forComprehensionClause16397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifComprehensionClause16430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_ifComprehensionClause16446 = new BitSet(new long[]{0x0143800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehensionClause_in_ifComprehensionClause16462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_thenElseExpression_in_assignmentExpression16506 = new BitSet(new long[]{0x0800000410000222L,0x0008200800801000L,0x0000000000000001L});
    public static final BitSet FOLLOW_assignmentOperator_in_assignmentExpression16532 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_assignmentExpression16555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_assignmentOperator16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SPECIFY_in_assignmentOperator16605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTRACT_SPECIFY_in_assignmentOperator16615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLY_SPECIFY_in_assignmentOperator16625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_SPECIFY_in_assignmentOperator16635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMAINDER_SPECIFY_in_assignmentOperator16645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERSECT_SPECIFY_in_assignmentOperator16655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_SPECIFY_in_assignmentOperator16665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_SPECIFY_in_assignmentOperator16675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_SPECIFY_in_assignmentOperator16685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_SPECIFY_in_assignmentOperator16695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_disjunctionExpression_in_thenElseExpression16720 = new BitSet(new long[]{0x0000008000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_thenElseOperator_in_thenElseExpression16746 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_disjunctionExpression_in_thenElseExpression16768 = new BitSet(new long[]{0x0000008000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_thenElseOperator16808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_CLAUSE_in_thenElseOperator16825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunctionExpression_in_disjunctionExpression16856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_disjunctionOperator_in_disjunctionExpression16882 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conjunctionExpression_in_disjunctionExpression16905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_OR_OP_in_disjunctionOperator16945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_conjunctionExpression16977 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_conjunctionOperator_in_conjunctionExpression17003 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_conjunctionExpression17026 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_AND_OP_in_conjunctionOperator17066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notOperator_in_logicalNegationExpression17096 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_logicalNegationExpression17115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_logicalNegationExpression17131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_notOperator17160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparisonExpression_in_equalityExpression17192 = new BitSet(new long[]{0x0020020000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_equalityOperator_in_equalityExpression17218 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_comparisonExpression_in_equalityExpression17241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_OP_in_equalityOperator17281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_OP_in_equalityOperator17298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTICAL_OP_in_equalityOperator17314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17345 = new BitSet(new long[]{0x3000080002100002L,0x0000188000000003L});
    public static final BitSet FOLLOW_comparisonOperator_in_comparisonExpression17373 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_largerOperator_in_comparisonExpression17418 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_smallerOperator_in_comparisonExpression17463 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17486 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_smallerOperator_in_comparisonExpression17521 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeOperator_in_comparisonExpression17570 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_comparisonExpression17592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALL_AS_OP_in_smallerOperator17638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_smallerOperator17654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGE_AS_OP_in_largerOperator17683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGER_OP_in_largerOperator17699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPARE_OP_in_comparisonOperator17728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_comparisonOperator17745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_typeOperator17774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_typeOperator17790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_typeOperator17806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_TYPES_in_typeOperator17822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entryRangeExpression_in_existenceEmptinessExpression17853 = new BitSet(new long[]{0x0000040000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_existsNonemptyOperator_in_existenceEmptinessExpression17881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsNonemptyOperator17927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NONEMPTY_in_existsNonemptyOperator17944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_entryRangeExpression17975 = new BitSet(new long[]{0x0000010000000002L,0x0000020080000000L});
    public static final BitSet FOLLOW_rangeIntervalEntryOperator_in_entryRangeExpression18001 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_additiveExpression_in_entryRangeExpression18024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANGE_OP_in_rangeIntervalEntryOperator18064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_rangeIntervalEntryOperator18081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTRY_OP_in_rangeIntervalEntryOperator18097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scaleExpression_in_additiveExpression18128 = new BitSet(new long[]{0x0000000200000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_additiveOperator_in_additiveExpression18154 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_scaleExpression_in_additiveExpression18177 = new BitSet(new long[]{0x0000000200000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_SUM_OP_in_additiveOperator18217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIFFERENCE_OP_in_additiveOperator18234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_scaleExpression18263 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_scaleOperator_in_scaleExpression18289 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_scaleExpression_in_scaleExpression18311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionExpression_in_multiplicativeExpression18353 = new BitSet(new long[]{0x0000000000000002L,0x0000000460000000L});
    public static final BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression18379 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_unionExpression_in_multiplicativeExpression18402 = new BitSet(new long[]{0x0000000000000002L,0x0000000460000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_multiplicativeOperator18442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTIENT_OP_in_multiplicativeOperator18459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMAINDER_OP_in_multiplicativeOperator18475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionExpression_in_unionExpression18506 = new BitSet(new long[]{0x0000000008000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_unionOperator_in_unionExpression18532 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_intersectionExpression_in_unionExpression18555 = new BitSet(new long[]{0x0000000008000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_unionOperator18599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_OP_in_unionOperator18615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_negationComplementExpression_in_intersectionExpression18646 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_intersectionOperator_in_intersectionExpression18672 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_negationComplementExpression_in_intersectionExpression18695 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_intersectionOperator18739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryMinusOrComplementOperator_in_negationComplementExpression18768 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_negationComplementExpression_in_negationComplementExpression18787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exponentiationExpression_in_negationComplementExpression18803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIFFERENCE_OP_in_unaryMinusOrComplementOperator18832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_OP_in_unaryMinusOrComplementOperator18849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incrementDecrementExpression_in_exponentiationExpression18878 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_exponentiationOperator_in_exponentiationExpression18904 = new BitSet(new long[]{0x0100800900408000L,0x222500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_exponentiationExpression_in_exponentiationExpression18926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POWER_OP_in_exponentiationOperator18966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCALE_OP_in_scaleOperator18996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixOperator_in_incrementDecrementExpression19026 = new BitSet(new long[]{0x0100800900408000L,0x222500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_incrementDecrementExpression_in_incrementDecrementExpression19044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixIncrementDecrementExpression_in_incrementDecrementExpression19060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECREMENT_OP_in_prefixOperator19089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCREMENT_OP_in_prefixOperator19106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_postfixIncrementDecrementExpression19136 = new BitSet(new long[]{0x0100000100000002L});
    public static final BitSet FOLLOW_postfixOperator_in_postfixIncrementDecrementExpression19164 = new BitSet(new long[]{0x0100000100000002L});
    public static final BitSet FOLLOW_DECREMENT_OP_in_postfixOperator19204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCREMENT_OP_in_postfixOperator19221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_selfReference19251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_selfReference19267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_selfReference19284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_selfReference19300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATURAL_LITERAL_in_nonstringLiteral19333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_LITERAL_in_nonstringLiteral19350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_nonstringLiteral19367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringLiteral19397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VERBATIM_STRING_in_stringLiteral19414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_stringExpression19454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_START_in_stringExpression19470 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_stringExpression19488 = new BitSet(new long[]{0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_STRING_MID_in_stringExpression19514 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_stringExpression19536 = new BitSet(new long[]{0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_STRING_END_in_stringExpression19563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArguments19601 = new BitSet(new long[]{0x1000000000000000L,0x200008000100000DL});
    public static final BitSet FOLLOW_variance_in_typeArguments19641 = new BitSet(new long[]{0x0000000001000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArguments19681 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_in_typeArguments19732 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments19778 = new BitSet(new long[]{0x1000000001000000L,0x200008000100000DL});
    public static final BitSet FOLLOW_variance_in_typeArguments19818 = new BitSet(new long[]{0x0000000001000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArguments19864 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_in_typeArguments19955 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeArguments20041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_variadicType20089 = new BitSet(new long[]{0x0000000000000002L,0x0010000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_variadicType20115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_OP_in_variadicType20143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variadicType20172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_defaultedType20218 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_defaultedType20244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_defaultedType20271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_spreadType20309 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_unionType_in_spreadType20337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tupleType20377 = new BitSet(new long[]{0x0000000000000000L,0x200008022000000CL});
    public static final BitSet FOLLOW_spreadType_in_tupleType20405 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_defaultedType_in_tupleType20435 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_tupleType20469 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_defaultedType_in_tupleType20495 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tupleType20535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_groupedType20564 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_groupedType20582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_groupedType20598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_iterableType20626 = new BitSet(new long[]{0x0000000000000000L,0x200008010000000CL});
    public static final BitSet FOLLOW_variadicType_in_iterableType20651 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_iterableType20675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type20713 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_ENTRY_OP_in_type20739 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_unionType_in_type20773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionType_in_unionType20838 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_unionType20879 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_intersectionType_in_unionType20919 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_abbreviatedType_in_intersectionType21009 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_intersectionType21050 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_intersectionType21090 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_qualifiedType_in_qualifiedOrTupleType21169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tupleType_in_qualifiedOrTupleType21186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterableType_in_qualifiedOrTupleType21203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedOrTupleType_in_abbreviatedType21244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_OPTIONAL_in_abbreviatedType21270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_LBRACKET_in_abbreviatedType21291 = new BitSet(new long[]{0x0000000000000000L,0x0000000200008000L});
    public static final BitSet FOLLOW_NATURAL_LITERAL_in_abbreviatedType21323 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_abbreviatedType21357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_LPAREN_in_abbreviatedType21378 = new BitSet(new long[]{0x0000000000000000L,0x200008202000000CL});
    public static final BitSet FOLLOW_spreadType_in_abbreviatedType21416 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_defaultedType_in_abbreviatedType21458 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_abbreviatedType21502 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_defaultedType_in_abbreviatedType21536 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_abbreviatedType21590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_baseType21639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupedType_in_baseType21661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseType_in_qualifiedType21690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_qualifiedType21716 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_qualifiedType21729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeName_in_typeNameWithArguments21769 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_typeNameWithArguments21796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotations21860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotation_in_annotations21899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotationName_in_annotation21940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000104L});
    public static final BitSet FOLLOW_positionalArguments_in_annotation21963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArguments_in_annotation21992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotation_in_compilerAnnotations22096 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_compilerAnnotation22136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotationName_in_compilerAnnotation22153 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_compilerAnnotation22183 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_stringLiteral_in_compilerAnnotation22195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_conditions22237 = new BitSet(new long[]{0x2142840B00408000L,0x227500A0061A813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_condition_in_conditions22263 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_conditions22283 = new BitSet(new long[]{0x2142840B01408000L,0x227500A0061A813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_condition_in_conditions22318 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_conditions22380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsCondition_in_condition22409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonemptyCondition_in_condition22425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_isCondition_in_condition22441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_satisfiesCondition_in_condition22458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanCondition_in_condition22474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_booleanCondition22515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_existsCondition22558 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EXISTS_in_existsCondition22585 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_letVariable_in_existsCondition22643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_existsCondition22677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_existsCondition22697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_nonemptyCondition22750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_NONEMPTY_in_nonemptyCondition22777 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_letVariable_in_nonemptyCondition22835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_nonemptyCondition22869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_nonemptyCondition22890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_isCondition22939 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IS_OP_in_isCondition22966 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_isCondition22983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_isConditionVariable_in_isCondition23027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_isCondition23055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_isConditionVariable23104 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_isConditionVariable23120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiesCondition23149 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_satisfiesCondition23166 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeName_in_satisfiesCondition23183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifElse_in_controlStatement23212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseElse_in_controlStatement23229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileLoop_in_controlStatement23246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forElse_in_controlStatement23263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryCatchFinally_in_controlStatement23280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_in_controlStatement23296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_controlBlock23334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_dynamic23400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_dynamic23417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifBlock_in_ifElse23454 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_elseBlock_in_ifElse23482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifBlock23522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_ifBlock23539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_ifBlock23555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_elseBlock23584 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_elseIf_in_elseBlock23611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_elseBlock23641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifElse_in_elseIf23680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchHeader_in_switchCaseElse23717 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_cases_in_switchCaseElse23734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_CLAUSE_in_switchHeader23763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_switchHeader23780 = new BitSet(new long[]{0x0102800B04408000L,0x223508200618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_switched_in_switchHeader23799 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_switchHeader23827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifiedVariable_in_switched23878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_switched23898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseBlock_in_cases23955 = new BitSet(new long[]{0x0000008000080002L});
    public static final BitSet FOLLOW_defaultCaseBlock_in_cases23992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_CLAUSE_in_caseBlock24036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_caseItemList_in_caseBlock24053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_caseBlock24069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_defaultCaseBlock24098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_defaultCaseBlock24115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_caseItemList24144 = new BitSet(new long[]{0x2100800B00408000L,0x223500A00610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_caseItem_in_caseItemList24165 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_caseItemList24192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_isCaseCondition_in_caseItem24226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_satisfiesCaseCondition_in_caseItem24247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchCaseCondition_in_caseItem24263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valueCaseList_in_matchCaseCondition24292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_isCaseCondition24321 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_isCaseCondition24338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiesCaseCondition24367 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_satisfiesCaseCondition24384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forBlock_in_forElse24421 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_failBlock_in_forElse24448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_forBlock24488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_forIterator_in_forBlock24505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_forBlock24522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_failBlock24551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_failBlock24568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_forIterator24606 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_forIterator24643 = new BitSet(new long[]{0x1000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variable_in_forIterator24671 = new BitSet(new long[]{0x1000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_containment_in_forIterator24707 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forIterator24739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_containment24770 = new BitSet(new long[]{0x0100800B00408002L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_containment24788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileBlock_in_whileLoop24831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_CLAUSE_in_whileBlock24860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_whileBlock24876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_whileBlock24892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryBlock_in_tryCatchFinally24929 = new BitSet(new long[]{0x0000400000200002L});
    public static final BitSet FOLLOW_catchBlock_in_tryCatchFinally24956 = new BitSet(new long[]{0x0000400000200002L});
    public static final BitSet FOLLOW_finallyBlock_in_tryCatchFinally24995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_CLAUSE_in_tryBlock25035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_resources_in_tryBlock25062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_tryBlock25082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_tryBlock25110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_CLAUSE_in_catchBlock25149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_catchVariable_in_catchBlock25166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_catchBlock25182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_catchVariable25211 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_in_catchVariable25236 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchVariable25262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_CLAUSE_in_finallyBlock25293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_finallyBlock25310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_resources25339 = new BitSet(new long[]{0x0102800B04408000L,0x223508200618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_resource_in_resources25362 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_resources25390 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_resource_in_resources25413 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_resources25445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifiedVariable_in_resource25502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource25522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_specifiedVariable25563 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_specifiedVariable25590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_variable25630 = new BitSet(new long[]{0x0002000000000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_var_in_variable25638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_var25687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_var25708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_var25728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_var25748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_var25776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_var25806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_memberName_in_var25850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_var25878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_memberName_in_impliedVariable25924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKTICK_in_metaLiteral25966 = new BitSet(new long[]{0x0202000000800080L,0x300008000411082CL,0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_metaLiteral25988 = new BitSet(new long[]{0x0000000000008000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_metaLiteral26016 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_PACKAGE_in_metaLiteral26049 = new BitSet(new long[]{0x0000000000008000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_metaLiteral26077 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_metaLiteral26110 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26138 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26168 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_NEW_in_metaLiteral26201 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26229 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_metaLiteral26262 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26290 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ALIAS_in_metaLiteral26323 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26351 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_TYPE_CONSTRAINT_in_metaLiteral26384 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26412 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_metaLiteral26455 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_metaLiteral26483 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral26603 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26642 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral26687 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_metaLiteral26733 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral26843 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26882 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral26927 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_abbreviatedType_in_metaLiteral26997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27033 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27061 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_groupedType_in_metaLiteral27119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27155 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27183 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27276 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27304 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_type_in_metaLiteral27340 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27365 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27393 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BACKTICK_in_metaLiteral27428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedModuleDescriptorStart_in_synpred1_Ceylon164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedPackageDescriptorStart_in_synpred2_Ceylon207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred3_Ceylon2744 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred3_Ceylon2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_synpred4_Ceylon2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred5_Ceylon2884 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred5_Ceylon2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_synpred6_Ceylon2922 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred6_Ceylon2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_synpred7_Ceylon2960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred8_Ceylon3032 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred8_Ceylon3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_synpred9_Ceylon3070 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred9_Ceylon3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred10_Ceylon3361 = new BitSet(new long[]{0x0000000000000000L,0x200008002000000CL});
    public static final BitSet FOLLOW_unionType_in_synpred10_Ceylon3363 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_synpred10_Ceylon3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructureStart_in_synpred11_Ceylon8473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_synpred12_Ceylon8499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedAssertionStart_in_synpred13_Ceylon8527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationListStart_in_synpred14_Ceylon8553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_synpred15_Ceylon8678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_synpred15_Ceylon8680 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_synpred15_Ceylon8682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unambiguousType_in_synpred16_Ceylon8857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifierParametersStart_in_synpred17_Ceylon10674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred19_Ceylon11216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousArgument_in_synpred20_Ceylon11251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArgumentsStart_in_synpred21_Ceylon11579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArgumentsStart_in_synpred22_Ceylon11660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred23_Ceylon12181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousArgument_in_synpred24_Ceylon12216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_synpred25_Ceylon12354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred25_Ceylon12358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred25_Ceylon12360 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred25_Ceylon12362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_synpred26_Ceylon12537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred26_Ceylon12541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred26_Ceylon12543 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred26_Ceylon12545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred27_Ceylon14589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_synpred28_Ceylon15009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_synpred28_Ceylon15011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonParametersStart_in_synpred28_Ceylon15013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred29_Ceylon15129 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred29_Ceylon15131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred30_Ceylon15181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred31_Ceylon16264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred31_Ceylon16266 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred31_Ceylon16268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_synpred32_Ceylon20071 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_synpred32_Ceylon20073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred33_Ceylon20202 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_synpred33_Ceylon20205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedAnnotationArgumentsStart_in_synpred34_Ceylon21980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred35_Ceylon22615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred36_Ceylon22620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred36_Ceylon22624 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred36_Ceylon22627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred36_Ceylon22629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred37_Ceylon22673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred38_Ceylon22807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred39_Ceylon22812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred39_Ceylon22816 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred39_Ceylon22819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred39_Ceylon22821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred40_Ceylon22865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred41_Ceylon23010 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_synpred41_Ceylon23012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_synpred42_Ceylon23328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_synpred43_Ceylon23860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_synpred43_Ceylon23862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred43_Ceylon23864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_synpred44_Ceylon24223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_synpred45_Ceylon24244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred46_Ceylon24638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_synpred47_Ceylon25484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_synpred47_Ceylon25486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred47_Ceylon25488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbreviatedType_in_synpred48_Ceylon26974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred48_Ceylon26976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupedType_in_synpred49_Ceylon27096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred49_Ceylon27098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_synpred50_Ceylon27217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred50_Ceylon27219 = new BitSet(new long[]{0x0000000000000002L});

}