// $ANTLR 3.4 /home/david/git/ceylon-spec/Ceylon.g 2015-01-12 16:58:16
 package com.redhat.ceylon.compiler.typechecker.parser;
                  import com.redhat.ceylon.compiler.typechecker.tree.MissingToken;
                  import com.redhat.ceylon.compiler.typechecker.tree.Node;
                  import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.MethodDeclaration;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.MethodDefinition;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.FunctionArgument;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.AttributeDeclaration;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.Variable;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.ClassDefinition;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.IsCase;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.ExtendedTypeExpression;
import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.*;
                
                  import static com.redhat.ceylon.compiler.typechecker.tree.CustomTree.Package; 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class CeylonParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACTED_TYPE", "ADD_SPECIFY", "AIDENTIFIER", "ALIAS", "AND_OP", "AND_SPECIFY", "ASSEMBLY", "ASSERT", "ASSIGN", "ASTRING_LITERAL", "AVERBATIM_STRING", "BACKTICK", "BREAK", "BinaryDigit", "BinaryDigits", "CASE_CLAUSE", "CASE_TYPES", "CATCH_CLAUSE", "CHAR_LITERAL", "CLASS_DEFINITION", "COMMA", "COMPARE_OP", "COMPILER_ANNOTATION", "COMPLEMENT_OP", "COMPLEMENT_SPECIFY", "COMPUTE", "CONTINUE", "CharPart", "DECREMENT_OP", "DIFFERENCE_OP", "DIVIDE_SPECIFY", "DYNAMIC", "Digit", "Digits", "ELLIPSIS", "ELSE_CLAUSE", "ENTRY_OP", "EQUAL_OP", "EXISTS", "EXTENDS", "EscapeSequence", "Exponent", "FINALLY_CLAUSE", "FLOAT_LITERAL", "FOR_CLAUSE", "FUNCTION_MODIFIER", "FractionalMagnitude", "HexDigit", "HexDigits", "IDENTICAL_OP", "IF_CLAUSE", "IMPORT", "INCREMENT_OP", "INTERFACE_DEFINITION", "INTERSECTION_OP", "INTERSECT_SPECIFY", "IN_OP", "IS_OP", "IdentifierPart", "IdentifierStart", "LARGER_OP", "LARGE_AS_OP", "LBRACE", "LBRACKET", "LET", "LIDENTIFIER", "LINE_COMMENT", "LIdentifierPrefix", "LPAREN", "Letter", "MEMBER_OP", "MODULE", "MULTIPLY_SPECIFY", "MULTI_COMMENT", "Magnitude", "NATURAL_LITERAL", "NEW", "NONEMPTY", "NOT_EQUAL_OP", "NOT_OP", "OBJECT_DEFINITION", "OPTIONAL", "OR_OP", "OR_SPECIFY", "OUT", "OUTER", "PACKAGE", "PIDENTIFIER", "POWER_OP", "PRODUCT_OP", "QUOTIENT_OP", "RANGE_OP", "RBRACE", "RBRACKET", "REMAINDER_OP", "REMAINDER_SPECIFY", "RETURN", "RPAREN", "SAFE_MEMBER_OP", "SATISFIES", "SCALE_OP", "SEGMENT_OP", "SEMICOLON", "SMALLER_OP", "SMALL_AS_OP", "SPECIFY", "SPREAD_OP", "STRING_END", "STRING_LITERAL", "STRING_MID", "STRING_START", "SUBTRACT_SPECIFY", "SUM_OP", "SUPER", "SWITCH_CLAUSE", "StringPart", "THEN_CLAUSE", "THIS", "THROW", "TRY_CLAUSE", "TYPE_CONSTRAINT", "UIDENTIFIER", "UIdentifierPrefix", "UNION_OP", "UNION_SPECIFY", "VALUE_MODIFIER", "VERBATIM_STRING", "VOID_MODIFIER", "WHILE_CLAUSE", "WS"
    };

    public static final int EOF=-1;
    public static final int ABSTRACTED_TYPE=4;
    public static final int ADD_SPECIFY=5;
    public static final int AIDENTIFIER=6;
    public static final int ALIAS=7;
    public static final int AND_OP=8;
    public static final int AND_SPECIFY=9;
    public static final int ASSEMBLY=10;
    public static final int ASSERT=11;
    public static final int ASSIGN=12;
    public static final int ASTRING_LITERAL=13;
    public static final int AVERBATIM_STRING=14;
    public static final int BACKTICK=15;
    public static final int BREAK=16;
    public static final int BinaryDigit=17;
    public static final int BinaryDigits=18;
    public static final int CASE_CLAUSE=19;
    public static final int CASE_TYPES=20;
    public static final int CATCH_CLAUSE=21;
    public static final int CHAR_LITERAL=22;
    public static final int CLASS_DEFINITION=23;
    public static final int COMMA=24;
    public static final int COMPARE_OP=25;
    public static final int COMPILER_ANNOTATION=26;
    public static final int COMPLEMENT_OP=27;
    public static final int COMPLEMENT_SPECIFY=28;
    public static final int COMPUTE=29;
    public static final int CONTINUE=30;
    public static final int CharPart=31;
    public static final int DECREMENT_OP=32;
    public static final int DIFFERENCE_OP=33;
    public static final int DIVIDE_SPECIFY=34;
    public static final int DYNAMIC=35;
    public static final int Digit=36;
    public static final int Digits=37;
    public static final int ELLIPSIS=38;
    public static final int ELSE_CLAUSE=39;
    public static final int ENTRY_OP=40;
    public static final int EQUAL_OP=41;
    public static final int EXISTS=42;
    public static final int EXTENDS=43;
    public static final int EscapeSequence=44;
    public static final int Exponent=45;
    public static final int FINALLY_CLAUSE=46;
    public static final int FLOAT_LITERAL=47;
    public static final int FOR_CLAUSE=48;
    public static final int FUNCTION_MODIFIER=49;
    public static final int FractionalMagnitude=50;
    public static final int HexDigit=51;
    public static final int HexDigits=52;
    public static final int IDENTICAL_OP=53;
    public static final int IF_CLAUSE=54;
    public static final int IMPORT=55;
    public static final int INCREMENT_OP=56;
    public static final int INTERFACE_DEFINITION=57;
    public static final int INTERSECTION_OP=58;
    public static final int INTERSECT_SPECIFY=59;
    public static final int IN_OP=60;
    public static final int IS_OP=61;
    public static final int IdentifierPart=62;
    public static final int IdentifierStart=63;
    public static final int LARGER_OP=64;
    public static final int LARGE_AS_OP=65;
    public static final int LBRACE=66;
    public static final int LBRACKET=67;
    public static final int LET=68;
    public static final int LIDENTIFIER=69;
    public static final int LINE_COMMENT=70;
    public static final int LIdentifierPrefix=71;
    public static final int LPAREN=72;
    public static final int Letter=73;
    public static final int MEMBER_OP=74;
    public static final int MODULE=75;
    public static final int MULTIPLY_SPECIFY=76;
    public static final int MULTI_COMMENT=77;
    public static final int Magnitude=78;
    public static final int NATURAL_LITERAL=79;
    public static final int NEW=80;
    public static final int NONEMPTY=81;
    public static final int NOT_EQUAL_OP=82;
    public static final int NOT_OP=83;
    public static final int OBJECT_DEFINITION=84;
    public static final int OPTIONAL=85;
    public static final int OR_OP=86;
    public static final int OR_SPECIFY=87;
    public static final int OUT=88;
    public static final int OUTER=89;
    public static final int PACKAGE=90;
    public static final int PIDENTIFIER=91;
    public static final int POWER_OP=92;
    public static final int PRODUCT_OP=93;
    public static final int QUOTIENT_OP=94;
    public static final int RANGE_OP=95;
    public static final int RBRACE=96;
    public static final int RBRACKET=97;
    public static final int REMAINDER_OP=98;
    public static final int REMAINDER_SPECIFY=99;
    public static final int RETURN=100;
    public static final int RPAREN=101;
    public static final int SAFE_MEMBER_OP=102;
    public static final int SATISFIES=103;
    public static final int SCALE_OP=104;
    public static final int SEGMENT_OP=105;
    public static final int SEMICOLON=106;
    public static final int SMALLER_OP=107;
    public static final int SMALL_AS_OP=108;
    public static final int SPECIFY=109;
    public static final int SPREAD_OP=110;
    public static final int STRING_END=111;
    public static final int STRING_LITERAL=112;
    public static final int STRING_MID=113;
    public static final int STRING_START=114;
    public static final int SUBTRACT_SPECIFY=115;
    public static final int SUM_OP=116;
    public static final int SUPER=117;
    public static final int SWITCH_CLAUSE=118;
    public static final int StringPart=119;
    public static final int THEN_CLAUSE=120;
    public static final int THIS=121;
    public static final int THROW=122;
    public static final int TRY_CLAUSE=123;
    public static final int TYPE_CONSTRAINT=124;
    public static final int UIDENTIFIER=125;
    public static final int UIdentifierPrefix=126;
    public static final int UNION_OP=127;
    public static final int UNION_SPECIFY=128;
    public static final int VALUE_MODIFIER=129;
    public static final int VERBATIM_STRING=130;
    public static final int VOID_MODIFIER=131;
    public static final int WHILE_CLAUSE=132;
    public static final int WS=133;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public CeylonParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public CeylonParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[297+1];
         

    }

    public String[] getTokenNames() { return CeylonParser.tokenNames; }
    public String getGrammarFileName() { return "/home/david/git/ceylon-spec/Ceylon.g"; }


        private java.util.List<ParseError> errors 
                = new java.util.ArrayList<ParseError>();
        @Override public void displayRecognitionError(String[] tn,
                RecognitionException re) {
            errors.add(new ParseError(this, re, tn));
        }
        public void displayRecognitionError(String[] tn, RecognitionException re, int code) {
            errors.add(new ParseError(this, re, tn, code));
        }
        public java.util.List<ParseError> getErrors() {
            return errors;
        }
        int expecting=-1;
      @Override
      protected Object getMissingSymbol(IntStream input,
                        RecognitionException e,
                        int expectedTokenType,
                        BitSet follow)
      {
        String tokenText;
        if ( expectedTokenType==Token.EOF ) tokenText = "<missing EOF>";
        else tokenText = "<missing "+getTokenNames()[expectedTokenType]+">";
        MissingToken t = new MissingToken(expectedTokenType, tokenText);
        Token current = ((TokenStream)input).LT(1);
        if ( current.getType() == Token.EOF ) {
          current = ((TokenStream)input).LT(-1);
        }
        t.setLine(current.getLine());
        t.setCharPositionInLine(current.getCharPositionInLine());
        t.setChannel(DEFAULT_TOKEN_CHANNEL);
        t.setInputStream(current.getInputStream());
        return t;
      }



    // $ANTLR start "compilationUnit"
    // /home/david/git/ceylon-spec/Ceylon.g:62:1: compilationUnit returns [CompilationUnit compilationUnit] : (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF ;
    public CompilationUnit compilationUnit() throws RecognitionException {
        CompilationUnit compilationUnit = null;


        List<CompilerAnnotation> ca =null;

        Import importDeclaration1 =null;

        ModuleDescriptor moduleDescriptor2 =null;

        PackageDescriptor packageDescriptor3 =null;

        Declaration toplevelDeclaration4 =null;


         compilationUnit = new CompilationUnit(null);
                    ImportList importList = new ImportList(null); 
                    compilationUnit.setImportList(importList); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:66:5: ( (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF )
            // /home/david/git/ceylon-spec/Ceylon.g:66:7: (ca= compilerAnnotations SEMICOLON )? ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )* EOF
            {
            // /home/david/git/ceylon-spec/Ceylon.g:66:7: (ca= compilerAnnotations SEMICOLON )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:67:9: ca= compilerAnnotations SEMICOLON
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_compilationUnit86);
                    ca=compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return compilationUnit;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_compilationUnit96); if (state.failed) return compilationUnit;

                    if ( state.backtracking==0 ) { compilationUnit.getCompilerAnnotations().addAll(ca); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:71:7: ( importDeclaration | ( annotatedModuleDescriptorStart )=> moduleDescriptor | ( annotatedPackageDescriptorStart )=> packageDescriptor | toplevelDeclaration | RBRACE )*
            loop2:
            do {
                int alt2=6;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==IMPORT) ) {
                    alt2=1;
                }
                else if ( (LA2_0==COMPILER_ANNOTATION) ) {
                    int LA2_3 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==STRING_LITERAL) ) {
                    int LA2_4 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==VERBATIM_STRING) ) {
                    int LA2_5 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==LIDENTIFIER) ) {
                    int LA2_6 = input.LA(2);

                    if ( (synpred1_Ceylon()) ) {
                        alt2=2;
                    }
                    else if ( (synpred2_Ceylon()) ) {
                        alt2=3;
                    }
                    else if ( (true) ) {
                        alt2=4;
                    }


                }
                else if ( (LA2_0==MODULE) && (synpred1_Ceylon())) {
                    alt2=2;
                }
                else if ( (LA2_0==PACKAGE) && (synpred2_Ceylon())) {
                    alt2=3;
                }
                else if ( (LA2_0==ALIAS||LA2_0==ASSIGN||LA2_0==CLASS_DEFINITION||LA2_0==DYNAMIC||LA2_0==FUNCTION_MODIFIER||LA2_0==INTERFACE_DEFINITION||(LA2_0 >= LBRACE && LA2_0 <= LBRACKET)||LA2_0==NEW||LA2_0==OBJECT_DEFINITION||LA2_0==SMALLER_OP||LA2_0==UIDENTIFIER||LA2_0==VALUE_MODIFIER||LA2_0==VOID_MODIFIER) ) {
                    alt2=4;
                }
                else if ( (LA2_0==RBRACE) ) {
                    alt2=5;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:72:9: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit134);
            	    importDeclaration1=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { importList.addImport(importDeclaration1); 
            	              compilationUnit.connect(importList); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:76:9: ( annotatedModuleDescriptorStart )=> moduleDescriptor
            	    {
            	    pushFollow(FOLLOW_moduleDescriptor_in_compilationUnit177);
            	    moduleDescriptor2=moduleDescriptor();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { compilationUnit.addModuleDescriptor(moduleDescriptor2); }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:80:9: ( annotatedPackageDescriptorStart )=> packageDescriptor
            	    {
            	    pushFollow(FOLLOW_packageDescriptor_in_compilationUnit220);
            	    packageDescriptor3=packageDescriptor();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { compilationUnit.addPackageDescriptor(packageDescriptor3); }

            	    }
            	    break;
            	case 4 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:84:9: toplevelDeclaration
            	    {
            	    pushFollow(FOLLOW_toplevelDeclaration_in_compilationUnit248);
            	    toplevelDeclaration4=toplevelDeclaration();

            	    state._fsp--;
            	    if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { if (toplevelDeclaration4!=null)
            	                  compilationUnit.addDeclaration(toplevelDeclaration4); }

            	    }
            	    break;
            	case 5 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:87:9: RBRACE
            	    {
            	    match(input,RBRACE,FOLLOW_RBRACE_in_compilationUnit268); if (state.failed) return compilationUnit;

            	    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
            	                  new MismatchedTokenException(EOF, input)); }

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            match(input,EOF,FOLLOW_EOF_in_compilationUnit295); if (state.failed) return compilationUnit;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return compilationUnit;
    }
    // $ANTLR end "compilationUnit"



    // $ANTLR start "toplevelDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:94:1: toplevelDeclaration returns [Declaration declaration] : ca= compilerAnnotations d= declaration ;
    public Declaration toplevelDeclaration() throws RecognitionException {
        Declaration declaration = null;


        List<CompilerAnnotation> ca =null;

        Declaration d =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:95:5: (ca= compilerAnnotations d= declaration )
            // /home/david/git/ceylon-spec/Ceylon.g:95:7: ca= compilerAnnotations d= declaration
            {
            pushFollow(FOLLOW_compilerAnnotations_in_toplevelDeclaration318);
            ca=compilerAnnotations();

            state._fsp--;
            if (state.failed) return declaration;

            pushFollow(FOLLOW_declaration_in_toplevelDeclaration329);
            d=declaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = d;
                    if (declaration!=null)
                        declaration.getCompilerAnnotations().addAll(ca); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "toplevelDeclaration"



    // $ANTLR start "annotatedModuleDescriptorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:102:1: annotatedModuleDescriptorStart : compilerAnnotations annotations MODULE ;
    public void annotatedModuleDescriptorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:103:5: ( compilerAnnotations annotations MODULE )
            // /home/david/git/ceylon-spec/Ceylon.g:103:7: compilerAnnotations annotations MODULE
            {
            pushFollow(FOLLOW_compilerAnnotations_in_annotatedModuleDescriptorStart354);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotations_in_annotatedModuleDescriptorStart356);
            annotations();

            state._fsp--;
            if (state.failed) return ;

            match(input,MODULE,FOLLOW_MODULE_in_annotatedModuleDescriptorStart358); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedModuleDescriptorStart"



    // $ANTLR start "annotatedPackageDescriptorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:106:1: annotatedPackageDescriptorStart : compilerAnnotations annotations PACKAGE ;
    public void annotatedPackageDescriptorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:107:5: ( compilerAnnotations annotations PACKAGE )
            // /home/david/git/ceylon-spec/Ceylon.g:107:7: compilerAnnotations annotations PACKAGE
            {
            pushFollow(FOLLOW_compilerAnnotations_in_annotatedPackageDescriptorStart375);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotations_in_annotatedPackageDescriptorStart377);
            annotations();

            state._fsp--;
            if (state.failed) return ;

            match(input,PACKAGE,FOLLOW_PACKAGE_in_annotatedPackageDescriptorStart379); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedPackageDescriptorStart"



    // $ANTLR start "moduleDescriptor"
    // /home/david/git/ceylon-spec/Ceylon.g:110:1: moduleDescriptor returns [ModuleDescriptor moduleDescriptor] : compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList ;
    public ModuleDescriptor moduleDescriptor() throws RecognitionException {
        ModuleDescriptor moduleDescriptor = null;


        Token MODULE5=null;
        Token CHAR_LITERAL9=null;
        Token STRING_LITERAL10=null;
        AnnotationList annotations6 =null;

        List<CompilerAnnotation> compilerAnnotations7 =null;

        ImportPath packagePath8 =null;

        ImportModuleList importModuleList11 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:111:5: ( compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList )
            // /home/david/git/ceylon-spec/Ceylon.g:111:7: compilerAnnotations annotations MODULE packagePath ( CHAR_LITERAL | STRING_LITERAL ) importModuleList
            {
            pushFollow(FOLLOW_compilerAnnotations_in_moduleDescriptor400);
            compilerAnnotations7=compilerAnnotations();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            pushFollow(FOLLOW_annotations_in_moduleDescriptor402);
            annotations6=annotations();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            MODULE5=(Token)match(input,MODULE,FOLLOW_MODULE_in_moduleDescriptor410); if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor = new ModuleDescriptor(MODULE5); 
                    moduleDescriptor.setAnnotationList(annotations6);
                    moduleDescriptor.getCompilerAnnotations().addAll(compilerAnnotations7); }

            pushFollow(FOLLOW_packagePath_in_moduleDescriptor427);
            packagePath8=packagePath();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor.setImportPath(packagePath8); }

            // /home/david/git/ceylon-spec/Ceylon.g:118:7: ( CHAR_LITERAL | STRING_LITERAL )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==CHAR_LITERAL) ) {
                alt3=1;
            }
            else if ( (LA3_0==STRING_LITERAL) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return moduleDescriptor;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:119:9: CHAR_LITERAL
                    {
                    CHAR_LITERAL9=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_moduleDescriptor453); if (state.failed) return moduleDescriptor;

                    if ( state.backtracking==0 ) { moduleDescriptor.setVersion(new QuotedLiteral(CHAR_LITERAL9)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:122:9: STRING_LITERAL
                    {
                    STRING_LITERAL10=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_moduleDescriptor481); if (state.failed) return moduleDescriptor;

                    if ( state.backtracking==0 ) { moduleDescriptor.setVersion(new QuotedLiteral(STRING_LITERAL10)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importModuleList_in_moduleDescriptor507);
            importModuleList11=importModuleList();

            state._fsp--;
            if (state.failed) return moduleDescriptor;

            if ( state.backtracking==0 ) { moduleDescriptor.setImportModuleList(importModuleList11); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return moduleDescriptor;
    }
    // $ANTLR end "moduleDescriptor"



    // $ANTLR start "importModuleList"
    // /home/david/git/ceylon-spec/Ceylon.g:129:1: importModuleList returns [ImportModuleList importModuleList] : LBRACE ( compilerAnnotations annotations importModule )* RBRACE ;
    public ImportModuleList importModuleList() throws RecognitionException {
        ImportModuleList importModuleList = null;


        Token LBRACE12=null;
        Token RBRACE16=null;
        ImportModule importModule13 =null;

        AnnotationList annotations14 =null;

        List<CompilerAnnotation> compilerAnnotations15 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:130:5: ( LBRACE ( compilerAnnotations annotations importModule )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:130:7: LBRACE ( compilerAnnotations annotations importModule )* RBRACE
            {
            LBRACE12=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_importModuleList536); if (state.failed) return importModuleList;

            if ( state.backtracking==0 ) { importModuleList = new ImportModuleList(LBRACE12); }

            // /home/david/git/ceylon-spec/Ceylon.g:132:7: ( compilerAnnotations annotations importModule )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==ALIAS||(LA4_0 >= ASSERT && LA4_0 <= ASSIGN)||(LA4_0 >= BACKTICK && LA4_0 <= BREAK)||(LA4_0 >= CHAR_LITERAL && LA4_0 <= CLASS_DEFINITION)||LA4_0==COMPILER_ANNOTATION||LA4_0==CONTINUE||(LA4_0 >= DECREMENT_OP && LA4_0 <= DIFFERENCE_OP)||LA4_0==DYNAMIC||(LA4_0 >= FLOAT_LITERAL && LA4_0 <= FUNCTION_MODIFIER)||(LA4_0 >= IF_CLAUSE && LA4_0 <= INTERFACE_DEFINITION)||LA4_0==IN_OP||(LA4_0 >= LBRACE && LA4_0 <= LIDENTIFIER)||LA4_0==LPAREN||LA4_0==MODULE||(LA4_0 >= NATURAL_LITERAL && LA4_0 <= NEW)||(LA4_0 >= NOT_OP && LA4_0 <= OBJECT_DEFINITION)||(LA4_0 >= OUT && LA4_0 <= PACKAGE)||LA4_0==PRODUCT_OP||LA4_0==RETURN||(LA4_0 >= SEMICOLON && LA4_0 <= SMALLER_OP)||LA4_0==STRING_LITERAL||LA4_0==STRING_START||(LA4_0 >= SUM_OP && LA4_0 <= SWITCH_CLAUSE)||(LA4_0 >= THIS && LA4_0 <= UIDENTIFIER)||(LA4_0 >= VALUE_MODIFIER && LA4_0 <= WHILE_CLAUSE)) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:133:9: compilerAnnotations annotations importModule
            	    {
            	    pushFollow(FOLLOW_compilerAnnotations_in_importModuleList562);
            	    compilerAnnotations15=compilerAnnotations();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    pushFollow(FOLLOW_annotations_in_importModuleList564);
            	    annotations14=annotations();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    pushFollow(FOLLOW_importModule_in_importModuleList574);
            	    importModule13=importModule();

            	    state._fsp--;
            	    if (state.failed) return importModuleList;

            	    if ( state.backtracking==0 ) { if (importModule13!=null)
            	                  importModuleList.addImportModule(importModule13); 
            	              if (importModule13!=null)
            	                  importModule13.setAnnotationList(annotations14);
            	              if (importModule13!=null)
            	                  importModule13.getCompilerAnnotations().addAll(compilerAnnotations15); }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            RBRACE16=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_importModuleList601); if (state.failed) return importModuleList;

            if ( state.backtracking==0 ) { importModuleList.setEndToken(RBRACE16); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importModuleList;
    }
    // $ANTLR end "importModuleList"



    // $ANTLR start "packageDescriptor"
    // /home/david/git/ceylon-spec/Ceylon.g:146:1: packageDescriptor returns [PackageDescriptor packageDescriptor] : compilerAnnotations annotations PACKAGE packagePath SEMICOLON ;
    public PackageDescriptor packageDescriptor() throws RecognitionException {
        PackageDescriptor packageDescriptor = null;


        Token PACKAGE17=null;
        Token SEMICOLON21=null;
        AnnotationList annotations18 =null;

        List<CompilerAnnotation> compilerAnnotations19 =null;

        ImportPath packagePath20 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:147:5: ( compilerAnnotations annotations PACKAGE packagePath SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:147:7: compilerAnnotations annotations PACKAGE packagePath SEMICOLON
            {
            pushFollow(FOLLOW_compilerAnnotations_in_packageDescriptor630);
            compilerAnnotations19=compilerAnnotations();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            pushFollow(FOLLOW_annotations_in_packageDescriptor632);
            annotations18=annotations();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            PACKAGE17=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDescriptor640); if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor = new PackageDescriptor(PACKAGE17); 
                    packageDescriptor.setAnnotationList(annotations18); 
                    packageDescriptor.getCompilerAnnotations().addAll(compilerAnnotations19); }

            pushFollow(FOLLOW_packagePath_in_packageDescriptor657);
            packagePath20=packagePath();

            state._fsp--;
            if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor.setImportPath(packagePath20); 
                    expecting=SEMICOLON; }

            SEMICOLON21=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_packageDescriptor673); if (state.failed) return packageDescriptor;

            if ( state.backtracking==0 ) { packageDescriptor.setEndToken(SEMICOLON21); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return packageDescriptor;
    }
    // $ANTLR end "packageDescriptor"



    // $ANTLR start "importModule"
    // /home/david/git/ceylon-spec/Ceylon.g:160:1: importModule returns [ImportModule importModule] : IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON ;
    public ImportModule importModule() throws RecognitionException {
        ImportModule importModule = null;


        Token c1=null;
        Token s1=null;
        Token c2=null;
        Token s2=null;
        Token IMPORT22=null;
        Token SEMICOLON24=null;
        ImportPath packagePath23 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:161:5: ( IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:161:7: IMPORT (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath ) (c2= CHAR_LITERAL |s2= STRING_LITERAL )? SEMICOLON
            {
            IMPORT22=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importModule702); if (state.failed) return importModule;

            if ( state.backtracking==0 ) { importModule = new ImportModule(IMPORT22); }

            // /home/david/git/ceylon-spec/Ceylon.g:163:7: (c1= CHAR_LITERAL |s1= STRING_LITERAL | packagePath )
            int alt5=3;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
                {
                alt5=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt5=2;
                }
                break;
            case LIDENTIFIER:
            case UIDENTIFIER:
                {
                alt5=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return importModule;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:164:9: c1= CHAR_LITERAL
                    {
                    c1=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_importModule731); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setQuotedLiteral(new QuotedLiteral(c1)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:167:9: s1= STRING_LITERAL
                    {
                    s1=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_importModule761); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setQuotedLiteral(new QuotedLiteral(s1)); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:170:9: packagePath
                    {
                    pushFollow(FOLLOW_packagePath_in_importModule789);
                    packagePath23=packagePath();

                    state._fsp--;
                    if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setImportPath(packagePath23); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:173:7: (c2= CHAR_LITERAL |s2= STRING_LITERAL )?
            int alt6=3;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==CHAR_LITERAL) ) {
                alt6=1;
            }
            else if ( (LA6_0==STRING_LITERAL) ) {
                alt6=2;
            }
            switch (alt6) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:174:9: c2= CHAR_LITERAL
                    {
                    c2=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_importModule827); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setVersion(new QuotedLiteral(c2)); 
                              expecting=SEMICOLON; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:178:9: s2= STRING_LITERAL
                    {
                    s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_importModule857); if (state.failed) return importModule;

                    if ( state.backtracking==0 ) { importModule.setVersion(new QuotedLiteral(s2)); 
                              expecting=SEMICOLON; }

                    }
                    break;

            }


            SEMICOLON24=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_importModule884); if (state.failed) return importModule;

            if ( state.backtracking==0 ) { importModule.setEndToken(SEMICOLON24); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importModule;
    }
    // $ANTLR end "importModule"



    // $ANTLR start "importDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:187:1: importDeclaration returns [Import importDeclaration] : IMPORT ( packagePath |) importElementList ;
    public Import importDeclaration() throws RecognitionException {
        Import importDeclaration = null;


        Token IMPORT25=null;
        ImportPath packagePath26 =null;

        ImportMemberOrTypeList importElementList27 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:188:5: ( IMPORT ( packagePath |) importElementList )
            // /home/david/git/ceylon-spec/Ceylon.g:188:7: IMPORT ( packagePath |) importElementList
            {
            IMPORT25=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration913); if (state.failed) return importDeclaration;

            if ( state.backtracking==0 ) { importDeclaration = new Import(IMPORT25); }

            // /home/david/git/ceylon-spec/Ceylon.g:190:7: ( packagePath |)
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LIDENTIFIER||LA7_0==UIDENTIFIER) ) {
                alt7=1;
            }
            else if ( (LA7_0==LBRACE) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return importDeclaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:191:9: packagePath
                    {
                    pushFollow(FOLLOW_packagePath_in_importDeclaration941);
                    packagePath26=packagePath();

                    state._fsp--;
                    if (state.failed) return importDeclaration;

                    if ( state.backtracking==0 ) { importDeclaration.setImportPath(packagePath26); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:193:9: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importElementList_in_importDeclaration977);
            importElementList27=importElementList();

            state._fsp--;
            if (state.failed) return importDeclaration;

            if ( state.backtracking==0 ) { importDeclaration.setImportMemberOrTypeList(importElementList27); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importDeclaration;
    }
    // $ANTLR end "importDeclaration"



    // $ANTLR start "importElementList"
    // /home/david/git/ceylon-spec/Ceylon.g:200:1: importElementList returns [ImportMemberOrTypeList importMemberOrTypeList] : LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE ;
    public ImportMemberOrTypeList importElementList() throws RecognitionException {
        ImportMemberOrTypeList importMemberOrTypeList = null;


        Token c1=null;
        Token LBRACE28=null;
        Token RBRACE29=null;
        ImportMemberOrType ie1 =null;

        ImportMemberOrType ie2 =null;

        ImportWildcard iw =null;


         ImportMemberOrTypeList il=null; 
                    boolean wildcarded = false; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:203:5: ( LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:204:5: LBRACE (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )? RBRACE
            {
            LBRACE28=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_importElementList1019); if (state.failed) return importMemberOrTypeList;

            if ( state.backtracking==0 ) { il = new ImportMemberOrTypeList(LBRACE28);
                  importMemberOrTypeList = il; }

            // /home/david/git/ceylon-spec/Ceylon.g:207:5: (ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )* |iw= importWildcard )?
            int alt10=3;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ALIAS||(LA10_0 >= ASSERT && LA10_0 <= ASSIGN)||(LA10_0 >= BACKTICK && LA10_0 <= BREAK)||(LA10_0 >= CHAR_LITERAL && LA10_0 <= CLASS_DEFINITION)||LA10_0==COMPILER_ANNOTATION||LA10_0==CONTINUE||(LA10_0 >= DECREMENT_OP && LA10_0 <= DIFFERENCE_OP)||LA10_0==DYNAMIC||(LA10_0 >= FLOAT_LITERAL && LA10_0 <= FUNCTION_MODIFIER)||(LA10_0 >= IF_CLAUSE && LA10_0 <= INTERFACE_DEFINITION)||LA10_0==IN_OP||(LA10_0 >= LBRACE && LA10_0 <= LIDENTIFIER)||LA10_0==LPAREN||LA10_0==MODULE||(LA10_0 >= NATURAL_LITERAL && LA10_0 <= NEW)||(LA10_0 >= NOT_OP && LA10_0 <= OBJECT_DEFINITION)||(LA10_0 >= OUT && LA10_0 <= PACKAGE)||LA10_0==PRODUCT_OP||LA10_0==RETURN||(LA10_0 >= SEMICOLON && LA10_0 <= SMALLER_OP)||LA10_0==STRING_LITERAL||LA10_0==STRING_START||(LA10_0 >= SUM_OP && LA10_0 <= SWITCH_CLAUSE)||(LA10_0 >= THIS && LA10_0 <= UIDENTIFIER)||(LA10_0 >= VALUE_MODIFIER && LA10_0 <= WHILE_CLAUSE)) ) {
                alt10=1;
            }
            else if ( (LA10_0==ELLIPSIS) ) {
                alt10=2;
            }
            switch (alt10) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:208:7: ie1= importElement (c1= COMMA (ie2= importElement |iw= importWildcard |) )*
                    {
                    pushFollow(FOLLOW_importElement_in_importElementList1042);
                    ie1=importElement();

                    state._fsp--;
                    if (state.failed) return importMemberOrTypeList;

                    if ( state.backtracking==0 ) { if (ie1!=null)
                                il.addImportMemberOrType(ie1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:211:7: (c1= COMMA (ie2= importElement |iw= importWildcard |) )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==COMMA) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:212:9: c1= COMMA (ie2= importElement |iw= importWildcard |)
                    	    {
                    	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_importElementList1073); if (state.failed) return importMemberOrTypeList;

                    	    if ( state.backtracking==0 ) { il.setEndToken(c1); 
                    	              if (wildcarded) 
                    	                  displayRecognitionError(getTokenNames(), 
                    	                      new MismatchedTokenException(RBRACE, input)); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:217:9: (ie2= importElement |iw= importWildcard |)
                    	    int alt8=3;
                    	    switch ( input.LA(1) ) {
                    	    case ALIAS:
                    	    case ASSERT:
                    	    case ASSIGN:
                    	    case BACKTICK:
                    	    case BREAK:
                    	    case CHAR_LITERAL:
                    	    case CLASS_DEFINITION:
                    	    case COMPILER_ANNOTATION:
                    	    case CONTINUE:
                    	    case DECREMENT_OP:
                    	    case DIFFERENCE_OP:
                    	    case DYNAMIC:
                    	    case FLOAT_LITERAL:
                    	    case FOR_CLAUSE:
                    	    case FUNCTION_MODIFIER:
                    	    case IF_CLAUSE:
                    	    case IMPORT:
                    	    case INCREMENT_OP:
                    	    case INTERFACE_DEFINITION:
                    	    case IN_OP:
                    	    case LBRACE:
                    	    case LBRACKET:
                    	    case LET:
                    	    case LIDENTIFIER:
                    	    case LPAREN:
                    	    case MODULE:
                    	    case NATURAL_LITERAL:
                    	    case NEW:
                    	    case NOT_OP:
                    	    case OBJECT_DEFINITION:
                    	    case OUT:
                    	    case OUTER:
                    	    case PACKAGE:
                    	    case PRODUCT_OP:
                    	    case RETURN:
                    	    case SEMICOLON:
                    	    case SMALLER_OP:
                    	    case STRING_LITERAL:
                    	    case STRING_START:
                    	    case SUM_OP:
                    	    case SUPER:
                    	    case SWITCH_CLAUSE:
                    	    case THIS:
                    	    case THROW:
                    	    case TRY_CLAUSE:
                    	    case TYPE_CONSTRAINT:
                    	    case UIDENTIFIER:
                    	    case VALUE_MODIFIER:
                    	    case VERBATIM_STRING:
                    	    case VOID_MODIFIER:
                    	    case WHILE_CLAUSE:
                    	        {
                    	        alt8=1;
                    	        }
                    	        break;
                    	    case ELLIPSIS:
                    	        {
                    	        alt8=2;
                    	        }
                    	        break;
                    	    case COMMA:
                    	    case RBRACE:
                    	        {
                    	        alt8=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return importMemberOrTypeList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 8, 0, input);

                    	        throw nvae;

                    	    }

                    	    switch (alt8) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:218:11: ie2= importElement
                    	            {
                    	            pushFollow(FOLLOW_importElement_in_importElementList1108);
                    	            ie2=importElement();

                    	            state._fsp--;
                    	            if (state.failed) return importMemberOrTypeList;

                    	            if ( state.backtracking==0 ) { if (ie2!=null)
                    	                            il.addImportMemberOrType(ie2);
                    	                        if (ie2!=null)
                    	                            il.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:223:11: iw= importWildcard
                    	            {
                    	            pushFollow(FOLLOW_importWildcard_in_importElementList1136);
                    	            iw=importWildcard();

                    	            state._fsp--;
                    	            if (state.failed) return importMemberOrTypeList;

                    	            if ( state.backtracking==0 ) { wildcarded = true;
                    	                        if (iw!=null) 
                    	                            il.setImportWildcard(iw); 
                    	                        if (iw!=null) 
                    	                            il.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:229:11: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                            new MismatchedTokenException(ELLIPSIS, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:233:7: iw= importWildcard
                    {
                    pushFollow(FOLLOW_importWildcard_in_importElementList1190);
                    iw=importWildcard();

                    state._fsp--;
                    if (state.failed) return importMemberOrTypeList;

                    if ( state.backtracking==0 ) { il.setImportWildcard(iw); }

                    }
                    break;

            }


            RBRACE29=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_importElementList1205); if (state.failed) return importMemberOrTypeList;

            if ( state.backtracking==0 ) { il.setEndToken(RBRACE29); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importMemberOrTypeList;
    }
    // $ANTLR end "importElementList"



    // $ANTLR start "importElement"
    // /home/david/git/ceylon-spec/Ceylon.g:239:1: importElement returns [ImportMemberOrType importMemberOrType] : compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? ) ;
    public ImportMemberOrType importElement() throws RecognitionException {
        ImportMemberOrType importMemberOrType = null;


        Token SPECIFY30=null;
        Identifier in1 =null;

        Identifier in2 =null;

        ImportMemberOrTypeList iel2 =null;

        List<CompilerAnnotation> compilerAnnotations31 =null;


         Alias alias = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:241:5: ( compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? ) )
            // /home/david/git/ceylon-spec/Ceylon.g:241:7: compilerAnnotations (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_importElement1241);
            compilerAnnotations31=compilerAnnotations();

            state._fsp--;
            if (state.failed) return importMemberOrType;

            // /home/david/git/ceylon-spec/Ceylon.g:242:5: (in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )? )
            // /home/david/git/ceylon-spec/Ceylon.g:242:7: in1= importName ( SPECIFY (in2= importName |) )? (iel2= importElementList )?
            {
            pushFollow(FOLLOW_importName_in_importElement1251);
            in1=importName();

            state._fsp--;
            if (state.failed) return importMemberOrType;

            if ( state.backtracking==0 ) { importMemberOrType = new ImportMember(null);
                    importMemberOrType.setIdentifier(in1); }

            // /home/david/git/ceylon-spec/Ceylon.g:245:7: ( SPECIFY (in2= importName |) )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SPECIFY) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:245:9: SPECIFY (in2= importName |)
                    {
                    SPECIFY30=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_importElement1270); if (state.failed) return importMemberOrType;

                    if ( state.backtracking==0 ) { alias = new Alias(SPECIFY30);
                              alias.setIdentifier(in1);
                              importMemberOrType.setAlias(alias); 
                              importMemberOrType.setIdentifier(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:250:9: (in2= importName |)
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==LIDENTIFIER||LA11_0==UIDENTIFIER) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==COMMA||LA11_0==LBRACE||LA11_0==RBRACE) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return importMemberOrType;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;

                    }
                    switch (alt11) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:251:11: in2= importName
                            {
                            pushFollow(FOLLOW_importName_in_importElement1304);
                            in2=importName();

                            state._fsp--;
                            if (state.failed) return importMemberOrType;

                            if ( state.backtracking==0 ) { importMemberOrType.setIdentifier(in2); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:253:11: 
                            {
                            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                              new MismatchedTokenException(in1.getToken().getType(), input)); }

                            }
                            break;

                    }


                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:257:7: (iel2= importElementList )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==LBRACE) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:258:9: iel2= importElementList
                    {
                    pushFollow(FOLLOW_importElementList_in_importElement1368);
                    iel2=importElementList();

                    state._fsp--;
                    if (state.failed) return importMemberOrType;

                    if ( state.backtracking==0 ) { importMemberOrType.setImportMemberOrTypeList(iel2); }

                    }
                    break;

            }


            }


            if ( state.backtracking==0 ) { if (importMemberOrType!=null)
                    importMemberOrType.getCompilerAnnotations().addAll(compilerAnnotations31); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importMemberOrType;
    }
    // $ANTLR end "importElement"



    // $ANTLR start "importWildcard"
    // /home/david/git/ceylon-spec/Ceylon.g:266:1: importWildcard returns [ImportWildcard importWildcard] : ELLIPSIS ;
    public ImportWildcard importWildcard() throws RecognitionException {
        ImportWildcard importWildcard = null;


        Token ELLIPSIS32=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:267:5: ( ELLIPSIS )
            // /home/david/git/ceylon-spec/Ceylon.g:267:7: ELLIPSIS
            {
            ELLIPSIS32=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_importWildcard1420); if (state.failed) return importWildcard;

            if ( state.backtracking==0 ) { importWildcard = new ImportWildcard(ELLIPSIS32); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importWildcard;
    }
    // $ANTLR end "importWildcard"



    // $ANTLR start "importName"
    // /home/david/git/ceylon-spec/Ceylon.g:271:1: importName returns [Identifier identifier] : ( memberName | typeName );
    public Identifier importName() throws RecognitionException {
        Identifier identifier = null;


        Identifier memberName33 =null;

        Identifier typeName34 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:272:5: ( memberName | typeName )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==LIDENTIFIER) ) {
                alt14=1;
            }
            else if ( (LA14_0==UIDENTIFIER) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:272:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_importName1449);
                    memberName33=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier =memberName33; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:273:7: typeName
                    {
                    pushFollow(FOLLOW_typeName_in_importName1459);
                    typeName34=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier =typeName34; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "importName"



    // $ANTLR start "packagePath"
    // /home/david/git/ceylon-spec/Ceylon.g:276:1: packagePath returns [ImportPath importPath] : pn1= packageName (m= MEMBER_OP (pn2= packageName |) )* ;
    public ImportPath packagePath() throws RecognitionException {
        ImportPath importPath = null;


        Token m=null;
        Identifier pn1 =null;

        Identifier pn2 =null;


         importPath = new ImportPath(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:278:5: (pn1= packageName (m= MEMBER_OP (pn2= packageName |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:278:7: pn1= packageName (m= MEMBER_OP (pn2= packageName |) )*
            {
            pushFollow(FOLLOW_packageName_in_packagePath1493);
            pn1=packageName();

            state._fsp--;
            if (state.failed) return importPath;

            if ( state.backtracking==0 ) { if (pn1!=null) 
                        importPath.addIdentifier(pn1); }

            // /home/david/git/ceylon-spec/Ceylon.g:281:7: (m= MEMBER_OP (pn2= packageName |) )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==MEMBER_OP) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:282:9: m= MEMBER_OP (pn2= packageName |)
            	    {
            	    m=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_packagePath1524); if (state.failed) return importPath;

            	    if ( state.backtracking==0 ) { importPath.setEndToken(m); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:284:9: (pn2= packageName |)
            	    int alt15=2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==LIDENTIFIER||LA15_0==UIDENTIFIER) ) {
            	        alt15=1;
            	    }
            	    else if ( (LA15_0==BACKTICK||LA15_0==CHAR_LITERAL||LA15_0==LBRACE||LA15_0==MEMBER_OP||LA15_0==SEMICOLON||LA15_0==STRING_LITERAL) ) {
            	        alt15=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return importPath;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 15, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt15) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:285:11: pn2= packageName
            	            {
            	            pushFollow(FOLLOW_packageName_in_packagePath1559);
            	            pn2=packageName();

            	            state._fsp--;
            	            if (state.failed) return importPath;

            	            if ( state.backtracking==0 ) { importPath.addIdentifier(pn2); 
            	                        importPath.setEndToken(null); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:288:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return importPath;
    }
    // $ANTLR end "packagePath"



    // $ANTLR start "packageName"
    // /home/david/git/ceylon-spec/Ceylon.g:294:1: packageName returns [Identifier identifier] : ( LIDENTIFIER | UIDENTIFIER );
    public Identifier packageName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER35=null;
        Token UIDENTIFIER36=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:295:5: ( LIDENTIFIER | UIDENTIFIER )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==LIDENTIFIER) ) {
                alt17=1;
            }
            else if ( (LA17_0==UIDENTIFIER) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:295:7: LIDENTIFIER
                    {
                    LIDENTIFIER35=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_packageName1624); if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER35);
                            LIDENTIFIER35.setType(PIDENTIFIER);}

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:298:7: UIDENTIFIER
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
                                  new MismatchedTokenException(LIDENTIFIER, input), 5001); }

                    UIDENTIFIER36=(Token)match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_packageName1648); if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = new Identifier(UIDENTIFIER36);
                            UIDENTIFIER36.setType(PIDENTIFIER);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "packageName"



    // $ANTLR start "typeName"
    // /home/david/git/ceylon-spec/Ceylon.g:305:1: typeName returns [Identifier identifier] : UIDENTIFIER ;
    public Identifier typeName() throws RecognitionException {
        Identifier identifier = null;


        Token UIDENTIFIER37=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:306:5: ( UIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:306:7: UIDENTIFIER
            {
            UIDENTIFIER37=(Token)match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_typeName1677); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(UIDENTIFIER37); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "typeName"



    // $ANTLR start "annotationName"
    // /home/david/git/ceylon-spec/Ceylon.g:310:1: annotationName returns [Identifier identifier] : LIDENTIFIER ;
    public Identifier annotationName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER38=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:311:5: ( LIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:311:7: LIDENTIFIER
            {
            LIDENTIFIER38=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_annotationName1706); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER38); 
                    LIDENTIFIER38.setType(AIDENTIFIER); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "annotationName"



    // $ANTLR start "memberName"
    // /home/david/git/ceylon-spec/Ceylon.g:316:1: memberName returns [Identifier identifier] : LIDENTIFIER ;
    public Identifier memberName() throws RecognitionException {
        Identifier identifier = null;


        Token LIDENTIFIER39=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:317:5: ( LIDENTIFIER )
            // /home/david/git/ceylon-spec/Ceylon.g:317:7: LIDENTIFIER
            {
            LIDENTIFIER39=(Token)match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_memberName1735); if (state.failed) return identifier;

            if ( state.backtracking==0 ) { identifier = new Identifier(LIDENTIFIER39); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "memberName"



    // $ANTLR start "memberNameDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:321:1: memberNameDeclaration returns [Identifier identifier] : ( memberName | typeName );
    public Identifier memberNameDeclaration() throws RecognitionException {
        Identifier identifier = null;


        Identifier memberName40 =null;

        Identifier typeName41 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:322:5: ( memberName | typeName )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LIDENTIFIER) ) {
                alt18=1;
            }
            else if ( (LA18_0==UIDENTIFIER) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:322:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_memberNameDeclaration1768);
                    memberName40=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = memberName40; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:323:7: typeName
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input), 5001); }

                    pushFollow(FOLLOW_typeName_in_memberNameDeclaration1786);
                    typeName41=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = typeName41; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "memberNameDeclaration"



    // $ANTLR start "typeNameDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:329:1: typeNameDeclaration returns [Identifier identifier] : ( typeName | memberName );
    public Identifier typeNameDeclaration() throws RecognitionException {
        Identifier identifier = null;


        Identifier typeName42 =null;

        Identifier memberName43 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:330:5: ( typeName | memberName )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==UIDENTIFIER) ) {
                alt19=1;
            }
            else if ( (LA19_0==LIDENTIFIER) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return identifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:330:7: typeName
                    {
                    pushFollow(FOLLOW_typeName_in_typeNameDeclaration1816);
                    typeName42=typeName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = typeName42; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:331:7: memberName
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(UIDENTIFIER, input), 5002); }

                    pushFollow(FOLLOW_memberName_in_typeNameDeclaration1834);
                    memberName43=memberName();

                    state._fsp--;
                    if (state.failed) return identifier;

                    if ( state.backtracking==0 ) { identifier = memberName43; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return identifier;
    }
    // $ANTLR end "typeNameDeclaration"



    // $ANTLR start "objectDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:337:1: objectDeclaration returns [ObjectDefinition declaration] : OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) ;
    public ObjectDefinition objectDeclaration() throws RecognitionException {
        ObjectDefinition declaration = null;


        Token OBJECT_DEFINITION44=null;
        Token SEMICOLON49=null;
        Identifier memberNameDeclaration45 =null;

        ExtendedType extendedType46 =null;

        SatisfiedTypes satisfiedTypes47 =null;

        ClassBody classBody48 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:338:5: ( OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:338:7: OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON )
            {
            OBJECT_DEFINITION44=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectDeclaration1864); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new ObjectDefinition(OBJECT_DEFINITION44); 
                    declaration.setType(new ValueModifier(null)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_objectDeclaration1880);
            memberNameDeclaration45=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration45); }

            // /home/david/git/ceylon-spec/Ceylon.g:343:7: ( extendedType )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==EXTENDS) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:344:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectDeclaration1907);
                    extendedType46=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setExtendedType(extendedType46); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:347:7: ( satisfiedTypes )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SATISFIES) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:348:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectDeclaration1946);
                    satisfiedTypes47=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setSatisfiedTypes(satisfiedTypes47); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:351:7: ( classBody | SEMICOLON )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LBRACE) ) {
                alt22=1;
            }
            else if ( (LA22_0==SEMICOLON) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:352:9: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_objectDeclaration1984);
                    classBody48=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setClassBody(classBody48); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:354:9: SEMICOLON
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LBRACE, input)); }

                    SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_objectDeclaration2014); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON49); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "objectDeclaration"



    // $ANTLR start "objectExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:361:1: objectExpression returns [ObjectExpression objectExpression] : OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody ;
    public ObjectExpression objectExpression() throws RecognitionException {
        ObjectExpression objectExpression = null;


        Token OBJECT_DEFINITION50=null;
        ExtendedType extendedType51 =null;

        SatisfiedTypes satisfiedTypes52 =null;

        ClassBody classBody53 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:362:5: ( OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody )
            // /home/david/git/ceylon-spec/Ceylon.g:362:7: OBJECT_DEFINITION ( extendedType )? ( satisfiedTypes )? classBody
            {
            OBJECT_DEFINITION50=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectExpression2053); if (state.failed) return objectExpression;

            if ( state.backtracking==0 ) { objectExpression = new ObjectExpression(OBJECT_DEFINITION50); }

            // /home/david/git/ceylon-spec/Ceylon.g:364:7: ( extendedType )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==EXTENDS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:365:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectExpression2080);
                    extendedType51=extendedType();

                    state._fsp--;
                    if (state.failed) return objectExpression;

                    if ( state.backtracking==0 ) { objectExpression.setExtendedType(extendedType51); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:368:7: ( satisfiedTypes )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SATISFIES) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:369:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectExpression2119);
                    satisfiedTypes52=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return objectExpression;

                    if ( state.backtracking==0 ) { objectExpression.setSatisfiedTypes(satisfiedTypes52); }

                    }
                    break;

            }


            pushFollow(FOLLOW_classBody_in_objectExpression2147);
            classBody53=classBody();

            state._fsp--;
            if (state.failed) return objectExpression;

            if ( state.backtracking==0 ) { objectExpression.setClassBody(classBody53); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return objectExpression;
    }
    // $ANTLR end "objectExpression"



    // $ANTLR start "voidOrInferredMethodDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:376:1: voidOrInferredMethodDeclaration returns [AnyMethod declaration] : ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON ) ;
    public AnyMethod voidOrInferredMethodDeclaration() throws RecognitionException {
        AnyMethod declaration = null;


        Token VOID_MODIFIER54=null;
        Token FUNCTION_MODIFIER55=null;
        Token SEMICOLON62=null;
        Identifier memberNameDeclaration56 =null;

        TypeParameterList typeParameters57 =null;

        ParameterList parameters58 =null;

        TypeConstraintList typeConstraints59 =null;

        Block block60 =null;

        SpecifierExpression functionSpecifier61 =null;


         MethodDefinition def=null;
                    MethodDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:379:5: ( ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:379:7: ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( typeParameters )? ( parameters )* ( typeConstraints )? ( block | ( functionSpecifier )? SEMICOLON )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:379:7: ( VOID_MODIFIER | FUNCTION_MODIFIER )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==VOID_MODIFIER) ) {
                alt25=1;
            }
            else if ( (LA25_0==FUNCTION_MODIFIER) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:380:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER54=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodDeclaration2195); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { VoidModifier vm = new VoidModifier(VOID_MODIFIER54);
                              def = new MethodDefinition(VOID_MODIFIER54);
                              dec = new MethodDeclaration(VOID_MODIFIER54);
                              def.setType(vm);
                              dec.setType(vm);
                              declaration = dec; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:387:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER55=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodDeclaration2215); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { FunctionModifier fm = new FunctionModifier(FUNCTION_MODIFIER55);
                              def = new MethodDefinition(FUNCTION_MODIFIER55);
                              dec = new MethodDeclaration(FUNCTION_MODIFIER55);
                              def.setType(fm);
                              dec.setType(fm);
                              declaration = dec; }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_voidOrInferredMethodDeclaration2241);
            memberNameDeclaration56=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(memberNameDeclaration56); 
                    def.setIdentifier(memberNameDeclaration56); }

            // /home/david/git/ceylon-spec/Ceylon.g:398:7: ( typeParameters )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SMALLER_OP) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:399:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_voidOrInferredMethodDeclaration2267);
                    typeParameters57=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters57); 
                              dec.setTypeParameterList(typeParameters57); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:403:7: ( parameters )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==LPAREN) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:404:9: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_voidOrInferredMethodDeclaration2312);
            	    parameters58=parameters();

            	    state._fsp--;
            	    if (state.failed) return declaration;

            	    if ( state.backtracking==0 ) { def.addParameterList(parameters58); 
            	              dec.addParameterList(parameters58); }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:409:7: ( typeConstraints )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==COMPILER_ANNOTATION||LA28_0==TYPE_CONSTRAINT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:410:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_voidOrInferredMethodDeclaration2356);
                    typeConstraints59=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints59); 
                              dec.setTypeConstraintList(typeConstraints59); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:414:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==LBRACE) ) {
                alt30=1;
            }
            else if ( (LA30_0==COMPUTE||LA30_0==SEMICOLON||LA30_0==SPECIFY) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:415:9: block
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_block_in_voidOrInferredMethodDeclaration2404);
                    block60=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setBlock(block60); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:419:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:419:9: ( functionSpecifier )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==COMPUTE||LA29_0==SPECIFY) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:420:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_voidOrInferredMethodDeclaration2446);
                            functionSpecifier61=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierExpression(functionSpecifier61); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON62=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidOrInferredMethodDeclaration2489); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON62); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "voidOrInferredMethodDeclaration"



    // $ANTLR start "setterDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:430:1: setterDeclaration returns [AttributeSetterDefinition declaration] : ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON ) ;
    public AttributeSetterDefinition setterDeclaration() throws RecognitionException {
        AttributeSetterDefinition declaration = null;


        Token ASSIGN63=null;
        Token SEMICOLON67=null;
        Identifier memberNameDeclaration64 =null;

        Block block65 =null;

        SpecifierExpression functionSpecifier66 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:431:5: ( ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:431:7: ASSIGN memberNameDeclaration ( block | ( functionSpecifier )? SEMICOLON )
            {
            ASSIGN63=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_setterDeclaration2538); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new AttributeSetterDefinition(ASSIGN63); 
                    declaration.setType( new VoidModifier(null) ); }

            pushFollow(FOLLOW_memberNameDeclaration_in_setterDeclaration2555);
            memberNameDeclaration64=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration64); }

            // /home/david/git/ceylon-spec/Ceylon.g:436:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LBRACE) ) {
                alt32=1;
            }
            else if ( (LA32_0==COMPUTE||LA32_0==SEMICOLON||LA32_0==SPECIFY) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:437:9: block
                    {
                    pushFollow(FOLLOW_block_in_setterDeclaration2583);
                    block65=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block65); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:440:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:440:9: ( functionSpecifier )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==COMPUTE||LA31_0==SPECIFY) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:441:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_setterDeclaration2624);
                            functionSpecifier66=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(functionSpecifier66); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_setterDeclaration2667); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON67); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "setterDeclaration"



    // $ANTLR start "tuplePatternStart"
    // /home/david/git/ceylon-spec/Ceylon.g:451:1: tuplePatternStart : LBRACKET ( compilerAnnotations LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart ) ;
    public void tuplePatternStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:452:5: ( LBRACKET ( compilerAnnotations LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:452:7: LBRACKET ( compilerAnnotations LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart )
            {
            match(input,LBRACKET,FOLLOW_LBRACKET_in_tuplePatternStart2702); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:453:7: ( compilerAnnotations LIDENTIFIER | ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart ) | tuplePatternStart )
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==COMPILER_ANNOTATION) ) {
                int LA33_1 = input.LA(2);

                if ( (true) ) {
                    alt33=1;
                }
                else if ( (synpred3_Ceylon()) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==LIDENTIFIER) ) {
                alt33=1;
            }
            else if ( (LA33_0==VALUE_MODIFIER) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==FUNCTION_MODIFIER) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==VOID_MODIFIER) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==ASSIGN) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==INTERFACE_DEFINITION) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==CLASS_DEFINITION) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==OBJECT_DEFINITION) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==NEW) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==ALIAS) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==UIDENTIFIER) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==SMALLER_OP) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==LBRACKET) ) {
                int LA33_14 = input.LA(2);

                if ( (synpred3_Ceylon()) ) {
                    alt33=2;
                }
                else if ( (true) ) {
                    alt33=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==LBRACE) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else if ( (LA33_0==DYNAMIC) && (synpred3_Ceylon())) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:454:9: compilerAnnotations LIDENTIFIER
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_tuplePatternStart2720);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_tuplePatternStart2722); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:456:9: ( compilerAnnotations declarationStart )=> ( compilerAnnotations declarationStart )
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:457:9: ( compilerAnnotations declarationStart )
                    // /home/david/git/ceylon-spec/Ceylon.g:457:10: compilerAnnotations declarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_tuplePatternStart2758);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_declarationStart_in_tuplePatternStart2760);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:459:9: tuplePatternStart
                    {
                    pushFollow(FOLLOW_tuplePatternStart_in_tuplePatternStart2779);
                    tuplePatternStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "tuplePatternStart"



    // $ANTLR start "variableOrTuplePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:463:1: variableOrTuplePattern returns [Pattern pattern] : ( ( tuplePatternStart )=> tuplePattern | variablePattern );
    public Pattern variableOrTuplePattern() throws RecognitionException {
        Pattern pattern = null;


        TuplePattern tuplePattern68 =null;

        VariablePattern variablePattern69 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:464:5: ( ( tuplePatternStart )=> tuplePattern | variablePattern )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LBRACKET) ) {
                int LA34_1 = input.LA(2);

                if ( (synpred4_Ceylon()) ) {
                    alt34=1;
                }
                else if ( (true) ) {
                    alt34=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA34_0==COMPILER_ANNOTATION||LA34_0==FUNCTION_MODIFIER||LA34_0==LBRACE||LA34_0==LIDENTIFIER||LA34_0==SMALLER_OP||LA34_0==UIDENTIFIER||LA34_0==VALUE_MODIFIER||LA34_0==VOID_MODIFIER) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:465:7: ( tuplePatternStart )=> tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_variableOrTuplePattern2821);
                    tuplePattern68=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern68; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:468:7: variablePattern
                    {
                    pushFollow(FOLLOW_variablePattern_in_variableOrTuplePattern2844);
                    variablePattern69=variablePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = variablePattern69; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variableOrTuplePattern"



    // $ANTLR start "pattern"
    // /home/david/git/ceylon-spec/Ceylon.g:472:1: pattern returns [Pattern pattern] : ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | ( tuplePatternStart )=> tuplePattern | variablePattern );
    public Pattern pattern() throws RecognitionException {
        Pattern pattern = null;


        KeyValuePattern ki1 =null;

        KeyValuePattern ki2 =null;

        TuplePattern tuplePattern70 =null;

        VariablePattern variablePattern71 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:473:5: ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | ( tuplePatternStart )=> tuplePattern | variablePattern )
            int alt35=4;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA35_1 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (synpred7_Ceylon()) ) {
                    alt35=3;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA35_2 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA35_3 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA35_4 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA35_5 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA35_6 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA35_7 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA35_8 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA35_9 = input.LA(2);

                if ( (synpred5_Ceylon()) ) {
                    alt35=1;
                }
                else if ( (synpred6_Ceylon()) ) {
                    alt35=2;
                }
                else if ( (true) ) {
                    alt35=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }

            switch (alt35) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:474:7: ( variable ENTRY_OP )=>ki1= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_pattern2896);
                    ki1=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:478:7: ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_pattern2934);
                    ki2=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki2; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:482:7: ( tuplePatternStart )=> tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_pattern2969);
                    tuplePattern70=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern70; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:486:7: variablePattern
                    {
                    pushFollow(FOLLOW_variablePattern_in_pattern2992);
                    variablePattern71=variablePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = variablePattern71; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "pattern"



    // $ANTLR start "tupleOrEntryPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:490:1: tupleOrEntryPattern returns [Pattern pattern] : ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | tuplePattern );
    public Pattern tupleOrEntryPattern() throws RecognitionException {
        Pattern pattern = null;


        KeyValuePattern ki1 =null;

        KeyValuePattern ki2 =null;

        TuplePattern tuplePattern72 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:491:5: ( ( variable ENTRY_OP )=>ki1= keyItemPattern | ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern | tuplePattern )
            int alt36=3;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA36_1 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else if ( (true) ) {
                    alt36=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA36_2 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA36_3 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA36_4 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA36_5 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA36_6 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA36_7 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA36_8 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA36_9 = input.LA(2);

                if ( (synpred8_Ceylon()) ) {
                    alt36=1;
                }
                else if ( (synpred9_Ceylon()) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }

            switch (alt36) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:492:7: ( variable ENTRY_OP )=>ki1= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_tupleOrEntryPattern3044);
                    ki1=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:496:7: ( tuplePattern ENTRY_OP )=>ki2= keyItemPattern
                    {
                    pushFollow(FOLLOW_keyItemPattern_in_tupleOrEntryPattern3082);
                    ki2=keyItemPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = ki2; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:500:7: tuplePattern
                    {
                    pushFollow(FOLLOW_tuplePattern_in_tupleOrEntryPattern3104);
                    tuplePattern72=tuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = tuplePattern72; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "tupleOrEntryPattern"



    // $ANTLR start "variablePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:504:1: variablePattern returns [VariablePattern pattern] : variable ;
    public VariablePattern variablePattern() throws RecognitionException {
        VariablePattern pattern = null;


        Variable variable73 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:505:5: ( variable )
            // /home/david/git/ceylon-spec/Ceylon.g:505:7: variable
            {
            pushFollow(FOLLOW_variable_in_variablePattern3133);
            variable73=variable();

            state._fsp--;
            if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new VariablePattern(null);
                    pattern.setVariable(variable73); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variablePattern"



    // $ANTLR start "tuplePattern"
    // /home/david/git/ceylon-spec/Ceylon.g:510:1: tuplePattern returns [TuplePattern pattern] : LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET ;
    public TuplePattern tuplePattern() throws RecognitionException {
        TuplePattern pattern = null;


        Token c1=null;
        Token LBRACKET74=null;
        Token RBRACKET75=null;
        Pattern v1 =null;

        Pattern v2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:511:5: ( LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:511:7: LBRACKET (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )? RBRACKET
            {
            LBRACKET74=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tuplePattern3162); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new TuplePattern(LBRACKET74); }

            // /home/david/git/ceylon-spec/Ceylon.g:513:7: (v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )* )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==COMPILER_ANNOTATION||LA38_0==FUNCTION_MODIFIER||(LA38_0 >= LBRACE && LA38_0 <= LBRACKET)||LA38_0==LIDENTIFIER||LA38_0==PRODUCT_OP||LA38_0==SMALLER_OP||LA38_0==UIDENTIFIER||LA38_0==VALUE_MODIFIER||LA38_0==VOID_MODIFIER) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:514:9: v1= variadicPattern (c1= COMMA (v2= variadicPattern ) )*
                    {
                    pushFollow(FOLLOW_variadicPattern_in_tuplePattern3190);
                    v1=variadicPattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern.addPattern(v1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:516:9: (c1= COMMA (v2= variadicPattern ) )*
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==COMMA) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:517:11: c1= COMMA (v2= variadicPattern )
                    	    {
                    	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuplePattern3224); if (state.failed) return pattern;

                    	    if ( state.backtracking==0 ) { pattern.setEndToken(c1); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:519:11: (v2= variadicPattern )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:520:13: v2= variadicPattern
                    	    {
                    	    pushFollow(FOLLOW_variadicPattern_in_tuplePattern3264);
                    	    v2=variadicPattern();

                    	    state._fsp--;
                    	    if (state.failed) return pattern;

                    	    if ( state.backtracking==0 ) { pattern.addPattern(v2);
                    	                  pattern.setEndToken(null); }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);


                    }
                    break;

            }


            RBRACKET75=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tuplePattern3318); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern.setEndToken(RBRACKET75); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "tuplePattern"



    // $ANTLR start "variadicPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:530:1: variadicPattern returns [Pattern pattern] : ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern ) ;
    public Pattern variadicPattern() throws RecognitionException {
        Pattern pattern = null;


        Pattern p =null;

        Variable variadicVariable76 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:531:5: ( ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern ) )
            // /home/david/git/ceylon-spec/Ceylon.g:531:7: ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:531:7: ( ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable |p= pattern )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==COMPILER_ANNOTATION) ) {
                int LA39_1 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA39_0==UIDENTIFIER) ) {
                int LA39_2 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA39_0==SMALLER_OP) ) {
                int LA39_3 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA39_0==LBRACKET) ) {
                int LA39_4 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA39_0==LBRACE) ) {
                int LA39_5 = input.LA(2);

                if ( (synpred10_Ceylon()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return pattern;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA39_0==PRODUCT_OP) && (synpred10_Ceylon())) {
                alt39=1;
            }
            else if ( (LA39_0==FUNCTION_MODIFIER||LA39_0==LIDENTIFIER||LA39_0==VALUE_MODIFIER||LA39_0==VOID_MODIFIER) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return pattern;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:532:9: ( compilerAnnotations ( unionType )? PRODUCT_OP )=> variadicVariable
                    {
                    pushFollow(FOLLOW_variadicVariable_in_variadicPattern3376);
                    variadicVariable76=variadicVariable();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { VariablePattern vp = new VariablePattern(null);
                              vp.setVariable(variadicVariable76); 
                              pattern = vp; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:538:9: p= pattern
                    {
                    pushFollow(FOLLOW_pattern_in_variadicPattern3405);
                    p=pattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern = p; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "variadicPattern"



    // $ANTLR start "variadicVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:543:1: variadicVariable returns [Variable variable] : compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )? ;
    public Variable variadicVariable() throws RecognitionException {
        Variable variable = null;


        Token PRODUCT_OP79=null;
        List<CompilerAnnotation> compilerAnnotations77 =null;

        StaticType unionType78 =null;

        Identifier memberName80 =null;


         variable = new Variable(null); 
                    Type t = new ValueModifier(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:546:5: ( compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )? )
            // /home/david/git/ceylon-spec/Ceylon.g:546:7: compilerAnnotations ( unionType )? ( PRODUCT_OP ) ( memberName )?
            {
            pushFollow(FOLLOW_compilerAnnotations_in_variadicVariable3452);
            compilerAnnotations77=compilerAnnotations();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.getCompilerAnnotations().addAll(compilerAnnotations77); }

            // /home/david/git/ceylon-spec/Ceylon.g:548:7: ( unionType )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0 >= LBRACE && LA40_0 <= LBRACKET)||LA40_0==SMALLER_OP||LA40_0==UIDENTIFIER) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:549:9: unionType
                    {
                    pushFollow(FOLLOW_unionType_in_variadicVariable3478);
                    unionType78=unionType();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { t = unionType78; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:552:7: ( PRODUCT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:553:9: PRODUCT_OP
            {
            PRODUCT_OP79=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_variadicVariable3515); if (state.failed) return variable;

            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(PRODUCT_OP79);
                      st.setType(t);
                      st.setAtLeastOne(false);
                      variable.setType(st); }

            }


            // /home/david/git/ceylon-spec/Ceylon.g:565:7: ( memberName )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==LIDENTIFIER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:566:9: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_variadicVariable3559);
                    memberName80=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(memberName80); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "variadicVariable"



    // $ANTLR start "keyItemPattern"
    // /home/david/git/ceylon-spec/Ceylon.g:571:1: keyItemPattern returns [KeyValuePattern pattern] : v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )? ;
    public KeyValuePattern keyItemPattern() throws RecognitionException {
        KeyValuePattern pattern = null;


        Token ENTRY_OP81=null;
        Pattern v1 =null;

        Pattern v2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:572:5: (v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )? )
            // /home/david/git/ceylon-spec/Ceylon.g:572:7: v1= variableOrTuplePattern ENTRY_OP (v2= variableOrTuplePattern )?
            {
            pushFollow(FOLLOW_variableOrTuplePattern_in_keyItemPattern3601);
            v1=variableOrTuplePattern();

            state._fsp--;
            if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern = new KeyValuePattern(null);
                    pattern.setKey(v1); }

            ENTRY_OP81=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_keyItemPattern3617); if (state.failed) return pattern;

            if ( state.backtracking==0 ) { pattern.setEndToken(ENTRY_OP81); }

            // /home/david/git/ceylon-spec/Ceylon.g:577:7: (v2= variableOrTuplePattern )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==COMPILER_ANNOTATION||LA42_0==FUNCTION_MODIFIER||(LA42_0 >= LBRACE && LA42_0 <= LBRACKET)||LA42_0==LIDENTIFIER||LA42_0==SMALLER_OP||LA42_0==UIDENTIFIER||LA42_0==VALUE_MODIFIER||LA42_0==VOID_MODIFIER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:578:9: v2= variableOrTuplePattern
                    {
                    pushFollow(FOLLOW_variableOrTuplePattern_in_keyItemPattern3645);
                    v2=variableOrTuplePattern();

                    state._fsp--;
                    if (state.failed) return pattern;

                    if ( state.backtracking==0 ) { pattern.setValue(v2); 
                              pattern.setEndToken(null); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return pattern;
    }
    // $ANTLR end "keyItemPattern"



    // $ANTLR start "destructure"
    // /home/david/git/ceylon-spec/Ceylon.g:584:1: destructure returns [Destructure destructure] : VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON ;
    public Destructure destructure() throws RecognitionException {
        Destructure destructure = null;


        Token VALUE_MODIFIER82=null;
        Token SEMICOLON85=null;
        Pattern tupleOrEntryPattern83 =null;

        SpecifierExpression specifier84 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:585:5: ( VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:585:7: VALUE_MODIFIER tupleOrEntryPattern ( specifier )? SEMICOLON
            {
            VALUE_MODIFIER82=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructure3685); if (state.failed) return destructure;

            if ( state.backtracking==0 ) { ValueModifier vm = new ValueModifier(VALUE_MODIFIER82);
                    destructure = new Destructure(null);
                    destructure.setType(vm); }

            pushFollow(FOLLOW_tupleOrEntryPattern_in_destructure3701);
            tupleOrEntryPattern83=tupleOrEntryPattern();

            state._fsp--;
            if (state.failed) return destructure;

            if ( state.backtracking==0 ) { destructure.setPattern(tupleOrEntryPattern83); }

            // /home/david/git/ceylon-spec/Ceylon.g:591:7: ( specifier )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==SPECIFY) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:592:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_destructure3727);
                    specifier84=specifier();

                    state._fsp--;
                    if (state.failed) return destructure;

                    if ( state.backtracking==0 ) { destructure.setSpecifierExpression(specifier84); }

                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    }
                    break;

            }


            SEMICOLON85=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_destructure3764); if (state.failed) return destructure;

            if ( state.backtracking==0 ) { destructure.setEndToken(SEMICOLON85); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return destructure;
    }
    // $ANTLR end "destructure"



    // $ANTLR start "inferredAttributeDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:601:1: inferredAttributeDeclaration returns [AnyAttribute declaration] : VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block ) ;
    public AnyAttribute inferredAttributeDeclaration() throws RecognitionException {
        AnyAttribute declaration = null;


        Token VALUE_MODIFIER86=null;
        Token SEMICOLON90=null;
        Identifier memberNameDeclaration87 =null;

        SpecifierExpression specifier88 =null;

        SpecifierExpression lazySpecifier89 =null;

        Block block91 =null;


         AttributeGetterDefinition def=null;
                    AttributeDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:604:5: ( VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:604:7: VALUE_MODIFIER memberNameDeclaration ( ( specifier | lazySpecifier )? SEMICOLON | block )
            {
            VALUE_MODIFIER86=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_inferredAttributeDeclaration3802); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { ValueModifier fm = new ValueModifier(VALUE_MODIFIER86);
                    def = new AttributeGetterDefinition(VALUE_MODIFIER86);
                    dec = new AttributeDeclaration(VALUE_MODIFIER86);
                    def.setType(fm);
                    dec.setType(fm);
                    declaration = dec; }

            pushFollow(FOLLOW_memberNameDeclaration_in_inferredAttributeDeclaration3819);
            memberNameDeclaration87=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(memberNameDeclaration87); 
                    def.setIdentifier(memberNameDeclaration87); }

            // /home/david/git/ceylon-spec/Ceylon.g:614:7: ( ( specifier | lazySpecifier )? SEMICOLON | block )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==COMPUTE||LA45_0==SEMICOLON||LA45_0==SPECIFY) ) {
                alt45=1;
            }
            else if ( (LA45_0==LBRACE) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:615:9: ( specifier | lazySpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:615:9: ( specifier | lazySpecifier )?
                    int alt44=3;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==SPECIFY) ) {
                        alt44=1;
                    }
                    else if ( (LA44_0==COMPUTE) ) {
                        alt44=2;
                    }
                    switch (alt44) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:616:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_inferredAttributeDeclaration3858);
                            specifier88=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierOrInitializerExpression(specifier88); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:619:11: lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_inferredAttributeDeclaration3893);
                            lazySpecifier89=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setSpecifierOrInitializerExpression(lazySpecifier89); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON90=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inferredAttributeDeclaration3936); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON90); 
                              expecting=-1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:627:9: block
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_block_in_inferredAttributeDeclaration3975);
                    block91=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setBlock(block91); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "inferredAttributeDeclaration"



    // $ANTLR start "typedMethodOrAttributeDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:633:1: typedMethodOrAttributeDeclaration returns [TypedDeclaration declaration] : ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block ) ;
    public TypedDeclaration typedMethodOrAttributeDeclaration() throws RecognitionException {
        TypedDeclaration declaration = null;


        Token s1=null;
        Token s2=null;
        Token DYNAMIC93=null;
        Block b1 =null;

        SpecifierExpression ms =null;

        SpecifierExpression as =null;

        SpecifierExpression ac =null;

        Block b2 =null;

        Type variadicType92 =null;

        Identifier memberNameDeclaration94 =null;

        TypeParameterList typeParameters95 =null;

        ParameterList parameters96 =null;

        TypeConstraintList typeConstraints97 =null;


         AttributeGetterDefinition adef=new AttributeGetterDefinition(null);
                    AttributeDeclaration adec=new AttributeDeclaration(null);
                    MethodDefinition mdef=new MethodDefinition(null);
                    MethodDeclaration mdec=new MethodDeclaration(null); 
                    declaration = adec; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:639:5: ( ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:639:7: ( variadicType | DYNAMIC ) memberNameDeclaration ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:639:7: ( variadicType | DYNAMIC )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0 >= LBRACE && LA46_0 <= LBRACKET)||LA46_0==SMALLER_OP||LA46_0==UIDENTIFIER) ) {
                alt46=1;
            }
            else if ( (LA46_0==DYNAMIC) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:639:9: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_typedMethodOrAttributeDeclaration4025);
                    variadicType92=variadicType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { adef.setType(variadicType92);
                              adec.setType(variadicType92); 
                              mdef.setType(variadicType92);
                              mdec.setType(variadicType92); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:644:9: DYNAMIC
                    {
                    DYNAMIC93=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_typedMethodOrAttributeDeclaration4045); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { DynamicModifier dm = new DynamicModifier(DYNAMIC93);
                              adef.setType(dm);
                              adec.setType(dm); 
                              mdef.setType(dm);
                              mdec.setType(dm); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_typedMethodOrAttributeDeclaration4071);
            memberNameDeclaration94=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { adef.setIdentifier(memberNameDeclaration94);
                    adec.setIdentifier(memberNameDeclaration94); 
                    mdef.setIdentifier(memberNameDeclaration94);
                    mdec.setIdentifier(memberNameDeclaration94); }

            // /home/david/git/ceylon-spec/Ceylon.g:656:7: ( ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON ) | (as= specifier |ac= lazySpecifier )? s2= SEMICOLON |b2= block )
            int alt53=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case SMALLER_OP:
                {
                alt53=1;
                }
                break;
            case COMPUTE:
            case SEMICOLON:
            case SPECIFY:
                {
                alt53=2;
                }
                break;
            case LBRACE:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }

            switch (alt53) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:657:9: ( typeParameters )? ( parameters )+ ( typeConstraints )? (b1= block | (ms= functionSpecifier )? s1= SEMICOLON )
                    {
                    if ( state.backtracking==0 ) { declaration = mdec; }

                    // /home/david/git/ceylon-spec/Ceylon.g:658:9: ( typeParameters )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==SMALLER_OP) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:659:11: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_typedMethodOrAttributeDeclaration4120);
                            typeParameters95=typeParameters();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setTypeParameterList(typeParameters95);
                                        mdec.setTypeParameterList(typeParameters95); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:663:9: ( parameters )+
                    int cnt48=0;
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==LPAREN) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:664:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_typedMethodOrAttributeDeclaration4165);
                    	    parameters96=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { mdef.addParameterList(parameters96);
                    	                mdec.addParameterList(parameters96); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt48 >= 1 ) break loop48;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(48, input);
                                throw eee;
                        }
                        cnt48++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:669:9: ( typeConstraints )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==COMPILER_ANNOTATION||LA49_0==TYPE_CONSTRAINT) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:670:11: typeConstraints
                            {
                            pushFollow(FOLLOW_typeConstraints_in_typedMethodOrAttributeDeclaration4220);
                            typeConstraints97=typeConstraints();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setTypeConstraintList(typeConstraints97);
                                        mdec.setTypeConstraintList(typeConstraints97); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:674:9: (b1= block | (ms= functionSpecifier )? s1= SEMICOLON )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==LBRACE) ) {
                        alt51=1;
                    }
                    else if ( (LA51_0==COMPUTE||LA51_0==SEMICOLON||LA51_0==SPECIFY) ) {
                        alt51=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;

                    }
                    switch (alt51) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:675:11: b1= block
                            {
                            if ( state.backtracking==0 ) { declaration = mdef; }

                            pushFollow(FOLLOW_block_in_typedMethodOrAttributeDeclaration4280);
                            b1=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { mdef.setBlock(b1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:679:11: (ms= functionSpecifier )? s1= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:679:11: (ms= functionSpecifier )?
                            int alt50=2;
                            int LA50_0 = input.LA(1);

                            if ( (LA50_0==COMPUTE||LA50_0==SPECIFY) ) {
                                alt50=1;
                            }
                            switch (alt50) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:680:13: ms= functionSpecifier
                                    {
                                    pushFollow(FOLLOW_functionSpecifier_in_typedMethodOrAttributeDeclaration4330);
                                    ms=functionSpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { mdec.setSpecifierExpression(ms); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s1=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4382); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setEndToken(s1);
                                        expecting=-1; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:689:9: (as= specifier |ac= lazySpecifier )? s2= SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:689:9: (as= specifier |ac= lazySpecifier )?
                    int alt52=3;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==SPECIFY) ) {
                        alt52=1;
                    }
                    else if ( (LA52_0==COMPUTE) ) {
                        alt52=2;
                    }
                    switch (alt52) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:690:11: as= specifier
                            {
                            pushFollow(FOLLOW_specifier_in_typedMethodOrAttributeDeclaration4437);
                            as=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { adec.setSpecifierOrInitializerExpression(as); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:693:11: ac= lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_typedMethodOrAttributeDeclaration4475);
                            ac=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { adec.setSpecifierOrInitializerExpression(ac); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    s2=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4521); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(s2); 
                            expecting=-1; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:701:9: b2= block
                    {
                    if ( state.backtracking==0 ) { declaration = adef; }

                    pushFollow(FOLLOW_block_in_typedMethodOrAttributeDeclaration4562);
                    b2=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { adef.setBlock(b2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "typedMethodOrAttributeDeclaration"



    // $ANTLR start "interfaceDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:707:1: interfaceDeclaration returns [AnyInterface declaration] : ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON ) ;
    public AnyInterface interfaceDeclaration() throws RecognitionException {
        AnyInterface declaration = null;


        Token INTERFACE_DEFINITION98=null;
        Token DYNAMIC99=null;
        Token SEMICOLON107=null;
        Identifier typeNameDeclaration100 =null;

        TypeParameterList typeParameters101 =null;

        CaseTypes caseTypes102 =null;

        SatisfiedTypes satisfiedTypes103 =null;

        TypeConstraintList typeConstraints104 =null;

        InterfaceBody interfaceBody105 =null;

        TypeSpecifier typeSpecifier106 =null;


         InterfaceDefinition def=null; 
                    InterfaceDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:710:5: ( ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:710:7: ( INTERFACE_DEFINITION | DYNAMIC ) typeNameDeclaration ( typeParameters )? ( caseTypes )? ( satisfiedTypes )? ( typeConstraints )? ( interfaceBody | ( typeSpecifier )? SEMICOLON )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:710:7: ( INTERFACE_DEFINITION | DYNAMIC )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==INTERFACE_DEFINITION) ) {
                alt54=1;
            }
            else if ( (LA54_0==DYNAMIC) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:711:9: INTERFACE_DEFINITION
                    {
                    INTERFACE_DEFINITION98=(Token)match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_interfaceDeclaration4621); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def = new InterfaceDefinition(INTERFACE_DEFINITION98); 
                              dec = new InterfaceDeclaration(INTERFACE_DEFINITION98);
                              declaration = dec; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:716:9: DYNAMIC
                    {
                    DYNAMIC99=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_interfaceDeclaration4650); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def = new InterfaceDefinition(DYNAMIC99);
                              dec = new InterfaceDeclaration(DYNAMIC99);
                              def.setDynamic(true);
                              declaration = def; }

                    }
                    break;

            }


            pushFollow(FOLLOW_typeNameDeclaration_in_interfaceDeclaration4676);
            typeNameDeclaration100=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(typeNameDeclaration100); 
                    def.setIdentifier(typeNameDeclaration100); }

            // /home/david/git/ceylon-spec/Ceylon.g:725:7: ( typeParameters )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SMALLER_OP) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:726:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_interfaceDeclaration4703);
                    typeParameters101=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters101); 
                              dec.setTypeParameterList(typeParameters101); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:730:7: ( caseTypes )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==CASE_TYPES) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:731:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_interfaceDeclaration4741);
                    caseTypes102=caseTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setCaseTypes(caseTypes102); 
                              dec.setCaseTypes(caseTypes102); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:740:7: ( satisfiedTypes )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==SATISFIES) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:741:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_interfaceDeclaration4795);
                    satisfiedTypes103=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setSatisfiedTypes(satisfiedTypes103); 
                              dec.setSatisfiedTypes(satisfiedTypes103); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:745:7: ( typeConstraints )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==COMPILER_ANNOTATION||LA58_0==TYPE_CONSTRAINT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:746:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_interfaceDeclaration4832);
                    typeConstraints104=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints104); 
                              dec.setTypeConstraintList(typeConstraints104); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:750:7: ( interfaceBody | ( typeSpecifier )? SEMICOLON )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LBRACE) ) {
                alt60=1;
            }
            else if ( (LA60_0==COMPUTE||LA60_0==SEMICOLON||LA60_0==SPECIFY) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:751:9: interfaceBody
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_interfaceBody_in_interfaceDeclaration4879);
                    interfaceBody105=interfaceBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setInterfaceBody(interfaceBody105); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:755:9: ( typeSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:755:9: ( typeSpecifier )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==COMPUTE||LA59_0==SPECIFY) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:756:11: typeSpecifier
                            {
                            pushFollow(FOLLOW_typeSpecifier_in_interfaceDeclaration4920);
                            typeSpecifier106=typeSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setTypeSpecifier(typeSpecifier106); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceDeclaration4964); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON107); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "interfaceDeclaration"



    // $ANTLR start "classDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:766:1: classDeclaration returns [AnyClass declaration] : CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON ) ;
    public AnyClass classDeclaration() throws RecognitionException {
        AnyClass declaration = null;


        Token CLASS_DEFINITION108=null;
        Token SEMICOLON118=null;
        Identifier typeNameDeclaration109 =null;

        TypeParameterList typeParameters110 =null;

        ParameterList parameters111 =null;

        CaseTypes caseTypes112 =null;

        ExtendedType extendedType113 =null;

        SatisfiedTypes satisfiedTypes114 =null;

        TypeConstraintList typeConstraints115 =null;

        ClassBody classBody116 =null;

        ClassSpecifier classSpecifier117 =null;


         ClassDefinition def=null; 
                    ClassDeclaration dec=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:769:5: ( CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:769:7: CLASS_DEFINITION typeNameDeclaration ( typeParameters )? ( parameters )? ( caseTypes )? ( extendedType )? ( satisfiedTypes )? ( typeConstraints )? ( classBody | ( classSpecifier )? SEMICOLON )
            {
            CLASS_DEFINITION108=(Token)match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_classDeclaration5012); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { def = new ClassDefinition(CLASS_DEFINITION108); 
                    dec = new ClassDeclaration(CLASS_DEFINITION108);
                    declaration = dec; }

            pushFollow(FOLLOW_typeNameDeclaration_in_classDeclaration5029);
            typeNameDeclaration109=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { dec.setIdentifier(typeNameDeclaration109); 
                    def.setIdentifier(typeNameDeclaration109); }

            // /home/david/git/ceylon-spec/Ceylon.g:776:7: ( typeParameters )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==SMALLER_OP) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:777:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration5055);
                    typeParameters110=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeParameterList(typeParameters110); 
                              dec.setTypeParameterList(typeParameters110); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:781:7: ( parameters )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LPAREN) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:782:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_classDeclaration5092);
                    parameters111=parameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setParameterList(parameters111); 
                              dec.setParameterList(parameters111); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:786:7: ( caseTypes )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==CASE_TYPES) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:787:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_classDeclaration5129);
                    caseTypes112=caseTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setCaseTypes(caseTypes112); 
                              dec.setCaseTypes(caseTypes112); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:792:7: ( extendedType )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EXTENDS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:793:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_classDeclaration5175);
                    extendedType113=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setExtendedType(extendedType113); 
                              dec.setExtendedType(extendedType113); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:797:7: ( satisfiedTypes )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==SATISFIES) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:798:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_classDeclaration5213);
                    satisfiedTypes114=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setSatisfiedTypes(satisfiedTypes114); 
                              dec.setSatisfiedTypes(satisfiedTypes114); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:802:7: ( typeConstraints )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==COMPILER_ANNOTATION||LA66_0==TYPE_CONSTRAINT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:803:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_classDeclaration5250);
                    typeConstraints115=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setTypeConstraintList(typeConstraints115); 
                              dec.setTypeConstraintList(typeConstraints115); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:807:7: ( classBody | ( classSpecifier )? SEMICOLON )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LBRACE) ) {
                alt68=1;
            }
            else if ( (LA68_0==COMPUTE||LA68_0==SEMICOLON||LA68_0==SPECIFY) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:808:9: classBody
                    {
                    if ( state.backtracking==0 ) { declaration = def; }

                    pushFollow(FOLLOW_classBody_in_classDeclaration5297);
                    classBody116=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { def.setClassBody(classBody116); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:812:9: ( classSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:812:9: ( classSpecifier )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==COMPUTE||LA67_0==SPECIFY) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:813:11: classSpecifier
                            {
                            pushFollow(FOLLOW_classSpecifier_in_classDeclaration5338);
                            classSpecifier117=classSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { dec.setClassSpecifier(classSpecifier117); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON118=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_classDeclaration5381); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON118); 
                              expecting=-1; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "classDeclaration"



    // $ANTLR start "constructor"
    // /home/david/git/ceylon-spec/Ceylon.g:823:1: constructor returns [Constructor declaration] : NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block ;
    public Constructor constructor() throws RecognitionException {
        Constructor declaration = null;


        Token NEW119=null;
        DelegatedConstructor dc =null;

        Identifier typeNameDeclaration120 =null;

        ParameterList parameters121 =null;

        Block block122 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:824:5: ( NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block )
            // /home/david/git/ceylon-spec/Ceylon.g:824:7: NEW typeNameDeclaration ( parameters )? (dc= delegatedConstructor )? block
            {
            NEW119=(Token)match(input,NEW,FOLLOW_NEW_in_constructor5420); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new Constructor(NEW119); }

            pushFollow(FOLLOW_typeNameDeclaration_in_constructor5436);
            typeNameDeclaration120=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(typeNameDeclaration120); }

            // /home/david/git/ceylon-spec/Ceylon.g:828:7: ( parameters )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LPAREN) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:829:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_constructor5462);
                    parameters121=parameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setParameterList(parameters121); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:832:7: (dc= delegatedConstructor )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==EXTENDS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:833:9: dc= delegatedConstructor
                    {
                    pushFollow(FOLLOW_delegatedConstructor_in_constructor5503);
                    dc=delegatedConstructor();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setDelegatedConstructor(dc); }

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_constructor5530);
            block122=block();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setBlock(block122); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "constructor"



    // $ANTLR start "delegatedConstructor"
    // /home/david/git/ceylon-spec/Ceylon.g:840:1: delegatedConstructor returns [DelegatedConstructor delegatedConstructor] : EXTENDS (ci= classInstantiation ) ;
    public DelegatedConstructor delegatedConstructor() throws RecognitionException {
        DelegatedConstructor delegatedConstructor = null;


        Token EXTENDS123=null;
        CeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:841:5: ( EXTENDS (ci= classInstantiation ) )
            // /home/david/git/ceylon-spec/Ceylon.g:841:7: EXTENDS (ci= classInstantiation )
            {
            EXTENDS123=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_delegatedConstructor5559); if (state.failed) return delegatedConstructor;

            if ( state.backtracking==0 ) { delegatedConstructor = new DelegatedConstructor(EXTENDS123); }

            // /home/david/git/ceylon-spec/Ceylon.g:843:7: (ci= classInstantiation )
            // /home/david/git/ceylon-spec/Ceylon.g:844:9: ci= classInstantiation
            {
            pushFollow(FOLLOW_classInstantiation_in_delegatedConstructor5587);
            ci=classInstantiation();

            state._fsp--;
            if (state.failed) return delegatedConstructor;

            if ( state.backtracking==0 ) { delegatedConstructor.setType((ci!=null?ci.type:null));
                      delegatedConstructor.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return delegatedConstructor;
    }
    // $ANTLR end "delegatedConstructor"



    // $ANTLR start "aliasDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:850:1: aliasDeclaration returns [TypeAliasDeclaration declaration] : ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON ;
    public TypeAliasDeclaration aliasDeclaration() throws RecognitionException {
        TypeAliasDeclaration declaration = null;


        Token ALIAS124=null;
        Token SEMICOLON129=null;
        Identifier typeNameDeclaration125 =null;

        TypeParameterList typeParameters126 =null;

        TypeConstraintList typeConstraints127 =null;

        TypeSpecifier typeSpecifier128 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:851:5: ( ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:851:7: ALIAS typeNameDeclaration ( typeParameters )? ( typeConstraints )? ( typeSpecifier )? SEMICOLON
            {
            ALIAS124=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_aliasDeclaration5626); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new TypeAliasDeclaration(ALIAS124);}

            pushFollow(FOLLOW_typeNameDeclaration_in_aliasDeclaration5642);
            typeNameDeclaration125=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(typeNameDeclaration125); }

            // /home/david/git/ceylon-spec/Ceylon.g:855:7: ( typeParameters )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==SMALLER_OP) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:856:9: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_aliasDeclaration5669);
                    typeParameters126=typeParameters();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeParameterList(typeParameters126); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:859:7: ( typeConstraints )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COMPILER_ANNOTATION||LA72_0==TYPE_CONSTRAINT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:860:9: typeConstraints
                    {
                    pushFollow(FOLLOW_typeConstraints_in_aliasDeclaration5707);
                    typeConstraints127=typeConstraints();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeConstraintList(typeConstraints127); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:863:7: ( typeSpecifier )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==COMPUTE||LA73_0==SPECIFY) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:864:9: typeSpecifier
                    {
                    pushFollow(FOLLOW_typeSpecifier_in_aliasDeclaration5744);
                    typeSpecifier128=typeSpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setTypeSpecifier(typeSpecifier128); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON129=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aliasDeclaration5779); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON129); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "aliasDeclaration"



    // $ANTLR start "assertion"
    // /home/david/git/ceylon-spec/Ceylon.g:873:1: assertion returns [Assertion assertion] : annotations ASSERT conditions SEMICOLON ;
    public Assertion assertion() throws RecognitionException {
        Assertion assertion = null;


        Token ASSERT130=null;
        Token SEMICOLON133=null;
        AnnotationList annotations131 =null;

        ConditionList conditions132 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:874:5: ( annotations ASSERT conditions SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:874:7: annotations ASSERT conditions SEMICOLON
            {
            pushFollow(FOLLOW_annotations_in_assertion5808);
            annotations131=annotations();

            state._fsp--;
            if (state.failed) return assertion;

            ASSERT130=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assertion5816); if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion = new Assertion(ASSERT130); 
                    assertion.setAnnotationList(annotations131); }

            pushFollow(FOLLOW_conditions_in_assertion5832);
            conditions132=conditions();

            state._fsp--;
            if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion.setConditionList(conditions132); }

            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON133=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_assertion5856); if (state.failed) return assertion;

            if ( state.backtracking==0 ) { assertion.setEndToken(SEMICOLON133); 
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return assertion;
    }
    // $ANTLR end "assertion"



    // $ANTLR start "block"
    // /home/david/git/ceylon-spec/Ceylon.g:886:1: block returns [Block block] : LBRACE ( declarationOrStatement )* RBRACE ;
    public Block block() throws RecognitionException {
        Block block = null;


        Token LBRACE134=null;
        Token RBRACE136=null;
        Statement declarationOrStatement135 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:887:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:887:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE134=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_block5885); if (state.failed) return block;

            if ( state.backtracking==0 ) { block = new Block(LBRACE134); }

            // /home/david/git/ceylon-spec/Ceylon.g:889:7: ( declarationOrStatement )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==ALIAS||(LA74_0 >= ASSERT && LA74_0 <= ASSIGN)||(LA74_0 >= BACKTICK && LA74_0 <= BREAK)||(LA74_0 >= CHAR_LITERAL && LA74_0 <= CLASS_DEFINITION)||LA74_0==COMPILER_ANNOTATION||LA74_0==CONTINUE||(LA74_0 >= DECREMENT_OP && LA74_0 <= DIFFERENCE_OP)||LA74_0==DYNAMIC||(LA74_0 >= FLOAT_LITERAL && LA74_0 <= FUNCTION_MODIFIER)||(LA74_0 >= IF_CLAUSE && LA74_0 <= INTERFACE_DEFINITION)||LA74_0==IN_OP||(LA74_0 >= LBRACE && LA74_0 <= LIDENTIFIER)||LA74_0==LPAREN||LA74_0==MODULE||(LA74_0 >= NATURAL_LITERAL && LA74_0 <= NEW)||(LA74_0 >= NOT_OP && LA74_0 <= OBJECT_DEFINITION)||(LA74_0 >= OUT && LA74_0 <= PACKAGE)||LA74_0==PRODUCT_OP||LA74_0==RETURN||(LA74_0 >= SEMICOLON && LA74_0 <= SMALLER_OP)||LA74_0==STRING_LITERAL||LA74_0==STRING_START||(LA74_0 >= SUM_OP && LA74_0 <= SWITCH_CLAUSE)||(LA74_0 >= THIS && LA74_0 <= UIDENTIFIER)||(LA74_0 >= VALUE_MODIFIER && LA74_0 <= WHILE_CLAUSE)) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:890:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_block5912);
            	    declarationOrStatement135=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return block;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement135!=null)
            	                  block.addStatement(declarationOrStatement135); }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            RBRACE136=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_block5939); if (state.failed) return block;

            if ( state.backtracking==0 ) { block.setEndToken(RBRACE136); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "block"



    // $ANTLR start "interfaceBody"
    // /home/david/git/ceylon-spec/Ceylon.g:902:1: interfaceBody returns [InterfaceBody interfaceBody] : LBRACE ( declarationOrStatement )* RBRACE ;
    public InterfaceBody interfaceBody() throws RecognitionException {
        InterfaceBody interfaceBody = null;


        Token LBRACE137=null;
        Token RBRACE139=null;
        Statement declarationOrStatement138 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:903:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:903:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE137=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_interfaceBody5972); if (state.failed) return interfaceBody;

            if ( state.backtracking==0 ) { interfaceBody = new InterfaceBody(LBRACE137); }

            // /home/david/git/ceylon-spec/Ceylon.g:905:7: ( declarationOrStatement )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==ALIAS||(LA75_0 >= ASSERT && LA75_0 <= ASSIGN)||(LA75_0 >= BACKTICK && LA75_0 <= BREAK)||(LA75_0 >= CHAR_LITERAL && LA75_0 <= CLASS_DEFINITION)||LA75_0==COMPILER_ANNOTATION||LA75_0==CONTINUE||(LA75_0 >= DECREMENT_OP && LA75_0 <= DIFFERENCE_OP)||LA75_0==DYNAMIC||(LA75_0 >= FLOAT_LITERAL && LA75_0 <= FUNCTION_MODIFIER)||(LA75_0 >= IF_CLAUSE && LA75_0 <= INTERFACE_DEFINITION)||LA75_0==IN_OP||(LA75_0 >= LBRACE && LA75_0 <= LIDENTIFIER)||LA75_0==LPAREN||LA75_0==MODULE||(LA75_0 >= NATURAL_LITERAL && LA75_0 <= NEW)||(LA75_0 >= NOT_OP && LA75_0 <= OBJECT_DEFINITION)||(LA75_0 >= OUT && LA75_0 <= PACKAGE)||LA75_0==PRODUCT_OP||LA75_0==RETURN||(LA75_0 >= SEMICOLON && LA75_0 <= SMALLER_OP)||LA75_0==STRING_LITERAL||LA75_0==STRING_START||(LA75_0 >= SUM_OP && LA75_0 <= SWITCH_CLAUSE)||(LA75_0 >= THIS && LA75_0 <= UIDENTIFIER)||(LA75_0 >= VALUE_MODIFIER && LA75_0 <= WHILE_CLAUSE)) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:906:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_interfaceBody5999);
            	    declarationOrStatement138=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return interfaceBody;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement138!=null)
            	                  interfaceBody.addStatement(declarationOrStatement138); }

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            RBRACE139=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_interfaceBody6026); if (state.failed) return interfaceBody;

            if ( state.backtracking==0 ) { interfaceBody.setEndToken(RBRACE139); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return interfaceBody;
    }
    // $ANTLR end "interfaceBody"



    // $ANTLR start "classBody"
    // /home/david/git/ceylon-spec/Ceylon.g:914:1: classBody returns [ClassBody classBody] : LBRACE ( declarationOrStatement )* RBRACE ;
    public ClassBody classBody() throws RecognitionException {
        ClassBody classBody = null;


        Token LBRACE140=null;
        Token RBRACE142=null;
        Statement declarationOrStatement141 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:915:5: ( LBRACE ( declarationOrStatement )* RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:915:7: LBRACE ( declarationOrStatement )* RBRACE
            {
            LBRACE140=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_classBody6055); if (state.failed) return classBody;

            if ( state.backtracking==0 ) { classBody = new ClassBody(LBRACE140); }

            // /home/david/git/ceylon-spec/Ceylon.g:917:7: ( declarationOrStatement )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==ALIAS||(LA76_0 >= ASSERT && LA76_0 <= ASSIGN)||(LA76_0 >= BACKTICK && LA76_0 <= BREAK)||(LA76_0 >= CHAR_LITERAL && LA76_0 <= CLASS_DEFINITION)||LA76_0==COMPILER_ANNOTATION||LA76_0==CONTINUE||(LA76_0 >= DECREMENT_OP && LA76_0 <= DIFFERENCE_OP)||LA76_0==DYNAMIC||(LA76_0 >= FLOAT_LITERAL && LA76_0 <= FUNCTION_MODIFIER)||(LA76_0 >= IF_CLAUSE && LA76_0 <= INTERFACE_DEFINITION)||LA76_0==IN_OP||(LA76_0 >= LBRACE && LA76_0 <= LIDENTIFIER)||LA76_0==LPAREN||LA76_0==MODULE||(LA76_0 >= NATURAL_LITERAL && LA76_0 <= NEW)||(LA76_0 >= NOT_OP && LA76_0 <= OBJECT_DEFINITION)||(LA76_0 >= OUT && LA76_0 <= PACKAGE)||LA76_0==PRODUCT_OP||LA76_0==RETURN||(LA76_0 >= SEMICOLON && LA76_0 <= SMALLER_OP)||LA76_0==STRING_LITERAL||LA76_0==STRING_START||(LA76_0 >= SUM_OP && LA76_0 <= SWITCH_CLAUSE)||(LA76_0 >= THIS && LA76_0 <= UIDENTIFIER)||(LA76_0 >= VALUE_MODIFIER && LA76_0 <= WHILE_CLAUSE)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:918:9: declarationOrStatement
            	    {
            	    pushFollow(FOLLOW_declarationOrStatement_in_classBody6081);
            	    declarationOrStatement141=declarationOrStatement();

            	    state._fsp--;
            	    if (state.failed) return classBody;

            	    if ( state.backtracking==0 ) { if (declarationOrStatement141!=null)
            	                  classBody.addStatement(declarationOrStatement141); }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            RBRACE142=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_classBody6108); if (state.failed) return classBody;

            if ( state.backtracking==0 ) { classBody.setEndToken(RBRACE142); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return classBody;
    }
    // $ANTLR end "classBody"



    // $ANTLR start "extendedType"
    // /home/david/git/ceylon-spec/Ceylon.g:926:1: extendedType returns [ExtendedType extendedType] : EXTENDS (ci= classInstantiation )? ;
    public ExtendedType extendedType() throws RecognitionException {
        ExtendedType extendedType = null;


        Token EXTENDS143=null;
        CeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:927:5: ( EXTENDS (ci= classInstantiation )? )
            // /home/david/git/ceylon-spec/Ceylon.g:927:7: EXTENDS (ci= classInstantiation )?
            {
            EXTENDS143=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_extendedType6137); if (state.failed) return extendedType;

            if ( state.backtracking==0 ) { extendedType = new ExtendedType(EXTENDS143); }

            // /home/david/git/ceylon-spec/Ceylon.g:928:7: (ci= classInstantiation )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==SUPER||LA77_0==UIDENTIFIER) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:929:9: ci= classInstantiation
                    {
                    pushFollow(FOLLOW_classInstantiation_in_extendedType6161);
                    ci=classInstantiation();

                    state._fsp--;
                    if (state.failed) return extendedType;

                    if ( state.backtracking==0 ) { extendedType.setType((ci!=null?ci.type:null));
                              extendedType.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return extendedType;
    }
    // $ANTLR end "extendedType"



    // $ANTLR start "classSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:935:1: classSpecifier returns [ClassSpecifier classSpecifier] : ( COMPUTE | SPECIFY ) (ci= classInstantiation )? ;
    public ClassSpecifier classSpecifier() throws RecognitionException {
        ClassSpecifier classSpecifier = null;


        Token COMPUTE144=null;
        Token SPECIFY145=null;
        CeylonParser.classInstantiation_return ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:936:5: ( ( COMPUTE | SPECIFY ) (ci= classInstantiation )? )
            // /home/david/git/ceylon-spec/Ceylon.g:936:7: ( COMPUTE | SPECIFY ) (ci= classInstantiation )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:936:7: ( COMPUTE | SPECIFY )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==COMPUTE) ) {
                alt78=1;
            }
            else if ( (LA78_0==SPECIFY) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return classSpecifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:937:9: COMPUTE
                    {
                    COMPUTE144=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_classSpecifier6211); if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier = new ClassSpecifier(COMPUTE144); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:940:9: SPECIFY
                    {
                    SPECIFY145=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_classSpecifier6240); if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier = new ClassSpecifier(SPECIFY145); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:943:7: (ci= classInstantiation )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==SUPER||LA79_0==UIDENTIFIER) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:944:9: ci= classInstantiation
                    {
                    pushFollow(FOLLOW_classInstantiation_in_classSpecifier6279);
                    ci=classInstantiation();

                    state._fsp--;
                    if (state.failed) return classSpecifier;

                    if ( state.backtracking==0 ) { classSpecifier.setType((ci!=null?ci.type:null));
                              classSpecifier.setInvocationExpression((ci!=null?ci.invocationExpression:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return classSpecifier;
    }
    // $ANTLR end "classSpecifier"


    public static class classInstantiation_return extends ParserRuleReturnScope {
        public SimpleType type;
        public InvocationExpression invocationExpression;
    };


    // $ANTLR start "classInstantiation"
    // /home/david/git/ceylon-spec/Ceylon.g:950:1: classInstantiation returns [SimpleType type, InvocationExpression invocationExpression] : (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )? ;
    public CeylonParser.classInstantiation_return classInstantiation() throws RecognitionException {
        CeylonParser.classInstantiation_return retval = new CeylonParser.classInstantiation_return();
        retval.start = input.LT(1);


        Token SUPER146=null;
        CeylonParser.typeNameWithArguments_return t1 =null;

        CeylonParser.typeNameWithArguments_return t3 =null;

        CeylonParser.typeNameWithArguments_return t2 =null;

        PositionalArgumentList positionalArguments147 =null;


         Primary p=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:952:5: ( (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:952:7: (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments ) ( positionalArguments )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:952:7: (t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )? | SUPER MEMBER_OP t2= typeNameWithArguments )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==UIDENTIFIER) ) {
                alt81=1;
            }
            else if ( (LA81_0==SUPER) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:953:9: t1= typeNameWithArguments ( MEMBER_OP t3= typeNameWithArguments )?
                    {
                    pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6340);
                    t1=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { BaseType bt = new BaseType(null);
                              bt.setIdentifier((t1!=null?t1.identifier:null));
                              if ((t1!=null?t1.typeArgumentList:null)!=null)
                                  bt.setTypeArgumentList((t1!=null?t1.typeArgumentList:null));
                              retval.type =bt; 
                              ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                              ete.setExtendedType(retval.type); 
                              p = ete; }

                    // /home/david/git/ceylon-spec/Ceylon.g:962:9: ( MEMBER_OP t3= typeNameWithArguments )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==MEMBER_OP) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:963:11: MEMBER_OP t3= typeNameWithArguments
                            {
                            match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_classInstantiation6372); if (state.failed) return retval;

                            pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6386);
                            t3=typeNameWithArguments();

                            state._fsp--;
                            if (state.failed) return retval;

                            if ( state.backtracking==0 ) { QualifiedType qt=new QualifiedType(null);
                                      qt.setOuterType(retval.type);
                                      qt.setIdentifier((t3!=null?t3.identifier:null));
                                      if ((t3!=null?t3.typeArgumentList:null)!=null)
                                          qt.setTypeArgumentList((t3!=null?t3.typeArgumentList:null));
                                      retval.type =qt;
                                      ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                                      ete.setExtendedType(retval.type); 
                                      p = ete; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:975:9: SUPER MEMBER_OP t2= typeNameWithArguments
                    {
                    SUPER146=(Token)match(input,SUPER,FOLLOW_SUPER_in_classInstantiation6419); if (state.failed) return retval;

                    match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_classInstantiation6421); if (state.failed) return retval;

                    pushFollow(FOLLOW_typeNameWithArguments_in_classInstantiation6434);
                    t2=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { QualifiedType qt=new QualifiedType(null);
                              SuperType st = new SuperType(SUPER146);
                              qt.setOuterType(st);
                              qt.setIdentifier((t2!=null?t2.identifier:null));
                              if ((t2!=null?t2.typeArgumentList:null)!=null)
                                  qt.setTypeArgumentList((t2!=null?t2.typeArgumentList:null));
                              retval.type =qt;
                              ExtendedTypeExpression ete = new ExtendedTypeExpression(null);
                              ete.setExtendedType(retval.type); 
                              p = ete; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:988:7: ( positionalArguments )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==LPAREN) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:989:9: positionalArguments
                    {
                    pushFollow(FOLLOW_positionalArguments_in_classInstantiation6471);
                    positionalArguments147=positionalArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
                              ie.setPrimary(p);
                              ie.setPositionalArgumentList(positionalArguments147);
                              retval.invocationExpression =ie; 
                              p = ie; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classInstantiation"



    // $ANTLR start "satisfiedTypes"
    // /home/david/git/ceylon-spec/Ceylon.g:1005:1: satisfiedTypes returns [SatisfiedTypes satisfiedTypes] : SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )* ;
    public SatisfiedTypes satisfiedTypes() throws RecognitionException {
        SatisfiedTypes satisfiedTypes = null;


        Token i=null;
        Token SATISFIES148=null;
        StaticType t1 =null;

        StaticType t2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1006:5: ( SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1006:7: SATISFIES (t1= abbreviatedType ) ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )*
            {
            SATISFIES148=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiedTypes6521); if (state.failed) return satisfiedTypes;

            if ( state.backtracking==0 ) { satisfiedTypes = new SatisfiedTypes(SATISFIES148); }

            // /home/david/git/ceylon-spec/Ceylon.g:1008:7: (t1= abbreviatedType )
            // /home/david/git/ceylon-spec/Ceylon.g:1009:9: t1= abbreviatedType
            {
            pushFollow(FOLLOW_abbreviatedType_in_satisfiedTypes6551);
            t1=abbreviatedType();

            state._fsp--;
            if (state.failed) return satisfiedTypes;

            if ( state.backtracking==0 ) { if (t1!=null) satisfiedTypes.addType(t1); }

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1012:7: ( (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType ) )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA||LA84_0==INTERSECTION_OP||LA84_0==UNION_OP) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1013:9: (i= INTERSECTION_OP | COMMA | UNION_OP ) (t2= abbreviatedType )
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1013:9: (i= INTERSECTION_OP | COMMA | UNION_OP )
            	    int alt83=3;
            	    switch ( input.LA(1) ) {
            	    case INTERSECTION_OP:
            	        {
            	        alt83=1;
            	        }
            	        break;
            	    case COMMA:
            	        {
            	        alt83=2;
            	        }
            	        break;
            	    case UNION_OP:
            	        {
            	        alt83=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return satisfiedTypes;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 83, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt83) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1014:11: i= INTERSECTION_OP
            	            {
            	            i=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_satisfiedTypes6603); if (state.failed) return satisfiedTypes;

            	            if ( state.backtracking==0 ) { satisfiedTypes.setEndToken(i); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1017:11: COMMA
            	            {
            	            match(input,COMMA,FOLLOW_COMMA_in_satisfiedTypes6638); if (state.failed) return satisfiedTypes;

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1017:17: UNION_OP
            	            {
            	            match(input,UNION_OP,FOLLOW_UNION_OP_in_satisfiedTypes6640); if (state.failed) return satisfiedTypes;

            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(INTERSECTION_OP, input)); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1021:9: (t2= abbreviatedType )
            	    // /home/david/git/ceylon-spec/Ceylon.g:1022:11: t2= abbreviatedType
            	    {
            	    pushFollow(FOLLOW_abbreviatedType_in_satisfiedTypes6686);
            	    t2=abbreviatedType();

            	    state._fsp--;
            	    if (state.failed) return satisfiedTypes;

            	    if ( state.backtracking==0 ) { if (t2!=null) {
            	                    satisfiedTypes.addType(t2); 
            	                    satisfiedTypes.setEndToken(null); } }

            	    }


            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return satisfiedTypes;
    }
    // $ANTLR end "satisfiedTypes"



    // $ANTLR start "caseTypes"
    // /home/david/git/ceylon-spec/Ceylon.g:1030:1: caseTypes returns [CaseTypes caseTypes] : CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )* ;
    public CaseTypes caseTypes() throws RecognitionException {
        CaseTypes caseTypes = null;


        Token u=null;
        Token CASE_TYPES149=null;
        CeylonParser.caseType_return ct1 =null;

        CeylonParser.caseType_return ct2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1031:5: ( CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1031:7: CASE_TYPES ct1= caseType ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )*
            {
            CASE_TYPES149=(Token)match(input,CASE_TYPES,FOLLOW_CASE_TYPES_in_caseTypes6738); if (state.failed) return caseTypes;

            if ( state.backtracking==0 ) { caseTypes = new CaseTypes(CASE_TYPES149); }

            pushFollow(FOLLOW_caseType_in_caseTypes6756);
            ct1=caseType();

            state._fsp--;
            if (state.failed) return caseTypes;

            if ( state.backtracking==0 ) { if ((ct1!=null?ct1.type:null)!=null) caseTypes.addType((ct1!=null?ct1.type:null)); 
                    if ((ct1!=null?ct1.instance:null)!=null) caseTypes.addBaseMemberExpression((ct1!=null?ct1.instance:null)); }

            // /home/david/git/ceylon-spec/Ceylon.g:1036:7: ( (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType ) )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA||LA86_0==INTERSECTION_OP||LA86_0==UNION_OP) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1037:9: (u= UNION_OP | COMMA | INTERSECTION_OP ) (ct2= caseType )
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1037:9: (u= UNION_OP | COMMA | INTERSECTION_OP )
            	    int alt85=3;
            	    switch ( input.LA(1) ) {
            	    case UNION_OP:
            	        {
            	        alt85=1;
            	        }
            	        break;
            	    case COMMA:
            	        {
            	        alt85=2;
            	        }
            	        break;
            	    case INTERSECTION_OP:
            	        {
            	        alt85=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return caseTypes;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 85, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt85) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1038:11: u= UNION_OP
            	            {
            	            u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_caseTypes6798); if (state.failed) return caseTypes;

            	            if ( state.backtracking==0 ) { caseTypes.setEndToken(u); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1041:11: COMMA
            	            {
            	            match(input,COMMA,FOLLOW_COMMA_in_caseTypes6834); if (state.failed) return caseTypes;

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1041:17: INTERSECTION_OP
            	            {
            	            match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_caseTypes6836); if (state.failed) return caseTypes;

            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(UNION_OP, input)); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1045:9: (ct2= caseType )
            	    // /home/david/git/ceylon-spec/Ceylon.g:1046:11: ct2= caseType
            	    {
            	    pushFollow(FOLLOW_caseType_in_caseTypes6882);
            	    ct2=caseType();

            	    state._fsp--;
            	    if (state.failed) return caseTypes;

            	    if ( state.backtracking==0 ) { if ((ct2!=null?ct2.type:null)!=null) caseTypes.addType((ct2!=null?ct2.type:null)); 
            	                if ((ct2!=null?ct2.instance:null)!=null) caseTypes.addBaseMemberExpression((ct2!=null?ct2.instance:null)); 
            	                if ((ct2!=null?ct2.type:null)!=null||(ct2!=null?ct2.instance:null)!=null) caseTypes.setEndToken(null); }

            	    }


            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return caseTypes;
    }
    // $ANTLR end "caseTypes"


    public static class caseType_return extends ParserRuleReturnScope {
        public StaticType type;
        public BaseMemberExpression instance;
    };


    // $ANTLR start "caseType"
    // /home/david/git/ceylon-spec/Ceylon.g:1054:1: caseType returns [StaticType type, BaseMemberExpression instance] : (t= abbreviatedType | memberName );
    public CeylonParser.caseType_return caseType() throws RecognitionException {
        CeylonParser.caseType_return retval = new CeylonParser.caseType_return();
        retval.start = input.LT(1);


        StaticType t =null;

        Identifier memberName150 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1055:5: (t= abbreviatedType | memberName )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0 >= LBRACE && LA87_0 <= LBRACKET)||LA87_0==SMALLER_OP||LA87_0==UIDENTIFIER) ) {
                alt87=1;
            }
            else if ( (LA87_0==LIDENTIFIER) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1055:7: t= abbreviatedType
                    {
                    pushFollow(FOLLOW_abbreviatedType_in_caseType6936);
                    t=abbreviatedType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.type =t;}

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1057:7: memberName
                    {
                    pushFollow(FOLLOW_memberName_in_caseType6953);
                    memberName150=memberName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.instance = new BaseMemberExpression(null);
                            retval.instance.setIdentifier(memberName150);
                            retval.instance.setTypeArguments( new InferredTypeArguments(null) ); }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "caseType"



    // $ANTLR start "abstractedType"
    // /home/david/git/ceylon-spec/Ceylon.g:1065:1: abstractedType returns [AbstractedType abstractedType] : ABSTRACTED_TYPE abbreviatedType ;
    public AbstractedType abstractedType() throws RecognitionException {
        AbstractedType abstractedType = null;


        Token ABSTRACTED_TYPE151=null;
        StaticType abbreviatedType152 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1066:5: ( ABSTRACTED_TYPE abbreviatedType )
            // /home/david/git/ceylon-spec/Ceylon.g:1066:7: ABSTRACTED_TYPE abbreviatedType
            {
            ABSTRACTED_TYPE151=(Token)match(input,ABSTRACTED_TYPE,FOLLOW_ABSTRACTED_TYPE_in_abstractedType6988); if (state.failed) return abstractedType;

            if ( state.backtracking==0 ) { abstractedType = new AbstractedType(ABSTRACTED_TYPE151); }

            pushFollow(FOLLOW_abbreviatedType_in_abstractedType7004);
            abbreviatedType152=abbreviatedType();

            state._fsp--;
            if (state.failed) return abstractedType;

            if ( state.backtracking==0 ) { abstractedType.setType(abbreviatedType152); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return abstractedType;
    }
    // $ANTLR end "abstractedType"



    // $ANTLR start "parameters"
    // /home/david/git/ceylon-spec/Ceylon.g:1072:1: parameters returns [ParameterList parameterList] : LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN ;
    public ParameterList parameters() throws RecognitionException {
        ParameterList parameterList = null;


        Token c=null;
        Token LPAREN153=null;
        Token RPAREN154=null;
        Parameter ap1 =null;

        Parameter ap2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1073:5: ( LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:1073:7: LPAREN (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )? RPAREN
            {
            LPAREN153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameters7033); if (state.failed) return parameterList;

            if ( state.backtracking==0 ) { parameterList =new ParameterList(LPAREN153); }

            // /home/david/git/ceylon-spec/Ceylon.g:1075:7: (ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )* )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==ALIAS||(LA90_0 >= ASSERT && LA90_0 <= ASSIGN)||(LA90_0 >= BACKTICK && LA90_0 <= BREAK)||(LA90_0 >= CHAR_LITERAL && LA90_0 <= CLASS_DEFINITION)||LA90_0==COMPILER_ANNOTATION||LA90_0==CONTINUE||(LA90_0 >= DECREMENT_OP && LA90_0 <= DIFFERENCE_OP)||LA90_0==DYNAMIC||(LA90_0 >= FLOAT_LITERAL && LA90_0 <= FUNCTION_MODIFIER)||(LA90_0 >= IF_CLAUSE && LA90_0 <= INTERFACE_DEFINITION)||LA90_0==IN_OP||(LA90_0 >= LBRACE && LA90_0 <= LIDENTIFIER)||LA90_0==LPAREN||LA90_0==MODULE||(LA90_0 >= NATURAL_LITERAL && LA90_0 <= NEW)||(LA90_0 >= NOT_OP && LA90_0 <= OBJECT_DEFINITION)||(LA90_0 >= OUT && LA90_0 <= PACKAGE)||LA90_0==PRODUCT_OP||LA90_0==RETURN||(LA90_0 >= SEMICOLON && LA90_0 <= SMALLER_OP)||LA90_0==STRING_LITERAL||LA90_0==STRING_START||(LA90_0 >= SUM_OP && LA90_0 <= SWITCH_CLAUSE)||(LA90_0 >= THIS && LA90_0 <= UIDENTIFIER)||(LA90_0 >= VALUE_MODIFIER && LA90_0 <= WHILE_CLAUSE)) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1076:9: ap1= parameterDeclarationOrRef (c= COMMA (ap2= parameterDeclarationOrRef |) )*
                    {
                    pushFollow(FOLLOW_parameterDeclarationOrRef_in_parameters7061);
                    ap1=parameterDeclarationOrRef();

                    state._fsp--;
                    if (state.failed) return parameterList;

                    if ( state.backtracking==0 ) { if (ap1!=null)
                                  parameterList.addParameter(ap1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:1079:9: (c= COMMA (ap2= parameterDeclarationOrRef |) )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==COMMA) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1080:11: c= COMMA (ap2= parameterDeclarationOrRef |)
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters7096); if (state.failed) return parameterList;

                    	    if ( state.backtracking==0 ) { parameterList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:1082:11: (ap2= parameterDeclarationOrRef |)
                    	    int alt88=2;
                    	    int LA88_0 = input.LA(1);

                    	    if ( (LA88_0==ALIAS||(LA88_0 >= ASSERT && LA88_0 <= ASSIGN)||(LA88_0 >= BACKTICK && LA88_0 <= BREAK)||(LA88_0 >= CHAR_LITERAL && LA88_0 <= CLASS_DEFINITION)||LA88_0==COMPILER_ANNOTATION||LA88_0==CONTINUE||(LA88_0 >= DECREMENT_OP && LA88_0 <= DIFFERENCE_OP)||LA88_0==DYNAMIC||(LA88_0 >= FLOAT_LITERAL && LA88_0 <= FUNCTION_MODIFIER)||(LA88_0 >= IF_CLAUSE && LA88_0 <= INTERFACE_DEFINITION)||LA88_0==IN_OP||(LA88_0 >= LBRACE && LA88_0 <= LIDENTIFIER)||LA88_0==LPAREN||LA88_0==MODULE||(LA88_0 >= NATURAL_LITERAL && LA88_0 <= NEW)||(LA88_0 >= NOT_OP && LA88_0 <= OBJECT_DEFINITION)||(LA88_0 >= OUT && LA88_0 <= PACKAGE)||LA88_0==PRODUCT_OP||LA88_0==RETURN||(LA88_0 >= SEMICOLON && LA88_0 <= SMALLER_OP)||LA88_0==STRING_LITERAL||LA88_0==STRING_START||(LA88_0 >= SUM_OP && LA88_0 <= SWITCH_CLAUSE)||(LA88_0 >= THIS && LA88_0 <= UIDENTIFIER)||(LA88_0 >= VALUE_MODIFIER && LA88_0 <= WHILE_CLAUSE)) ) {
                    	        alt88=1;
                    	    }
                    	    else if ( (LA88_0==COMMA||LA88_0==RPAREN) ) {
                    	        alt88=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return parameterList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 88, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt88) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1083:13: ap2= parameterDeclarationOrRef
                    	            {
                    	            pushFollow(FOLLOW_parameterDeclarationOrRef_in_parameters7136);
                    	            ap2=parameterDeclarationOrRef();

                    	            state._fsp--;
                    	            if (state.failed) return parameterList;

                    	            if ( state.backtracking==0 ) { if (ap2!=null) {
                    	                              parameterList.addParameter(ap2); 
                    	                              parameterList.setEndToken(null); } }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1088:13: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(),
                    	                            new MismatchedTokenException(UIDENTIFIER, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameters7216); if (state.failed) return parameterList;

            if ( state.backtracking==0 ) { parameterList.setEndToken(RPAREN154); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameterList;
    }
    // $ANTLR end "parameters"



    // $ANTLR start "parameter"
    // /home/david/git/ceylon-spec/Ceylon.g:1097:1: parameter returns [ParameterDeclaration parameter] : compilerAnnotations annotations parameterDeclaration ;
    public ParameterDeclaration parameter() throws RecognitionException {
        ParameterDeclaration parameter = null;


        TypedDeclaration parameterDeclaration155 =null;

        List<CompilerAnnotation> compilerAnnotations156 =null;

        AnnotationList annotations157 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1098:5: ( compilerAnnotations annotations parameterDeclaration )
            // /home/david/git/ceylon-spec/Ceylon.g:1098:7: compilerAnnotations annotations parameterDeclaration
            {
            pushFollow(FOLLOW_compilerAnnotations_in_parameter7245);
            compilerAnnotations156=compilerAnnotations();

            state._fsp--;
            if (state.failed) return parameter;

            pushFollow(FOLLOW_annotations_in_parameter7253);
            annotations157=annotations();

            state._fsp--;
            if (state.failed) return parameter;

            pushFollow(FOLLOW_parameterDeclaration_in_parameter7261);
            parameterDeclaration155=parameterDeclaration();

            state._fsp--;
            if (state.failed) return parameter;

            if ( state.backtracking==0 ) { TypedDeclaration d = parameterDeclaration155;
                    d.getCompilerAnnotations().addAll(compilerAnnotations156);
                    d.setAnnotationList(annotations157);
                    if (d instanceof AttributeDeclaration) {
                        ValueParameterDeclaration vp = new ValueParameterDeclaration(null);
                        vp.setTypedDeclaration(d);
                        parameter = vp;
                    }
                    else if (d instanceof MethodDeclaration) {
                        FunctionalParameterDeclaration fp = new FunctionalParameterDeclaration(null);
                        fp.setTypedDeclaration(d);
                        parameter = fp;
                    }
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameter"



    // $ANTLR start "parameterDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:1117:1: parameterDeclaration returns [TypedDeclaration declaration] : ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? ) ;
    public TypedDeclaration parameterDeclaration() throws RecognitionException {
        TypedDeclaration declaration = null;


        Token VOID_MODIFIER159=null;
        Token FUNCTION_MODIFIER160=null;
        Token DYNAMIC161=null;
        Token VALUE_MODIFIER162=null;
        Type variadicType158 =null;

        Identifier memberName163 =null;

        SpecifierExpression specifier164 =null;

        ParameterList parameters165 =null;

        SpecifierExpression functionSpecifier166 =null;


         AttributeDeclaration a = new AttributeDeclaration(null); 
                    MethodDeclaration m = new MethodDeclaration(null);
                    declaration = a; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1121:5: ( ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1121:7: ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER ) memberName ( ( specifier )? | ( parameters )+ ( functionSpecifier )? )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1121:7: ( variadicType | VOID_MODIFIER | FUNCTION_MODIFIER | DYNAMIC | VALUE_MODIFIER )
            int alt91=5;
            switch ( input.LA(1) ) {
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt91=1;
                }
                break;
            case VOID_MODIFIER:
                {
                alt91=2;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt91=3;
                }
                break;
            case DYNAMIC:
                {
                alt91=4;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt91=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1122:9: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_parameterDeclaration7314);
                    variadicType158=variadicType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(variadicType158);
                              m.setType(variadicType158); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1125:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER159=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_parameterDeclaration7334); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { m.setType(new VoidModifier(VOID_MODIFIER159));
                              declaration =m; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1128:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER160=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_parameterDeclaration7354); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { m.setType(new FunctionModifier(FUNCTION_MODIFIER160));
                              declaration =m; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1131:9: DYNAMIC
                    {
                    DYNAMIC161=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_parameterDeclaration7374); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(new DynamicModifier(DYNAMIC161));
                              m.setType(new DynamicModifier(DYNAMIC161)); }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1134:9: VALUE_MODIFIER
                    {
                    VALUE_MODIFIER162=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_parameterDeclaration7394); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { a.setType(new ValueModifier(VALUE_MODIFIER162)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberName_in_parameterDeclaration7420);
            memberName163=memberName();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { a.setIdentifier(memberName163);
                    m.setIdentifier(memberName163); }

            // /home/david/git/ceylon-spec/Ceylon.g:1140:7: ( ( specifier )? | ( parameters )+ ( functionSpecifier )? )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==COMMA||LA95_0==RPAREN||LA95_0==SPECIFY) ) {
                alt95=1;
            }
            else if ( (LA95_0==LPAREN) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1141:9: ( specifier )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:1141:9: ( specifier )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==SPECIFY) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1142:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_parameterDeclaration7458);
                            specifier164=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { a.setSpecifierOrInitializerExpression(specifier164); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1146:9: ( parameters )+ ( functionSpecifier )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:1146:9: ( parameters )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( (LA93_0==LPAREN) ) {
                            alt93=1;
                        }


                        switch (alt93) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1147:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_parameterDeclaration7511);
                    	    parameters165=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { m.addParameterList(parameters165);
                    	                declaration =m; }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:1151:9: ( functionSpecifier )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==COMPUTE||LA94_0==SPECIFY) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1152:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_parameterDeclaration7556);
                            functionSpecifier166=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { m.setSpecifierExpression(functionSpecifier166); }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "parameterDeclaration"



    // $ANTLR start "parameterRef"
    // /home/david/git/ceylon-spec/Ceylon.g:1158:1: parameterRef returns [InitializerParameter parameter] : memberName ( specifier )? ;
    public InitializerParameter parameterRef() throws RecognitionException {
        InitializerParameter parameter = null;


        Identifier memberName167 =null;

        SpecifierExpression specifier168 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1159:5: ( memberName ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1159:7: memberName ( specifier )?
            {
            pushFollow(FOLLOW_memberName_in_parameterRef7608);
            memberName167=memberName();

            state._fsp--;
            if (state.failed) return parameter;

            if ( state.backtracking==0 ) { parameter = new InitializerParameter(null);
                    parameter.setIdentifier(memberName167); }

            // /home/david/git/ceylon-spec/Ceylon.g:1162:7: ( specifier )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==SPECIFY) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1163:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_parameterRef7634);
                    specifier168=specifier();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter.setSpecifierExpression(specifier168); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameterRef"



    // $ANTLR start "parameterDeclarationOrRef"
    // /home/david/git/ceylon-spec/Ceylon.g:1168:1: parameterDeclarationOrRef returns [Parameter parameter] : (r= parameterRef |p= parameter );
    public Parameter parameterDeclarationOrRef() throws RecognitionException {
        Parameter parameter = null;


        InitializerParameter r =null;

        ParameterDeclaration p =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1169:5: (r= parameterRef |p= parameter )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==LIDENTIFIER) ) {
                int LA97_1 = input.LA(2);

                if ( (LA97_1==COMMA||LA97_1==RPAREN||LA97_1==SPECIFY) ) {
                    alt97=1;
                }
                else if ( (LA97_1==DYNAMIC||LA97_1==FUNCTION_MODIFIER||(LA97_1 >= LBRACE && LA97_1 <= LBRACKET)||LA97_1==LIDENTIFIER||LA97_1==LPAREN||LA97_1==SMALLER_OP||LA97_1==UIDENTIFIER||LA97_1==VALUE_MODIFIER||LA97_1==VOID_MODIFIER) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return parameter;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA97_0==COMPILER_ANNOTATION||LA97_0==DYNAMIC||LA97_0==FUNCTION_MODIFIER||(LA97_0 >= LBRACE && LA97_0 <= LBRACKET)||LA97_0==SMALLER_OP||LA97_0==STRING_LITERAL||LA97_0==UIDENTIFIER||(LA97_0 >= VALUE_MODIFIER && LA97_0 <= VOID_MODIFIER)) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return parameter;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1170:7: r= parameterRef
                    {
                    pushFollow(FOLLOW_parameterRef_in_parameterDeclarationOrRef7682);
                    r=parameterRef();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter =r; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1173:7: p= parameter
                    {
                    pushFollow(FOLLOW_parameter_in_parameterDeclarationOrRef7707);
                    p=parameter();

                    state._fsp--;
                    if (state.failed) return parameter;

                    if ( state.backtracking==0 ) { parameter =p; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return parameter;
    }
    // $ANTLR end "parameterDeclarationOrRef"



    // $ANTLR start "typeParameters"
    // /home/david/git/ceylon-spec/Ceylon.g:1177:1: typeParameters returns [TypeParameterList typeParameterList] : SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP ;
    public TypeParameterList typeParameters() throws RecognitionException {
        TypeParameterList typeParameterList = null;


        Token c=null;
        Token SMALLER_OP169=null;
        Token LARGER_OP170=null;
        TypeParameterDeclaration tp1 =null;

        TypeParameterDeclaration tp2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1178:5: ( SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:1178:7: SMALLER_OP tp1= typeParameter (c= COMMA (tp2= typeParameter |) )* LARGER_OP
            {
            SMALLER_OP169=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeParameters7736); if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { typeParameterList = new TypeParameterList(SMALLER_OP169); }

            pushFollow(FOLLOW_typeParameter_in_typeParameters7754);
            tp1=typeParameter();

            state._fsp--;
            if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { if (tp1 instanceof TypeParameterDeclaration)
                        typeParameterList.addTypeParameterDeclaration(tp1); }

            // /home/david/git/ceylon-spec/Ceylon.g:1183:7: (c= COMMA (tp2= typeParameter |) )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1184:9: c= COMMA (tp2= typeParameter |)
            	    {
            	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters7782); if (state.failed) return typeParameterList;

            	    if ( state.backtracking==0 ) { typeParameterList.setEndToken(c); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:1186:9: (tp2= typeParameter |)
            	    int alt98=2;
            	    int LA98_0 = input.LA(1);

            	    if ( (LA98_0==ALIAS||(LA98_0 >= ASSERT && LA98_0 <= ASSIGN)||(LA98_0 >= BACKTICK && LA98_0 <= BREAK)||(LA98_0 >= CHAR_LITERAL && LA98_0 <= CLASS_DEFINITION)||LA98_0==COMPILER_ANNOTATION||LA98_0==CONTINUE||(LA98_0 >= DECREMENT_OP && LA98_0 <= DIFFERENCE_OP)||LA98_0==DYNAMIC||(LA98_0 >= FLOAT_LITERAL && LA98_0 <= FUNCTION_MODIFIER)||(LA98_0 >= IF_CLAUSE && LA98_0 <= INTERFACE_DEFINITION)||LA98_0==IN_OP||(LA98_0 >= LBRACE && LA98_0 <= LIDENTIFIER)||LA98_0==LPAREN||LA98_0==MODULE||(LA98_0 >= NATURAL_LITERAL && LA98_0 <= NEW)||(LA98_0 >= NOT_OP && LA98_0 <= OBJECT_DEFINITION)||(LA98_0 >= OUT && LA98_0 <= PACKAGE)||LA98_0==PRODUCT_OP||LA98_0==RETURN||(LA98_0 >= SEMICOLON && LA98_0 <= SMALLER_OP)||LA98_0==STRING_LITERAL||LA98_0==STRING_START||(LA98_0 >= SUM_OP && LA98_0 <= SWITCH_CLAUSE)||(LA98_0 >= THIS && LA98_0 <= UIDENTIFIER)||(LA98_0 >= VALUE_MODIFIER && LA98_0 <= WHILE_CLAUSE)) ) {
            	        alt98=1;
            	    }
            	    else if ( (LA98_0==COMMA||LA98_0==LARGER_OP) ) {
            	        alt98=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return typeParameterList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 98, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt98) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1187:11: tp2= typeParameter
            	            {
            	            pushFollow(FOLLOW_typeParameter_in_typeParameters7816);
            	            tp2=typeParameter();

            	            state._fsp--;
            	            if (state.failed) return typeParameterList;

            	            if ( state.backtracking==0 ) { if (tp2 instanceof TypeParameterDeclaration)
            	                            typeParameterList.addTypeParameterDeclaration(tp2);
            	                        typeParameterList.setEndToken(null); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1191:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(UIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            LARGER_OP170=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeParameters7867); if (state.failed) return typeParameterList;

            if ( state.backtracking==0 ) { typeParameterList.setEndToken(LARGER_OP170); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeParameterList;
    }
    // $ANTLR end "typeParameters"



    // $ANTLR start "typeParameter"
    // /home/david/git/ceylon-spec/Ceylon.g:1199:1: typeParameter returns [TypeParameterDeclaration typeParameter] : compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )? ;
    public TypeParameterDeclaration typeParameter() throws RecognitionException {
        TypeParameterDeclaration typeParameter = null;


        TypeVariance variance171 =null;

        Identifier typeNameDeclaration172 =null;

        TypeSpecifier typeDefault173 =null;

        List<CompilerAnnotation> compilerAnnotations174 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1200:5: ( compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1200:7: compilerAnnotations ( variance )? typeNameDeclaration ( typeDefault )?
            {
            if ( state.backtracking==0 ) { typeParameter = new TypeParameterDeclaration(null); }

            pushFollow(FOLLOW_compilerAnnotations_in_typeParameter7904);
            compilerAnnotations174=compilerAnnotations();

            state._fsp--;
            if (state.failed) return typeParameter;

            // /home/david/git/ceylon-spec/Ceylon.g:1202:7: ( variance )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IN_OP||LA100_0==OUT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1203:9: variance
                    {
                    pushFollow(FOLLOW_variance_in_typeParameter7923);
                    variance171=variance();

                    state._fsp--;
                    if (state.failed) return typeParameter;

                    if ( state.backtracking==0 ) { typeParameter.setTypeVariance(variance171); }

                    }
                    break;

            }


            pushFollow(FOLLOW_typeNameDeclaration_in_typeParameter7953);
            typeNameDeclaration172=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return typeParameter;

            if ( state.backtracking==0 ) { typeParameter.setIdentifier(typeNameDeclaration172); }

            // /home/david/git/ceylon-spec/Ceylon.g:1208:7: ( typeDefault )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==SPECIFY) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1209:9: typeDefault
                    {
                    pushFollow(FOLLOW_typeDefault_in_typeParameter7979);
                    typeDefault173=typeDefault();

                    state._fsp--;
                    if (state.failed) return typeParameter;

                    if ( state.backtracking==0 ) { typeParameter.setTypeSpecifier(typeDefault173); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { typeParameter.getCompilerAnnotations().addAll(compilerAnnotations174); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeParameter;
    }
    // $ANTLR end "typeParameter"



    // $ANTLR start "variance"
    // /home/david/git/ceylon-spec/Ceylon.g:1215:1: variance returns [TypeVariance typeVariance] : ( IN_OP | OUT );
    public TypeVariance variance() throws RecognitionException {
        TypeVariance typeVariance = null;


        Token IN_OP175=null;
        Token OUT176=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1216:5: ( IN_OP | OUT )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==IN_OP) ) {
                alt102=1;
            }
            else if ( (LA102_0==OUT) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return typeVariance;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1216:7: IN_OP
                    {
                    IN_OP175=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_variance8027); if (state.failed) return typeVariance;

                    if ( state.backtracking==0 ) { typeVariance = new TypeVariance(IN_OP175); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1218:7: OUT
                    {
                    OUT176=(Token)match(input,OUT,FOLLOW_OUT_in_variance8043); if (state.failed) return typeVariance;

                    if ( state.backtracking==0 ) { typeVariance = new TypeVariance(OUT176); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeVariance;
    }
    // $ANTLR end "variance"



    // $ANTLR start "typeConstraint"
    // /home/david/git/ceylon-spec/Ceylon.g:1222:1: typeConstraint returns [TypeConstraint typeConstraint] : compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )? ;
    public TypeConstraint typeConstraint() throws RecognitionException {
        TypeConstraint typeConstraint = null;


        Token TYPE_CONSTRAINT177=null;
        List<CompilerAnnotation> compilerAnnotations178 =null;

        Identifier typeNameDeclaration179 =null;

        ParameterList parameters180 =null;

        CaseTypes caseTypes181 =null;

        SatisfiedTypes satisfiedTypes182 =null;

        AbstractedType abstractedType183 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1223:5: ( compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1223:7: compilerAnnotations TYPE_CONSTRAINT typeNameDeclaration ( parameters )? ( caseTypes )? ( satisfiedTypes )? ( abstractedType )?
            {
            pushFollow(FOLLOW_compilerAnnotations_in_typeConstraint8076);
            compilerAnnotations178=compilerAnnotations();

            state._fsp--;
            if (state.failed) return typeConstraint;

            TYPE_CONSTRAINT177=(Token)match(input,TYPE_CONSTRAINT,FOLLOW_TYPE_CONSTRAINT_in_typeConstraint8084); if (state.failed) return typeConstraint;

            if ( state.backtracking==0 ) { typeConstraint = new TypeConstraint(TYPE_CONSTRAINT177); 
                    typeConstraint.getCompilerAnnotations().addAll(compilerAnnotations178); }

            pushFollow(FOLLOW_typeNameDeclaration_in_typeConstraint8100);
            typeNameDeclaration179=typeNameDeclaration();

            state._fsp--;
            if (state.failed) return typeConstraint;

            if ( state.backtracking==0 ) { typeConstraint.setIdentifier(typeNameDeclaration179); }

            // /home/david/git/ceylon-spec/Ceylon.g:1230:7: ( parameters )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==LPAREN) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1231:9: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_typeConstraint8134);
                    parameters180=parameters();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setParameterList(parameters180); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1234:7: ( caseTypes )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==CASE_TYPES) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1235:9: caseTypes
                    {
                    pushFollow(FOLLOW_caseTypes_in_typeConstraint8171);
                    caseTypes181=caseTypes();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setCaseTypes(caseTypes181); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1239:7: ( satisfiedTypes )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==SATISFIES) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1240:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_typeConstraint8215);
                    satisfiedTypes182=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setSatisfiedTypes(satisfiedTypes182); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1243:7: ( abstractedType )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ABSTRACTED_TYPE) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1244:9: abstractedType
                    {
                    pushFollow(FOLLOW_abstractedType_in_typeConstraint8253);
                    abstractedType183=abstractedType();

                    state._fsp--;
                    if (state.failed) return typeConstraint;

                    if ( state.backtracking==0 ) { typeConstraint.setAbstractedType(abstractedType183); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeConstraint;
    }
    // $ANTLR end "typeConstraint"



    // $ANTLR start "typeConstraints"
    // /home/david/git/ceylon-spec/Ceylon.g:1249:1: typeConstraints returns [TypeConstraintList typeConstraintList] : ( typeConstraint )+ ;
    public TypeConstraintList typeConstraints() throws RecognitionException {
        TypeConstraintList typeConstraintList = null;


        TypeConstraint typeConstraint184 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1250:5: ( ( typeConstraint )+ )
            // /home/david/git/ceylon-spec/Ceylon.g:1250:7: ( typeConstraint )+
            {
            if ( state.backtracking==0 ) { typeConstraintList =new TypeConstraintList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:1251:7: ( typeConstraint )+
            int cnt107=0;
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==COMPILER_ANNOTATION||LA107_0==TYPE_CONSTRAINT) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1252:9: typeConstraint
            	    {
            	    pushFollow(FOLLOW_typeConstraint_in_typeConstraints8311);
            	    typeConstraint184=typeConstraint();

            	    state._fsp--;
            	    if (state.failed) return typeConstraintList;

            	    if ( state.backtracking==0 ) { if (typeConstraint184!=null)
            	                typeConstraintList.addTypeConstraint(typeConstraint184); }

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return typeConstraintList;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeConstraintList;
    }
    // $ANTLR end "typeConstraints"



    // $ANTLR start "annotationListStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1258:1: annotationListStart : ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER ) ;
    public void annotationListStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1259:5: ( ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1259:7: ( stringLiteral | annotation ) ( LIDENTIFIER | UIDENTIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER | VOID_MODIFIER )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1259:7: ( stringLiteral | annotation )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==STRING_LITERAL||LA108_0==VERBATIM_STRING) ) {
                alt108=1;
            }
            else if ( (LA108_0==LIDENTIFIER) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1259:8: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotationListStart8348);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1259:22: annotation
                    {
                    pushFollow(FOLLOW_annotation_in_annotationListStart8350);
                    annotation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( input.LA(1)==FUNCTION_MODIFIER||input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER||input.LA(1)==VALUE_MODIFIER||input.LA(1)==VOID_MODIFIER ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotationListStart"



    // $ANTLR start "destructureStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1263:1: destructureStart : VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP ) ;
    public void destructureStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1264:5: ( VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1264:7: VALUE_MODIFIER compilerAnnotations ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP )
            {
            match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructureStart8387); if (state.failed) return ;

            pushFollow(FOLLOW_compilerAnnotations_in_destructureStart8389);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1265:7: ( LBRACKET | UIDENTIFIER | VOID_MODIFIER | VALUE_MODIFIER | FUNCTION_MODIFIER | LIDENTIFIER ENTRY_OP )
            int alt109=6;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                alt109=1;
                }
                break;
            case UIDENTIFIER:
                {
                alt109=2;
                }
                break;
            case VOID_MODIFIER:
                {
                alt109=3;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt109=4;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt109=5;
                }
                break;
            case LIDENTIFIER:
                {
                alt109=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }

            switch (alt109) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:8: LBRACKET
                    {
                    match(input,LBRACKET,FOLLOW_LBRACKET_in_destructureStart8399); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:17: UIDENTIFIER
                    {
                    match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_destructureStart8401); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:29: VOID_MODIFIER
                    {
                    match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_destructureStart8403); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:43: VALUE_MODIFIER
                    {
                    match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_destructureStart8405); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:58: FUNCTION_MODIFIER
                    {
                    match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_destructureStart8407); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1265:76: LIDENTIFIER ENTRY_OP
                    {
                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_destructureStart8409); if (state.failed) return ;

                    match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_destructureStart8411); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "destructureStart"



    // $ANTLR start "declarationOrStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1268:1: declarationOrStatement returns [Statement statement] options {memoize=true; } : compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement ) ;
    public Statement declarationOrStatement() throws RecognitionException {
        Statement statement = null;

        int declarationOrStatement_StartIndex = input.index();

        Declaration d1 =null;

        Declaration d2 =null;

        Statement s =null;

        Destructure destructure185 =null;

        Assertion assertion186 =null;

        List<CompilerAnnotation> compilerAnnotations187 =null;


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return statement; }

            // /home/david/git/ceylon-spec/Ceylon.g:1270:5: ( compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1270:7: compilerAnnotations ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_declarationOrStatement8444);
            compilerAnnotations187=compilerAnnotations();

            state._fsp--;
            if (state.failed) return statement;

            // /home/david/git/ceylon-spec/Ceylon.g:1271:7: ( ( destructureStart )=> destructure | ( annotatedDeclarationStart )=>d1= declaration | ( annotatedAssertionStart )=> assertion | ( annotationListStart )=>d2= declaration |s= statement )
            int alt110=5;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==VALUE_MODIFIER) ) {
                int LA110_1 = input.LA(2);

                if ( (synpred11_Ceylon()) ) {
                    alt110=1;
                }
                else if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==STRING_LITERAL) ) {
                int LA110_2 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt110=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==VERBATIM_STRING) ) {
                int LA110_3 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt110=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==LIDENTIFIER) ) {
                int LA110_4 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred13_Ceylon()) ) {
                    alt110=3;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==CLASS_DEFINITION) ) {
                int LA110_5 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==INTERFACE_DEFINITION) ) {
                int LA110_6 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==DYNAMIC) ) {
                int LA110_7 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==ALIAS) ) {
                int LA110_8 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==OBJECT_DEFINITION) ) {
                int LA110_9 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==ASSIGN) ) {
                int LA110_10 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==VOID_MODIFIER) ) {
                int LA110_11 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==FUNCTION_MODIFIER) ) {
                int LA110_12 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==UIDENTIFIER) ) {
                int LA110_13 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==SMALLER_OP) ) {
                int LA110_14 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==LBRACKET) ) {
                int LA110_15 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==LBRACE) ) {
                int LA110_16 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else if ( (true) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==NEW) ) {
                int LA110_17 = input.LA(2);

                if ( (synpred12_Ceylon()) ) {
                    alt110=2;
                }
                else if ( (synpred14_Ceylon()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 17, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==ASSERT) && (synpred13_Ceylon())) {
                alt110=3;
            }
            else if ( ((LA110_0 >= BACKTICK && LA110_0 <= BREAK)||LA110_0==CHAR_LITERAL||LA110_0==CONTINUE||(LA110_0 >= DECREMENT_OP && LA110_0 <= DIFFERENCE_OP)||(LA110_0 >= FLOAT_LITERAL && LA110_0 <= FOR_CLAUSE)||LA110_0==IF_CLAUSE||LA110_0==INCREMENT_OP||LA110_0==LPAREN||LA110_0==NATURAL_LITERAL||LA110_0==NOT_OP||(LA110_0 >= OUTER && LA110_0 <= PACKAGE)||LA110_0==RETURN||LA110_0==STRING_START||(LA110_0 >= SUM_OP && LA110_0 <= SWITCH_CLAUSE)||(LA110_0 >= THIS && LA110_0 <= TRY_CLAUSE)||LA110_0==WHILE_CLAUSE) ) {
                alt110=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1272:9: ( destructureStart )=> destructure
                    {
                    pushFollow(FOLLOW_destructure_in_declarationOrStatement8468);
                    destructure185=destructure();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =destructure185; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1274:9: ( annotatedDeclarationStart )=>d1= declaration
                    {
                    pushFollow(FOLLOW_declaration_in_declarationOrStatement8496);
                    d1=declaration();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =d1; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1276:9: ( annotatedAssertionStart )=> assertion
                    {
                    pushFollow(FOLLOW_assertion_in_declarationOrStatement8522);
                    assertion186=assertion();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = assertion186; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1278:9: ( annotationListStart )=>d2= declaration
                    {
                    pushFollow(FOLLOW_declaration_in_declarationOrStatement8550);
                    d2=declaration();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =d2; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1280:9: s= statement
                    {
                    pushFollow(FOLLOW_statement_in_declarationOrStatement8572);
                    s=statement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =s; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (statement!=null)
                        statement.getCompilerAnnotations().addAll(compilerAnnotations187); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, declarationOrStatement_StartIndex); }

        }
        return statement;
    }
    // $ANTLR end "declarationOrStatement"



    // $ANTLR start "declaration"
    // /home/david/git/ceylon-spec/Ceylon.g:1287:1: declaration returns [Declaration declaration] : annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor ) ;
    public Declaration declaration() throws RecognitionException {
        Declaration declaration = null;


        AnnotationList annotations188 =null;

        AnyClass classDeclaration189 =null;

        AnyInterface interfaceDeclaration190 =null;

        TypeAliasDeclaration aliasDeclaration191 =null;

        ObjectDefinition objectDeclaration192 =null;

        AttributeSetterDefinition setterDeclaration193 =null;

        AnyMethod voidOrInferredMethodDeclaration194 =null;

        AnyAttribute inferredAttributeDeclaration195 =null;

        TypedDeclaration typedMethodOrAttributeDeclaration196 =null;

        Constructor constructor197 =null;


         MissingDeclaration md = new MissingDeclaration(null); 
                    declaration = md; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1290:5: ( annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1290:7: annotations ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor )
            {
            pushFollow(FOLLOW_annotations_in_declaration8628);
            annotations188=annotations();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { md.setAnnotationList(annotations188); }

            // /home/david/git/ceylon-spec/Ceylon.g:1292:5: ( classDeclaration | ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration | aliasDeclaration | objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration | typedMethodOrAttributeDeclaration | constructor )
            int alt111=9;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==CLASS_DEFINITION) ) {
                alt111=1;
            }
            else if ( (LA111_0==INTERFACE_DEFINITION) && (synpred15_Ceylon())) {
                alt111=2;
            }
            else if ( (LA111_0==DYNAMIC) ) {
                int LA111_3 = input.LA(2);

                if ( (synpred15_Ceylon()) ) {
                    alt111=2;
                }
                else if ( (true) ) {
                    alt111=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return declaration;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA111_0==ALIAS) ) {
                alt111=3;
            }
            else if ( (LA111_0==OBJECT_DEFINITION) ) {
                alt111=4;
            }
            else if ( (LA111_0==ASSIGN) ) {
                alt111=5;
            }
            else if ( (LA111_0==FUNCTION_MODIFIER||LA111_0==VOID_MODIFIER) ) {
                alt111=6;
            }
            else if ( (LA111_0==VALUE_MODIFIER) ) {
                alt111=7;
            }
            else if ( ((LA111_0 >= LBRACE && LA111_0 <= LBRACKET)||LA111_0==SMALLER_OP||LA111_0==UIDENTIFIER) ) {
                alt111=8;
            }
            else if ( (LA111_0==NEW) ) {
                alt111=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1293:7: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_declaration8651);
                    classDeclaration189=classDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =classDeclaration189; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1295:7: ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )=> interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_declaration8677);
                    interfaceDeclaration190=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =interfaceDeclaration190; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1297:7: aliasDeclaration
                    {
                    pushFollow(FOLLOW_aliasDeclaration_in_declaration8693);
                    aliasDeclaration191=aliasDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =aliasDeclaration191; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1299:7: objectDeclaration
                    {
                    pushFollow(FOLLOW_objectDeclaration_in_declaration8709);
                    objectDeclaration192=objectDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =objectDeclaration192; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1301:7: setterDeclaration
                    {
                    pushFollow(FOLLOW_setterDeclaration_in_declaration8725);
                    setterDeclaration193=setterDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =setterDeclaration193; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1303:7: voidOrInferredMethodDeclaration
                    {
                    pushFollow(FOLLOW_voidOrInferredMethodDeclaration_in_declaration8741);
                    voidOrInferredMethodDeclaration194=voidOrInferredMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =voidOrInferredMethodDeclaration194; }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1305:7: inferredAttributeDeclaration
                    {
                    pushFollow(FOLLOW_inferredAttributeDeclaration_in_declaration8757);
                    inferredAttributeDeclaration195=inferredAttributeDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =inferredAttributeDeclaration195; }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1307:7: typedMethodOrAttributeDeclaration
                    {
                    pushFollow(FOLLOW_typedMethodOrAttributeDeclaration_in_declaration8773);
                    typedMethodOrAttributeDeclaration196=typedMethodOrAttributeDeclaration();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =typedMethodOrAttributeDeclaration196; }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1309:7: constructor
                    {
                    pushFollow(FOLLOW_constructor_in_declaration8789);
                    constructor197=constructor();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =constructor197; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (declaration!=null)
                      declaration.setAnnotationList(annotations188); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "declaration"



    // $ANTLR start "annotatedDeclarationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1320:1: annotatedDeclarationStart : ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart ) ;
    public void annotatedDeclarationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1321:5: ( ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1321:7: ( stringLiteral )? ( annotation )* ( ( unambiguousType )=> unambiguousType | declarationStart )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1321:7: ( stringLiteral )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==STRING_LITERAL||LA112_0==VERBATIM_STRING) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1321:7: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotatedDeclarationStart8832);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1321:22: ( annotation )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==LIDENTIFIER) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1321:22: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotatedDeclarationStart8835);
            	    annotation();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1322:7: ( ( unambiguousType )=> unambiguousType | declarationStart )
            int alt114=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA114_1 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA114_2 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA114_3 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA114_4 = input.LA(2);

                if ( (synpred16_Ceylon()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 4, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSIGN:
            case CLASS_DEFINITION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case INTERFACE_DEFINITION:
            case NEW:
            case OBJECT_DEFINITION:
            case VALUE_MODIFIER:
            case VOID_MODIFIER:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }

            switch (alt114) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1322:8: ( unambiguousType )=> unambiguousType
                    {
                    pushFollow(FOLLOW_unambiguousType_in_annotatedDeclarationStart8852);
                    unambiguousType();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1322:47: declarationStart
                    {
                    pushFollow(FOLLOW_declarationStart_in_annotatedDeclarationStart8856);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedDeclarationStart"



    // $ANTLR start "annotatedAssertionStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1325:1: annotatedAssertionStart : ( stringLiteral )? ( annotation )* ASSERT ;
    public void annotatedAssertionStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1326:5: ( ( stringLiteral )? ( annotation )* ASSERT )
            // /home/david/git/ceylon-spec/Ceylon.g:1326:7: ( stringLiteral )? ( annotation )* ASSERT
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1326:7: ( stringLiteral )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==STRING_LITERAL||LA115_0==VERBATIM_STRING) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1326:7: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotatedAssertionStart8874);
                    stringLiteral();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1326:22: ( annotation )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==LIDENTIFIER) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1326:22: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotatedAssertionStart8877);
            	    annotation();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            match(input,ASSERT,FOLLOW_ASSERT_in_annotatedAssertionStart8880); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotatedAssertionStart"



    // $ANTLR start "declarationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1332:1: declarationStart : ( VALUE_MODIFIER | FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | ASSIGN | INTERFACE_DEFINITION | CLASS_DEFINITION | OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER ) | NEW | ALIAS | variadicType LIDENTIFIER | DYNAMIC ( LIDENTIFIER | UIDENTIFIER ) );
    public void declarationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1333:5: ( VALUE_MODIFIER | FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER ) | ASSIGN | INTERFACE_DEFINITION | CLASS_DEFINITION | OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER ) | NEW | ALIAS | variadicType LIDENTIFIER | DYNAMIC ( LIDENTIFIER | UIDENTIFIER ) )
            int alt117=11;
            switch ( input.LA(1) ) {
            case VALUE_MODIFIER:
                {
                alt117=1;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt117=2;
                }
                break;
            case VOID_MODIFIER:
                {
                alt117=3;
                }
                break;
            case ASSIGN:
                {
                alt117=4;
                }
                break;
            case INTERFACE_DEFINITION:
                {
                alt117=5;
                }
                break;
            case CLASS_DEFINITION:
                {
                alt117=6;
                }
                break;
            case OBJECT_DEFINITION:
                {
                alt117=7;
                }
                break;
            case NEW:
                {
                alt117=8;
                }
                break;
            case ALIAS:
                {
                alt117=9;
                }
                break;
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt117=10;
                }
                break;
            case DYNAMIC:
                {
                alt117=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1333:7: VALUE_MODIFIER
                    {
                    match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_declarationStart8900); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1334:7: FUNCTION_MODIFIER ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_declarationStart8908); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1335:7: VOID_MODIFIER ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_declarationStart8923); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1336:7: ASSIGN
                    {
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_declarationStart8938); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1337:7: INTERFACE_DEFINITION
                    {
                    match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_declarationStart8946); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1338:7: CLASS_DEFINITION
                    {
                    match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_declarationStart8954); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1339:7: OBJECT_DEFINITION ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_declarationStart8962); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1340:7: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_declarationStart8977); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1341:7: ALIAS
                    {
                    match(input,ALIAS,FOLLOW_ALIAS_in_declarationStart8985); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1342:7: variadicType LIDENTIFIER
                    {
                    pushFollow(FOLLOW_variadicType_in_declarationStart8994);
                    variadicType();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_declarationStart8996); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1343:7: DYNAMIC ( LIDENTIFIER | UIDENTIFIER )
                    {
                    match(input,DYNAMIC,FOLLOW_DYNAMIC_in_declarationStart9004); if (state.failed) return ;

                    if ( input.LA(1)==LIDENTIFIER||input.LA(1)==UIDENTIFIER ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "declarationStart"



    // $ANTLR start "unambiguousType"
    // /home/david/git/ceylon-spec/Ceylon.g:1349:1: unambiguousType : ( qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET ) | LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE | LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET );
    public void unambiguousType() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1350:5: ( qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET ) | LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE | LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET )
            int alt131=3;
            switch ( input.LA(1) ) {
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt131=1;
                }
                break;
            case LBRACE:
                {
                alt131=2;
                }
                break;
            case LBRACKET:
                {
                alt131=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1350:7: qualifiedType ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )? ( OPTIONAL | LBRACKET RBRACKET )
                    {
                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9034);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1351:7: ( ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType )?
                    int alt119=2;
                    switch ( input.LA(1) ) {
                        case OPTIONAL:
                            {
                            int LA119_1 = input.LA(2);

                            if ( (LA119_1==ENTRY_OP) ) {
                                alt119=1;
                            }
                            }
                            break;
                        case LBRACKET:
                            {
                            int LA119_2 = input.LA(2);

                            if ( (LA119_2==RBRACKET) ) {
                                int LA119_5 = input.LA(3);

                                if ( (LA119_5==ENTRY_OP) ) {
                                    alt119=1;
                                }
                            }
                            }
                            break;
                        case ENTRY_OP:
                            {
                            alt119=1;
                            }
                            break;
                    }

                    switch (alt119) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1352:9: ( OPTIONAL | LBRACKET RBRACKET )? ENTRY_OP qualifiedType
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:1352:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt118=3;
                            int LA118_0 = input.LA(1);

                            if ( (LA118_0==OPTIONAL) ) {
                                alt118=1;
                            }
                            else if ( (LA118_0==LBRACKET) ) {
                                alt118=2;
                            }
                            switch (alt118) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1352:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9054); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1352:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9058); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9060); if (state.failed) return ;

                                    }
                                    break;

                            }


                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9073); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9075);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1355:7: ( OPTIONAL | LBRACKET RBRACKET )
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==OPTIONAL) ) {
                        alt120=1;
                    }
                    else if ( (LA120_0==LBRACKET) ) {
                        alt120=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 0, input);

                        throw nvae;

                    }
                    switch (alt120) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1355:8: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9093); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1355:19: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9097); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9099); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1356:7: LBRACE qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( PRODUCT_OP | SUM_OP ) RBRACE
                    {
                    match(input,LBRACE,FOLLOW_LBRACE_in_unambiguousType9108); if (state.failed) return ;

                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9117);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1357:21: ( OPTIONAL | LBRACKET RBRACKET )?
                    int alt121=3;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==OPTIONAL) ) {
                        alt121=1;
                    }
                    else if ( (LA121_0==LBRACKET) ) {
                        alt121=2;
                    }
                    switch (alt121) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1357:22: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9120); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1357:33: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9124); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9126); if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1358:7: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==ENTRY_OP) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1359:9: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                            {
                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9146); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9148);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            // /home/david/git/ceylon-spec/Ceylon.g:1360:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt122=3;
                            int LA122_0 = input.LA(1);

                            if ( (LA122_0==OPTIONAL) ) {
                                alt122=1;
                            }
                            else if ( (LA122_0==LBRACKET) ) {
                                alt122=2;
                            }
                            switch (alt122) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1360:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9160); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1360:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9164); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9166); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input,RBRACE,FOLLOW_RBRACE_in_unambiguousType9199); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1364:7: LBRACKET qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )* ( PRODUCT_OP | SUM_OP ) RBRACKET
                    {
                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9207); if (state.failed) return ;

                    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9216);
                    qualifiedType();

                    state._fsp--;
                    if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1365:21: ( OPTIONAL | LBRACKET RBRACKET )?
                    int alt124=3;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==OPTIONAL) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==LBRACKET) ) {
                        alt124=2;
                    }
                    switch (alt124) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1365:22: OPTIONAL
                            {
                            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9219); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1365:33: LBRACKET RBRACKET
                            {
                            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9223); if (state.failed) return ;

                            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9225); if (state.failed) return ;

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1366:7: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==ENTRY_OP) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1367:9: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                            {
                            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9246); if (state.failed) return ;

                            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9248);
                            qualifiedType();

                            state._fsp--;
                            if (state.failed) return ;

                            // /home/david/git/ceylon-spec/Ceylon.g:1368:9: ( OPTIONAL | LBRACKET RBRACKET )?
                            int alt125=3;
                            int LA125_0 = input.LA(1);

                            if ( (LA125_0==OPTIONAL) ) {
                                alt125=1;
                            }
                            else if ( (LA125_0==LBRACKET) ) {
                                alt125=2;
                            }
                            switch (alt125) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1368:10: OPTIONAL
                                    {
                                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9259); if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:1368:21: LBRACKET RBRACKET
                                    {
                                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9263); if (state.failed) return ;

                                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9265); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:1370:7: ( COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )? )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:1371:9: COMMA qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_unambiguousType9295); if (state.failed) return ;

                    	    pushFollow(FOLLOW_qualifiedType_in_unambiguousType9306);
                    	    qualifiedType();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    // /home/david/git/ceylon-spec/Ceylon.g:1372:23: ( OPTIONAL | LBRACKET RBRACKET )?
                    	    int alt127=3;
                    	    int LA127_0 = input.LA(1);

                    	    if ( (LA127_0==OPTIONAL) ) {
                    	        alt127=1;
                    	    }
                    	    else if ( (LA127_0==LBRACKET) ) {
                    	        alt127=2;
                    	    }
                    	    switch (alt127) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1372:24: OPTIONAL
                    	            {
                    	            match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9309); if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1372:35: LBRACKET RBRACKET
                    	            {
                    	            match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9313); if (state.failed) return ;

                    	            match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9315); if (state.failed) return ;

                    	            }
                    	            break;

                    	    }


                    	    // /home/david/git/ceylon-spec/Ceylon.g:1373:9: ( ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )? )?
                    	    int alt129=2;
                    	    int LA129_0 = input.LA(1);

                    	    if ( (LA129_0==ENTRY_OP) ) {
                    	        alt129=1;
                    	    }
                    	    switch (alt129) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:1374:11: ENTRY_OP qualifiedType ( OPTIONAL | LBRACKET RBRACKET )?
                    	            {
                    	            match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_unambiguousType9340); if (state.failed) return ;

                    	            pushFollow(FOLLOW_qualifiedType_in_unambiguousType9342);
                    	            qualifiedType();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            // /home/david/git/ceylon-spec/Ceylon.g:1375:11: ( OPTIONAL | LBRACKET RBRACKET )?
                    	            int alt128=3;
                    	            int LA128_0 = input.LA(1);

                    	            if ( (LA128_0==OPTIONAL) ) {
                    	                alt128=1;
                    	            }
                    	            else if ( (LA128_0==LBRACKET) ) {
                    	                alt128=2;
                    	            }
                    	            switch (alt128) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:1375:12: OPTIONAL
                    	                    {
                    	                    match(input,OPTIONAL,FOLLOW_OPTIONAL_in_unambiguousType9356); if (state.failed) return ;

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:1375:23: LBRACKET RBRACKET
                    	                    {
                    	                    match(input,LBRACKET,FOLLOW_LBRACKET_in_unambiguousType9360); if (state.failed) return ;

                    	                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9362); if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input,RBRACKET,FOLLOW_RBRACKET_in_unambiguousType9406); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unambiguousType"



    // $ANTLR start "statement"
    // /home/david/git/ceylon-spec/Ceylon.g:1382:1: statement returns [Statement statement] : ( directiveStatement | controlStatement | expressionOrSpecificationStatement );
    public Statement statement() throws RecognitionException {
        Statement statement = null;


        Directive directiveStatement198 =null;

        ControlStatement controlStatement199 =null;

        Statement expressionOrSpecificationStatement200 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1383:5: ( directiveStatement | controlStatement | expressionOrSpecificationStatement )
            int alt132=3;
            switch ( input.LA(1) ) {
            case BREAK:
            case CONTINUE:
            case RETURN:
            case THROW:
                {
                alt132=1;
                }
                break;
            case FOR_CLAUSE:
            case IF_CLAUSE:
            case SWITCH_CLAUSE:
            case TRY_CLAUSE:
            case WHILE_CLAUSE:
                {
                alt132=2;
                }
                break;
            case DYNAMIC:
                {
                int LA132_3 = input.LA(2);

                if ( (LA132_3==LBRACKET) ) {
                    alt132=3;
                }
                else if ( (LA132_3==LBRACE) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 3, input);

                    throw nvae;

                }
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case FLOAT_LITERAL:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case NOT_OP:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
                {
                alt132=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }

            switch (alt132) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1383:7: directiveStatement
                    {
                    pushFollow(FOLLOW_directiveStatement_in_statement9427);
                    directiveStatement198=directiveStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = directiveStatement198; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1385:7: controlStatement
                    {
                    pushFollow(FOLLOW_controlStatement_in_statement9443);
                    controlStatement199=controlStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = controlStatement199; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1387:7: expressionOrSpecificationStatement
                    {
                    pushFollow(FOLLOW_expressionOrSpecificationStatement_in_statement9459);
                    expressionOrSpecificationStatement200=expressionOrSpecificationStatement();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement = expressionOrSpecificationStatement200; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "statement"



    // $ANTLR start "expressionOrSpecificationStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1391:1: expressionOrSpecificationStatement returns [Statement statement] : expression ( lazySpecifier )? ( SEMICOLON | COMMA ) ;
    public Statement expressionOrSpecificationStatement() throws RecognitionException {
        Statement statement = null;


        Token SEMICOLON203=null;
        Token COMMA204=null;
        Expression expression201 =null;

        SpecifierExpression lazySpecifier202 =null;


         SpecifierStatement ss=new SpecifierStatement(null); 
                    ExpressionStatement es=new ExpressionStatement(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1394:5: ( expression ( lazySpecifier )? ( SEMICOLON | COMMA ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1394:7: expression ( lazySpecifier )? ( SEMICOLON | COMMA )
            {
            pushFollow(FOLLOW_expression_in_expressionOrSpecificationStatement9497);
            expression201=expression();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement = es;
                    if (expression201!=null)
                        es.setExpression(expression201);
                    if (expression201.getTerm() instanceof AssignOp) {
                        AssignOp a = (AssignOp) expression201.getTerm();
                        Term lt = a.getLeftTerm();
                        if (lt instanceof BaseMemberExpression ||
                            lt instanceof ParameterizedExpression ||
                            lt instanceof QualifiedMemberExpression &&
                                ((QualifiedMemberExpression) lt).getPrimary() instanceof This &&
                                ((QualifiedMemberExpression) lt).getMemberOperator() instanceof MemberOp) {
                            Expression e = new Expression(null);
                            e.setTerm(a.getRightTerm());
                            SpecifierExpression se = new SpecifierExpression(null);
                            se.setExpression(e);
                            ss.setSpecifierExpression(se);
                            ss.setBaseMemberExpression(a.getLeftTerm());
                            statement = ss;
                        }
                    }
                  }

            // /home/david/git/ceylon-spec/Ceylon.g:1416:7: ( lazySpecifier )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==COMPUTE) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1422:9: lazySpecifier
                    {
                    pushFollow(FOLLOW_lazySpecifier_in_expressionOrSpecificationStatement9533);
                    lazySpecifier202=lazySpecifier();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { ss.setSpecifierExpression(lazySpecifier202);
                              ss.setBaseMemberExpression(expression201.getTerm()); 
                              statement = ss; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            // /home/david/git/ceylon-spec/Ceylon.g:1428:7: ( SEMICOLON | COMMA )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==SEMICOLON) ) {
                alt134=1;
            }
            else if ( (LA134_0==COMMA) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1429:9: SEMICOLON
                    {
                    SEMICOLON203=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expressionOrSpecificationStatement9578); if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setEndToken(SEMICOLON203); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1431:9: COMMA
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(SEMICOLON, input)); }

                    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionOrSpecificationStatement9608); if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setEndToken(COMMA204); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "expressionOrSpecificationStatement"



    // $ANTLR start "directiveStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:1439:1: directiveStatement returns [Directive directive] : d= directive SEMICOLON ;
    public Directive directiveStatement() throws RecognitionException {
        Directive directive = null;


        Token SEMICOLON205=null;
        Directive d =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1440:5: (d= directive SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1440:7: d= directive SEMICOLON
            {
            pushFollow(FOLLOW_directive_in_directiveStatement9657);
            d=directive();

            state._fsp--;
            if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive =d;
                    expecting=SEMICOLON; }

            SEMICOLON205=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_directiveStatement9674); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive.setEndToken(SEMICOLON205);
                    expecting=-1; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "directiveStatement"



    // $ANTLR start "directive"
    // /home/david/git/ceylon-spec/Ceylon.g:1448:1: directive returns [Directive directive] : ( returnDirective | throwDirective | breakDirective | continueDirective );
    public Directive directive() throws RecognitionException {
        Directive directive = null;


        Return returnDirective206 =null;

        Throw throwDirective207 =null;

        Break breakDirective208 =null;

        Continue continueDirective209 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1449:5: ( returnDirective | throwDirective | breakDirective | continueDirective )
            int alt135=4;
            switch ( input.LA(1) ) {
            case RETURN:
                {
                alt135=1;
                }
                break;
            case THROW:
                {
                alt135=2;
                }
                break;
            case BREAK:
                {
                alt135=3;
                }
                break;
            case CONTINUE:
                {
                alt135=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return directive;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1449:7: returnDirective
                    {
                    pushFollow(FOLLOW_returnDirective_in_directive9703);
                    returnDirective206=returnDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = returnDirective206; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1451:7: throwDirective
                    {
                    pushFollow(FOLLOW_throwDirective_in_directive9719);
                    throwDirective207=throwDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = throwDirective207; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1453:7: breakDirective
                    {
                    pushFollow(FOLLOW_breakDirective_in_directive9735);
                    breakDirective208=breakDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = breakDirective208; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1455:7: continueDirective
                    {
                    pushFollow(FOLLOW_continueDirective_in_directive9751);
                    continueDirective209=continueDirective();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive = continueDirective209; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "directive"



    // $ANTLR start "returnDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1459:1: returnDirective returns [Return directive] : RETURN ( functionOrExpression )? ;
    public Return returnDirective() throws RecognitionException {
        Return directive = null;


        Token RETURN210=null;
        Expression functionOrExpression211 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1460:5: ( RETURN ( functionOrExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1460:7: RETURN ( functionOrExpression )?
            {
            RETURN210=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnDirective9780); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Return(RETURN210); }

            // /home/david/git/ceylon-spec/Ceylon.g:1462:7: ( functionOrExpression )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==BACKTICK||LA136_0==CHAR_LITERAL||(LA136_0 >= DECREMENT_OP && LA136_0 <= DIFFERENCE_OP)||LA136_0==DYNAMIC||LA136_0==FLOAT_LITERAL||LA136_0==FUNCTION_MODIFIER||LA136_0==IF_CLAUSE||LA136_0==INCREMENT_OP||(LA136_0 >= LBRACE && LA136_0 <= LIDENTIFIER)||LA136_0==LPAREN||LA136_0==NATURAL_LITERAL||(LA136_0 >= NOT_OP && LA136_0 <= OBJECT_DEFINITION)||(LA136_0 >= OUTER && LA136_0 <= PACKAGE)||LA136_0==STRING_LITERAL||LA136_0==STRING_START||(LA136_0 >= SUM_OP && LA136_0 <= SWITCH_CLAUSE)||LA136_0==THIS||LA136_0==UIDENTIFIER||(LA136_0 >= VERBATIM_STRING && LA136_0 <= VOID_MODIFIER)) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1463:9: functionOrExpression
                    {
                    pushFollow(FOLLOW_functionOrExpression_in_returnDirective9807);
                    functionOrExpression211=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive.setExpression(functionOrExpression211); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "returnDirective"



    // $ANTLR start "throwDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1468:1: throwDirective returns [Throw directive] : THROW ( expression )? ;
    public Throw throwDirective() throws RecognitionException {
        Throw directive = null;


        Token THROW212=null;
        Expression expression213 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1469:5: ( THROW ( expression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1469:7: THROW ( expression )?
            {
            THROW212=(Token)match(input,THROW,FOLLOW_THROW_in_throwDirective9847); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Throw(THROW212); }

            // /home/david/git/ceylon-spec/Ceylon.g:1471:7: ( expression )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==BACKTICK||LA137_0==CHAR_LITERAL||(LA137_0 >= DECREMENT_OP && LA137_0 <= DIFFERENCE_OP)||LA137_0==DYNAMIC||LA137_0==FLOAT_LITERAL||LA137_0==INCREMENT_OP||(LA137_0 >= LBRACE && LA137_0 <= LBRACKET)||LA137_0==LIDENTIFIER||LA137_0==LPAREN||LA137_0==NATURAL_LITERAL||(LA137_0 >= NOT_OP && LA137_0 <= OBJECT_DEFINITION)||(LA137_0 >= OUTER && LA137_0 <= PACKAGE)||LA137_0==STRING_LITERAL||LA137_0==STRING_START||(LA137_0 >= SUM_OP && LA137_0 <= SUPER)||LA137_0==THIS||LA137_0==UIDENTIFIER||LA137_0==VERBATIM_STRING) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1472:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_throwDirective9874);
                    expression213=expression();

                    state._fsp--;
                    if (state.failed) return directive;

                    if ( state.backtracking==0 ) { directive.setExpression(expression213); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "throwDirective"



    // $ANTLR start "breakDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1477:1: breakDirective returns [Break directive] : BREAK ;
    public Break breakDirective() throws RecognitionException {
        Break directive = null;


        Token BREAK214=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1478:5: ( BREAK )
            // /home/david/git/ceylon-spec/Ceylon.g:1478:7: BREAK
            {
            BREAK214=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakDirective9914); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Break(BREAK214); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "breakDirective"



    // $ANTLR start "continueDirective"
    // /home/david/git/ceylon-spec/Ceylon.g:1482:1: continueDirective returns [Continue directive] : CONTINUE ;
    public Continue continueDirective() throws RecognitionException {
        Continue directive = null;


        Token CONTINUE215=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1483:5: ( CONTINUE )
            // /home/david/git/ceylon-spec/Ceylon.g:1483:7: CONTINUE
            {
            CONTINUE215=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continueDirective9943); if (state.failed) return directive;

            if ( state.backtracking==0 ) { directive = new Continue(CONTINUE215); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return directive;
    }
    // $ANTLR end "continueDirective"



    // $ANTLR start "typeSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1487:1: typeSpecifier returns [TypeSpecifier typeSpecifier] : ( COMPUTE | SPECIFY ) ( type )? ;
    public TypeSpecifier typeSpecifier() throws RecognitionException {
        TypeSpecifier typeSpecifier = null;


        Token COMPUTE216=null;
        Token SPECIFY217=null;
        StaticType type218 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1488:5: ( ( COMPUTE | SPECIFY ) ( type )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1488:7: ( COMPUTE | SPECIFY ) ( type )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1488:7: ( COMPUTE | SPECIFY )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==COMPUTE) ) {
                alt138=1;
            }
            else if ( (LA138_0==SPECIFY) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return typeSpecifier;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1489:9: COMPUTE
                    {
                    COMPUTE216=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_typeSpecifier9982); if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier = new TypeSpecifier(COMPUTE216); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1492:9: SPECIFY
                    {
                    SPECIFY217=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_typeSpecifier10011); if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier = new TypeSpecifier(SPECIFY217); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1495:7: ( type )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( ((LA139_0 >= LBRACE && LA139_0 <= LBRACKET)||LA139_0==SMALLER_OP||LA139_0==UIDENTIFIER) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1496:9: type
                    {
                    pushFollow(FOLLOW_type_in_typeSpecifier10048);
                    type218=type();

                    state._fsp--;
                    if (state.failed) return typeSpecifier;

                    if ( state.backtracking==0 ) { typeSpecifier.setType(type218); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeSpecifier;
    }
    // $ANTLR end "typeSpecifier"



    // $ANTLR start "typeDefault"
    // /home/david/git/ceylon-spec/Ceylon.g:1501:1: typeDefault returns [TypeSpecifier typeSpecifier] : SPECIFY type ;
    public TypeSpecifier typeDefault() throws RecognitionException {
        TypeSpecifier typeSpecifier = null;


        Token SPECIFY219=null;
        StaticType type220 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1502:5: ( SPECIFY type )
            // /home/david/git/ceylon-spec/Ceylon.g:1502:7: SPECIFY type
            {
            SPECIFY219=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_typeDefault10088); if (state.failed) return typeSpecifier;

            if ( state.backtracking==0 ) { typeSpecifier = new DefaultTypeArgument(SPECIFY219); }

            pushFollow(FOLLOW_type_in_typeDefault10105);
            type220=type();

            state._fsp--;
            if (state.failed) return typeSpecifier;

            if ( state.backtracking==0 ) { typeSpecifier.setType(type220); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeSpecifier;
    }
    // $ANTLR end "typeDefault"



    // $ANTLR start "specifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1508:1: specifier returns [SpecifierExpression specifierExpression] : SPECIFY functionOrExpression ;
    public SpecifierExpression specifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token SPECIFY221=null;
        Expression functionOrExpression222 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1509:5: ( SPECIFY functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1509:7: SPECIFY functionOrExpression
            {
            SPECIFY221=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_specifier10134); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new SpecifierExpression(SPECIFY221); }

            pushFollow(FOLLOW_functionOrExpression_in_specifier10150);
            functionOrExpression222=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression222); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "specifier"



    // $ANTLR start "lazySpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1515:1: lazySpecifier returns [SpecifierExpression specifierExpression] : COMPUTE functionOrExpression ;
    public SpecifierExpression lazySpecifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token COMPUTE223=null;
        Expression functionOrExpression224 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1516:5: ( COMPUTE functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1516:7: COMPUTE functionOrExpression
            {
            COMPUTE223=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_lazySpecifier10179); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(COMPUTE223); }

            pushFollow(FOLLOW_functionOrExpression_in_lazySpecifier10195);
            functionOrExpression224=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression224); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "lazySpecifier"



    // $ANTLR start "functionSpecifier"
    // /home/david/git/ceylon-spec/Ceylon.g:1522:1: functionSpecifier returns [SpecifierExpression specifierExpression] : ( COMPUTE | SPECIFY ) functionOrExpression ;
    public SpecifierExpression functionSpecifier() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token COMPUTE225=null;
        Token SPECIFY226=null;
        Expression functionOrExpression227 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1523:5: ( ( COMPUTE | SPECIFY ) functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1523:7: ( COMPUTE | SPECIFY ) functionOrExpression
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1523:7: ( COMPUTE | SPECIFY )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMPUTE) ) {
                alt140=1;
            }
            else if ( (LA140_0==SPECIFY) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return specifierExpression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1524:9: COMPUTE
                    {
                    COMPUTE225=(Token)match(input,COMPUTE,FOLLOW_COMPUTE_in_functionSpecifier10234); if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(COMPUTE225); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1527:9: SPECIFY
                    {
                    SPECIFY226=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_functionSpecifier10262); if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression = new LazySpecifierExpression(SPECIFY226); }

                    }
                    break;

            }


            pushFollow(FOLLOW_functionOrExpression_in_functionSpecifier10288);
            functionOrExpression227=functionOrExpression();

            state._fsp--;
            if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression.setExpression(functionOrExpression227); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "functionSpecifier"



    // $ANTLR start "expression"
    // /home/david/git/ceylon-spec/Ceylon.g:1534:1: expression returns [Expression expression] : assignmentExpression ;
    public Expression expression() throws RecognitionException {
        Expression expression = null;


        Term assignmentExpression228 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1535:5: ( assignmentExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1535:7: assignmentExpression
            {
            if ( state.backtracking==0 ) { expression = new Expression(null); }

            pushFollow(FOLLOW_assignmentExpression_in_expression10325);
            assignmentExpression228=assignmentExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression.setTerm(assignmentExpression228); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "expression"



    // $ANTLR start "base"
    // /home/david/git/ceylon-spec/Ceylon.g:1540:1: base returns [Primary primary] : ( nonstringLiteral | stringExpression | metaLiteral | enumeration | tuple | dynamicObject | objectExpression | selfReference | parExpression | baseReference );
    public Primary base() throws RecognitionException {
        Primary primary = null;


        Literal nonstringLiteral229 =null;

        Atom stringExpression230 =null;

        MetaLiteral metaLiteral231 =null;

        SequenceEnumeration enumeration232 =null;

        Tuple tuple233 =null;

        Dynamic dynamicObject234 =null;

        ObjectExpression objectExpression235 =null;

        Atom selfReference236 =null;

        Expression parExpression237 =null;

        CeylonParser.baseReference_return baseReference238 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1541:5: ( nonstringLiteral | stringExpression | metaLiteral | enumeration | tuple | dynamicObject | objectExpression | selfReference | parExpression | baseReference )
            int alt141=10;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case FLOAT_LITERAL:
            case NATURAL_LITERAL:
                {
                alt141=1;
                }
                break;
            case STRING_LITERAL:
            case STRING_START:
            case VERBATIM_STRING:
                {
                alt141=2;
                }
                break;
            case BACKTICK:
                {
                alt141=3;
                }
                break;
            case LBRACE:
                {
                alt141=4;
                }
                break;
            case LBRACKET:
                {
                alt141=5;
                }
                break;
            case DYNAMIC:
                {
                alt141=6;
                }
                break;
            case OBJECT_DEFINITION:
                {
                alt141=7;
                }
                break;
            case OUTER:
            case PACKAGE:
            case SUPER:
            case THIS:
                {
                alt141=8;
                }
                break;
            case LPAREN:
                {
                alt141=9;
                }
                break;
            case LIDENTIFIER:
            case UIDENTIFIER:
                {
                alt141=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return primary;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1541:7: nonstringLiteral
                    {
                    pushFollow(FOLLOW_nonstringLiteral_in_base10354);
                    nonstringLiteral229=nonstringLiteral();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =nonstringLiteral229; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1543:7: stringExpression
                    {
                    pushFollow(FOLLOW_stringExpression_in_base10370);
                    stringExpression230=stringExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =stringExpression230; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1545:7: metaLiteral
                    {
                    pushFollow(FOLLOW_metaLiteral_in_base10386);
                    metaLiteral231=metaLiteral();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =metaLiteral231; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1547:7: enumeration
                    {
                    pushFollow(FOLLOW_enumeration_in_base10402);
                    enumeration232=enumeration();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =enumeration232; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1549:7: tuple
                    {
                    pushFollow(FOLLOW_tuple_in_base10418);
                    tuple233=tuple();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =tuple233; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1551:7: dynamicObject
                    {
                    pushFollow(FOLLOW_dynamicObject_in_base10434);
                    dynamicObject234=dynamicObject();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =dynamicObject234; }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1553:7: objectExpression
                    {
                    pushFollow(FOLLOW_objectExpression_in_base10450);
                    objectExpression235=objectExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary = objectExpression235; }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1555:7: selfReference
                    {
                    pushFollow(FOLLOW_selfReference_in_base10466);
                    selfReference236=selfReference();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =selfReference236; }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1557:7: parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_base10482);
                    parExpression237=parExpression();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { primary =parExpression237; }

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1559:7: baseReference
                    {
                    pushFollow(FOLLOW_baseReference_in_base10498);
                    baseReference238=baseReference();

                    state._fsp--;
                    if (state.failed) return primary;

                    if ( state.backtracking==0 ) { BaseMemberOrTypeExpression be;
                            if ((baseReference238!=null?baseReference238.isMember:false))
                                be = new BaseMemberExpression(null);
                            else
                                be = new BaseTypeExpression(null);
                            be.setIdentifier((baseReference238!=null?baseReference238.identifier:null));
                            be.setTypeArguments( new InferredTypeArguments(null) );
                            if ((baseReference238!=null?baseReference238.typeArgumentList:null)!=null)
                                be.setTypeArguments((baseReference238!=null?baseReference238.typeArgumentList:null));
                            primary =be; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return primary;
    }
    // $ANTLR end "base"


    public static class baseReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
        public boolean isMember;
    };


    // $ANTLR start "baseReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1572:1: baseReference returns [Identifier identifier, TypeArgumentList typeArgumentList, \n boolean isMember] : ( memberReference | typeReference ) ;
    public CeylonParser.baseReference_return baseReference() throws RecognitionException {
        CeylonParser.baseReference_return retval = new CeylonParser.baseReference_return();
        retval.start = input.LT(1);


        CeylonParser.memberReference_return memberReference239 =null;

        CeylonParser.typeReference_return typeReference240 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1574:5: ( ( memberReference | typeReference ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1575:5: ( memberReference | typeReference )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:1575:5: ( memberReference | typeReference )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==LIDENTIFIER) ) {
                alt142=1;
            }
            else if ( (LA142_0==UIDENTIFIER) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1576:7: memberReference
                    {
                    pushFollow(FOLLOW_memberReference_in_baseReference10540);
                    memberReference239=memberReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (memberReference239!=null?memberReference239.identifier:null);
                            retval.typeArgumentList = (memberReference239!=null?memberReference239.typeArgumentList:null);
                            retval.isMember = true; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1580:7: typeReference
                    {
                    pushFollow(FOLLOW_typeReference_in_baseReference10556);
                    typeReference240=typeReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (typeReference240!=null?typeReference240.identifier:null);
                            retval.typeArgumentList = (typeReference240!=null?typeReference240.typeArgumentList:null);
                            retval.isMember = false; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "baseReference"



    // $ANTLR start "primary"
    // /home/david/git/ceylon-spec/Ceylon.g:1587:1: primary returns [Primary primary] : base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )* ;
    public Primary primary() throws RecognitionException {
        Primary primary = null;


        Primary base241 =null;

        CeylonParser.qualifiedReference_return qualifiedReference242 =null;

        IndexExpression indexOrIndexRange243 =null;

        ParameterList parameters244 =null;

        PositionalArgumentList positionalArguments245 =null;

        NamedArgumentList namedArguments246 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1588:5: ( base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1588:7: base ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*
            {
            pushFollow(FOLLOW_base_in_primary10591);
            base241=base();

            state._fsp--;
            if (state.failed) return primary;

            if ( state.backtracking==0 ) { primary =base241; }

            // /home/david/git/ceylon-spec/Ceylon.g:1590:5: ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*
            loop143:
            do {
                int alt143=6;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1593:11: qualifiedReference
            	    {
            	    pushFollow(FOLLOW_qualifiedReference_in_primary10624);
            	    qualifiedReference242=qualifiedReference();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { QualifiedMemberOrTypeExpression qe;
            	            if ((qualifiedReference242!=null?qualifiedReference242.isMember:false))
            	                qe = new QualifiedMemberExpression(null);
            	            else
            	                qe = new QualifiedTypeExpression(null);
            	            qe.setPrimary(primary);
            	            qe.setMemberOperator((qualifiedReference242!=null?qualifiedReference242.operator:null));
            	            qe.setIdentifier((qualifiedReference242!=null?qualifiedReference242.identifier:null));
            	            qe.setTypeArguments( new InferredTypeArguments(null) );
            	            if ((qualifiedReference242!=null?qualifiedReference242.typeArgumentList:null)!=null)
            	                qe.setTypeArguments((qualifiedReference242!=null?qualifiedReference242.typeArgumentList:null));
            	            primary =qe; }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1606:9: indexOrIndexRange
            	    {
            	    pushFollow(FOLLOW_indexOrIndexRange_in_primary10642);
            	    indexOrIndexRange243=indexOrIndexRange();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { indexOrIndexRange243.setPrimary(primary);
            	              primary = indexOrIndexRange243; }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1609:9: ( specifierParametersStart )=> parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_primary10668);
            	    parameters244=parameters();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { ParameterizedExpression pe;
            	              if (primary instanceof ParameterizedExpression) {
            	                  pe = (ParameterizedExpression) primary;
            	              } else {
            	                  pe = new ParameterizedExpression(null);
            	                  pe.setPrimary(primary);
            	              }
            	              pe.addParameterList(parameters244);
            	              primary = pe; }

            	    }
            	    break;
            	case 4 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1619:9: positionalArguments
            	    {
            	    pushFollow(FOLLOW_positionalArguments_in_primary10688);
            	    positionalArguments245=positionalArguments();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
            	              ie.setPrimary(primary);
            	              ie.setPositionalArgumentList(positionalArguments245); 
            	              primary =ie; }

            	    }
            	    break;
            	case 5 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1624:9: namedArguments
            	    {
            	    pushFollow(FOLLOW_namedArguments_in_primary10709);
            	    namedArguments246=namedArguments();

            	    state._fsp--;
            	    if (state.failed) return primary;

            	    if ( state.backtracking==0 ) { InvocationExpression ie = new InvocationExpression(null);
            	              ie.setPrimary(primary);
            	              ie.setNamedArgumentList(namedArguments246);
            	              primary =ie; }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return primary;
    }
    // $ANTLR end "primary"



    // $ANTLR start "specifierParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1632:1: specifierParametersStart : LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart ) ;
    public void specifierParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1633:5: ( LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1633:7: LPAREN ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart )
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_specifierParametersStart10743); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1634:5: ( RPAREN ( SPECIFY | COMPUTE | specifierParametersStart ) | compilerAnnotations annotatedDeclarationStart )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==RPAREN) ) {
                alt145=1;
            }
            else if ( (LA145_0==ALIAS||(LA145_0 >= ASSERT && LA145_0 <= ASSIGN)||(LA145_0 >= BACKTICK && LA145_0 <= BREAK)||(LA145_0 >= CHAR_LITERAL && LA145_0 <= CLASS_DEFINITION)||LA145_0==COMPILER_ANNOTATION||LA145_0==CONTINUE||(LA145_0 >= DECREMENT_OP && LA145_0 <= DIFFERENCE_OP)||LA145_0==DYNAMIC||(LA145_0 >= FLOAT_LITERAL && LA145_0 <= FUNCTION_MODIFIER)||(LA145_0 >= IF_CLAUSE && LA145_0 <= INTERFACE_DEFINITION)||LA145_0==IN_OP||(LA145_0 >= LBRACE && LA145_0 <= LIDENTIFIER)||LA145_0==LPAREN||LA145_0==MODULE||(LA145_0 >= NATURAL_LITERAL && LA145_0 <= NEW)||(LA145_0 >= NOT_OP && LA145_0 <= OBJECT_DEFINITION)||(LA145_0 >= OUT && LA145_0 <= PACKAGE)||LA145_0==PRODUCT_OP||LA145_0==RETURN||(LA145_0 >= SEMICOLON && LA145_0 <= SMALLER_OP)||LA145_0==STRING_LITERAL||LA145_0==STRING_START||(LA145_0 >= SUM_OP && LA145_0 <= SWITCH_CLAUSE)||(LA145_0 >= THIS && LA145_0 <= UIDENTIFIER)||(LA145_0 >= VALUE_MODIFIER && LA145_0 <= WHILE_CLAUSE)) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1635:7: RPAREN ( SPECIFY | COMPUTE | specifierParametersStart )
                    {
                    match(input,RPAREN,FOLLOW_RPAREN_in_specifierParametersStart10759); if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:1635:14: ( SPECIFY | COMPUTE | specifierParametersStart )
                    int alt144=3;
                    switch ( input.LA(1) ) {
                    case SPECIFY:
                        {
                        alt144=1;
                        }
                        break;
                    case COMPUTE:
                        {
                        alt144=2;
                        }
                        break;
                    case LPAREN:
                        {
                        alt144=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);

                        throw nvae;

                    }

                    switch (alt144) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1635:15: SPECIFY
                            {
                            match(input,SPECIFY,FOLLOW_SPECIFY_in_specifierParametersStart10762); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1635:23: COMPUTE
                            {
                            match(input,COMPUTE,FOLLOW_COMPUTE_in_specifierParametersStart10764); if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1635:31: specifierParametersStart
                            {
                            pushFollow(FOLLOW_specifierParametersStart_in_specifierParametersStart10766);
                            specifierParametersStart();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1637:7: compilerAnnotations annotatedDeclarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_specifierParametersStart10782);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_annotatedDeclarationStart_in_specifierParametersStart10784);
                    annotatedDeclarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "specifierParametersStart"


    public static class qualifiedReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public MemberOperator operator;
        public TypeArgumentList typeArgumentList;
        public boolean isMember;
    };


    // $ANTLR start "qualifiedReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1641:1: qualifiedReference returns [Identifier identifier, MemberOperator operator, \n TypeArgumentList typeArgumentList, boolean isMember] : memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>) ;
    public CeylonParser.qualifiedReference_return qualifiedReference() throws RecognitionException {
        CeylonParser.qualifiedReference_return retval = new CeylonParser.qualifiedReference_return();
        retval.start = input.LT(1);


        MemberOperator memberSelectionOperator247 =null;

        CeylonParser.memberReference_return memberReference248 =null;

        CeylonParser.typeReference_return typeReference249 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1643:5: ( memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>) )
            // /home/david/git/ceylon-spec/Ceylon.g:1643:7: memberSelectionOperator ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)
            {
            pushFollow(FOLLOW_memberSelectionOperator_in_qualifiedReference10811);
            memberSelectionOperator247=memberSelectionOperator();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.operator = memberSelectionOperator247;
                    retval.identifier = new Identifier(retval.operator.getToken());
                    retval.identifier.setText("");
                    retval.isMember =true; }

            // /home/david/git/ceylon-spec/Ceylon.g:1648:7: ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)
            int alt146=3;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1649:9: memberReference
                    {
                    pushFollow(FOLLOW_memberReference_in_qualifiedReference10839);
                    memberReference248=memberReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (memberReference248!=null?memberReference248.identifier:null);
                              retval.typeArgumentList = (memberReference248!=null?memberReference248.typeArgumentList:null); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1652:9: typeReference
                    {
                    pushFollow(FOLLOW_typeReference_in_qualifiedReference10859);
                    typeReference249=typeReference();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.identifier = (typeReference249!=null?typeReference249.identifier:null);
                              retval.typeArgumentList = (typeReference249!=null?typeReference249.typeArgumentList:null);  
                              retval.isMember =false; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1656:9: (~ ( LIDENTIFIER | UIDENTIFIER ) )=>
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualifiedReference"



    // $ANTLR start "memberSelectionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:1662:1: memberSelectionOperator returns [MemberOperator operator] : ( MEMBER_OP | SAFE_MEMBER_OP | SPREAD_OP );
    public MemberOperator memberSelectionOperator() throws RecognitionException {
        MemberOperator operator = null;


        Token MEMBER_OP250=null;
        Token SAFE_MEMBER_OP251=null;
        Token SPREAD_OP252=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1663:5: ( MEMBER_OP | SAFE_MEMBER_OP | SPREAD_OP )
            int alt147=3;
            switch ( input.LA(1) ) {
            case MEMBER_OP:
                {
                alt147=1;
                }
                break;
            case SAFE_MEMBER_OP:
                {
                alt147=2;
                }
                break;
            case SPREAD_OP:
                {
                alt147=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }

            switch (alt147) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1663:7: MEMBER_OP
                    {
                    MEMBER_OP250=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_memberSelectionOperator10926); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new MemberOp(MEMBER_OP250); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1665:7: SAFE_MEMBER_OP
                    {
                    SAFE_MEMBER_OP251=(Token)match(input,SAFE_MEMBER_OP,FOLLOW_SAFE_MEMBER_OP_in_memberSelectionOperator10942); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new SafeMemberOp(SAFE_MEMBER_OP251); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1667:7: SPREAD_OP
                    {
                    SPREAD_OP252=(Token)match(input,SPREAD_OP,FOLLOW_SPREAD_OP_in_memberSelectionOperator10958); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator =new SpreadOp(SPREAD_OP252); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "memberSelectionOperator"



    // $ANTLR start "enumeration"
    // /home/david/git/ceylon-spec/Ceylon.g:1671:1: enumeration returns [SequenceEnumeration sequenceEnumeration] : LBRACE ( sequencedArgument )? RBRACE ;
    public SequenceEnumeration enumeration() throws RecognitionException {
        SequenceEnumeration sequenceEnumeration = null;


        Token LBRACE253=null;
        Token RBRACE255=null;
        SequencedArgument sequencedArgument254 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1672:5: ( LBRACE ( sequencedArgument )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:1672:7: LBRACE ( sequencedArgument )? RBRACE
            {
            LBRACE253=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_enumeration10987); if (state.failed) return sequenceEnumeration;

            if ( state.backtracking==0 ) { sequenceEnumeration = new SequenceEnumeration(LBRACE253); }

            // /home/david/git/ceylon-spec/Ceylon.g:1674:7: ( sequencedArgument )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ALIAS||(LA148_0 >= ASSERT && LA148_0 <= ASSIGN)||(LA148_0 >= BACKTICK && LA148_0 <= BREAK)||(LA148_0 >= CHAR_LITERAL && LA148_0 <= CLASS_DEFINITION)||LA148_0==COMPILER_ANNOTATION||LA148_0==CONTINUE||(LA148_0 >= DECREMENT_OP && LA148_0 <= DIFFERENCE_OP)||LA148_0==DYNAMIC||(LA148_0 >= FLOAT_LITERAL && LA148_0 <= FUNCTION_MODIFIER)||(LA148_0 >= IF_CLAUSE && LA148_0 <= INTERFACE_DEFINITION)||LA148_0==IN_OP||(LA148_0 >= LBRACE && LA148_0 <= LIDENTIFIER)||LA148_0==LPAREN||LA148_0==MODULE||(LA148_0 >= NATURAL_LITERAL && LA148_0 <= NEW)||(LA148_0 >= NOT_OP && LA148_0 <= OBJECT_DEFINITION)||(LA148_0 >= OUT && LA148_0 <= PACKAGE)||LA148_0==PRODUCT_OP||LA148_0==RETURN||(LA148_0 >= SEMICOLON && LA148_0 <= SMALLER_OP)||LA148_0==STRING_LITERAL||LA148_0==STRING_START||(LA148_0 >= SUM_OP && LA148_0 <= SWITCH_CLAUSE)||(LA148_0 >= THIS && LA148_0 <= UIDENTIFIER)||(LA148_0 >= VALUE_MODIFIER && LA148_0 <= WHILE_CLAUSE)) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1675:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_enumeration11015);
                    sequencedArgument254=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return sequenceEnumeration;

                    if ( state.backtracking==0 ) { sequenceEnumeration.setSequencedArgument(sequencedArgument254); }

                    }
                    break;

            }


            RBRACE255=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_enumeration11042); if (state.failed) return sequenceEnumeration;

            if ( state.backtracking==0 ) { sequenceEnumeration.setEndToken(RBRACE255); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return sequenceEnumeration;
    }
    // $ANTLR end "enumeration"



    // $ANTLR start "tuple"
    // /home/david/git/ceylon-spec/Ceylon.g:1682:1: tuple returns [Tuple tuple] : LBRACKET ( sequencedArgument )? RBRACKET ;
    public Tuple tuple() throws RecognitionException {
        Tuple tuple = null;


        Token LBRACKET256=null;
        Token RBRACKET258=null;
        SequencedArgument sequencedArgument257 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1683:5: ( LBRACKET ( sequencedArgument )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1683:7: LBRACKET ( sequencedArgument )? RBRACKET
            {
            LBRACKET256=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tuple11071); if (state.failed) return tuple;

            if ( state.backtracking==0 ) { tuple = new Tuple(LBRACKET256); }

            // /home/david/git/ceylon-spec/Ceylon.g:1685:7: ( sequencedArgument )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ALIAS||(LA149_0 >= ASSERT && LA149_0 <= ASSIGN)||(LA149_0 >= BACKTICK && LA149_0 <= BREAK)||(LA149_0 >= CHAR_LITERAL && LA149_0 <= CLASS_DEFINITION)||LA149_0==COMPILER_ANNOTATION||LA149_0==CONTINUE||(LA149_0 >= DECREMENT_OP && LA149_0 <= DIFFERENCE_OP)||LA149_0==DYNAMIC||(LA149_0 >= FLOAT_LITERAL && LA149_0 <= FUNCTION_MODIFIER)||(LA149_0 >= IF_CLAUSE && LA149_0 <= INTERFACE_DEFINITION)||LA149_0==IN_OP||(LA149_0 >= LBRACE && LA149_0 <= LIDENTIFIER)||LA149_0==LPAREN||LA149_0==MODULE||(LA149_0 >= NATURAL_LITERAL && LA149_0 <= NEW)||(LA149_0 >= NOT_OP && LA149_0 <= OBJECT_DEFINITION)||(LA149_0 >= OUT && LA149_0 <= PACKAGE)||LA149_0==PRODUCT_OP||LA149_0==RETURN||(LA149_0 >= SEMICOLON && LA149_0 <= SMALLER_OP)||LA149_0==STRING_LITERAL||LA149_0==STRING_START||(LA149_0 >= SUM_OP && LA149_0 <= SWITCH_CLAUSE)||(LA149_0 >= THIS && LA149_0 <= UIDENTIFIER)||(LA149_0 >= VALUE_MODIFIER && LA149_0 <= WHILE_CLAUSE)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1686:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_tuple11098);
                    sequencedArgument257=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return tuple;

                    if ( state.backtracking==0 ) { tuple.setSequencedArgument(sequencedArgument257); }

                    }
                    break;

            }


            RBRACKET258=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tuple11125); if (state.failed) return tuple;

            if ( state.backtracking==0 ) { tuple.setEndToken(RBRACKET258); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return tuple;
    }
    // $ANTLR end "tuple"



    // $ANTLR start "dynamicObject"
    // /home/david/git/ceylon-spec/Ceylon.g:1693:1: dynamicObject returns [Dynamic dynamic] : DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET ;
    public Dynamic dynamicObject() throws RecognitionException {
        Dynamic dynamic = null;


        Token DYNAMIC259=null;
        Token LBRACKET260=null;
        Token RBRACKET264=null;
        NamedArgument namedArgument261 =null;

        SpecifiedArgument anonymousArgument262 =null;

        SequencedArgument sequencedArgument263 =null;


         NamedArgumentList nal=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1695:5: ( DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1695:7: DYNAMIC LBRACKET ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACKET
            {
            DYNAMIC259=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_dynamicObject11167); if (state.failed) return dynamic;

            LBRACKET260=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_dynamicObject11169); if (state.failed) return dynamic;

            if ( state.backtracking==0 ) { dynamic = new Dynamic(DYNAMIC259);
                    nal = new NamedArgumentList(LBRACKET260); 
                    dynamic.setNamedArgumentList(nal); }

            // /home/david/git/ceylon-spec/Ceylon.g:1699:7: ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )*
            loop150:
            do {
                int alt150=3;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==COMPILER_ANNOTATION) ) {
                    int LA150_1 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }


                }
                else if ( (LA150_0==IF_CLAUSE) ) {
                    int LA150_3 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==FUNCTION_MODIFIER) ) {
                    int LA150_4 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==VOID_MODIFIER) ) {
                    int LA150_5 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==LPAREN) ) {
                    int LA150_6 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==LET) ) {
                    int LA150_7 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==SWITCH_CLAUSE) ) {
                    int LA150_8 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==NOT_OP) ) {
                    int LA150_9 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==DIFFERENCE_OP) ) {
                    int LA150_10 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==SUM_OP) ) {
                    int LA150_11 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==DECREMENT_OP) ) {
                    int LA150_12 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==INCREMENT_OP) ) {
                    int LA150_13 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==NATURAL_LITERAL) ) {
                    int LA150_14 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==FLOAT_LITERAL) ) {
                    int LA150_15 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==CHAR_LITERAL) ) {
                    int LA150_16 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==STRING_LITERAL) ) {
                    int LA150_17 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==VERBATIM_STRING) ) {
                    int LA150_18 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==STRING_START) ) {
                    int LA150_19 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==BACKTICK) ) {
                    int LA150_20 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==LBRACE) ) {
                    int LA150_21 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==LBRACKET) ) {
                    int LA150_22 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==DYNAMIC) ) {
                    int LA150_23 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==OBJECT_DEFINITION) ) {
                    int LA150_24 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==THIS) ) {
                    int LA150_25 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==SUPER) ) {
                    int LA150_26 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==OUTER) ) {
                    int LA150_27 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==PACKAGE) ) {
                    int LA150_28 = input.LA(2);

                    if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==LIDENTIFIER) ) {
                    int LA150_29 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==UIDENTIFIER) ) {
                    int LA150_30 = input.LA(2);

                    if ( (synpred19_Ceylon()) ) {
                        alt150=1;
                    }
                    else if ( (synpred20_Ceylon()) ) {
                        alt150=2;
                    }


                }
                else if ( (LA150_0==SMALLER_OP) && (synpred19_Ceylon())) {
                    alt150=1;
                }
                else if ( (LA150_0==VALUE_MODIFIER) && (synpred19_Ceylon())) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1701:9: ( namedArgumentStart )=> namedArgument
            	    {
            	    pushFollow(FOLLOW_namedArgument_in_dynamicObject11220);
            	    namedArgument261=namedArgument();

            	    state._fsp--;
            	    if (state.failed) return dynamic;

            	    if ( state.backtracking==0 ) { if (namedArgument261!=null) 
            	                  nal.addNamedArgument(namedArgument261); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1705:9: ( anonymousArgument )=> anonymousArgument
            	    {
            	    pushFollow(FOLLOW_anonymousArgument_in_dynamicObject11254);
            	    anonymousArgument262=anonymousArgument();

            	    state._fsp--;
            	    if (state.failed) return dynamic;

            	    if ( state.backtracking==0 ) { if (anonymousArgument262!=null) 
            	                  nal.addNamedArgument(anonymousArgument262); }

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1710:7: ( sequencedArgument )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ALIAS||(LA151_0 >= ASSERT && LA151_0 <= ASSIGN)||(LA151_0 >= BACKTICK && LA151_0 <= BREAK)||(LA151_0 >= CHAR_LITERAL && LA151_0 <= CLASS_DEFINITION)||LA151_0==COMPILER_ANNOTATION||LA151_0==CONTINUE||(LA151_0 >= DECREMENT_OP && LA151_0 <= DIFFERENCE_OP)||LA151_0==DYNAMIC||(LA151_0 >= FLOAT_LITERAL && LA151_0 <= FUNCTION_MODIFIER)||(LA151_0 >= IF_CLAUSE && LA151_0 <= INTERFACE_DEFINITION)||LA151_0==IN_OP||(LA151_0 >= LBRACE && LA151_0 <= LIDENTIFIER)||LA151_0==LPAREN||LA151_0==MODULE||(LA151_0 >= NATURAL_LITERAL && LA151_0 <= NEW)||(LA151_0 >= NOT_OP && LA151_0 <= OBJECT_DEFINITION)||(LA151_0 >= OUT && LA151_0 <= PACKAGE)||LA151_0==PRODUCT_OP||LA151_0==RETURN||(LA151_0 >= SEMICOLON && LA151_0 <= SMALLER_OP)||LA151_0==STRING_LITERAL||LA151_0==STRING_START||(LA151_0 >= SUM_OP && LA151_0 <= SWITCH_CLAUSE)||(LA151_0 >= THIS && LA151_0 <= UIDENTIFIER)||(LA151_0 >= VALUE_MODIFIER && LA151_0 <= WHILE_CLAUSE)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1711:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_dynamicObject11292);
                    sequencedArgument263=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return dynamic;

                    if ( state.backtracking==0 ) { nal.setSequencedArgument(sequencedArgument263); }

                    }
                    break;

            }


            RBRACKET264=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_dynamicObject11319); if (state.failed) return dynamic;

            if ( state.backtracking==0 ) { nal.setEndToken(RBRACKET264); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return dynamic;
    }
    // $ANTLR end "dynamicObject"



    // $ANTLR start "valueCaseList"
    // /home/david/git/ceylon-spec/Ceylon.g:1718:1: valueCaseList returns [ExpressionList expressionList] :ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )* ;
    public ExpressionList valueCaseList() throws RecognitionException {
        ExpressionList expressionList = null;


        Token c=null;
        Token u=null;
        Term ie1 =null;

        Term ie2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1719:5: (ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1719:7: ie1= intersectionExpression ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )*
            {
            if ( state.backtracking==0 ) { expressionList = new ExpressionList(null); }

            pushFollow(FOLLOW_intersectionExpression_in_valueCaseList11362);
            ie1=intersectionExpression();

            state._fsp--;
            if (state.failed) return expressionList;

            if ( state.backtracking==0 ) { Expression e = new Expression(null);
                    e.setTerm(ie1);
                    expressionList.addExpression(e); }

            // /home/david/git/ceylon-spec/Ceylon.g:1724:7: ( (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |) )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==COMMA||LA154_0==UNION_OP) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1725:9: (c= COMMA |u= UNION_OP ) (ie2= intersectionExpression |)
            	    {
            	    // /home/david/git/ceylon-spec/Ceylon.g:1725:9: (c= COMMA |u= UNION_OP )
            	    int alt152=2;
            	    int LA152_0 = input.LA(1);

            	    if ( (LA152_0==COMMA) ) {
            	        alt152=1;
            	    }
            	    else if ( (LA152_0==UNION_OP) ) {
            	        alt152=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return expressionList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt152) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1726:11: c= COMMA
            	            {
            	            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_valueCaseList11404); if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { expressionList.setEndToken(c); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1728:11: u= UNION_OP
            	            {
            	            u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_valueCaseList11431); if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { expressionList.setEndToken(u); }

            	            }
            	            break;

            	    }


            	    // /home/david/git/ceylon-spec/Ceylon.g:1731:9: (ie2= intersectionExpression |)
            	    int alt153=2;
            	    int LA153_0 = input.LA(1);

            	    if ( (LA153_0==BACKTICK||LA153_0==CHAR_LITERAL||(LA153_0 >= DECREMENT_OP && LA153_0 <= DIFFERENCE_OP)||LA153_0==DYNAMIC||LA153_0==FLOAT_LITERAL||LA153_0==INCREMENT_OP||(LA153_0 >= LBRACE && LA153_0 <= LBRACKET)||LA153_0==LIDENTIFIER||LA153_0==LPAREN||LA153_0==NATURAL_LITERAL||LA153_0==OBJECT_DEFINITION||(LA153_0 >= OUTER && LA153_0 <= PACKAGE)||LA153_0==STRING_LITERAL||LA153_0==STRING_START||(LA153_0 >= SUM_OP && LA153_0 <= SUPER)||LA153_0==THIS||LA153_0==UIDENTIFIER||LA153_0==VERBATIM_STRING) ) {
            	        alt153=1;
            	    }
            	    else if ( (LA153_0==COMMA||LA153_0==RPAREN||LA153_0==UNION_OP) ) {
            	        alt153=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return expressionList;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 153, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt153) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1732:11: ie2= intersectionExpression
            	            {
            	            pushFollow(FOLLOW_intersectionExpression_in_valueCaseList11477);
            	            ie2=intersectionExpression();

            	            state._fsp--;
            	            if (state.failed) return expressionList;

            	            if ( state.backtracking==0 ) { if (ie2!=null) {
            	                            Expression e = new Expression(null);
            	                            e.setTerm(ie2);
            	                            expressionList.addExpression(e);
            	                            expressionList.setEndToken(null); } }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1738:11: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                          new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expressionList;
    }
    // $ANTLR end "valueCaseList"


    public static class memberReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "memberReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1744:1: memberReference returns [Identifier identifier, \n TypeArgumentList typeArgumentList] : memberName ( ( typeArgumentsStart )=> typeArguments )? ;
    public CeylonParser.memberReference_return memberReference() throws RecognitionException {
        CeylonParser.memberReference_return retval = new CeylonParser.memberReference_return();
        retval.start = input.LT(1);


        Identifier memberName265 =null;

        TypeArgumentList typeArguments266 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1746:5: ( memberName ( ( typeArgumentsStart )=> typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1746:7: memberName ( ( typeArgumentsStart )=> typeArguments )?
            {
            pushFollow(FOLLOW_memberName_in_memberReference11542);
            memberName265=memberName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = memberName265; }

            // /home/david/git/ceylon-spec/Ceylon.g:1748:7: ( ( typeArgumentsStart )=> typeArguments )?
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1749:9: ( typeArgumentsStart )=> typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_memberReference11582);
                    typeArguments266=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments266; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "memberReference"


    public static class typeReference_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "typeReference"
    // /home/david/git/ceylon-spec/Ceylon.g:1755:1: typeReference returns [Identifier identifier, \n TypeArgumentList typeArgumentList] : typeName ( ( typeArgumentsStart )=> typeArguments )? ;
    public CeylonParser.typeReference_return typeReference() throws RecognitionException {
        CeylonParser.typeReference_return retval = new CeylonParser.typeReference_return();
        retval.start = input.LT(1);


        Identifier typeName267 =null;

        TypeArgumentList typeArguments268 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1757:5: ( typeName ( ( typeArgumentsStart )=> typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:1757:7: typeName ( ( typeArgumentsStart )=> typeArguments )?
            {
            pushFollow(FOLLOW_typeName_in_typeReference11622);
            typeName267=typeName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = typeName267; }

            // /home/david/git/ceylon-spec/Ceylon.g:1759:7: ( ( typeArgumentsStart )=> typeArguments )?
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1760:9: ( typeArgumentsStart )=> typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_typeReference11663);
                    typeArguments268=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments268; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeReference"



    // $ANTLR start "typeArgumentsStart"
    // /home/david/git/ceylon-spec/Ceylon.g:1769:1: typeArgumentsStart : SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP ) ;
    public void typeArgumentsStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1770:5: ( SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1770:7: SMALLER_OP ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP )
            {
            match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArgumentsStart11702); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:1771:5: ( type ( LARGER_OP | SMALLER_OP | COMMA ) | SMALLER_OP | LARGER_OP )
            int alt157=3;
            switch ( input.LA(1) ) {
            case LBRACE:
            case LBRACKET:
            case UIDENTIFIER:
                {
                alt157=1;
                }
                break;
            case SMALLER_OP:
                {
                int LA157_2 = input.LA(2);

                if ( ((LA157_2 >= LBRACE && LA157_2 <= LBRACKET)||LA157_2==SMALLER_OP||LA157_2==UIDENTIFIER) ) {
                    alt157=1;
                }
                else if ( (LA157_2==EOF) ) {
                    alt157=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 2, input);

                    throw nvae;

                }
                }
                break;
            case LARGER_OP:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;

            }

            switch (alt157) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1772:7: type ( LARGER_OP | SMALLER_OP | COMMA )
                    {
                    pushFollow(FOLLOW_type_in_typeArgumentsStart11716);
                    type();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( input.LA(1)==COMMA||input.LA(1)==LARGER_OP||input.LA(1)==SMALLER_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1775:7: SMALLER_OP
                    {
                    match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArgumentsStart11744); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1777:7: LARGER_OP
                    {
                    match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeArgumentsStart11759); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "typeArgumentsStart"



    // $ANTLR start "indexOrIndexRange"
    // /home/david/git/ceylon-spec/Ceylon.g:1781:1: indexOrIndexRange returns [IndexExpression indexExpression] : LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET ;
    public IndexExpression indexOrIndexRange() throws RecognitionException {
        IndexExpression indexExpression = null;


        Token e1=null;
        Token e2=null;
        Token LBRACKET269=null;
        Token RANGE_OP270=null;
        Token SEGMENT_OP271=null;
        Token RBRACKET272=null;
        Expression i =null;

        Expression l =null;

        Expression u =null;

        Expression s =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1786:5: ( LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:1786:7: LBRACKET (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? ) RBRACKET
            {
            LBRACKET269=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_indexOrIndexRange11807); if (state.failed) return indexExpression;

            if ( state.backtracking==0 ) { indexExpression = new IndexExpression(LBRACKET269); }

            // /home/david/git/ceylon-spec/Ceylon.g:1788:7: (e1= ELLIPSIS i= index |l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )? )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==ELLIPSIS) ) {
                alt159=1;
            }
            else if ( (LA159_0==BACKTICK||LA159_0==CHAR_LITERAL||(LA159_0 >= DECREMENT_OP && LA159_0 <= DIFFERENCE_OP)||LA159_0==DYNAMIC||LA159_0==FLOAT_LITERAL||LA159_0==INCREMENT_OP||(LA159_0 >= LBRACE && LA159_0 <= LBRACKET)||LA159_0==LIDENTIFIER||LA159_0==LPAREN||LA159_0==NATURAL_LITERAL||LA159_0==OBJECT_DEFINITION||(LA159_0 >= OUTER && LA159_0 <= PACKAGE)||LA159_0==STRING_LITERAL||LA159_0==STRING_START||(LA159_0 >= SUM_OP && LA159_0 <= SUPER)||LA159_0==THIS||LA159_0==UIDENTIFIER||LA159_0==VERBATIM_STRING) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return indexExpression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }
            switch (alt159) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1789:9: e1= ELLIPSIS i= index
                    {
                    e1=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_indexOrIndexRange11835); if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { indexExpression.setEndToken(e1); }

                    pushFollow(FOLLOW_index_in_indexOrIndexRange11857);
                    i=index();

                    state._fsp--;
                    if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { ElementRange er0 = new ElementRange(null);
                              er0.setUpperBound(i);
                              indexExpression.setElementOrRange(er0); 
                              indexExpression.setEndToken(null); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1797:9: l= index (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )?
                    {
                    pushFollow(FOLLOW_index_in_indexOrIndexRange11887);
                    l=index();

                    state._fsp--;
                    if (state.failed) return indexExpression;

                    if ( state.backtracking==0 ) { Element e = new Element(null);
                              e.setExpression(l); 
                              indexExpression.setElementOrRange(e); }

                    // /home/david/git/ceylon-spec/Ceylon.g:1801:9: (e2= ELLIPSIS | RANGE_OP u= index | SEGMENT_OP s= index )?
                    int alt158=4;
                    switch ( input.LA(1) ) {
                        case ELLIPSIS:
                            {
                            alt158=1;
                            }
                            break;
                        case RANGE_OP:
                            {
                            alt158=2;
                            }
                            break;
                        case SEGMENT_OP:
                            {
                            alt158=3;
                            }
                            break;
                    }

                    switch (alt158) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1802:11: e2= ELLIPSIS
                            {
                            e2=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_indexOrIndexRange11921); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(e2);
                                        ElementRange er1 = new ElementRange(null);
                                        er1.setLowerBound(l);
                                        indexExpression.setElementOrRange(er1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1808:11: RANGE_OP u= index
                            {
                            RANGE_OP270=(Token)match(input,RANGE_OP,FOLLOW_RANGE_OP_in_indexOrIndexRange11956); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(RANGE_OP270); }

                            pushFollow(FOLLOW_index_in_indexOrIndexRange11983);
                            u=index();

                            state._fsp--;
                            if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { ElementRange er2 = new ElementRange(null);
                                        er2.setLowerBound(l); 
                                        er2.setUpperBound(u); 
                                        indexExpression.setElementOrRange(er2);
                                        indexExpression.setEndToken(null); }

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1816:11: SEGMENT_OP s= index
                            {
                            SEGMENT_OP271=(Token)match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_indexOrIndexRange12008); if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { indexExpression.setEndToken(SEGMENT_OP271); }

                            pushFollow(FOLLOW_index_in_indexOrIndexRange12034);
                            s=index();

                            state._fsp--;
                            if (state.failed) return indexExpression;

                            if ( state.backtracking==0 ) { ElementRange er3 = new ElementRange(null);
                                        er3.setLowerBound(l); 
                                        er3.setLength(s); 
                                        indexExpression.setElementOrRange(er3);
                                        indexExpression.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;

            }


            RBRACKET272=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_indexOrIndexRange12074); if (state.failed) return indexExpression;

            if ( state.backtracking==0 ) { indexExpression.setEndToken(RBRACKET272); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return indexExpression;
    }
    // $ANTLR end "indexOrIndexRange"



    // $ANTLR start "index"
    // /home/david/git/ceylon-spec/Ceylon.g:1830:1: index returns [Expression expression] : additiveExpression ;
    public Expression index() throws RecognitionException {
        Expression expression = null;


        Term additiveExpression273 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1831:5: ( additiveExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:1831:7: additiveExpression
            {
            pushFollow(FOLLOW_additiveExpression_in_index12103);
            additiveExpression273=additiveExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression = new Expression(null);
                    expression.setTerm(additiveExpression273); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "index"



    // $ANTLR start "namedArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:1836:1: namedArguments returns [NamedArgumentList namedArgumentList] : LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE ;
    public NamedArgumentList namedArguments() throws RecognitionException {
        NamedArgumentList namedArgumentList = null;


        Token LBRACE274=null;
        Token RBRACE278=null;
        NamedArgument namedArgument275 =null;

        SpecifiedArgument anonymousArgument276 =null;

        SequencedArgument sequencedArgument277 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1837:5: ( LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:1837:7: LBRACE ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )* ( sequencedArgument )? RBRACE
            {
            LBRACE274=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_namedArguments12133); if (state.failed) return namedArgumentList;

            if ( state.backtracking==0 ) { namedArgumentList = new NamedArgumentList(LBRACE274); }

            // /home/david/git/ceylon-spec/Ceylon.g:1839:7: ( ( namedArgumentStart )=> namedArgument | ( anonymousArgument )=> anonymousArgument )*
            loop160:
            do {
                int alt160=3;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==COMPILER_ANNOTATION) ) {
                    int LA160_1 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }


                }
                else if ( (LA160_0==IF_CLAUSE) ) {
                    int LA160_3 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==FUNCTION_MODIFIER) ) {
                    int LA160_4 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==VOID_MODIFIER) ) {
                    int LA160_5 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==LPAREN) ) {
                    int LA160_6 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==LET) ) {
                    int LA160_7 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==SWITCH_CLAUSE) ) {
                    int LA160_8 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==NOT_OP) ) {
                    int LA160_9 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==DIFFERENCE_OP) ) {
                    int LA160_10 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==SUM_OP) ) {
                    int LA160_11 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==DECREMENT_OP) ) {
                    int LA160_12 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==INCREMENT_OP) ) {
                    int LA160_13 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==NATURAL_LITERAL) ) {
                    int LA160_14 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==FLOAT_LITERAL) ) {
                    int LA160_15 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==CHAR_LITERAL) ) {
                    int LA160_16 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==STRING_LITERAL) ) {
                    int LA160_17 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==VERBATIM_STRING) ) {
                    int LA160_18 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==STRING_START) ) {
                    int LA160_19 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==BACKTICK) ) {
                    int LA160_20 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==LBRACE) ) {
                    int LA160_21 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==LBRACKET) ) {
                    int LA160_22 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==DYNAMIC) ) {
                    int LA160_23 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==OBJECT_DEFINITION) ) {
                    int LA160_24 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==THIS) ) {
                    int LA160_25 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==SUPER) ) {
                    int LA160_26 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==OUTER) ) {
                    int LA160_27 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==PACKAGE) ) {
                    int LA160_28 = input.LA(2);

                    if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==LIDENTIFIER) ) {
                    int LA160_29 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==UIDENTIFIER) ) {
                    int LA160_30 = input.LA(2);

                    if ( (synpred23_Ceylon()) ) {
                        alt160=1;
                    }
                    else if ( (synpred24_Ceylon()) ) {
                        alt160=2;
                    }


                }
                else if ( (LA160_0==SMALLER_OP) && (synpred23_Ceylon())) {
                    alt160=1;
                }
                else if ( (LA160_0==VALUE_MODIFIER) && (synpred23_Ceylon())) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1841:9: ( namedArgumentStart )=> namedArgument
            	    {
            	    pushFollow(FOLLOW_namedArgument_in_namedArguments12185);
            	    namedArgument275=namedArgument();

            	    state._fsp--;
            	    if (state.failed) return namedArgumentList;

            	    if ( state.backtracking==0 ) { if (namedArgument275!=null) 
            	                  namedArgumentList.addNamedArgument(namedArgument275); }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1845:9: ( anonymousArgument )=> anonymousArgument
            	    {
            	    pushFollow(FOLLOW_anonymousArgument_in_namedArguments12219);
            	    anonymousArgument276=anonymousArgument();

            	    state._fsp--;
            	    if (state.failed) return namedArgumentList;

            	    if ( state.backtracking==0 ) { if (anonymousArgument276!=null) 
            	                  namedArgumentList.addNamedArgument(anonymousArgument276); }

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1850:7: ( sequencedArgument )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ALIAS||(LA161_0 >= ASSERT && LA161_0 <= ASSIGN)||(LA161_0 >= BACKTICK && LA161_0 <= BREAK)||(LA161_0 >= CHAR_LITERAL && LA161_0 <= CLASS_DEFINITION)||LA161_0==COMPILER_ANNOTATION||LA161_0==CONTINUE||(LA161_0 >= DECREMENT_OP && LA161_0 <= DIFFERENCE_OP)||LA161_0==DYNAMIC||(LA161_0 >= FLOAT_LITERAL && LA161_0 <= FUNCTION_MODIFIER)||(LA161_0 >= IF_CLAUSE && LA161_0 <= INTERFACE_DEFINITION)||LA161_0==IN_OP||(LA161_0 >= LBRACE && LA161_0 <= LIDENTIFIER)||LA161_0==LPAREN||LA161_0==MODULE||(LA161_0 >= NATURAL_LITERAL && LA161_0 <= NEW)||(LA161_0 >= NOT_OP && LA161_0 <= OBJECT_DEFINITION)||(LA161_0 >= OUT && LA161_0 <= PACKAGE)||LA161_0==PRODUCT_OP||LA161_0==RETURN||(LA161_0 >= SEMICOLON && LA161_0 <= SMALLER_OP)||LA161_0==STRING_LITERAL||LA161_0==STRING_START||(LA161_0 >= SUM_OP && LA161_0 <= SWITCH_CLAUSE)||(LA161_0 >= THIS && LA161_0 <= UIDENTIFIER)||(LA161_0 >= VALUE_MODIFIER && LA161_0 <= WHILE_CLAUSE)) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1851:9: sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_namedArguments12257);
                    sequencedArgument277=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return namedArgumentList;

                    if ( state.backtracking==0 ) { namedArgumentList.setSequencedArgument(sequencedArgument277); }

                    }
                    break;

            }


            RBRACE278=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_namedArguments12284); if (state.failed) return namedArgumentList;

            if ( state.backtracking==0 ) { namedArgumentList.setEndToken(RBRACE278); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgumentList;
    }
    // $ANTLR end "namedArguments"



    // $ANTLR start "sequencedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1858:1: sequencedArgument returns [SequencedArgument sequencedArgument] : compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )* ;
    public SequencedArgument sequencedArgument() throws RecognitionException {
        SequencedArgument sequencedArgument = null;


        Token c=null;
        Comprehension c1 =null;

        ListedArgument pa1 =null;

        SpreadArgument sa1 =null;

        Comprehension c2 =null;

        ListedArgument pa2 =null;

        SpreadArgument sa2 =null;

        List<CompilerAnnotation> compilerAnnotations279 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1859:5: ( compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )* )
            // /home/david/git/ceylon-spec/Ceylon.g:1859:7: compilerAnnotations ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument ) (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )*
            {
            pushFollow(FOLLOW_compilerAnnotations_in_sequencedArgument12313);
            compilerAnnotations279=compilerAnnotations();

            state._fsp--;
            if (state.failed) return sequencedArgument;

            if ( state.backtracking==0 ) { sequencedArgument = new SequencedArgument(null);
                    sequencedArgument.getCompilerAnnotations().addAll(compilerAnnotations279); }

            // /home/david/git/ceylon-spec/Ceylon.g:1862:9: ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension |pa1= positionalArgument |sa1= spreadArgument )
            int alt162=3;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==FOR_CLAUSE) && (synpred25_Ceylon())) {
                alt162=1;
            }
            else if ( (LA162_0==IF_CLAUSE) ) {
                int LA162_2 = input.LA(2);

                if ( (synpred25_Ceylon()) ) {
                    alt162=1;
                }
                else if ( (true) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA162_0==BACKTICK||LA162_0==CHAR_LITERAL||(LA162_0 >= DECREMENT_OP && LA162_0 <= DIFFERENCE_OP)||LA162_0==DYNAMIC||LA162_0==FLOAT_LITERAL||LA162_0==FUNCTION_MODIFIER||LA162_0==INCREMENT_OP||(LA162_0 >= LBRACE && LA162_0 <= LIDENTIFIER)||LA162_0==LPAREN||LA162_0==NATURAL_LITERAL||(LA162_0 >= NOT_OP && LA162_0 <= OBJECT_DEFINITION)||(LA162_0 >= OUTER && LA162_0 <= PACKAGE)||LA162_0==STRING_LITERAL||LA162_0==STRING_START||(LA162_0 >= SUM_OP && LA162_0 <= SWITCH_CLAUSE)||LA162_0==THIS||LA162_0==UIDENTIFIER||(LA162_0 >= VERBATIM_STRING && LA162_0 <= VOID_MODIFIER)) ) {
                alt162=2;
            }
            else if ( (LA162_0==PRODUCT_OP) ) {
                alt162=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }
            switch (alt162) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1863:11: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c1= comprehension
                    {
                    pushFollow(FOLLOW_comprehension_in_sequencedArgument12369);
                    c1=comprehension();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (c1!=null)
                                    sequencedArgument.addPositionalArgument(c1); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1868:11: pa1= positionalArgument
                    {
                    pushFollow(FOLLOW_positionalArgument_in_sequencedArgument12406);
                    pa1=positionalArgument();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (pa1!=null)
                                    sequencedArgument.addPositionalArgument(pa1); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1872:11: sa1= spreadArgument
                    {
                    pushFollow(FOLLOW_spreadArgument_in_sequencedArgument12442);
                    sa1=spreadArgument();

                    state._fsp--;
                    if (state.failed) return sequencedArgument;

                    if ( state.backtracking==0 ) { if (sa1!=null)
                                    sequencedArgument.addPositionalArgument(sa1); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1876:9: (c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |) )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1877:11: c= COMMA ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |)
            	    {
            	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_sequencedArgument12488); if (state.failed) return sequencedArgument;

            	    if ( state.backtracking==0 ) { sequencedArgument.setEndToken(c); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:1879:11: ( ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension |pa2= positionalArgument |sa2= spreadArgument |)
            	    int alt163=4;
            	    int LA163_0 = input.LA(1);

            	    if ( (LA163_0==FOR_CLAUSE) && (synpred26_Ceylon())) {
            	        alt163=1;
            	    }
            	    else if ( (LA163_0==IF_CLAUSE) ) {
            	        int LA163_2 = input.LA(2);

            	        if ( (synpred26_Ceylon()) ) {
            	            alt163=1;
            	        }
            	        else if ( (true) ) {
            	            alt163=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 163, 2, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA163_0==BACKTICK||LA163_0==CHAR_LITERAL||(LA163_0 >= DECREMENT_OP && LA163_0 <= DIFFERENCE_OP)||LA163_0==DYNAMIC||LA163_0==FLOAT_LITERAL||LA163_0==FUNCTION_MODIFIER||LA163_0==INCREMENT_OP||(LA163_0 >= LBRACE && LA163_0 <= LIDENTIFIER)||LA163_0==LPAREN||LA163_0==NATURAL_LITERAL||(LA163_0 >= NOT_OP && LA163_0 <= OBJECT_DEFINITION)||(LA163_0 >= OUTER && LA163_0 <= PACKAGE)||LA163_0==STRING_LITERAL||LA163_0==STRING_START||(LA163_0 >= SUM_OP && LA163_0 <= SWITCH_CLAUSE)||LA163_0==THIS||LA163_0==UIDENTIFIER||(LA163_0 >= VERBATIM_STRING && LA163_0 <= VOID_MODIFIER)) ) {
            	        alt163=2;
            	    }
            	    else if ( (LA163_0==PRODUCT_OP) ) {
            	        alt163=3;
            	    }
            	    else if ( (LA163_0==COMMA||(LA163_0 >= RBRACE && LA163_0 <= RBRACKET)||LA163_0==RPAREN) ) {
            	        alt163=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return sequencedArgument;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 163, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt163) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1880:13: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )=>c2= comprehension
            	            {
            	            pushFollow(FOLLOW_comprehension_in_sequencedArgument12554);
            	            c2=comprehension();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (c2!=null) {
            	                              sequencedArgument.addPositionalArgument(c2);
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1886:13: pa2= positionalArgument
            	            {
            	            pushFollow(FOLLOW_positionalArgument_in_sequencedArgument12597);
            	            pa2=positionalArgument();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (pa2!=null) {
            	                              sequencedArgument.addPositionalArgument(pa2); 
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 3 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1891:13: sa2= spreadArgument
            	            {
            	            pushFollow(FOLLOW_spreadArgument_in_sequencedArgument12640);
            	            sa2=spreadArgument();

            	            state._fsp--;
            	            if (state.failed) return sequencedArgument;

            	            if ( state.backtracking==0 ) { if (sa2!=null) {
            	                              sequencedArgument.addPositionalArgument(sa2); 
            	                              sequencedArgument.setEndToken(null); } }

            	            }
            	            break;
            	        case 4 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:1896:13: 
            	            {
            	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
            	                            new MismatchedTokenException(LIDENTIFIER, input)); }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return sequencedArgument;
    }
    // $ANTLR end "sequencedArgument"



    // $ANTLR start "namedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1902:1: namedArgument returns [NamedArgument namedArgument] : compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration ) ;
    public NamedArgument namedArgument() throws RecognitionException {
        NamedArgument namedArgument = null;


        SpecifiedArgument namedSpecifiedArgument280 =null;

        NamedArgument namedArgumentDeclaration281 =null;

        List<CompilerAnnotation> compilerAnnotations282 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1903:5: ( compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1903:7: compilerAnnotations ( namedSpecifiedArgument | namedArgumentDeclaration )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_namedArgument12725);
            compilerAnnotations282=compilerAnnotations();

            state._fsp--;
            if (state.failed) return namedArgument;

            // /home/david/git/ceylon-spec/Ceylon.g:1904:5: ( namedSpecifiedArgument | namedArgumentDeclaration )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LIDENTIFIER) ) {
                int LA165_1 = input.LA(2);

                if ( (LA165_1==SEMICOLON||LA165_1==SPECIFY) ) {
                    alt165=1;
                }
                else if ( (LA165_1==COMPUTE||LA165_1==LPAREN) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return namedArgument;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA165_0==DYNAMIC||LA165_0==FUNCTION_MODIFIER||(LA165_0 >= LBRACE && LA165_0 <= LBRACKET)||LA165_0==OBJECT_DEFINITION||LA165_0==SMALLER_OP||LA165_0==UIDENTIFIER||LA165_0==VALUE_MODIFIER||LA165_0==VOID_MODIFIER) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return namedArgument;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1905:7: namedSpecifiedArgument
                    {
                    pushFollow(FOLLOW_namedSpecifiedArgument_in_namedArgument12742);
                    namedSpecifiedArgument280=namedSpecifiedArgument();

                    state._fsp--;
                    if (state.failed) return namedArgument;

                    if ( state.backtracking==0 ) { namedArgument = namedSpecifiedArgument280; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1908:7: namedArgumentDeclaration
                    {
                    pushFollow(FOLLOW_namedArgumentDeclaration_in_namedArgument12764);
                    namedArgumentDeclaration281=namedArgumentDeclaration();

                    state._fsp--;
                    if (state.failed) return namedArgument;

                    if ( state.backtracking==0 ) { namedArgument = namedArgumentDeclaration281; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { if (namedArgument!=null)
                      namedArgument.getCompilerAnnotations().addAll(compilerAnnotations282); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgument;
    }
    // $ANTLR end "namedArgument"



    // $ANTLR start "namedSpecifiedArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1915:1: namedSpecifiedArgument returns [SpecifiedArgument specifiedArgument] : memberName ( specifier )? SEMICOLON ;
    public SpecifiedArgument namedSpecifiedArgument() throws RecognitionException {
        SpecifiedArgument specifiedArgument = null;


        Token SEMICOLON285=null;
        Identifier memberName283 =null;

        SpecifierExpression specifier284 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1916:5: ( memberName ( specifier )? SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1916:7: memberName ( specifier )? SEMICOLON
            {
            pushFollow(FOLLOW_memberName_in_namedSpecifiedArgument12805);
            memberName283=memberName();

            state._fsp--;
            if (state.failed) return specifiedArgument;

            if ( state.backtracking==0 ) { specifiedArgument = new SpecifiedArgument(null); 
                    specifiedArgument.setIdentifier(memberName283); }

            // /home/david/git/ceylon-spec/Ceylon.g:1919:7: ( specifier )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==SPECIFY) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1920:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_namedSpecifiedArgument12831);
                    specifier284=specifier();

                    state._fsp--;
                    if (state.failed) return specifiedArgument;

                    if ( state.backtracking==0 ) { specifiedArgument.setSpecifierExpression(specifier284); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON285=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_namedSpecifiedArgument12867); if (state.failed) return specifiedArgument;

            if ( state.backtracking==0 ) { specifiedArgument.setEndToken(SEMICOLON285); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifiedArgument;
    }
    // $ANTLR end "namedSpecifiedArgument"



    // $ANTLR start "anonymousArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1928:1: anonymousArgument returns [SpecifiedArgument namedArgument] : functionOrExpression SEMICOLON ;
    public SpecifiedArgument anonymousArgument() throws RecognitionException {
        SpecifiedArgument namedArgument = null;


        Token SEMICOLON287=null;
        Expression functionOrExpression286 =null;


         namedArgument = new SpecifiedArgument(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1930:5: ( functionOrExpression SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:1930:7: functionOrExpression SEMICOLON
            {
            pushFollow(FOLLOW_functionOrExpression_in_anonymousArgument12905);
            functionOrExpression286=functionOrExpression();

            state._fsp--;
            if (state.failed) return namedArgument;

            if ( state.backtracking==0 ) { SpecifierExpression se = new SpecifierExpression(null);
                   se.setExpression(functionOrExpression286);
                   namedArgument.setSpecifierExpression(se); }

            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON287=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_anonymousArgument12931); if (state.failed) return namedArgument;

            if ( state.backtracking==0 ) { namedArgument.setEndToken(SEMICOLON287); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return namedArgument;
    }
    // $ANTLR end "anonymousArgument"



    // $ANTLR start "objectArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1939:1: objectArgument returns [ObjectArgument declaration] : OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) ;
    public ObjectArgument objectArgument() throws RecognitionException {
        ObjectArgument declaration = null;


        Token OBJECT_DEFINITION288=null;
        Token SEMICOLON293=null;
        Identifier memberNameDeclaration289 =null;

        ExtendedType extendedType290 =null;

        SatisfiedTypes satisfiedTypes291 =null;

        ClassBody classBody292 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1940:5: ( OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1940:7: OBJECT_DEFINITION memberNameDeclaration ( extendedType )? ( satisfiedTypes )? ( classBody | SEMICOLON )
            {
            OBJECT_DEFINITION288=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_objectArgument12960); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration = new ObjectArgument(OBJECT_DEFINITION288); 
                    declaration.setType(new ValueModifier(null)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_objectArgument12977);
            memberNameDeclaration289=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration289); }

            // /home/david/git/ceylon-spec/Ceylon.g:1945:7: ( extendedType )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==EXTENDS) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1946:9: extendedType
                    {
                    pushFollow(FOLLOW_extendedType_in_objectArgument13004);
                    extendedType290=extendedType();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setExtendedType(extendedType290); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1949:7: ( satisfiedTypes )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==SATISFIES) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1950:9: satisfiedTypes
                    {
                    pushFollow(FOLLOW_satisfiedTypes_in_objectArgument13043);
                    satisfiedTypes291=satisfiedTypes();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setSatisfiedTypes(satisfiedTypes291); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:1953:7: ( classBody | SEMICOLON )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==LBRACE) ) {
                alt169=1;
            }
            else if ( (LA169_0==SEMICOLON) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }
            switch (alt169) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1954:9: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_objectArgument13081);
                    classBody292=classBody();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setClassBody(classBody292); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1956:9: SEMICOLON
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                  new MismatchedTokenException(LBRACE, input)); }

                    SEMICOLON293=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_objectArgument13111); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON293); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "objectArgument"



    // $ANTLR start "voidOrInferredMethodArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1963:1: voidOrInferredMethodArgument returns [MethodArgument declaration] : ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON ) ;
    public MethodArgument voidOrInferredMethodArgument() throws RecognitionException {
        MethodArgument declaration = null;


        Token VOID_MODIFIER294=null;
        Token FUNCTION_MODIFIER295=null;
        Token SEMICOLON300=null;
        Identifier memberNameDeclaration296 =null;

        ParameterList parameters297 =null;

        Block block298 =null;

        SpecifierExpression functionSpecifier299 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1964:5: ( ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1964:7: ( VOID_MODIFIER | FUNCTION_MODIFIER ) memberNameDeclaration ( parameters )* ( block | ( functionSpecifier )? SEMICOLON )
            {
            if ( state.backtracking==0 ) { declaration =new MethodArgument(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:1965:7: ( VOID_MODIFIER | FUNCTION_MODIFIER )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==VOID_MODIFIER) ) {
                alt170=1;
            }
            else if ( (LA170_0==FUNCTION_MODIFIER) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1966:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER294=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodArgument13168); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setType(new VoidModifier(VOID_MODIFIER294)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1969:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER295=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodArgument13196); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setType(new FunctionModifier(FUNCTION_MODIFIER295)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_voidOrInferredMethodArgument13223);
            memberNameDeclaration296=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration296); }

            // /home/david/git/ceylon-spec/Ceylon.g:1974:7: ( parameters )*
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==LPAREN) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:1975:9: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_voidOrInferredMethodArgument13250);
            	    parameters297=parameters();

            	    state._fsp--;
            	    if (state.failed) return declaration;

            	    if ( state.backtracking==0 ) { declaration.addParameterList(parameters297); }

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:1978:7: ( block | ( functionSpecifier )? SEMICOLON )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==LBRACE) ) {
                alt173=1;
            }
            else if ( (LA173_0==COMPUTE||LA173_0==SEMICOLON||LA173_0==SPECIFY) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;

            }
            switch (alt173) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1979:9: block
                    {
                    pushFollow(FOLLOW_block_in_voidOrInferredMethodArgument13287);
                    block298=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block298); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:1982:9: ( functionSpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:1982:9: ( functionSpecifier )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==COMPUTE||LA172_0==SPECIFY) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:1983:11: functionSpecifier
                            {
                            pushFollow(FOLLOW_functionSpecifier_in_voidOrInferredMethodArgument13328);
                            functionSpecifier299=functionSpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(functionSpecifier299); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON300=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidOrInferredMethodArgument13371); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON300); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "voidOrInferredMethodArgument"



    // $ANTLR start "inferredGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:1993:1: inferredGetterArgument returns [AttributeArgument declaration] : VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON ) ;
    public AttributeArgument inferredGetterArgument() throws RecognitionException {
        AttributeArgument declaration = null;


        Token VALUE_MODIFIER301=null;
        Token SEMICOLON306=null;
        Identifier memberNameDeclaration302 =null;

        Block block303 =null;

        SpecifierExpression specifier304 =null;

        SpecifierExpression lazySpecifier305 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:1994:5: ( VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON ) )
            // /home/david/git/ceylon-spec/Ceylon.g:1994:7: VALUE_MODIFIER memberNameDeclaration ( block | ( specifier | lazySpecifier )? SEMICOLON )
            {
            if ( state.backtracking==0 ) { declaration =new AttributeArgument(null); }

            VALUE_MODIFIER301=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_inferredGetterArgument13428); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setType(new ValueModifier(VALUE_MODIFIER301)); }

            pushFollow(FOLLOW_memberNameDeclaration_in_inferredGetterArgument13445);
            memberNameDeclaration302=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { declaration.setIdentifier(memberNameDeclaration302); }

            // /home/david/git/ceylon-spec/Ceylon.g:1999:7: ( block | ( specifier | lazySpecifier )? SEMICOLON )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==LBRACE) ) {
                alt175=1;
            }
            else if ( (LA175_0==COMPUTE||LA175_0==SEMICOLON||LA175_0==SPECIFY) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }
            switch (alt175) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2000:9: block
                    {
                    pushFollow(FOLLOW_block_in_inferredGetterArgument13472);
                    block303=block();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration.setBlock(block303); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2003:9: ( specifier | lazySpecifier )? SEMICOLON
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2003:9: ( specifier | lazySpecifier )?
                    int alt174=3;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==SPECIFY) ) {
                        alt174=1;
                    }
                    else if ( (LA174_0==COMPUTE) ) {
                        alt174=2;
                    }
                    switch (alt174) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2004:11: specifier
                            {
                            pushFollow(FOLLOW_specifier_in_inferredGetterArgument13513);
                            specifier304=specifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(specifier304); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2007:11: lazySpecifier
                            {
                            pushFollow(FOLLOW_lazySpecifier_in_inferredGetterArgument13549);
                            lazySpecifier305=lazySpecifier();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { declaration.setSpecifierExpression(lazySpecifier305); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                    SEMICOLON306=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inferredGetterArgument13593); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { expecting=-1; }

                    if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON306); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "inferredGetterArgument"



    // $ANTLR start "typedMethodOrGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2017:1: typedMethodOrGetterArgument returns [TypedArgument declaration] : ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) ) ;
    public TypedArgument typedMethodOrGetterArgument() throws RecognitionException {
        TypedArgument declaration = null;


        Token s1=null;
        Token s2=null;
        Token DYNAMIC308=null;
        Block b1 =null;

        Block b2 =null;

        StaticType type307 =null;

        Identifier memberNameDeclaration309 =null;

        ParameterList parameters310 =null;

        SpecifierExpression functionSpecifier311 =null;

        SpecifierExpression specifier312 =null;

        SpecifierExpression lazySpecifier313 =null;


         MethodArgument marg = new MethodArgument(null);
                    AttributeArgument aarg = new AttributeArgument(null); 
                    declaration =aarg; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2021:5: ( ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2021:7: ( type | DYNAMIC ) memberNameDeclaration ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2021:7: ( type | DYNAMIC )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( ((LA176_0 >= LBRACE && LA176_0 <= LBRACKET)||LA176_0==SMALLER_OP||LA176_0==UIDENTIFIER) ) {
                alt176=1;
            }
            else if ( (LA176_0==DYNAMIC) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2022:9: type
                    {
                    pushFollow(FOLLOW_type_in_typedMethodOrGetterArgument13661);
                    type307=type();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { marg.setType(type307);
                              aarg.setType(type307); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2026:9: DYNAMIC
                    {
                    DYNAMIC308=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_typedMethodOrGetterArgument13690); if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { DynamicModifier dm = new DynamicModifier(DYNAMIC308);
                              marg.setType(dm);
                              aarg.setType(dm); }

                    }
                    break;

            }


            pushFollow(FOLLOW_memberNameDeclaration_in_typedMethodOrGetterArgument13716);
            memberNameDeclaration309=memberNameDeclaration();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { marg.setIdentifier(memberNameDeclaration309);
                    aarg.setIdentifier(memberNameDeclaration309); }

            // /home/david/git/ceylon-spec/Ceylon.g:2034:7: ( ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON ) | (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON ) )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==LPAREN) ) {
                alt182=1;
            }
            else if ( (LA182_0==COMPUTE||LA182_0==LBRACE||LA182_0==SEMICOLON||LA182_0==SPECIFY) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;

            }
            switch (alt182) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2035:9: ( parameters )+ (b1= block | ( functionSpecifier )? s1= SEMICOLON )
                    {
                    if ( state.backtracking==0 ) { declaration = marg; }

                    // /home/david/git/ceylon-spec/Ceylon.g:2036:9: ( parameters )+
                    int cnt177=0;
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==LPAREN) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2037:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_typedMethodOrGetterArgument13764);
                    	    parameters310=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { marg.addParameterList(parameters310); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt177 >= 1 ) break loop177;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(177, input);
                                throw eee;
                        }
                        cnt177++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:2040:9: (b1= block | ( functionSpecifier )? s1= SEMICOLON )
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==LBRACE) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==COMPUTE||LA179_0==SEMICOLON||LA179_0==SPECIFY) ) {
                        alt179=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 0, input);

                        throw nvae;

                    }
                    switch (alt179) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2041:11: b1= block
                            {
                            pushFollow(FOLLOW_block_in_typedMethodOrGetterArgument13811);
                            b1=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { marg.setBlock(b1); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2044:11: ( functionSpecifier )? s1= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:2044:11: ( functionSpecifier )?
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==COMPUTE||LA178_0==SPECIFY) ) {
                                alt178=1;
                            }
                            switch (alt178) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2045:13: functionSpecifier
                                    {
                                    pushFollow(FOLLOW_functionSpecifier_in_typedMethodOrGetterArgument13860);
                                    functionSpecifier311=functionSpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { marg.setSpecifierExpression(functionSpecifier311); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s1=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument13913); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { expecting=-1; }

                            if ( state.backtracking==0 ) { declaration.setEndToken(s1); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2054:9: (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON )
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2054:9: (b2= block | ( specifier | lazySpecifier )? s2= SEMICOLON )
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==LBRACE) ) {
                        alt181=1;
                    }
                    else if ( (LA181_0==COMPUTE||LA181_0==SEMICOLON||LA181_0==SPECIFY) ) {
                        alt181=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return declaration;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 0, input);

                        throw nvae;

                    }
                    switch (alt181) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2055:11: b2= block
                            {
                            pushFollow(FOLLOW_block_in_typedMethodOrGetterArgument13979);
                            b2=block();

                            state._fsp--;
                            if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { aarg.setBlock(b2); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2058:11: ( specifier | lazySpecifier )? s2= SEMICOLON
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:2058:11: ( specifier | lazySpecifier )?
                            int alt180=3;
                            int LA180_0 = input.LA(1);

                            if ( (LA180_0==SPECIFY) ) {
                                alt180=1;
                            }
                            else if ( (LA180_0==COMPUTE) ) {
                                alt180=2;
                            }
                            switch (alt180) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2059:13: specifier
                                    {
                                    pushFollow(FOLLOW_specifier_in_typedMethodOrGetterArgument14028);
                                    specifier312=specifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(specifier312); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2062:13: lazySpecifier
                                    {
                                    pushFollow(FOLLOW_lazySpecifier_in_typedMethodOrGetterArgument14070);
                                    lazySpecifier313=lazySpecifier();

                                    state._fsp--;
                                    if (state.failed) return declaration;

                                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(lazySpecifier313); }

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

                            s2=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument14124); if (state.failed) return declaration;

                            if ( state.backtracking==0 ) { expecting=-1; }

                            if ( state.backtracking==0 ) { declaration.setEndToken(s2); }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "typedMethodOrGetterArgument"



    // $ANTLR start "untypedMethodOrGetterArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2073:1: untypedMethodOrGetterArgument returns [TypedArgument declaration] : memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON ;
    public TypedArgument untypedMethodOrGetterArgument() throws RecognitionException {
        TypedArgument declaration = null;


        Token SEMICOLON318=null;
        Identifier memberName314 =null;

        ParameterList parameters315 =null;

        SpecifierExpression functionSpecifier316 =null;

        SpecifierExpression lazySpecifier317 =null;


         MethodArgument marg = new MethodArgument(null);
                    marg.setType(new FunctionModifier(null));
                    AttributeArgument aarg = new AttributeArgument(null);
                    aarg.setType(new ValueModifier(null));
                    declaration =aarg; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2079:5: ( memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON )
            // /home/david/git/ceylon-spec/Ceylon.g:2079:7: memberName ( ( parameters )+ ( functionSpecifier ) | lazySpecifier ) SEMICOLON
            {
            pushFollow(FOLLOW_memberName_in_untypedMethodOrGetterArgument14196);
            memberName314=memberName();

            state._fsp--;
            if (state.failed) return declaration;

            if ( state.backtracking==0 ) { marg.setIdentifier(memberName314);
                    aarg.setIdentifier(memberName314); }

            // /home/david/git/ceylon-spec/Ceylon.g:2082:7: ( ( parameters )+ ( functionSpecifier ) | lazySpecifier )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LPAREN) ) {
                alt184=1;
            }
            else if ( (LA184_0==COMPUTE) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;

            }
            switch (alt184) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2083:9: ( parameters )+ ( functionSpecifier )
                    {
                    if ( state.backtracking==0 ) { declaration = marg; }

                    // /home/david/git/ceylon-spec/Ceylon.g:2084:9: ( parameters )+
                    int cnt183=0;
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);

                        if ( (LA183_0==LPAREN) ) {
                            alt183=1;
                        }


                        switch (alt183) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2085:11: parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_untypedMethodOrGetterArgument14245);
                    	    parameters315=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return declaration;

                    	    if ( state.backtracking==0 ) { marg.addParameterList(parameters315); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt183 >= 1 ) break loop183;
                    	    if (state.backtracking>0) {state.failed=true; return declaration;}
                                EarlyExitException eee =
                                    new EarlyExitException(183, input);
                                throw eee;
                        }
                        cnt183++;
                    } while (true);


                    // /home/david/git/ceylon-spec/Ceylon.g:2088:9: ( functionSpecifier )
                    // /home/david/git/ceylon-spec/Ceylon.g:2089:11: functionSpecifier
                    {
                    pushFollow(FOLLOW_functionSpecifier_in_untypedMethodOrGetterArgument14290);
                    functionSpecifier316=functionSpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { marg.setSpecifierExpression(functionSpecifier316); }

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2097:11: lazySpecifier
                    {
                    pushFollow(FOLLOW_lazySpecifier_in_untypedMethodOrGetterArgument14368);
                    lazySpecifier317=lazySpecifier();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { aarg.setSpecifierExpression(lazySpecifier317); }

                    }
                    break;

            }


            if ( state.backtracking==0 ) { expecting=SEMICOLON; }

            SEMICOLON318=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_untypedMethodOrGetterArgument14414); if (state.failed) return declaration;

            if ( state.backtracking==0 ) { expecting=-1; }

            if ( state.backtracking==0 ) { declaration.setEndToken(SEMICOLON318); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "untypedMethodOrGetterArgument"



    // $ANTLR start "namedArgumentDeclaration"
    // /home/david/git/ceylon-spec/Ceylon.g:2107:1: namedArgumentDeclaration returns [NamedArgument declaration] : ( objectArgument | typedMethodOrGetterArgument | voidOrInferredMethodArgument | inferredGetterArgument | untypedMethodOrGetterArgument );
    public NamedArgument namedArgumentDeclaration() throws RecognitionException {
        NamedArgument declaration = null;


        ObjectArgument objectArgument319 =null;

        TypedArgument typedMethodOrGetterArgument320 =null;

        MethodArgument voidOrInferredMethodArgument321 =null;

        AttributeArgument inferredGetterArgument322 =null;

        TypedArgument untypedMethodOrGetterArgument323 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2108:5: ( objectArgument | typedMethodOrGetterArgument | voidOrInferredMethodArgument | inferredGetterArgument | untypedMethodOrGetterArgument )
            int alt185=5;
            switch ( input.LA(1) ) {
            case OBJECT_DEFINITION:
                {
                alt185=1;
                }
                break;
            case DYNAMIC:
            case LBRACE:
            case LBRACKET:
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt185=2;
                }
                break;
            case FUNCTION_MODIFIER:
            case VOID_MODIFIER:
                {
                alt185=3;
                }
                break;
            case VALUE_MODIFIER:
                {
                alt185=4;
                }
                break;
            case LIDENTIFIER:
                {
                alt185=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return declaration;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }

            switch (alt185) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2108:7: objectArgument
                    {
                    pushFollow(FOLLOW_objectArgument_in_namedArgumentDeclaration14451);
                    objectArgument319=objectArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =objectArgument319; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2110:7: typedMethodOrGetterArgument
                    {
                    pushFollow(FOLLOW_typedMethodOrGetterArgument_in_namedArgumentDeclaration14467);
                    typedMethodOrGetterArgument320=typedMethodOrGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =typedMethodOrGetterArgument320; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2112:7: voidOrInferredMethodArgument
                    {
                    pushFollow(FOLLOW_voidOrInferredMethodArgument_in_namedArgumentDeclaration14483);
                    voidOrInferredMethodArgument321=voidOrInferredMethodArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =voidOrInferredMethodArgument321; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2114:7: inferredGetterArgument
                    {
                    pushFollow(FOLLOW_inferredGetterArgument_in_namedArgumentDeclaration14499);
                    inferredGetterArgument322=inferredGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =inferredGetterArgument322; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2116:7: untypedMethodOrGetterArgument
                    {
                    pushFollow(FOLLOW_untypedMethodOrGetterArgument_in_namedArgumentDeclaration14515);
                    untypedMethodOrGetterArgument323=untypedMethodOrGetterArgument();

                    state._fsp--;
                    if (state.failed) return declaration;

                    if ( state.backtracking==0 ) { declaration =untypedMethodOrGetterArgument323; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return declaration;
    }
    // $ANTLR end "namedArgumentDeclaration"



    // $ANTLR start "namedArgumentStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2123:1: namedArgumentStart : compilerAnnotations ( specificationStart | declarationStart ) ;
    public void namedArgumentStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2124:5: ( compilerAnnotations ( specificationStart | declarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2124:7: compilerAnnotations ( specificationStart | declarationStart )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_namedArgumentStart14543);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2125:7: ( specificationStart | declarationStart )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==LIDENTIFIER) ) {
                alt186=1;
            }
            else if ( (LA186_0==ALIAS||LA186_0==ASSIGN||LA186_0==CLASS_DEFINITION||LA186_0==DYNAMIC||LA186_0==FUNCTION_MODIFIER||LA186_0==INTERFACE_DEFINITION||(LA186_0 >= LBRACE && LA186_0 <= LBRACKET)||LA186_0==NEW||LA186_0==OBJECT_DEFINITION||LA186_0==SMALLER_OP||LA186_0==UIDENTIFIER||LA186_0==VALUE_MODIFIER||LA186_0==VOID_MODIFIER) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2125:8: specificationStart
                    {
                    pushFollow(FOLLOW_specificationStart_in_namedArgumentStart14553);
                    specificationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2125:29: declarationStart
                    {
                    pushFollow(FOLLOW_declarationStart_in_namedArgumentStart14557);
                    declarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "namedArgumentStart"



    // $ANTLR start "namedAnnotationArgumentsStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2128:1: namedAnnotationArgumentsStart : LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE ) ;
    public void namedAnnotationArgumentsStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2129:5: ( LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2129:7: LBRACE ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE )
            {
            match(input,LBRACE,FOLLOW_LBRACE_in_namedAnnotationArgumentsStart14575); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2129:14: ( ( namedArgumentStart )=> namedArgumentStart | iterableArgumentStart | RBRACE )
            int alt187=3;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==COMPILER_ANNOTATION) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==LIDENTIFIER) ) {
                int LA187_2 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==VALUE_MODIFIER) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==FUNCTION_MODIFIER) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==VOID_MODIFIER) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==ASSIGN) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==INTERFACE_DEFINITION) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==CLASS_DEFINITION) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==OBJECT_DEFINITION) ) {
                int LA187_9 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==NEW) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==ALIAS) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==UIDENTIFIER) ) {
                int LA187_12 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==SMALLER_OP) && (synpred27_Ceylon())) {
                alt187=1;
            }
            else if ( (LA187_0==LBRACKET) ) {
                int LA187_14 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==LBRACE) ) {
                int LA187_15 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==DYNAMIC) ) {
                int LA187_16 = input.LA(2);

                if ( (synpred27_Ceylon()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==BACKTICK||LA187_0==CHAR_LITERAL||(LA187_0 >= DECREMENT_OP && LA187_0 <= DIFFERENCE_OP)||LA187_0==FLOAT_LITERAL||LA187_0==INCREMENT_OP||LA187_0==LPAREN||LA187_0==NATURAL_LITERAL||LA187_0==NOT_OP||(LA187_0 >= OUTER && LA187_0 <= PACKAGE)||LA187_0==STRING_LITERAL||LA187_0==STRING_START||(LA187_0 >= SUM_OP && LA187_0 <= SUPER)||LA187_0==THIS||LA187_0==VERBATIM_STRING) ) {
                alt187=2;
            }
            else if ( (LA187_0==RBRACE) ) {
                alt187=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2129:15: ( namedArgumentStart )=> namedArgumentStart
                    {
                    pushFollow(FOLLOW_namedArgumentStart_in_namedAnnotationArgumentsStart14582);
                    namedArgumentStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2129:58: iterableArgumentStart
                    {
                    pushFollow(FOLLOW_iterableArgumentStart_in_namedAnnotationArgumentsStart14586);
                    iterableArgumentStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2129:82: RBRACE
                    {
                    match(input,RBRACE,FOLLOW_RBRACE_in_namedAnnotationArgumentsStart14590); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "namedAnnotationArgumentsStart"



    // $ANTLR start "iterableArgumentStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2132:1: iterableArgumentStart : compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE ) ;
    public void iterableArgumentStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2133:5: ( compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2133:7: compilerAnnotations expression ( COMMA | SEMICOLON | RBRACE )
            {
            pushFollow(FOLLOW_compilerAnnotations_in_iterableArgumentStart14608);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_expression_in_iterableArgumentStart14610);
            expression();

            state._fsp--;
            if (state.failed) return ;

            if ( input.LA(1)==COMMA||input.LA(1)==RBRACE||input.LA(1)==SEMICOLON ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "iterableArgumentStart"



    // $ANTLR start "specificationStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2137:1: specificationStart : LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE ) ;
    public void specificationStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2138:5: ( LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2138:7: LIDENTIFIER ( parameters )* ( SPECIFY | COMPUTE )
            {
            match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_specificationStart14636); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2138:19: ( parameters )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==LPAREN) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2138:19: parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_specificationStart14638);
            	    parameters();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            if ( input.LA(1)==COMPUTE||input.LA(1)==SPECIFY ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "specificationStart"



    // $ANTLR start "parExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2141:1: parExpression returns [Expression expression] : LPAREN functionOrExpression RPAREN ;
    public Expression parExpression() throws RecognitionException {
        Expression expression = null;


        Token LPAREN324=null;
        Token RPAREN326=null;
        Expression functionOrExpression325 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2142:5: ( LPAREN functionOrExpression RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:2142:7: LPAREN functionOrExpression RPAREN
            {
            LPAREN324=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parExpression14667); if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression = new Expression(LPAREN324); }

            pushFollow(FOLLOW_functionOrExpression_in_parExpression14684);
            functionOrExpression325=functionOrExpression();

            state._fsp--;
            if (state.failed) return expression;

            if ( state.backtracking==0 ) { if (functionOrExpression325!=null)
                        expression.setTerm(functionOrExpression325.getTerm()); }

            RPAREN326=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parExpression14700); if (state.failed) return expression;

            if ( state.backtracking==0 ) { expression.setEndToken(RPAREN326); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "parExpression"



    // $ANTLR start "positionalArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:2151:1: positionalArguments returns [PositionalArgumentList positionalArgumentList] : LPAREN (sa= sequencedArgument )? RPAREN ;
    public PositionalArgumentList positionalArguments() throws RecognitionException {
        PositionalArgumentList positionalArgumentList = null;


        Token LPAREN327=null;
        Token RPAREN328=null;
        SequencedArgument sa =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2152:5: ( LPAREN (sa= sequencedArgument )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:2152:7: LPAREN (sa= sequencedArgument )? RPAREN
            {
            LPAREN327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_positionalArguments14737); if (state.failed) return positionalArgumentList;

            if ( state.backtracking==0 ) { positionalArgumentList = new PositionalArgumentList(LPAREN327); }

            // /home/david/git/ceylon-spec/Ceylon.g:2154:7: (sa= sequencedArgument )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==ALIAS||(LA189_0 >= ASSERT && LA189_0 <= ASSIGN)||(LA189_0 >= BACKTICK && LA189_0 <= BREAK)||(LA189_0 >= CHAR_LITERAL && LA189_0 <= CLASS_DEFINITION)||LA189_0==COMPILER_ANNOTATION||LA189_0==CONTINUE||(LA189_0 >= DECREMENT_OP && LA189_0 <= DIFFERENCE_OP)||LA189_0==DYNAMIC||(LA189_0 >= FLOAT_LITERAL && LA189_0 <= FUNCTION_MODIFIER)||(LA189_0 >= IF_CLAUSE && LA189_0 <= INTERFACE_DEFINITION)||LA189_0==IN_OP||(LA189_0 >= LBRACE && LA189_0 <= LIDENTIFIER)||LA189_0==LPAREN||LA189_0==MODULE||(LA189_0 >= NATURAL_LITERAL && LA189_0 <= NEW)||(LA189_0 >= NOT_OP && LA189_0 <= OBJECT_DEFINITION)||(LA189_0 >= OUT && LA189_0 <= PACKAGE)||LA189_0==PRODUCT_OP||LA189_0==RETURN||(LA189_0 >= SEMICOLON && LA189_0 <= SMALLER_OP)||LA189_0==STRING_LITERAL||LA189_0==STRING_START||(LA189_0 >= SUM_OP && LA189_0 <= SWITCH_CLAUSE)||(LA189_0 >= THIS && LA189_0 <= UIDENTIFIER)||(LA189_0 >= VALUE_MODIFIER && LA189_0 <= WHILE_CLAUSE)) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2155:9: sa= sequencedArgument
                    {
                    pushFollow(FOLLOW_sequencedArgument_in_positionalArguments14766);
                    sa=sequencedArgument();

                    state._fsp--;
                    if (state.failed) return positionalArgumentList;

                    if ( state.backtracking==0 ) { if (sa!=null) {
                                  for (PositionalArgument pa: sa.getPositionalArguments())
                                      positionalArgumentList.addPositionalArgument(pa);
                                  //TODO: this is really nasty, PositionalArgumentList should have
                                  //      or be a SequencedArgument, not copy its PositionalArguments!
                                  positionalArgumentList.setEndToken(sa.getMainEndToken()); } }

                    }
                    break;

            }


            RPAREN328=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_positionalArguments14793); if (state.failed) return positionalArgumentList;

            if ( state.backtracking==0 ) { positionalArgumentList.setEndToken(RPAREN328); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgumentList;
    }
    // $ANTLR end "positionalArguments"



    // $ANTLR start "positionalArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2167:1: positionalArgument returns [ListedArgument positionalArgument] : functionOrExpression ;
    public ListedArgument positionalArgument() throws RecognitionException {
        ListedArgument positionalArgument = null;


        Expression functionOrExpression329 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2168:5: ( functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:2168:7: functionOrExpression
            {
            if ( state.backtracking==0 ) { positionalArgument = new ListedArgument(null); }

            pushFollow(FOLLOW_functionOrExpression_in_positionalArgument14830);
            functionOrExpression329=functionOrExpression();

            state._fsp--;
            if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { positionalArgument.setExpression(functionOrExpression329); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgument;
    }
    // $ANTLR end "positionalArgument"



    // $ANTLR start "spreadArgument"
    // /home/david/git/ceylon-spec/Ceylon.g:2173:1: spreadArgument returns [SpreadArgument positionalArgument] : PRODUCT_OP unionExpression ;
    public SpreadArgument spreadArgument() throws RecognitionException {
        SpreadArgument positionalArgument = null;


        Token PRODUCT_OP330=null;
        Term unionExpression331 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2174:5: ( PRODUCT_OP unionExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:2174:7: PRODUCT_OP unionExpression
            {
            PRODUCT_OP330=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_spreadArgument14859); if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { positionalArgument = new SpreadArgument(PRODUCT_OP330); }

            pushFollow(FOLLOW_unionExpression_in_spreadArgument14875);
            unionExpression331=unionExpression();

            state._fsp--;
            if (state.failed) return positionalArgument;

            if ( state.backtracking==0 ) { Expression e = new Expression(null);
                    e.setTerm(unionExpression331);
                    positionalArgument.setExpression(e); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return positionalArgument;
    }
    // $ANTLR end "spreadArgument"



    // $ANTLR start "anonParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2182:1: anonParametersStart : LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart ) ;
    public void anonParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2183:5: ( LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2183:7: LPAREN ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart )
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_anonParametersStart14900); if (state.failed) return ;

            // /home/david/git/ceylon-spec/Ceylon.g:2184:5: ( RPAREN | LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) ) | compilerAnnotations annotatedDeclarationStart )
            int alt191=3;
            switch ( input.LA(1) ) {
            case RPAREN:
                {
                alt191=1;
                }
                break;
            case LIDENTIFIER:
                {
                int LA191_2 = input.LA(2);

                if ( (LA191_2==COMMA||LA191_2==RPAREN) ) {
                    alt191=2;
                }
                else if ( (LA191_2==ALIAS||LA191_2==ASSIGN||LA191_2==CLASS_DEFINITION||LA191_2==DYNAMIC||LA191_2==FUNCTION_MODIFIER||LA191_2==INTERFACE_DEFINITION||(LA191_2 >= LBRACE && LA191_2 <= LBRACKET)||LA191_2==LIDENTIFIER||LA191_2==LPAREN||LA191_2==NEW||LA191_2==OBJECT_DEFINITION||LA191_2==SMALLER_OP||LA191_2==UIDENTIFIER||LA191_2==VALUE_MODIFIER||LA191_2==VOID_MODIFIER) ) {
                    alt191=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSIGN:
            case CLASS_DEFINITION:
            case COMPILER_ANNOTATION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case INTERFACE_DEFINITION:
            case LBRACE:
            case LBRACKET:
            case NEW:
            case OBJECT_DEFINITION:
            case SMALLER_OP:
            case STRING_LITERAL:
            case UIDENTIFIER:
            case VALUE_MODIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt191=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }

            switch (alt191) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2185:7: RPAREN
                    {
                    match(input,RPAREN,FOLLOW_RPAREN_in_anonParametersStart14916); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2186:7: LIDENTIFIER ( COMMA | RPAREN ( COMPUTE | LBRACE ) )
                    {
                    match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_anonParametersStart14924); if (state.failed) return ;

                    // /home/david/git/ceylon-spec/Ceylon.g:2186:19: ( COMMA | RPAREN ( COMPUTE | LBRACE ) )
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==COMMA) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==RPAREN) ) {
                        alt190=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);

                        throw nvae;

                    }
                    switch (alt190) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2186:20: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_anonParametersStart14927); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2186:28: RPAREN ( COMPUTE | LBRACE )
                            {
                            match(input,RPAREN,FOLLOW_RPAREN_in_anonParametersStart14931); if (state.failed) return ;

                            if ( input.LA(1)==COMPUTE||input.LA(1)==LBRACE ) {
                                input.consume();
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2187:7: compilerAnnotations annotatedDeclarationStart
                    {
                    pushFollow(FOLLOW_compilerAnnotations_in_anonParametersStart14947);
                    compilerAnnotations();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_annotatedDeclarationStart_in_anonParametersStart14949);
                    annotatedDeclarationStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "anonParametersStart"



    // $ANTLR start "nonemptyParametersStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2191:1: nonemptyParametersStart : LPAREN compilerAnnotations annotatedDeclarationStart ;
    public void nonemptyParametersStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2192:5: ( LPAREN compilerAnnotations annotatedDeclarationStart )
            // /home/david/git/ceylon-spec/Ceylon.g:2192:7: LPAREN compilerAnnotations annotatedDeclarationStart
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_nonemptyParametersStart14973); if (state.failed) return ;

            pushFollow(FOLLOW_compilerAnnotations_in_nonemptyParametersStart14975);
            compilerAnnotations();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_annotatedDeclarationStart_in_nonemptyParametersStart14977);
            annotatedDeclarationStart();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nonemptyParametersStart"



    // $ANTLR start "functionOrExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2195:1: functionOrExpression returns [Expression expression] : ( ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction | conditionalExpression | switchExpression |e= expression );
    public Expression functionOrExpression() throws RecognitionException {
        Expression expression = null;


        Expression e =null;

        FunctionArgument anonymousFunction332 =null;

        Term conditionalExpression333 =null;

        SwitchExpression switchExpression334 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2196:5: ( ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction | conditionalExpression | switchExpression |e= expression )
            int alt192=4;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==FUNCTION_MODIFIER) && (synpred28_Ceylon())) {
                alt192=1;
            }
            else if ( (LA192_0==VOID_MODIFIER) && (synpred28_Ceylon())) {
                alt192=1;
            }
            else if ( (LA192_0==LPAREN) ) {
                int LA192_3 = input.LA(2);

                if ( (synpred28_Ceylon()) ) {
                    alt192=1;
                }
                else if ( (true) ) {
                    alt192=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expression;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA192_0==IF_CLAUSE||LA192_0==LET) ) {
                alt192=2;
            }
            else if ( (LA192_0==SWITCH_CLAUSE) ) {
                alt192=3;
            }
            else if ( (LA192_0==BACKTICK||LA192_0==CHAR_LITERAL||(LA192_0 >= DECREMENT_OP && LA192_0 <= DIFFERENCE_OP)||LA192_0==DYNAMIC||LA192_0==FLOAT_LITERAL||LA192_0==INCREMENT_OP||(LA192_0 >= LBRACE && LA192_0 <= LBRACKET)||LA192_0==LIDENTIFIER||LA192_0==NATURAL_LITERAL||(LA192_0 >= NOT_OP && LA192_0 <= OBJECT_DEFINITION)||(LA192_0 >= OUTER && LA192_0 <= PACKAGE)||LA192_0==STRING_LITERAL||LA192_0==STRING_START||(LA192_0 >= SUM_OP && LA192_0 <= SUPER)||LA192_0==THIS||LA192_0==UIDENTIFIER||LA192_0==VERBATIM_STRING) ) {
                alt192=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;

            }
            switch (alt192) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2196:7: ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )=> anonymousFunction
                    {
                    pushFollow(FOLLOW_anonymousFunction_in_functionOrExpression15014);
                    anonymousFunction332=anonymousFunction();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(anonymousFunction332); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2200:7: conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_functionOrExpression15030);
                    conditionalExpression333=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null); 
                            expression.setTerm(conditionalExpression333); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2203:7: switchExpression
                    {
                    pushFollow(FOLLOW_switchExpression_in_functionOrExpression15046);
                    switchExpression334=switchExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null); 
                            expression.setTerm(switchExpression334); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2206:7: e= expression
                    {
                    pushFollow(FOLLOW_expression_in_functionOrExpression15064);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = e; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "functionOrExpression"



    // $ANTLR start "let"
    // /home/david/git/ceylon-spec/Ceylon.g:2210:1: let returns [LetExpression let] : letClause ;
    public LetExpression let() throws RecognitionException {
        LetExpression let = null;


        LetClause letClause335 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2211:5: ( letClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2211:7: letClause
            {
            pushFollow(FOLLOW_letClause_in_let15093);
            letClause335=letClause();

            state._fsp--;
            if (state.failed) return let;

            if ( state.backtracking==0 ) { let = new LetExpression(null);
                    let.setLetClause(letClause335); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return let;
    }
    // $ANTLR end "let"



    // $ANTLR start "patternStart"
    // /home/david/git/ceylon-spec/Ceylon.g:2216:1: patternStart : ( ( variable ENTRY_OP )=> variable ENTRY_OP | tuplePatternStart );
    public void patternStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2217:5: ( ( variable ENTRY_OP )=> variable ENTRY_OP | tuplePatternStart )
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==COMPILER_ANNOTATION) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==UIDENTIFIER) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==SMALLER_OP) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==LBRACKET) ) {
                int LA193_4 = input.LA(2);

                if ( (synpred29_Ceylon()) ) {
                    alt193=1;
                }
                else if ( (true) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA193_0==LBRACE) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==VOID_MODIFIER) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==FUNCTION_MODIFIER) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==VALUE_MODIFIER) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else if ( (LA193_0==LIDENTIFIER) && (synpred29_Ceylon())) {
                alt193=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }
            switch (alt193) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2217:7: ( variable ENTRY_OP )=> variable ENTRY_OP
                    {
                    pushFollow(FOLLOW_variable_in_patternStart15126);
                    variable();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_patternStart15128); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2218:7: tuplePatternStart
                    {
                    pushFollow(FOLLOW_tuplePatternStart_in_patternStart15139);
                    tuplePatternStart();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "patternStart"



    // $ANTLR start "letVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:2221:1: letVariable returns [Statement statement] : ( ( patternStart )=> pattern | variable ) ( specifier )? ;
    public Statement letVariable() throws RecognitionException {
        Statement statement = null;


        Pattern pattern336 =null;

        Variable variable337 =null;

        SpecifierExpression specifier338 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2222:5: ( ( ( patternStart )=> pattern | variable ) ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2222:7: ( ( patternStart )=> pattern | variable ) ( specifier )?
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2222:7: ( ( patternStart )=> pattern | variable )
            int alt194=2;
            switch ( input.LA(1) ) {
            case LBRACKET:
                {
                int LA194_1 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 1, input);

                    throw nvae;

                }
                }
                break;
            case COMPILER_ANNOTATION:
                {
                int LA194_2 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 2, input);

                    throw nvae;

                }
                }
                break;
            case UIDENTIFIER:
                {
                int LA194_3 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 3, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA194_4 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 4, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA194_5 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 5, input);

                    throw nvae;

                }
                }
                break;
            case VOID_MODIFIER:
                {
                int LA194_6 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 6, input);

                    throw nvae;

                }
                }
                break;
            case FUNCTION_MODIFIER:
                {
                int LA194_7 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 7, input);

                    throw nvae;

                }
                }
                break;
            case VALUE_MODIFIER:
                {
                int LA194_8 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 8, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA194_9 = input.LA(2);

                if ( (synpred30_Ceylon()) ) {
                    alt194=1;
                }
                else if ( (true) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return statement;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 9, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return statement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;

            }

            switch (alt194) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2223:9: ( patternStart )=> pattern
                    {
                    pushFollow(FOLLOW_pattern_in_letVariable15176);
                    pattern336=pattern();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { Destructure d = new Destructure(null);
                              d.setPattern(pattern336);
                              statement = d; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2228:9: variable
                    {
                    pushFollow(FOLLOW_variable_in_letVariable15204);
                    variable337=variable();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement =variable337; }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:2231:7: ( specifier )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==SPECIFY) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2232:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_letVariable15240);
                    specifier338=specifier();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { if (statement instanceof Destructure)
                                ((Destructure) statement).setSpecifierExpression(specifier338);
                              else if (statement instanceof Variable)
                                ((Variable) statement).setSpecifierExpression(specifier338); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "letVariable"



    // $ANTLR start "letClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2240:1: letClause returns [LetClause letClause] : LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch ;
    public LetClause letClause() throws RecognitionException {
        LetClause letClause = null;


        Token LET339=null;
        Token LPAREN340=null;
        Token COMMA341=null;
        Token RPAREN342=null;
        Statement v1 =null;

        Statement v2 =null;

        Expression conditionalBranch343 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2241:5: ( LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2241:7: LET LPAREN (v1= letVariable ( COMMA v2= letVariable )* )? RPAREN conditionalBranch
            {
            LET339=(Token)match(input,LET,FOLLOW_LET_in_letClause15280); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause = new LetClause(LET339); }

            LPAREN340=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_letClause15296); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setEndToken(LPAREN340); }

            // /home/david/git/ceylon-spec/Ceylon.g:2245:7: (v1= letVariable ( COMMA v2= letVariable )* )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==COMPILER_ANNOTATION||LA197_0==FUNCTION_MODIFIER||(LA197_0 >= LBRACE && LA197_0 <= LBRACKET)||LA197_0==LIDENTIFIER||LA197_0==SMALLER_OP||LA197_0==UIDENTIFIER||LA197_0==VALUE_MODIFIER||LA197_0==VOID_MODIFIER) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2246:9: v1= letVariable ( COMMA v2= letVariable )*
                    {
                    pushFollow(FOLLOW_letVariable_in_letClause15324);
                    v1=letVariable();

                    state._fsp--;
                    if (state.failed) return letClause;

                    if ( state.backtracking==0 ) { letClause.setEndToken(null);
                              letClause.addVariable(v1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2249:9: ( COMMA v2= letVariable )*
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);

                        if ( (LA196_0==COMMA) ) {
                            alt196=1;
                        }


                        switch (alt196) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2250:11: COMMA v2= letVariable
                    	    {
                    	    COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_letClause15356); if (state.failed) return letClause;

                    	    if ( state.backtracking==0 ) { letClause.setEndToken(COMMA341); }

                    	    pushFollow(FOLLOW_letVariable_in_letClause15382);
                    	    v2=letVariable();

                    	    state._fsp--;
                    	    if (state.failed) return letClause;

                    	    if ( state.backtracking==0 ) { letClause.setEndToken(null); 
                    	                letClause.addVariable(v2); }

                    	    }
                    	    break;

                    	default :
                    	    break loop196;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_letClause15422); if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setEndToken(RPAREN342); }

            pushFollow(FOLLOW_conditionalBranch_in_letClause15438);
            conditionalBranch343=conditionalBranch();

            state._fsp--;
            if (state.failed) return letClause;

            if ( state.backtracking==0 ) { letClause.setExpression(conditionalBranch343); 
                    letClause.setEndToken(null); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return letClause;
    }
    // $ANTLR end "letClause"



    // $ANTLR start "conditionalExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2264:1: conditionalExpression returns [Term term] : ( ifExpression | let );
    public Term conditionalExpression() throws RecognitionException {
        Term term = null;


        IfExpression ifExpression344 =null;

        LetExpression let345 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2265:5: ( ifExpression | let )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==IF_CLAUSE) ) {
                alt198=1;
            }
            else if ( (LA198_0==LET) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;

            }
            switch (alt198) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2265:7: ifExpression
                    {
                    pushFollow(FOLLOW_ifExpression_in_conditionalExpression15467);
                    ifExpression344=ifExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = ifExpression344; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2267:7: let
                    {
                    pushFollow(FOLLOW_let_in_conditionalExpression15483);
                    let345=let();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = let345; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "conditionalExpression"



    // $ANTLR start "switchExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2271:1: switchExpression returns [SwitchExpression term] : switchHeader caseExpressions ;
    public SwitchExpression switchExpression() throws RecognitionException {
        SwitchExpression term = null;


        SwitchClause switchHeader346 =null;

        SwitchCaseList caseExpressions347 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2272:5: ( switchHeader caseExpressions )
            // /home/david/git/ceylon-spec/Ceylon.g:2272:7: switchHeader caseExpressions
            {
            pushFollow(FOLLOW_switchHeader_in_switchExpression15512);
            switchHeader346=switchHeader();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = new SwitchExpression(null);
                    term.setSwitchClause(switchHeader346); }

            pushFollow(FOLLOW_caseExpressions_in_switchExpression15528);
            caseExpressions347=caseExpressions();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term.setSwitchCaseList(caseExpressions347);
                    //TODO: huge copy/paste job from switchCaseElse 
                    Identifier id = null;
                    Switched sw = switchHeader346.getSwitched();
                    if (sw!=null) {
                      Expression ex = sw.getExpression();
                      if (ex!=null && ex.getTerm() instanceof BaseMemberExpression) {
                        id = ((BaseMemberExpression) ex.getTerm()).getIdentifier();
                      }
                      TypedDeclaration var = switchHeader346.getSwitched().getVariable();
                      if (var!=null) {
                        id = var.getIdentifier();
                      }
                    }
                    if (id!=null) {
                      for (CaseClause cc: caseExpressions347.getCaseClauses()) {
                        CaseItem item = cc.getCaseItem();
                        if (item instanceof IsCase) {
                          IsCase ic = (IsCase) item;
                          Variable v = new Variable(null);
                          v.setType(new SyntheticVariable(null));
                          v.setIdentifier(id);
                          SpecifierExpression se = new SpecifierExpression(null);
                          Expression e = new Expression(null);
                          BaseMemberExpression bme = new BaseMemberExpression(null);
                          bme.setIdentifier(id);
                          bme.setTypeArguments( new InferredTypeArguments(null) );
                          e.setTerm(bme);
                          se.setExpression(e);
                          v.setSpecifierExpression(se);
                          ic.setVariable(v);
                        }
                      } 
                      ElseClause ec = caseExpressions347.getElseClause();
                      if (ec!=null) {
                        Variable ev = new Variable(null);
                        ev.setType(new SyntheticVariable(null));
                        SpecifierExpression ese = new SpecifierExpression(null);
                        Expression ee = new Expression(null);
                        BaseMemberExpression ebme = new BaseMemberExpression(null);
                        ebme.setTypeArguments( new InferredTypeArguments(null) );
                        ee.setTerm(ebme);
                        ese.setExpression(ee);
                        ev.setSpecifierExpression(ese);
                        ec.setVariable(ev);
                        ebme.setIdentifier(id);
                        ev.setIdentifier(id);
                      }
                    } 
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "switchExpression"



    // $ANTLR start "caseExpressions"
    // /home/david/git/ceylon-spec/Ceylon.g:2328:1: caseExpressions returns [SwitchCaseList switchCaseList] : ( caseExpression )+ ( defaultCaseExpression )? ;
    public SwitchCaseList caseExpressions() throws RecognitionException {
        SwitchCaseList switchCaseList = null;


        CaseClause caseExpression348 =null;

        ElseClause defaultCaseExpression349 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2329:5: ( ( caseExpression )+ ( defaultCaseExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2329:7: ( caseExpression )+ ( defaultCaseExpression )?
            {
            if ( state.backtracking==0 ) { switchCaseList = new SwitchCaseList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:2330:7: ( caseExpression )+
            int cnt199=0;
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==CASE_CLAUSE) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2331:9: caseExpression
            	    {
            	    pushFollow(FOLLOW_caseExpression_in_caseExpressions15575);
            	    caseExpression348=caseExpression();

            	    state._fsp--;
            	    if (state.failed) return switchCaseList;

            	    if ( state.backtracking==0 ) { switchCaseList.addCaseClause(caseExpression348); }

            	    }
            	    break;

            	default :
            	    if ( cnt199 >= 1 ) break loop199;
            	    if (state.backtracking>0) {state.failed=true; return switchCaseList;}
                        EarlyExitException eee =
                            new EarlyExitException(199, input);
                        throw eee;
                }
                cnt199++;
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:2334:7: ( defaultCaseExpression )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==ELSE_CLAUSE) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2335:9: defaultCaseExpression
                    {
                    pushFollow(FOLLOW_defaultCaseExpression_in_caseExpressions15612);
                    defaultCaseExpression349=defaultCaseExpression();

                    state._fsp--;
                    if (state.failed) return switchCaseList;

                    if ( state.backtracking==0 ) { switchCaseList.setElseClause(defaultCaseExpression349); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switchCaseList;
    }
    // $ANTLR end "caseExpressions"



    // $ANTLR start "caseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2340:1: caseExpression returns [CaseClause clause] : CASE_CLAUSE caseItemList conditionalBranch ;
    public CaseClause caseExpression() throws RecognitionException {
        CaseClause clause = null;


        Token CASE_CLAUSE350=null;
        CaseItem caseItemList351 =null;

        Expression conditionalBranch352 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2341:5: ( CASE_CLAUSE caseItemList conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2341:7: CASE_CLAUSE caseItemList conditionalBranch
            {
            CASE_CLAUSE350=(Token)match(input,CASE_CLAUSE,FOLLOW_CASE_CLAUSE_in_caseExpression15656); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CaseClause(CASE_CLAUSE350); }

            pushFollow(FOLLOW_caseItemList_in_caseExpression15673);
            caseItemList351=caseItemList();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCaseItem(caseItemList351); }

            pushFollow(FOLLOW_conditionalBranch_in_caseExpression15689);
            conditionalBranch352=conditionalBranch();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setExpression(conditionalBranch352); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "caseExpression"



    // $ANTLR start "defaultCaseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2349:1: defaultCaseExpression returns [ElseClause clause] : ELSE_CLAUSE conditionalBranch ;
    public ElseClause defaultCaseExpression() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE353=null;
        Expression conditionalBranch354 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2350:5: ( ELSE_CLAUSE conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2350:7: ELSE_CLAUSE conditionalBranch
            {
            ELSE_CLAUSE353=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_defaultCaseExpression15718); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE353); }

            pushFollow(FOLLOW_conditionalBranch_in_defaultCaseExpression15735);
            conditionalBranch354=conditionalBranch();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setExpression(conditionalBranch354); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "defaultCaseExpression"



    // $ANTLR start "ifExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2356:1: ifExpression returns [IfExpression term] : IF_CLAUSE thenElseClauses ;
    public IfExpression ifExpression() throws RecognitionException {
        IfExpression term = null;


        Token IF_CLAUSE355=null;
        CeylonParser.thenElseClauses_return thenElseClauses356 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2357:5: ( IF_CLAUSE thenElseClauses )
            // /home/david/git/ceylon-spec/Ceylon.g:2357:7: IF_CLAUSE thenElseClauses
            {
            IF_CLAUSE355=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifExpression15764); if (state.failed) return term;

            if ( state.backtracking==0 ) { term = new IfExpression(IF_CLAUSE355); }

            pushFollow(FOLLOW_thenElseClauses_in_ifExpression15780);
            thenElseClauses356=thenElseClauses();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { IfClause ic = (thenElseClauses356!=null?thenElseClauses356.ifClause:null);
                    ElseClause ec = (thenElseClauses356!=null?thenElseClauses356.elseClause:null);
                    ConditionList cl = (thenElseClauses356!=null?thenElseClauses356.conditionList:null);
                    term.setIfClause(ic);
                    term.setElseClause(ec);
                    if (cl!=null) {
                      if (ic==null) {
                        ic = new IfClause(null);
                        term.setIfClause(ic);
                      }
                      ic.setConditionList(cl); 
                      if (cl!=null) {
                        List<Condition> conditions = cl.getConditions();
                        if (conditions.size()==1) {
                          Condition c = conditions.get(0);
                          Identifier id = null;
                          Type t = null;
                          if (c instanceof ExistsOrNonemptyCondition) {
                            Statement s = ((ExistsOrNonemptyCondition)c).getVariable();
                            if (s instanceof Variable) {
                              Variable v = (Variable) s;
                              t = v.getType();
                              id = v.getIdentifier();
                            }
                          }
                          else if (c instanceof IsCondition) {
                            Variable v = (Variable) ((IsCondition)c).getVariable();
                            if (v!=null) {
                              t = v.getType();
                              id = v.getIdentifier();
                            }
                          }
                          if (id!=null && ec!=null && t instanceof SyntheticVariable) { 
                            Variable ev = new Variable(null);
                            ev.setType(new SyntheticVariable(null));
                            SpecifierExpression ese = new SpecifierExpression(null);
                            Expression ee = new Expression(null);
                            BaseMemberExpression ebme = new BaseMemberExpression(null);
                            ebme.setTypeArguments( new InferredTypeArguments(null) );
                            ee.setTerm(ebme);
                            ese.setExpression(ee);
                            ev.setSpecifierExpression(ese);
                            ec.setVariable(ev);
                            ev.setIdentifier(id);
                            ebme.setIdentifier(id);
                          }
                        }
                      }        
                    } 
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "ifExpression"



    // $ANTLR start "conditionalBranch"
    // /home/david/git/ceylon-spec/Ceylon.g:2412:1: conditionalBranch returns [Expression expression] : ( conditionalExpression | disjunctionExpression );
    public Expression conditionalBranch() throws RecognitionException {
        Expression expression = null;


        Term conditionalExpression357 =null;

        Term disjunctionExpression358 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2413:5: ( conditionalExpression | disjunctionExpression )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==IF_CLAUSE||LA201_0==LET) ) {
                alt201=1;
            }
            else if ( (LA201_0==BACKTICK||LA201_0==CHAR_LITERAL||(LA201_0 >= DECREMENT_OP && LA201_0 <= DIFFERENCE_OP)||LA201_0==DYNAMIC||LA201_0==FLOAT_LITERAL||LA201_0==INCREMENT_OP||(LA201_0 >= LBRACE && LA201_0 <= LBRACKET)||LA201_0==LIDENTIFIER||LA201_0==LPAREN||LA201_0==NATURAL_LITERAL||(LA201_0 >= NOT_OP && LA201_0 <= OBJECT_DEFINITION)||(LA201_0 >= OUTER && LA201_0 <= PACKAGE)||LA201_0==STRING_LITERAL||LA201_0==STRING_START||(LA201_0 >= SUM_OP && LA201_0 <= SUPER)||LA201_0==THIS||LA201_0==UIDENTIFIER||LA201_0==VERBATIM_STRING) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expression;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;

            }
            switch (alt201) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2413:7: conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalBranch15809);
                    conditionalExpression357=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(conditionalExpression357); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2416:7: disjunctionExpression
                    {
                    pushFollow(FOLLOW_disjunctionExpression_in_conditionalBranch15825);
                    disjunctionExpression358=disjunctionExpression();

                    state._fsp--;
                    if (state.failed) return expression;

                    if ( state.backtracking==0 ) { expression = new Expression(null);
                            expression.setTerm(disjunctionExpression358); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expression;
    }
    // $ANTLR end "conditionalBranch"


    public static class thenElseClauses_return extends ParserRuleReturnScope {
        public IfClause ifClause;
        public ElseClause elseClause;
        public ConditionList conditionList;
    };


    // $ANTLR start "thenElseClauses"
    // /home/david/git/ceylon-spec/Ceylon.g:2421:1: thenElseClauses returns [IfClause ifClause, ElseClause elseClause, ConditionList conditionList] : conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch ;
    public CeylonParser.thenElseClauses_return thenElseClauses() throws RecognitionException {
        CeylonParser.thenElseClauses_return retval = new CeylonParser.thenElseClauses_return();
        retval.start = input.LT(1);


        Token THEN_CLAUSE360=null;
        Token ELSE_CLAUSE361=null;
        Expression cb1 =null;

        Expression cb2 =null;

        ConditionList conditions359 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2422:5: ( conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch )
            // /home/david/git/ceylon-spec/Ceylon.g:2422:7: conditions THEN_CLAUSE cb1= conditionalBranch ELSE_CLAUSE cb2= conditionalBranch
            {
            pushFollow(FOLLOW_conditions_in_thenElseClauses15854);
            conditions359=conditions();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.conditionList = conditions359; }

            THEN_CLAUSE360=(Token)match(input,THEN_CLAUSE,FOLLOW_THEN_CLAUSE_in_thenElseClauses15870); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.ifClause = new IfClause(THEN_CLAUSE360); }

            pushFollow(FOLLOW_conditionalBranch_in_thenElseClauses15888);
            cb1=conditionalBranch();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.ifClause.setExpression(cb1); }

            ELSE_CLAUSE361=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_thenElseClauses15904); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.elseClause = new ElseClause(ELSE_CLAUSE361); }

            pushFollow(FOLLOW_conditionalBranch_in_thenElseClauses15922);
            cb2=conditionalBranch();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.elseClause.setExpression(cb2); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "thenElseClauses"



    // $ANTLR start "anonymousFunction"
    // /home/david/git/ceylon-spec/Ceylon.g:2434:1: anonymousFunction returns [FunctionArgument function] : ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block ) ;
    public FunctionArgument anonymousFunction() throws RecognitionException {
        FunctionArgument function = null;


        Token FUNCTION_MODIFIER362=null;
        Token VOID_MODIFIER363=null;
        ParameterList p1 =null;

        ParameterList p2 =null;

        Expression fe =null;

        Block block364 =null;


         function = new FunctionArgument(null);
                    function.setType(new FunctionModifier(null)); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2437:5: ( ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:2437:7: ( FUNCTION_MODIFIER | VOID_MODIFIER )? p1= parameters (p2= parameters )* ( COMPUTE fe= functionOrExpression | block )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:2437:7: ( FUNCTION_MODIFIER | VOID_MODIFIER )?
            int alt202=3;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==FUNCTION_MODIFIER) ) {
                alt202=1;
            }
            else if ( (LA202_0==VOID_MODIFIER) ) {
                alt202=2;
            }
            switch (alt202) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2438:9: FUNCTION_MODIFIER
                    {
                    FUNCTION_MODIFIER362=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_anonymousFunction15970); if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setType(new FunctionModifier(FUNCTION_MODIFIER362)); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2441:9: VOID_MODIFIER
                    {
                    VOID_MODIFIER363=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_anonymousFunction15998); if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setType(new VoidModifier(VOID_MODIFIER363)); }

                    }
                    break;

            }


            pushFollow(FOLLOW_parameters_in_anonymousFunction16027);
            p1=parameters();

            state._fsp--;
            if (state.failed) return function;

            if ( state.backtracking==0 ) { function.addParameterList(p1); }

            // /home/david/git/ceylon-spec/Ceylon.g:2446:7: (p2= parameters )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==LPAREN) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2447:9: p2= parameters
            	    {
            	    pushFollow(FOLLOW_parameters_in_anonymousFunction16056);
            	    p2=parameters();

            	    state._fsp--;
            	    if (state.failed) return function;

            	    if ( state.backtracking==0 ) { function.addParameterList(p2); }

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:2450:7: ( COMPUTE fe= functionOrExpression | block )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==COMPUTE) ) {
                alt204=1;
            }
            else if ( (LA204_0==LBRACE) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return function;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;

            }
            switch (alt204) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2451:9: COMPUTE fe= functionOrExpression
                    {
                    match(input,COMPUTE,FOLLOW_COMPUTE_in_anonymousFunction16094); if (state.failed) return function;

                    pushFollow(FOLLOW_functionOrExpression_in_anonymousFunction16115);
                    fe=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setExpression(fe); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2456:9: block
                    {
                    pushFollow(FOLLOW_block_in_anonymousFunction16143);
                    block364=block();

                    state._fsp--;
                    if (state.failed) return function;

                    if ( state.backtracking==0 ) { function.setBlock(block364); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return function;
    }
    // $ANTLR end "anonymousFunction"



    // $ANTLR start "comprehension"
    // /home/david/git/ceylon-spec/Ceylon.g:2461:1: comprehension returns [Comprehension comprehension] : ( forComprehensionClause | ifComprehensionClause );
    public Comprehension comprehension() throws RecognitionException {
        Comprehension comprehension = null;


        ForComprehensionClause forComprehensionClause365 =null;

        IfComprehensionClause ifComprehensionClause366 =null;


         comprehension = new Comprehension(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2463:5: ( forComprehensionClause | ifComprehensionClause )
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==FOR_CLAUSE) ) {
                alt205=1;
            }
            else if ( (LA205_0==IF_CLAUSE) ) {
                alt205=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return comprehension;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }
            switch (alt205) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2463:7: forComprehensionClause
                    {
                    pushFollow(FOLLOW_forComprehensionClause_in_comprehension16191);
                    forComprehensionClause365=forComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehension;

                    if ( state.backtracking==0 ) { comprehension.setInitialComprehensionClause(forComprehensionClause365); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2465:7: ifComprehensionClause
                    {
                    pushFollow(FOLLOW_ifComprehensionClause_in_comprehension16207);
                    ifComprehensionClause366=ifComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehension;

                    if ( state.backtracking==0 ) { comprehension.setInitialComprehensionClause(ifComprehensionClause366); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehension;
    }
    // $ANTLR end "comprehension"



    // $ANTLR start "comprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2469:1: comprehensionClause returns [ComprehensionClause comprehensionClause] : ( forComprehensionClause | ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause | expressionComprehensionClause );
    public ComprehensionClause comprehensionClause() throws RecognitionException {
        ComprehensionClause comprehensionClause = null;


        ForComprehensionClause forComprehensionClause367 =null;

        IfComprehensionClause ifComprehensionClause368 =null;

        ExpressionComprehensionClause expressionComprehensionClause369 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2470:5: ( forComprehensionClause | ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause | expressionComprehensionClause )
            int alt206=3;
            switch ( input.LA(1) ) {
            case FOR_CLAUSE:
                {
                alt206=1;
                }
                break;
            case IF_CLAUSE:
                {
                int LA206_2 = input.LA(2);

                if ( (synpred31_Ceylon()) ) {
                    alt206=2;
                }
                else if ( (true) ) {
                    alt206=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 2, input);

                    throw nvae;

                }
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case COMMA:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case DYNAMIC:
            case FLOAT_LITERAL:
            case FUNCTION_MODIFIER:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case NOT_OP:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case RBRACE:
            case RBRACKET:
            case RPAREN:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case SWITCH_CLAUSE:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt206=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;

            }

            switch (alt206) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2470:7: forComprehensionClause
                    {
                    pushFollow(FOLLOW_forComprehensionClause_in_comprehensionClause16236);
                    forComprehensionClause367=forComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = forComprehensionClause367; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2472:7: ( IF_CLAUSE conditions ~ THEN_CLAUSE )=> ifComprehensionClause
                    {
                    pushFollow(FOLLOW_ifComprehensionClause_in_comprehensionClause16271);
                    ifComprehensionClause368=ifComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = ifComprehensionClause368; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2475:7: expressionComprehensionClause
                    {
                    pushFollow(FOLLOW_expressionComprehensionClause_in_comprehensionClause16288);
                    expressionComprehensionClause369=expressionComprehensionClause();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = expressionComprehensionClause369; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "comprehensionClause"



    // $ANTLR start "expressionComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2479:1: expressionComprehensionClause returns [ExpressionComprehensionClause comprehensionClause] : ( functionOrExpression |);
    public ExpressionComprehensionClause expressionComprehensionClause() throws RecognitionException {
        ExpressionComprehensionClause comprehensionClause = null;


        Expression functionOrExpression370 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2480:5: ( functionOrExpression |)
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==BACKTICK||LA207_0==CHAR_LITERAL||(LA207_0 >= DECREMENT_OP && LA207_0 <= DIFFERENCE_OP)||LA207_0==DYNAMIC||LA207_0==FLOAT_LITERAL||LA207_0==FUNCTION_MODIFIER||LA207_0==IF_CLAUSE||LA207_0==INCREMENT_OP||(LA207_0 >= LBRACE && LA207_0 <= LIDENTIFIER)||LA207_0==LPAREN||LA207_0==NATURAL_LITERAL||(LA207_0 >= NOT_OP && LA207_0 <= OBJECT_DEFINITION)||(LA207_0 >= OUTER && LA207_0 <= PACKAGE)||LA207_0==STRING_LITERAL||LA207_0==STRING_START||(LA207_0 >= SUM_OP && LA207_0 <= SWITCH_CLAUSE)||LA207_0==THIS||LA207_0==UIDENTIFIER||(LA207_0 >= VERBATIM_STRING && LA207_0 <= VOID_MODIFIER)) ) {
                alt207=1;
            }
            else if ( (LA207_0==COMMA||(LA207_0 >= RBRACE && LA207_0 <= RBRACKET)||LA207_0==RPAREN) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return comprehensionClause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }
            switch (alt207) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2480:7: functionOrExpression
                    {
                    pushFollow(FOLLOW_functionOrExpression_in_expressionComprehensionClause16318);
                    functionOrExpression370=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return comprehensionClause;

                    if ( state.backtracking==0 ) { comprehensionClause = new ExpressionComprehensionClause(null);
                            comprehensionClause.setExpression(functionOrExpression370); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2483:7: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                              new MismatchedTokenException(LIDENTIFIER, input)); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "expressionComprehensionClause"



    // $ANTLR start "forComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2487:1: forComprehensionClause returns [ForComprehensionClause comprehensionClause] : FOR_CLAUSE forIterator comprehensionClause ;
    public ForComprehensionClause forComprehensionClause() throws RecognitionException {
        ForComprehensionClause comprehensionClause = null;


        Token FOR_CLAUSE371=null;
        ForIterator forIterator372 =null;

        ComprehensionClause comprehensionClause373 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2488:5: ( FOR_CLAUSE forIterator comprehensionClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2488:7: FOR_CLAUSE forIterator comprehensionClause
            {
            FOR_CLAUSE371=(Token)match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_forComprehensionClause16355); if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause = new ForComprehensionClause(FOR_CLAUSE371); }

            pushFollow(FOLLOW_forIterator_in_forComprehensionClause16371);
            forIterator372=forIterator();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setForIterator(forIterator372); }

            pushFollow(FOLLOW_comprehensionClause_in_forComprehensionClause16387);
            comprehensionClause373=comprehensionClause();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setComprehensionClause(comprehensionClause373); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "forComprehensionClause"



    // $ANTLR start "ifComprehensionClause"
    // /home/david/git/ceylon-spec/Ceylon.g:2496:1: ifComprehensionClause returns [IfComprehensionClause comprehensionClause] : IF_CLAUSE conditions comprehensionClause ;
    public IfComprehensionClause ifComprehensionClause() throws RecognitionException {
        IfComprehensionClause comprehensionClause = null;


        Token IF_CLAUSE374=null;
        ConditionList conditions375 =null;

        ComprehensionClause comprehensionClause376 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2497:5: ( IF_CLAUSE conditions comprehensionClause )
            // /home/david/git/ceylon-spec/Ceylon.g:2497:7: IF_CLAUSE conditions comprehensionClause
            {
            IF_CLAUSE374=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifComprehensionClause16420); if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause = new IfComprehensionClause(IF_CLAUSE374); }

            pushFollow(FOLLOW_conditions_in_ifComprehensionClause16436);
            conditions375=conditions();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setConditionList(conditions375); }

            pushFollow(FOLLOW_comprehensionClause_in_ifComprehensionClause16452);
            comprehensionClause376=comprehensionClause();

            state._fsp--;
            if (state.failed) return comprehensionClause;

            if ( state.backtracking==0 ) { comprehensionClause.setComprehensionClause(comprehensionClause376); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return comprehensionClause;
    }
    // $ANTLR end "ifComprehensionClause"



    // $ANTLR start "assignmentExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2505:1: assignmentExpression returns [Term term] : ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )? ;
    public Term assignmentExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        Expression ee2 =null;

        AssignmentOp assignmentOperator377 =null;


         QualifiedMemberOrTypeExpression qe=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2507:5: (ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2507:7: ee1= thenElseExpression ( assignmentOperator ee2= functionOrExpression )?
            {
            pushFollow(FOLLOW_thenElseExpression_in_assignmentExpression16496);
            ee1=thenElseExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2509:7: ( assignmentOperator ee2= functionOrExpression )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==ADD_SPECIFY||LA208_0==AND_SPECIFY||LA208_0==COMPLEMENT_SPECIFY||LA208_0==DIVIDE_SPECIFY||LA208_0==INTERSECT_SPECIFY||LA208_0==MULTIPLY_SPECIFY||LA208_0==OR_SPECIFY||LA208_0==REMAINDER_SPECIFY||LA208_0==SPECIFY||LA208_0==SUBTRACT_SPECIFY||LA208_0==UNION_SPECIFY) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2510:9: assignmentOperator ee2= functionOrExpression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_assignmentExpression16522);
                    assignmentOperator377=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { assignmentOperator377.setLeftTerm(term);
                              term = assignmentOperator377; }

                    pushFollow(FOLLOW_functionOrExpression_in_assignmentExpression16545);
                    ee2=functionOrExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { if (ee2!=null)
                                  assignmentOperator377.setRightTerm(ee2.getTerm()); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "assignmentExpression"



    // $ANTLR start "assignmentOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2519:1: assignmentOperator returns [AssignmentOp operator] : ( SPECIFY | ADD_SPECIFY | SUBTRACT_SPECIFY | MULTIPLY_SPECIFY | DIVIDE_SPECIFY | REMAINDER_SPECIFY | INTERSECT_SPECIFY | UNION_SPECIFY | COMPLEMENT_SPECIFY | AND_SPECIFY | OR_SPECIFY );
    public AssignmentOp assignmentOperator() throws RecognitionException {
        AssignmentOp operator = null;


        Token SPECIFY378=null;
        Token ADD_SPECIFY379=null;
        Token SUBTRACT_SPECIFY380=null;
        Token MULTIPLY_SPECIFY381=null;
        Token DIVIDE_SPECIFY382=null;
        Token REMAINDER_SPECIFY383=null;
        Token INTERSECT_SPECIFY384=null;
        Token UNION_SPECIFY385=null;
        Token COMPLEMENT_SPECIFY386=null;
        Token AND_SPECIFY387=null;
        Token OR_SPECIFY388=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2520:5: ( SPECIFY | ADD_SPECIFY | SUBTRACT_SPECIFY | MULTIPLY_SPECIFY | DIVIDE_SPECIFY | REMAINDER_SPECIFY | INTERSECT_SPECIFY | UNION_SPECIFY | COMPLEMENT_SPECIFY | AND_SPECIFY | OR_SPECIFY )
            int alt209=11;
            switch ( input.LA(1) ) {
            case SPECIFY:
                {
                alt209=1;
                }
                break;
            case ADD_SPECIFY:
                {
                alt209=2;
                }
                break;
            case SUBTRACT_SPECIFY:
                {
                alt209=3;
                }
                break;
            case MULTIPLY_SPECIFY:
                {
                alt209=4;
                }
                break;
            case DIVIDE_SPECIFY:
                {
                alt209=5;
                }
                break;
            case REMAINDER_SPECIFY:
                {
                alt209=6;
                }
                break;
            case INTERSECT_SPECIFY:
                {
                alt209=7;
                }
                break;
            case UNION_SPECIFY:
                {
                alt209=8;
                }
                break;
            case COMPLEMENT_SPECIFY:
                {
                alt209=9;
                }
                break;
            case AND_SPECIFY:
                {
                alt209=10;
                }
                break;
            case OR_SPECIFY:
                {
                alt209=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }

            switch (alt209) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2520:7: SPECIFY
                    {
                    SPECIFY378=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_assignmentOperator16585); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AssignOp(SPECIFY378); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2521:7: ADD_SPECIFY
                    {
                    ADD_SPECIFY379=(Token)match(input,ADD_SPECIFY,FOLLOW_ADD_SPECIFY_in_assignmentOperator16595); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AddAssignOp(ADD_SPECIFY379); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2522:7: SUBTRACT_SPECIFY
                    {
                    SUBTRACT_SPECIFY380=(Token)match(input,SUBTRACT_SPECIFY,FOLLOW_SUBTRACT_SPECIFY_in_assignmentOperator16605); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SubtractAssignOp(SUBTRACT_SPECIFY380); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2523:7: MULTIPLY_SPECIFY
                    {
                    MULTIPLY_SPECIFY381=(Token)match(input,MULTIPLY_SPECIFY,FOLLOW_MULTIPLY_SPECIFY_in_assignmentOperator16615); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new MultiplyAssignOp(MULTIPLY_SPECIFY381); }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2524:7: DIVIDE_SPECIFY
                    {
                    DIVIDE_SPECIFY382=(Token)match(input,DIVIDE_SPECIFY,FOLLOW_DIVIDE_SPECIFY_in_assignmentOperator16625); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DivideAssignOp(DIVIDE_SPECIFY382); }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2525:7: REMAINDER_SPECIFY
                    {
                    REMAINDER_SPECIFY383=(Token)match(input,REMAINDER_SPECIFY,FOLLOW_REMAINDER_SPECIFY_in_assignmentOperator16635); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RemainderAssignOp(REMAINDER_SPECIFY383); }

                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2526:7: INTERSECT_SPECIFY
                    {
                    INTERSECT_SPECIFY384=(Token)match(input,INTERSECT_SPECIFY,FOLLOW_INTERSECT_SPECIFY_in_assignmentOperator16645); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IntersectAssignOp(INTERSECT_SPECIFY384); }

                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2527:7: UNION_SPECIFY
                    {
                    UNION_SPECIFY385=(Token)match(input,UNION_SPECIFY,FOLLOW_UNION_SPECIFY_in_assignmentOperator16655); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new UnionAssignOp(UNION_SPECIFY385); }

                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2528:7: COMPLEMENT_SPECIFY
                    {
                    COMPLEMENT_SPECIFY386=(Token)match(input,COMPLEMENT_SPECIFY,FOLLOW_COMPLEMENT_SPECIFY_in_assignmentOperator16665); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ComplementAssignOp(COMPLEMENT_SPECIFY386); }

                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2529:7: AND_SPECIFY
                    {
                    AND_SPECIFY387=(Token)match(input,AND_SPECIFY,FOLLOW_AND_SPECIFY_in_assignmentOperator16675); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new AndAssignOp(AND_SPECIFY387); }

                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2530:7: OR_SPECIFY
                    {
                    OR_SPECIFY388=(Token)match(input,OR_SPECIFY,FOLLOW_OR_SPECIFY_in_assignmentOperator16685); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new OrAssignOp(OR_SPECIFY388); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "assignmentOperator"



    // $ANTLR start "thenElseExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2533:1: thenElseExpression returns [Term term] : de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )* ;
    public Term thenElseExpression() throws RecognitionException {
        Term term = null;


        Term de1 =null;

        Term de2 =null;

        BinaryOperatorExpression thenElseOperator389 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2534:5: (de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2534:7: de1= disjunctionExpression ( thenElseOperator de2= disjunctionExpression )*
            {
            pushFollow(FOLLOW_disjunctionExpression_in_thenElseExpression16710);
            de1=disjunctionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = de1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2536:7: ( thenElseOperator de2= disjunctionExpression )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==ELSE_CLAUSE||LA210_0==THEN_CLAUSE) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2537:9: thenElseOperator de2= disjunctionExpression
            	    {
            	    pushFollow(FOLLOW_thenElseOperator_in_thenElseExpression16736);
            	    thenElseOperator389=thenElseOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { thenElseOperator389.setLeftTerm(term);
            	              term = thenElseOperator389; }

            	    pushFollow(FOLLOW_disjunctionExpression_in_thenElseExpression16758);
            	    de2=disjunctionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { thenElseOperator389.setRightTerm(de2); }

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "thenElseExpression"



    // $ANTLR start "thenElseOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2545:1: thenElseOperator returns [BinaryOperatorExpression operator] : ( ELSE_CLAUSE | THEN_CLAUSE );
    public BinaryOperatorExpression thenElseOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token ELSE_CLAUSE390=null;
        Token THEN_CLAUSE391=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2546:5: ( ELSE_CLAUSE | THEN_CLAUSE )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==ELSE_CLAUSE) ) {
                alt211=1;
            }
            else if ( (LA211_0==THEN_CLAUSE) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;

            }
            switch (alt211) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2546:7: ELSE_CLAUSE
                    {
                    ELSE_CLAUSE390=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_thenElseOperator16798); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DefaultOp(ELSE_CLAUSE390); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2548:7: THEN_CLAUSE
                    {
                    THEN_CLAUSE391=(Token)match(input,THEN_CLAUSE,FOLLOW_THEN_CLAUSE_in_thenElseOperator16815); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ThenOp(THEN_CLAUSE391); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "thenElseOperator"



    // $ANTLR start "disjunctionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2552:1: disjunctionExpression returns [Term term] : me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )* ;
    public Term disjunctionExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        OrOp disjunctionOperator392 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2553:5: (me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2553:7: me1= conjunctionExpression ( disjunctionOperator me2= conjunctionExpression )*
            {
            pushFollow(FOLLOW_conjunctionExpression_in_disjunctionExpression16846);
            me1=conjunctionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2555:7: ( disjunctionOperator me2= conjunctionExpression )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==OR_OP) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2556:9: disjunctionOperator me2= conjunctionExpression
            	    {
            	    pushFollow(FOLLOW_disjunctionOperator_in_disjunctionExpression16872);
            	    disjunctionOperator392=disjunctionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { disjunctionOperator392.setLeftTerm(term);
            	              term = disjunctionOperator392; }

            	    pushFollow(FOLLOW_conjunctionExpression_in_disjunctionExpression16895);
            	    me2=conjunctionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { disjunctionOperator392.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "disjunctionExpression"



    // $ANTLR start "disjunctionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2564:1: disjunctionOperator returns [OrOp operator] : OR_OP ;
    public OrOp disjunctionOperator() throws RecognitionException {
        OrOp operator = null;


        Token OR_OP393=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2565:5: ( OR_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2565:7: OR_OP
            {
            OR_OP393=(Token)match(input,OR_OP,FOLLOW_OR_OP_in_disjunctionOperator16935); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new OrOp(OR_OP393); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "disjunctionOperator"



    // $ANTLR start "conjunctionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2569:1: conjunctionExpression returns [Term term] : me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )* ;
    public Term conjunctionExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        AndOp conjunctionOperator394 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2570:5: (me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2570:7: me1= logicalNegationExpression ( conjunctionOperator me2= logicalNegationExpression )*
            {
            pushFollow(FOLLOW_logicalNegationExpression_in_conjunctionExpression16967);
            me1=logicalNegationExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2572:7: ( conjunctionOperator me2= logicalNegationExpression )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==AND_OP) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2573:9: conjunctionOperator me2= logicalNegationExpression
            	    {
            	    pushFollow(FOLLOW_conjunctionOperator_in_conjunctionExpression16993);
            	    conjunctionOperator394=conjunctionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { conjunctionOperator394.setLeftTerm(term);
            	              term = conjunctionOperator394; }

            	    pushFollow(FOLLOW_logicalNegationExpression_in_conjunctionExpression17016);
            	    me2=logicalNegationExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { conjunctionOperator394.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "conjunctionExpression"



    // $ANTLR start "conjunctionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2581:1: conjunctionOperator returns [AndOp operator] : AND_OP ;
    public AndOp conjunctionOperator() throws RecognitionException {
        AndOp operator = null;


        Token AND_OP395=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2582:5: ( AND_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2582:7: AND_OP
            {
            AND_OP395=(Token)match(input,AND_OP,FOLLOW_AND_OP_in_conjunctionOperator17056); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new AndOp(AND_OP395); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "conjunctionOperator"



    // $ANTLR start "logicalNegationExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2586:1: logicalNegationExpression returns [Term term] : ( notOperator le= logicalNegationExpression | equalityExpression );
    public Term logicalNegationExpression() throws RecognitionException {
        Term term = null;


        Term le =null;

        NotOp notOperator396 =null;

        Term equalityExpression397 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2587:5: ( notOperator le= logicalNegationExpression | equalityExpression )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==NOT_OP) ) {
                alt214=1;
            }
            else if ( (LA214_0==BACKTICK||LA214_0==CHAR_LITERAL||(LA214_0 >= DECREMENT_OP && LA214_0 <= DIFFERENCE_OP)||LA214_0==DYNAMIC||LA214_0==FLOAT_LITERAL||LA214_0==INCREMENT_OP||(LA214_0 >= LBRACE && LA214_0 <= LBRACKET)||LA214_0==LIDENTIFIER||LA214_0==LPAREN||LA214_0==NATURAL_LITERAL||LA214_0==OBJECT_DEFINITION||(LA214_0 >= OUTER && LA214_0 <= PACKAGE)||LA214_0==STRING_LITERAL||LA214_0==STRING_START||(LA214_0 >= SUM_OP && LA214_0 <= SUPER)||LA214_0==THIS||LA214_0==UIDENTIFIER||LA214_0==VERBATIM_STRING) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;

            }
            switch (alt214) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2587:7: notOperator le= logicalNegationExpression
                    {
                    pushFollow(FOLLOW_notOperator_in_logicalNegationExpression17086);
                    notOperator396=notOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = notOperator396; }

                    pushFollow(FOLLOW_logicalNegationExpression_in_logicalNegationExpression17105);
                    le=logicalNegationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { notOperator396.setTerm(le); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2591:7: equalityExpression
                    {
                    pushFollow(FOLLOW_equalityExpression_in_logicalNegationExpression17121);
                    equalityExpression397=equalityExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = equalityExpression397; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "logicalNegationExpression"



    // $ANTLR start "notOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2595:1: notOperator returns [NotOp operator] : NOT_OP ;
    public NotOp notOperator() throws RecognitionException {
        NotOp operator = null;


        Token NOT_OP398=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2596:5: ( NOT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2596:7: NOT_OP
            {
            NOT_OP398=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_notOperator17150); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new NotOp(NOT_OP398); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "notOperator"



    // $ANTLR start "equalityExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2600:1: equalityExpression returns [Term term] : ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )? ;
    public Term equalityExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        Term ee2 =null;

        BinaryOperatorExpression equalityOperator399 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2601:5: (ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2601:7: ee1= comparisonExpression ( equalityOperator ee2= comparisonExpression )?
            {
            pushFollow(FOLLOW_comparisonExpression_in_equalityExpression17182);
            ee1=comparisonExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2603:7: ( equalityOperator ee2= comparisonExpression )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==EQUAL_OP||LA215_0==IDENTICAL_OP||LA215_0==NOT_EQUAL_OP) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2604:9: equalityOperator ee2= comparisonExpression
                    {
                    pushFollow(FOLLOW_equalityOperator_in_equalityExpression17208);
                    equalityOperator399=equalityOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { equalityOperator399.setLeftTerm(term);
                              term = equalityOperator399; }

                    pushFollow(FOLLOW_comparisonExpression_in_equalityExpression17231);
                    ee2=comparisonExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { equalityOperator399.setRightTerm(ee2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "equalityExpression"



    // $ANTLR start "equalityOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2612:1: equalityOperator returns [BinaryOperatorExpression operator] : ( EQUAL_OP | NOT_EQUAL_OP | IDENTICAL_OP );
    public BinaryOperatorExpression equalityOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token EQUAL_OP400=null;
        Token NOT_EQUAL_OP401=null;
        Token IDENTICAL_OP402=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2613:5: ( EQUAL_OP | NOT_EQUAL_OP | IDENTICAL_OP )
            int alt216=3;
            switch ( input.LA(1) ) {
            case EQUAL_OP:
                {
                alt216=1;
                }
                break;
            case NOT_EQUAL_OP:
                {
                alt216=2;
                }
                break;
            case IDENTICAL_OP:
                {
                alt216=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }

            switch (alt216) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2613:7: EQUAL_OP
                    {
                    EQUAL_OP400=(Token)match(input,EQUAL_OP,FOLLOW_EQUAL_OP_in_equalityOperator17271); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new EqualOp(EQUAL_OP400); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2615:7: NOT_EQUAL_OP
                    {
                    NOT_EQUAL_OP401=(Token)match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_equalityOperator17288); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new NotEqualOp(NOT_EQUAL_OP401); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2617:7: IDENTICAL_OP
                    {
                    IDENTICAL_OP402=(Token)match(input,IDENTICAL_OP,FOLLOW_IDENTICAL_OP_in_equalityOperator17304); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IdenticalOp(IDENTICAL_OP402); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "equalityOperator"



    // $ANTLR start "comparisonExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2621:1: comparisonExpression returns [Term term] : ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )? ;
    public Term comparisonExpression() throws RecognitionException {
        Term term = null;


        Term ee1 =null;

        BinaryOperatorExpression co1 =null;

        Term ee2 =null;

        ComparisonOp lo1 =null;

        Term ee3 =null;

        ComparisonOp so1 =null;

        Term ee4 =null;

        ComparisonOp so2 =null;

        Term ee5 =null;

        TypeOperatorExpression to1 =null;

        StaticType t1 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2622:5: (ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2622:7: ee1= existenceEmptinessExpression (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )?
            {
            pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17335);
            ee1=existenceEmptinessExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ee1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2624:7: (co1= comparisonOperator ee2= existenceEmptinessExpression |lo1= largerOperator ee3= existenceEmptinessExpression |so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )? |to1= typeOperator t1= type )?
            int alt218=5;
            switch ( input.LA(1) ) {
                case COMPARE_OP:
                case IN_OP:
                    {
                    alt218=1;
                    }
                    break;
                case LARGER_OP:
                case LARGE_AS_OP:
                    {
                    alt218=2;
                    }
                    break;
                case SMALLER_OP:
                case SMALL_AS_OP:
                    {
                    alt218=3;
                    }
                    break;
                case CASE_TYPES:
                case EXTENDS:
                case IS_OP:
                case SATISFIES:
                    {
                    alt218=4;
                    }
                    break;
            }

            switch (alt218) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2625:9: co1= comparisonOperator ee2= existenceEmptinessExpression
                    {
                    pushFollow(FOLLOW_comparisonOperator_in_comparisonExpression17363);
                    co1=comparisonOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { co1.setLeftTerm(term);
                              term = co1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17386);
                    ee2=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { co1.setRightTerm(ee2); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2630:9: lo1= largerOperator ee3= existenceEmptinessExpression
                    {
                    pushFollow(FOLLOW_largerOperator_in_comparisonExpression17408);
                    lo1=largerOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { lo1.setLeftTerm(term);
                              term = lo1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17431);
                    ee3=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { lo1.setRightTerm(ee3); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2635:9: so1= smallerOperator ee4= existenceEmptinessExpression (so2= smallerOperator ee5= existenceEmptinessExpression )?
                    {
                    pushFollow(FOLLOW_smallerOperator_in_comparisonExpression17453);
                    so1=smallerOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { so1.setLeftTerm(term);
                              term = so1; }

                    pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17476);
                    ee4=existenceEmptinessExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { so1.setRightTerm(ee4); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2640:9: (so2= smallerOperator ee5= existenceEmptinessExpression )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( ((LA217_0 >= SMALLER_OP && LA217_0 <= SMALL_AS_OP)) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2641:11: so2= smallerOperator ee5= existenceEmptinessExpression
                            {
                            pushFollow(FOLLOW_smallerOperator_in_comparisonExpression17511);
                            so2=smallerOperator();

                            state._fsp--;
                            if (state.failed) return term;

                            pushFollow(FOLLOW_existenceEmptinessExpression_in_comparisonExpression17525);
                            ee5=existenceEmptinessExpression();

                            state._fsp--;
                            if (state.failed) return term;

                            if ( state.backtracking==0 ) { WithinOp w = new WithinOp(null); 
                                        Bound lb = so1 instanceof SmallerOp ?
                                            new OpenBound(null) : new ClosedBound(null);
                                        lb.setTerm(ee1);
                                        Bound ub = so2 instanceof SmallerOp ?
                                            new OpenBound(null) : new ClosedBound(null);
                                        ub.setTerm(ee5);
                                        w.setLowerBound(lb);
                                        w.setUpperBound(ub);
                                        w.setTerm(ee4);
                                        term = w; }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2655:9: to1= typeOperator t1= type
                    {
                    pushFollow(FOLLOW_typeOperator_in_comparisonExpression17560);
                    to1=typeOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { to1.setTerm(ee1); 
                              term = to1; }

                    pushFollow(FOLLOW_type_in_comparisonExpression17582);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { to1.setType(t1); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "comparisonExpression"



    // $ANTLR start "smallerOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2669:1: smallerOperator returns [ComparisonOp operator] : ( SMALL_AS_OP | SMALLER_OP );
    public ComparisonOp smallerOperator() throws RecognitionException {
        ComparisonOp operator = null;


        Token SMALL_AS_OP403=null;
        Token SMALLER_OP404=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2670:5: ( SMALL_AS_OP | SMALLER_OP )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==SMALL_AS_OP) ) {
                alt219=1;
            }
            else if ( (LA219_0==SMALLER_OP) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }
            switch (alt219) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2670:7: SMALL_AS_OP
                    {
                    SMALL_AS_OP403=(Token)match(input,SMALL_AS_OP,FOLLOW_SMALL_AS_OP_in_smallerOperator17628); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SmallAsOp(SMALL_AS_OP403); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2672:7: SMALLER_OP
                    {
                    SMALLER_OP404=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_smallerOperator17644); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SmallerOp(SMALLER_OP404); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "smallerOperator"



    // $ANTLR start "largerOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2676:1: largerOperator returns [ComparisonOp operator] : ( LARGE_AS_OP | LARGER_OP );
    public ComparisonOp largerOperator() throws RecognitionException {
        ComparisonOp operator = null;


        Token LARGE_AS_OP405=null;
        Token LARGER_OP406=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2677:5: ( LARGE_AS_OP | LARGER_OP )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==LARGE_AS_OP) ) {
                alt220=1;
            }
            else if ( (LA220_0==LARGER_OP) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;

            }
            switch (alt220) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2677:7: LARGE_AS_OP
                    {
                    LARGE_AS_OP405=(Token)match(input,LARGE_AS_OP,FOLLOW_LARGE_AS_OP_in_largerOperator17673); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new LargeAsOp(LARGE_AS_OP405); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2679:7: LARGER_OP
                    {
                    LARGER_OP406=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_largerOperator17689); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new LargerOp(LARGER_OP406); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "largerOperator"



    // $ANTLR start "comparisonOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2683:1: comparisonOperator returns [BinaryOperatorExpression operator] : ( COMPARE_OP | IN_OP );
    public BinaryOperatorExpression comparisonOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token COMPARE_OP407=null;
        Token IN_OP408=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2684:5: ( COMPARE_OP | IN_OP )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==COMPARE_OP) ) {
                alt221=1;
            }
            else if ( (LA221_0==IN_OP) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;

            }
            switch (alt221) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2684:7: COMPARE_OP
                    {
                    COMPARE_OP407=(Token)match(input,COMPARE_OP,FOLLOW_COMPARE_OP_in_comparisonOperator17718); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new CompareOp(COMPARE_OP407); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2686:7: IN_OP
                    {
                    IN_OP408=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_comparisonOperator17735); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new InOp(IN_OP408); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "comparisonOperator"



    // $ANTLR start "typeOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2690:1: typeOperator returns [TypeOperatorExpression operator] : ( IS_OP | EXTENDS | SATISFIES | CASE_TYPES );
    public TypeOperatorExpression typeOperator() throws RecognitionException {
        TypeOperatorExpression operator = null;


        Token IS_OP409=null;
        Token EXTENDS410=null;
        Token SATISFIES411=null;
        Token CASE_TYPES412=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2691:5: ( IS_OP | EXTENDS | SATISFIES | CASE_TYPES )
            int alt222=4;
            switch ( input.LA(1) ) {
            case IS_OP:
                {
                alt222=1;
                }
                break;
            case EXTENDS:
                {
                alt222=2;
                }
                break;
            case SATISFIES:
                {
                alt222=3;
                }
                break;
            case CASE_TYPES:
                {
                alt222=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;

            }

            switch (alt222) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2691:7: IS_OP
                    {
                    IS_OP409=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_typeOperator17764); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IsOp(IS_OP409); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2693:7: EXTENDS
                    {
                    EXTENDS410=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_typeOperator17780); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Extends(EXTENDS410); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2695:7: SATISFIES
                    {
                    SATISFIES411=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_typeOperator17796); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Satisfies(SATISFIES411); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2697:7: CASE_TYPES
                    {
                    CASE_TYPES412=(Token)match(input,CASE_TYPES,FOLLOW_CASE_TYPES_in_typeOperator17812); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new OfOp(CASE_TYPES412); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "typeOperator"



    // $ANTLR start "existenceEmptinessExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2701:1: existenceEmptinessExpression returns [Term term] : de1= entryRangeExpression (eno1= existsNonemptyOperator )? ;
    public Term existenceEmptinessExpression() throws RecognitionException {
        Term term = null;


        Term de1 =null;

        UnaryOperatorExpression eno1 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2702:5: (de1= entryRangeExpression (eno1= existsNonemptyOperator )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2702:7: de1= entryRangeExpression (eno1= existsNonemptyOperator )?
            {
            pushFollow(FOLLOW_entryRangeExpression_in_existenceEmptinessExpression17843);
            de1=entryRangeExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = de1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2704:7: (eno1= existsNonemptyOperator )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==EXISTS||LA223_0==NONEMPTY) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2705:9: eno1= existsNonemptyOperator
                    {
                    pushFollow(FOLLOW_existsNonemptyOperator_in_existenceEmptinessExpression17871);
                    eno1=existsNonemptyOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = eno1;
                              eno1.setTerm(de1); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "existenceEmptinessExpression"



    // $ANTLR start "existsNonemptyOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2715:1: existsNonemptyOperator returns [UnaryOperatorExpression operator] : ( EXISTS | NONEMPTY );
    public UnaryOperatorExpression existsNonemptyOperator() throws RecognitionException {
        UnaryOperatorExpression operator = null;


        Token EXISTS413=null;
        Token NONEMPTY414=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2716:5: ( EXISTS | NONEMPTY )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==EXISTS) ) {
                alt224=1;
            }
            else if ( (LA224_0==NONEMPTY) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;

            }
            switch (alt224) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2716:7: EXISTS
                    {
                    EXISTS413=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsNonemptyOperator17917); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Exists(EXISTS413); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2718:7: NONEMPTY
                    {
                    NONEMPTY414=(Token)match(input,NONEMPTY,FOLLOW_NONEMPTY_in_existsNonemptyOperator17934); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new Nonempty(NONEMPTY414); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "existsNonemptyOperator"



    // $ANTLR start "entryRangeExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2722:1: entryRangeExpression returns [Term term] : ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )? ;
    public Term entryRangeExpression() throws RecognitionException {
        Term term = null;


        Term ae1 =null;

        Term ae2 =null;

        BinaryOperatorExpression rangeIntervalEntryOperator415 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2723:5: (ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2723:7: ae1= additiveExpression ( rangeIntervalEntryOperator ae2= additiveExpression )?
            {
            pushFollow(FOLLOW_additiveExpression_in_entryRangeExpression17965);
            ae1=additiveExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ae1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2725:7: ( rangeIntervalEntryOperator ae2= additiveExpression )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==ENTRY_OP||LA225_0==RANGE_OP||LA225_0==SEGMENT_OP) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2726:9: rangeIntervalEntryOperator ae2= additiveExpression
                    {
                    pushFollow(FOLLOW_rangeIntervalEntryOperator_in_entryRangeExpression17991);
                    rangeIntervalEntryOperator415=rangeIntervalEntryOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { rangeIntervalEntryOperator415.setLeftTerm(term);
                              term = rangeIntervalEntryOperator415; }

                    pushFollow(FOLLOW_additiveExpression_in_entryRangeExpression18014);
                    ae2=additiveExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { rangeIntervalEntryOperator415.setRightTerm(ae2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "entryRangeExpression"



    // $ANTLR start "rangeIntervalEntryOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2734:1: rangeIntervalEntryOperator returns [BinaryOperatorExpression operator] : ( RANGE_OP | SEGMENT_OP | ENTRY_OP );
    public BinaryOperatorExpression rangeIntervalEntryOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token RANGE_OP416=null;
        Token SEGMENT_OP417=null;
        Token ENTRY_OP418=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2735:5: ( RANGE_OP | SEGMENT_OP | ENTRY_OP )
            int alt226=3;
            switch ( input.LA(1) ) {
            case RANGE_OP:
                {
                alt226=1;
                }
                break;
            case SEGMENT_OP:
                {
                alt226=2;
                }
                break;
            case ENTRY_OP:
                {
                alt226=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;

            }

            switch (alt226) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2735:7: RANGE_OP
                    {
                    RANGE_OP416=(Token)match(input,RANGE_OP,FOLLOW_RANGE_OP_in_rangeIntervalEntryOperator18054); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RangeOp(RANGE_OP416); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2737:7: SEGMENT_OP
                    {
                    SEGMENT_OP417=(Token)match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_rangeIntervalEntryOperator18071); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SegmentOp(SEGMENT_OP417); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2739:7: ENTRY_OP
                    {
                    ENTRY_OP418=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_rangeIntervalEntryOperator18087); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new EntryOp(ENTRY_OP418); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "rangeIntervalEntryOperator"



    // $ANTLR start "additiveExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2743:1: additiveExpression returns [Term term] : me1= scaleExpression ( additiveOperator me2= scaleExpression )* ;
    public Term additiveExpression() throws RecognitionException {
        Term term = null;


        Term me1 =null;

        Term me2 =null;

        BinaryOperatorExpression additiveOperator419 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2744:5: (me1= scaleExpression ( additiveOperator me2= scaleExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2744:7: me1= scaleExpression ( additiveOperator me2= scaleExpression )*
            {
            pushFollow(FOLLOW_scaleExpression_in_additiveExpression18118);
            me1=scaleExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = me1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2746:7: ( additiveOperator me2= scaleExpression )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==DIFFERENCE_OP||LA227_0==SUM_OP) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2747:9: additiveOperator me2= scaleExpression
            	    {
            	    pushFollow(FOLLOW_additiveOperator_in_additiveExpression18144);
            	    additiveOperator419=additiveOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { additiveOperator419.setLeftTerm(term);
            	              term = additiveOperator419; }

            	    pushFollow(FOLLOW_scaleExpression_in_additiveExpression18167);
            	    me2=scaleExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { additiveOperator419.setRightTerm(me2); }

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "additiveExpression"



    // $ANTLR start "additiveOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2755:1: additiveOperator returns [BinaryOperatorExpression operator] : ( SUM_OP | DIFFERENCE_OP );
    public BinaryOperatorExpression additiveOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token SUM_OP420=null;
        Token DIFFERENCE_OP421=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2756:5: ( SUM_OP | DIFFERENCE_OP )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==SUM_OP) ) {
                alt228=1;
            }
            else if ( (LA228_0==DIFFERENCE_OP) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }
            switch (alt228) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2756:7: SUM_OP
                    {
                    SUM_OP420=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_additiveOperator18207); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new SumOp(SUM_OP420); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2758:7: DIFFERENCE_OP
                    {
                    DIFFERENCE_OP421=(Token)match(input,DIFFERENCE_OP,FOLLOW_DIFFERENCE_OP_in_additiveOperator18224); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DifferenceOp(DIFFERENCE_OP421); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "additiveOperator"



    // $ANTLR start "scaleExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2762:1: scaleExpression returns [Term term] : multiplicativeExpression ( scaleOperator se= scaleExpression )? ;
    public Term scaleExpression() throws RecognitionException {
        Term term = null;


        Term se =null;

        Term multiplicativeExpression422 =null;

        ScaleOp scaleOperator423 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2763:5: ( multiplicativeExpression ( scaleOperator se= scaleExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2763:7: multiplicativeExpression ( scaleOperator se= scaleExpression )?
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_scaleExpression18253);
            multiplicativeExpression422=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = multiplicativeExpression422; }

            // /home/david/git/ceylon-spec/Ceylon.g:2765:7: ( scaleOperator se= scaleExpression )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==SCALE_OP) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2766:9: scaleOperator se= scaleExpression
                    {
                    pushFollow(FOLLOW_scaleOperator_in_scaleExpression18279);
                    scaleOperator423=scaleOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { scaleOperator423.setLeftTerm(term);
                              term = scaleOperator423; }

                    pushFollow(FOLLOW_scaleExpression_in_scaleExpression18301);
                    se=scaleExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { scaleOperator423.setRightTerm(se); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "scaleExpression"



    // $ANTLR start "multiplicativeExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2774:1: multiplicativeExpression returns [Term term] : ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )* ;
    public Term multiplicativeExpression() throws RecognitionException {
        Term term = null;


        Term ue1 =null;

        Term ue2 =null;

        BinaryOperatorExpression multiplicativeOperator424 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2775:5: (ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2775:7: ue1= unionExpression ( multiplicativeOperator ue2= unionExpression )*
            {
            pushFollow(FOLLOW_unionExpression_in_multiplicativeExpression18343);
            ue1=unionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ue1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2777:7: ( multiplicativeOperator ue2= unionExpression )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( ((LA230_0 >= PRODUCT_OP && LA230_0 <= QUOTIENT_OP)||LA230_0==REMAINDER_OP) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2778:9: multiplicativeOperator ue2= unionExpression
            	    {
            	    pushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression18369);
            	    multiplicativeOperator424=multiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { multiplicativeOperator424.setLeftTerm(term);
            	              term = multiplicativeOperator424; }

            	    pushFollow(FOLLOW_unionExpression_in_multiplicativeExpression18392);
            	    ue2=unionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { multiplicativeOperator424.setRightTerm(ue2); }

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "multiplicativeExpression"



    // $ANTLR start "multiplicativeOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2786:1: multiplicativeOperator returns [BinaryOperatorExpression operator] : ( PRODUCT_OP | QUOTIENT_OP | REMAINDER_OP );
    public BinaryOperatorExpression multiplicativeOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token PRODUCT_OP425=null;
        Token QUOTIENT_OP426=null;
        Token REMAINDER_OP427=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2787:5: ( PRODUCT_OP | QUOTIENT_OP | REMAINDER_OP )
            int alt231=3;
            switch ( input.LA(1) ) {
            case PRODUCT_OP:
                {
                alt231=1;
                }
                break;
            case QUOTIENT_OP:
                {
                alt231=2;
                }
                break;
            case REMAINDER_OP:
                {
                alt231=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;

            }

            switch (alt231) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2787:7: PRODUCT_OP
                    {
                    PRODUCT_OP425=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_multiplicativeOperator18432); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ProductOp(PRODUCT_OP425); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2789:7: QUOTIENT_OP
                    {
                    QUOTIENT_OP426=(Token)match(input,QUOTIENT_OP,FOLLOW_QUOTIENT_OP_in_multiplicativeOperator18449); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new QuotientOp(QUOTIENT_OP426); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2791:7: REMAINDER_OP
                    {
                    REMAINDER_OP427=(Token)match(input,REMAINDER_OP,FOLLOW_REMAINDER_OP_in_multiplicativeOperator18465); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new RemainderOp(REMAINDER_OP427); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "multiplicativeOperator"



    // $ANTLR start "unionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2795:1: unionExpression returns [Term term] : ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )* ;
    public Term unionExpression() throws RecognitionException {
        Term term = null;


        Term ie1 =null;

        Term ie2 =null;

        BinaryOperatorExpression unionOperator428 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2796:5: (ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2796:7: ie1= intersectionExpression ( unionOperator ie2= intersectionExpression )*
            {
            pushFollow(FOLLOW_intersectionExpression_in_unionExpression18496);
            ie1=intersectionExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ie1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2798:7: ( unionOperator ie2= intersectionExpression )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMPLEMENT_OP||LA232_0==UNION_OP) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2799:9: unionOperator ie2= intersectionExpression
            	    {
            	    pushFollow(FOLLOW_unionOperator_in_unionExpression18522);
            	    unionOperator428=unionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { unionOperator428.setLeftTerm(term);
            	              term = unionOperator428; }

            	    pushFollow(FOLLOW_intersectionExpression_in_unionExpression18545);
            	    ie2=intersectionExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { unionOperator428.setRightTerm(ie2); }

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "unionExpression"



    // $ANTLR start "unionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2807:1: unionOperator returns [BinaryOperatorExpression operator] : ( UNION_OP | COMPLEMENT_OP );
    public BinaryOperatorExpression unionOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token UNION_OP429=null;
        Token COMPLEMENT_OP430=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2808:5: ( UNION_OP | COMPLEMENT_OP )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==UNION_OP) ) {
                alt233=1;
            }
            else if ( (LA233_0==COMPLEMENT_OP) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }
            switch (alt233) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2808:7: UNION_OP
                    {
                    UNION_OP429=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_unionOperator18589); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new UnionOp(UNION_OP429); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2810:7: COMPLEMENT_OP
                    {
                    COMPLEMENT_OP430=(Token)match(input,COMPLEMENT_OP,FOLLOW_COMPLEMENT_OP_in_unionOperator18605); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new ComplementOp(COMPLEMENT_OP430); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "unionOperator"



    // $ANTLR start "intersectionExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2814:1: intersectionExpression returns [Term term] : ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )* ;
    public Term intersectionExpression() throws RecognitionException {
        Term term = null;


        Term ne1 =null;

        Term ne2 =null;

        BinaryOperatorExpression intersectionOperator431 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2815:5: (ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2815:7: ne1= negationComplementExpression ( intersectionOperator ne2= negationComplementExpression )*
            {
            pushFollow(FOLLOW_negationComplementExpression_in_intersectionExpression18636);
            ne1=negationComplementExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = ne1; }

            // /home/david/git/ceylon-spec/Ceylon.g:2817:7: ( intersectionOperator ne2= negationComplementExpression )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==INTERSECTION_OP) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2818:9: intersectionOperator ne2= negationComplementExpression
            	    {
            	    pushFollow(FOLLOW_intersectionOperator_in_intersectionExpression18662);
            	    intersectionOperator431=intersectionOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { intersectionOperator431.setLeftTerm(term);
            	              term = intersectionOperator431; }

            	    pushFollow(FOLLOW_negationComplementExpression_in_intersectionExpression18685);
            	    ne2=negationComplementExpression();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { intersectionOperator431.setRightTerm(ne2); }

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "intersectionExpression"



    // $ANTLR start "intersectionOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2826:1: intersectionOperator returns [BinaryOperatorExpression operator] : INTERSECTION_OP ;
    public BinaryOperatorExpression intersectionOperator() throws RecognitionException {
        BinaryOperatorExpression operator = null;


        Token INTERSECTION_OP432=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2827:5: ( INTERSECTION_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2827:7: INTERSECTION_OP
            {
            INTERSECTION_OP432=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_intersectionOperator18729); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new IntersectionOp(INTERSECTION_OP432); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "intersectionOperator"



    // $ANTLR start "negationComplementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2831:1: negationComplementExpression returns [Term term] : ( unaryMinusOrComplementOperator ne= negationComplementExpression | exponentiationExpression );
    public Term negationComplementExpression() throws RecognitionException {
        Term term = null;


        Term ne =null;

        UnaryOperatorExpression unaryMinusOrComplementOperator433 =null;

        Term exponentiationExpression434 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2832:5: ( unaryMinusOrComplementOperator ne= negationComplementExpression | exponentiationExpression )
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==DIFFERENCE_OP||LA235_0==SUM_OP) ) {
                alt235=1;
            }
            else if ( (LA235_0==BACKTICK||LA235_0==CHAR_LITERAL||LA235_0==DECREMENT_OP||LA235_0==DYNAMIC||LA235_0==FLOAT_LITERAL||LA235_0==INCREMENT_OP||(LA235_0 >= LBRACE && LA235_0 <= LBRACKET)||LA235_0==LIDENTIFIER||LA235_0==LPAREN||LA235_0==NATURAL_LITERAL||LA235_0==OBJECT_DEFINITION||(LA235_0 >= OUTER && LA235_0 <= PACKAGE)||LA235_0==STRING_LITERAL||LA235_0==STRING_START||LA235_0==SUPER||LA235_0==THIS||LA235_0==UIDENTIFIER||LA235_0==VERBATIM_STRING) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;

            }
            switch (alt235) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2832:7: unaryMinusOrComplementOperator ne= negationComplementExpression
                    {
                    pushFollow(FOLLOW_unaryMinusOrComplementOperator_in_negationComplementExpression18758);
                    unaryMinusOrComplementOperator433=unaryMinusOrComplementOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = unaryMinusOrComplementOperator433; }

                    pushFollow(FOLLOW_negationComplementExpression_in_negationComplementExpression18777);
                    ne=negationComplementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { unaryMinusOrComplementOperator433.setTerm(ne); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2836:7: exponentiationExpression
                    {
                    pushFollow(FOLLOW_exponentiationExpression_in_negationComplementExpression18793);
                    exponentiationExpression434=exponentiationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = exponentiationExpression434; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "negationComplementExpression"



    // $ANTLR start "unaryMinusOrComplementOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2840:1: unaryMinusOrComplementOperator returns [UnaryOperatorExpression operator] : ( DIFFERENCE_OP | SUM_OP );
    public UnaryOperatorExpression unaryMinusOrComplementOperator() throws RecognitionException {
        UnaryOperatorExpression operator = null;


        Token DIFFERENCE_OP435=null;
        Token SUM_OP436=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2841:5: ( DIFFERENCE_OP | SUM_OP )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==DIFFERENCE_OP) ) {
                alt236=1;
            }
            else if ( (LA236_0==SUM_OP) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;

            }
            switch (alt236) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2841:7: DIFFERENCE_OP
                    {
                    DIFFERENCE_OP435=(Token)match(input,DIFFERENCE_OP,FOLLOW_DIFFERENCE_OP_in_unaryMinusOrComplementOperator18822); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new NegativeOp(DIFFERENCE_OP435); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2843:7: SUM_OP
                    {
                    SUM_OP436=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_unaryMinusOrComplementOperator18839); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PositiveOp(SUM_OP436); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "unaryMinusOrComplementOperator"



    // $ANTLR start "exponentiationExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2847:1: exponentiationExpression returns [Term term] : incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )? ;
    public Term exponentiationExpression() throws RecognitionException {
        Term term = null;


        Term ee =null;

        Term incrementDecrementExpression437 =null;

        PowerOp exponentiationOperator438 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2848:5: ( incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:2848:7: incrementDecrementExpression ( exponentiationOperator ee= exponentiationExpression )?
            {
            pushFollow(FOLLOW_incrementDecrementExpression_in_exponentiationExpression18868);
            incrementDecrementExpression437=incrementDecrementExpression();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = incrementDecrementExpression437; }

            // /home/david/git/ceylon-spec/Ceylon.g:2850:7: ( exponentiationOperator ee= exponentiationExpression )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==POWER_OP) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2851:9: exponentiationOperator ee= exponentiationExpression
                    {
                    pushFollow(FOLLOW_exponentiationOperator_in_exponentiationExpression18894);
                    exponentiationOperator438=exponentiationOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { exponentiationOperator438.setLeftTerm(term);
                              term = exponentiationOperator438; }

                    pushFollow(FOLLOW_exponentiationExpression_in_exponentiationExpression18916);
                    ee=exponentiationExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { exponentiationOperator438.setRightTerm(ee); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "exponentiationExpression"



    // $ANTLR start "exponentiationOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2859:1: exponentiationOperator returns [PowerOp operator] : POWER_OP ;
    public PowerOp exponentiationOperator() throws RecognitionException {
        PowerOp operator = null;


        Token POWER_OP439=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2860:5: ( POWER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2860:7: POWER_OP
            {
            POWER_OP439=(Token)match(input,POWER_OP,FOLLOW_POWER_OP_in_exponentiationOperator18956); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new PowerOp(POWER_OP439); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "exponentiationOperator"



    // $ANTLR start "scaleOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2864:1: scaleOperator returns [ScaleOp operator] : SCALE_OP ;
    public ScaleOp scaleOperator() throws RecognitionException {
        ScaleOp operator = null;


        Token SCALE_OP440=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2865:5: ( SCALE_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2865:7: SCALE_OP
            {
            SCALE_OP440=(Token)match(input,SCALE_OP,FOLLOW_SCALE_OP_in_scaleOperator18986); if (state.failed) return operator;

            if ( state.backtracking==0 ) { operator = new ScaleOp(SCALE_OP440); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "scaleOperator"



    // $ANTLR start "incrementDecrementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2869:1: incrementDecrementExpression returns [Term term] : ( prefixOperator ie= incrementDecrementExpression | postfixIncrementDecrementExpression );
    public Term incrementDecrementExpression() throws RecognitionException {
        Term term = null;


        Term ie =null;

        PrefixOperatorExpression prefixOperator441 =null;

        Term postfixIncrementDecrementExpression442 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2870:5: ( prefixOperator ie= incrementDecrementExpression | postfixIncrementDecrementExpression )
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==DECREMENT_OP||LA238_0==INCREMENT_OP) ) {
                alt238=1;
            }
            else if ( (LA238_0==BACKTICK||LA238_0==CHAR_LITERAL||LA238_0==DYNAMIC||LA238_0==FLOAT_LITERAL||(LA238_0 >= LBRACE && LA238_0 <= LBRACKET)||LA238_0==LIDENTIFIER||LA238_0==LPAREN||LA238_0==NATURAL_LITERAL||LA238_0==OBJECT_DEFINITION||(LA238_0 >= OUTER && LA238_0 <= PACKAGE)||LA238_0==STRING_LITERAL||LA238_0==STRING_START||LA238_0==SUPER||LA238_0==THIS||LA238_0==UIDENTIFIER||LA238_0==VERBATIM_STRING) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return term;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;

            }
            switch (alt238) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2870:7: prefixOperator ie= incrementDecrementExpression
                    {
                    pushFollow(FOLLOW_prefixOperator_in_incrementDecrementExpression19016);
                    prefixOperator441=prefixOperator();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = prefixOperator441; }

                    pushFollow(FOLLOW_incrementDecrementExpression_in_incrementDecrementExpression19034);
                    ie=incrementDecrementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { prefixOperator441.setTerm(ie); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2874:7: postfixIncrementDecrementExpression
                    {
                    pushFollow(FOLLOW_postfixIncrementDecrementExpression_in_incrementDecrementExpression19050);
                    postfixIncrementDecrementExpression442=postfixIncrementDecrementExpression();

                    state._fsp--;
                    if (state.failed) return term;

                    if ( state.backtracking==0 ) { term = postfixIncrementDecrementExpression442; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "incrementDecrementExpression"



    // $ANTLR start "prefixOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2878:1: prefixOperator returns [PrefixOperatorExpression operator] : ( DECREMENT_OP | INCREMENT_OP );
    public PrefixOperatorExpression prefixOperator() throws RecognitionException {
        PrefixOperatorExpression operator = null;


        Token DECREMENT_OP443=null;
        Token INCREMENT_OP444=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2879:5: ( DECREMENT_OP | INCREMENT_OP )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==DECREMENT_OP) ) {
                alt239=1;
            }
            else if ( (LA239_0==INCREMENT_OP) ) {
                alt239=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }
            switch (alt239) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2879:7: DECREMENT_OP
                    {
                    DECREMENT_OP443=(Token)match(input,DECREMENT_OP,FOLLOW_DECREMENT_OP_in_prefixOperator19079); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new DecrementOp(DECREMENT_OP443); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2881:7: INCREMENT_OP
                    {
                    INCREMENT_OP444=(Token)match(input,INCREMENT_OP,FOLLOW_INCREMENT_OP_in_prefixOperator19096); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new IncrementOp(INCREMENT_OP444); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "prefixOperator"



    // $ANTLR start "postfixIncrementDecrementExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2885:1: postfixIncrementDecrementExpression returns [Term term] : primary ( postfixOperator )* ;
    public Term postfixIncrementDecrementExpression() throws RecognitionException {
        Term term = null;


        Primary primary445 =null;

        PostfixOperatorExpression postfixOperator446 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2886:5: ( primary ( postfixOperator )* )
            // /home/david/git/ceylon-spec/Ceylon.g:2886:7: primary ( postfixOperator )*
            {
            pushFollow(FOLLOW_primary_in_postfixIncrementDecrementExpression19126);
            primary445=primary();

            state._fsp--;
            if (state.failed) return term;

            if ( state.backtracking==0 ) { term = primary445; }

            // /home/david/git/ceylon-spec/Ceylon.g:2888:7: ( postfixOperator )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==DECREMENT_OP||LA240_0==INCREMENT_OP) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:2889:9: postfixOperator
            	    {
            	    pushFollow(FOLLOW_postfixOperator_in_postfixIncrementDecrementExpression19154);
            	    postfixOperator446=postfixOperator();

            	    state._fsp--;
            	    if (state.failed) return term;

            	    if ( state.backtracking==0 ) { postfixOperator446.setTerm(term);
            	              term = postfixOperator446; }

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return term;
    }
    // $ANTLR end "postfixIncrementDecrementExpression"



    // $ANTLR start "postfixOperator"
    // /home/david/git/ceylon-spec/Ceylon.g:2895:1: postfixOperator returns [PostfixOperatorExpression operator] : ( DECREMENT_OP | INCREMENT_OP );
    public PostfixOperatorExpression postfixOperator() throws RecognitionException {
        PostfixOperatorExpression operator = null;


        Token DECREMENT_OP447=null;
        Token INCREMENT_OP448=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2896:5: ( DECREMENT_OP | INCREMENT_OP )
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==DECREMENT_OP) ) {
                alt241=1;
            }
            else if ( (LA241_0==INCREMENT_OP) ) {
                alt241=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return operator;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }
            switch (alt241) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2896:7: DECREMENT_OP
                    {
                    DECREMENT_OP447=(Token)match(input,DECREMENT_OP,FOLLOW_DECREMENT_OP_in_postfixOperator19194); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PostfixDecrementOp(DECREMENT_OP447); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2898:7: INCREMENT_OP
                    {
                    INCREMENT_OP448=(Token)match(input,INCREMENT_OP,FOLLOW_INCREMENT_OP_in_postfixOperator19211); if (state.failed) return operator;

                    if ( state.backtracking==0 ) { operator = new PostfixIncrementOp(INCREMENT_OP448); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return operator;
    }
    // $ANTLR end "postfixOperator"



    // $ANTLR start "selfReference"
    // /home/david/git/ceylon-spec/Ceylon.g:2902:1: selfReference returns [Atom atom] : ( THIS | SUPER | OUTER | PACKAGE );
    public Atom selfReference() throws RecognitionException {
        Atom atom = null;


        Token THIS449=null;
        Token SUPER450=null;
        Token OUTER451=null;
        Token PACKAGE452=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2903:5: ( THIS | SUPER | OUTER | PACKAGE )
            int alt242=4;
            switch ( input.LA(1) ) {
            case THIS:
                {
                alt242=1;
                }
                break;
            case SUPER:
                {
                alt242=2;
                }
                break;
            case OUTER:
                {
                alt242=3;
                }
                break;
            case PACKAGE:
                {
                alt242=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return atom;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }

            switch (alt242) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2903:7: THIS
                    {
                    THIS449=(Token)match(input,THIS,FOLLOW_THIS_in_selfReference19241); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new This(THIS449); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2905:7: SUPER
                    {
                    SUPER450=(Token)match(input,SUPER,FOLLOW_SUPER_in_selfReference19257); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Super(SUPER450); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2907:7: OUTER
                    {
                    OUTER451=(Token)match(input,OUTER,FOLLOW_OUTER_in_selfReference19274); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Outer(OUTER451); }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2909:7: PACKAGE
                    {
                    PACKAGE452=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_selfReference19290); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom = new Package(PACKAGE452); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return atom;
    }
    // $ANTLR end "selfReference"



    // $ANTLR start "nonstringLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:2913:1: nonstringLiteral returns [Literal literal] : ( NATURAL_LITERAL | FLOAT_LITERAL | CHAR_LITERAL );
    public Literal nonstringLiteral() throws RecognitionException {
        Literal literal = null;


        Token NATURAL_LITERAL453=null;
        Token FLOAT_LITERAL454=null;
        Token CHAR_LITERAL455=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2914:5: ( NATURAL_LITERAL | FLOAT_LITERAL | CHAR_LITERAL )
            int alt243=3;
            switch ( input.LA(1) ) {
            case NATURAL_LITERAL:
                {
                alt243=1;
                }
                break;
            case FLOAT_LITERAL:
                {
                alt243=2;
                }
                break;
            case CHAR_LITERAL:
                {
                alt243=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return literal;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;

            }

            switch (alt243) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2914:7: NATURAL_LITERAL
                    {
                    NATURAL_LITERAL453=(Token)match(input,NATURAL_LITERAL,FOLLOW_NATURAL_LITERAL_in_nonstringLiteral19323); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new NaturalLiteral(NATURAL_LITERAL453); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2916:7: FLOAT_LITERAL
                    {
                    FLOAT_LITERAL454=(Token)match(input,FLOAT_LITERAL,FOLLOW_FLOAT_LITERAL_in_nonstringLiteral19340); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new FloatLiteral(FLOAT_LITERAL454); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2918:7: CHAR_LITERAL
                    {
                    CHAR_LITERAL455=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_nonstringLiteral19357); if (state.failed) return literal;

                    if ( state.backtracking==0 ) { literal = new CharLiteral(CHAR_LITERAL455); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return literal;
    }
    // $ANTLR end "nonstringLiteral"



    // $ANTLR start "stringLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:2922:1: stringLiteral returns [StringLiteral stringLiteral] : ( STRING_LITERAL | VERBATIM_STRING );
    public StringLiteral stringLiteral() throws RecognitionException {
        StringLiteral stringLiteral = null;


        Token STRING_LITERAL456=null;
        Token VERBATIM_STRING457=null;

        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2923:5: ( STRING_LITERAL | VERBATIM_STRING )
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==STRING_LITERAL) ) {
                alt244=1;
            }
            else if ( (LA244_0==VERBATIM_STRING) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stringLiteral;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }
            switch (alt244) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2923:7: STRING_LITERAL
                    {
                    STRING_LITERAL456=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringLiteral19387); if (state.failed) return stringLiteral;

                    if ( state.backtracking==0 ) { stringLiteral = new StringLiteral(STRING_LITERAL456); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2925:7: VERBATIM_STRING
                    {
                    VERBATIM_STRING457=(Token)match(input,VERBATIM_STRING,FOLLOW_VERBATIM_STRING_in_stringLiteral19404); if (state.failed) return stringLiteral;

                    if ( state.backtracking==0 ) { stringLiteral = new StringLiteral(VERBATIM_STRING457); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return stringLiteral;
    }
    // $ANTLR end "stringLiteral"



    // $ANTLR start "stringExpression"
    // /home/david/git/ceylon-spec/Ceylon.g:2929:1: stringExpression returns [Atom atom] : (sl1= stringLiteral | STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END );
    public Atom stringExpression() throws RecognitionException {
        Atom atom = null;


        Token STRING_START458=null;
        Token STRING_MID459=null;
        Token STRING_END460=null;
        StringLiteral sl1 =null;

        Expression e1 =null;

        Expression e2 =null;


         StringTemplate st=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2931:5: (sl1= stringLiteral | STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==STRING_LITERAL||LA246_0==VERBATIM_STRING) ) {
                alt246=1;
            }
            else if ( (LA246_0==STRING_START) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return atom;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;

            }
            switch (alt246) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2931:7: sl1= stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_stringExpression19444);
                    sl1=stringLiteral();

                    state._fsp--;
                    if (state.failed) return atom;

                    if ( state.backtracking==0 ) { atom =sl1; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2933:7: STRING_START e1= expression ( STRING_MID e2= expression )* STRING_END
                    {
                    STRING_START458=(Token)match(input,STRING_START,FOLLOW_STRING_START_in_stringExpression19460); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { st = new StringTemplate(null);
                            st.addStringLiteral(new StringLiteral(STRING_START458));
                            atom =st; }

                    pushFollow(FOLLOW_expression_in_stringExpression19478);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return atom;

                    if ( state.backtracking==0 ) { if (e1!=null) 
                                st.addExpression(e1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:2940:7: ( STRING_MID e2= expression )*
                    loop245:
                    do {
                        int alt245=2;
                        int LA245_0 = input.LA(1);

                        if ( (LA245_0==STRING_MID) ) {
                            alt245=1;
                        }


                        switch (alt245) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2941:9: STRING_MID e2= expression
                    	    {
                    	    STRING_MID459=(Token)match(input,STRING_MID,FOLLOW_STRING_MID_in_stringExpression19504); if (state.failed) return atom;

                    	    if ( state.backtracking==0 ) { st.addStringLiteral(new StringLiteral(STRING_MID459)); }

                    	    pushFollow(FOLLOW_expression_in_stringExpression19526);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return atom;

                    	    if ( state.backtracking==0 ) { if (e2!=null) 
                    	                  st.addExpression(e2); }

                    	    }
                    	    break;

                    	default :
                    	    break loop245;
                        }
                    } while (true);


                    STRING_END460=(Token)match(input,STRING_END,FOLLOW_STRING_END_in_stringExpression19553); if (state.failed) return atom;

                    if ( state.backtracking==0 ) { st.addStringLiteral(new StringLiteral(STRING_END460)); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return atom;
    }
    // $ANTLR end "stringExpression"



    // $ANTLR start "typeArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:2951:1: typeArguments returns [TypeArgumentList typeArgumentList] : SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP ;
    public TypeArgumentList typeArguments() throws RecognitionException {
        TypeArgumentList typeArgumentList = null;


        Token c=null;
        Token SMALLER_OP461=null;
        Token LARGER_OP462=null;
        TypeVariance v1 =null;

        StaticType ta1 =null;

        StaticType ta0 =null;

        TypeVariance v2 =null;

        StaticType ta2 =null;

        StaticType ta3 =null;


         TypeVariance v=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:2953:5: ( SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:2953:7: SMALLER_OP ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )? LARGER_OP
            {
            SMALLER_OP461=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_typeArguments19591); if (state.failed) return typeArgumentList;

            if ( state.backtracking==0 ) { typeArgumentList = new TypeArgumentList(SMALLER_OP461); }

            // /home/david/git/ceylon-spec/Ceylon.g:2955:7: ( (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )* )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==IN_OP||(LA253_0 >= LBRACE && LA253_0 <= LBRACKET)||LA253_0==OUT||LA253_0==SMALLER_OP||LA253_0==UIDENTIFIER) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:2956:9: (v1= variance (ta1= type )? |ta0= type ) (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )*
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:2956:9: (v1= variance (ta1= type )? |ta0= type )
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==IN_OP||LA248_0==OUT) ) {
                        alt248=1;
                    }
                    else if ( ((LA248_0 >= LBRACE && LA248_0 <= LBRACKET)||LA248_0==SMALLER_OP||LA248_0==UIDENTIFIER) ) {
                        alt248=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 248, 0, input);

                        throw nvae;

                    }
                    switch (alt248) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2957:11: v1= variance (ta1= type )?
                            {
                            pushFollow(FOLLOW_variance_in_typeArguments19631);
                            v1=variance();

                            state._fsp--;
                            if (state.failed) return typeArgumentList;

                            if ( state.backtracking==0 ) { v = v1; }

                            // /home/david/git/ceylon-spec/Ceylon.g:2959:11: (ta1= type )?
                            int alt247=2;
                            int LA247_0 = input.LA(1);

                            if ( ((LA247_0 >= LBRACE && LA247_0 <= LBRACKET)||LA247_0==SMALLER_OP||LA247_0==UIDENTIFIER) ) {
                                alt247=1;
                            }
                            switch (alt247) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:2960:13: ta1= type
                                    {
                                    pushFollow(FOLLOW_type_in_typeArguments19671);
                                    ta1=type();

                                    state._fsp--;
                                    if (state.failed) return typeArgumentList;

                                    if ( state.backtracking==0 ) { if (ta1!=null)
                                                      typeArgumentList.addType(ta1);
                                                  if (v!=null && ta1!=null) 
                                                      ta1.setTypeVariance(v); }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:2967:11: ta0= type
                            {
                            pushFollow(FOLLOW_type_in_typeArguments19722);
                            ta0=type();

                            state._fsp--;
                            if (state.failed) return typeArgumentList;

                            if ( state.backtracking==0 ) { if (ta0!=null)
                                            typeArgumentList.addType(ta0); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:2971:9: (c= COMMA (v2= variance (ta2= type |) | (ta3= type |) ) )*
                    loop252:
                    do {
                        int alt252=2;
                        int LA252_0 = input.LA(1);

                        if ( (LA252_0==COMMA) ) {
                            alt252=1;
                        }


                        switch (alt252) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:2972:11: c= COMMA (v2= variance (ta2= type |) | (ta3= type |) )
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments19768); if (state.failed) return typeArgumentList;

                    	    if ( state.backtracking==0 ) { typeArgumentList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:2974:11: (v2= variance (ta2= type |) | (ta3= type |) )
                    	    int alt251=2;
                    	    int LA251_0 = input.LA(1);

                    	    if ( (LA251_0==IN_OP||LA251_0==OUT) ) {
                    	        alt251=1;
                    	    }
                    	    else if ( (LA251_0==COMMA||LA251_0==LARGER_OP||(LA251_0 >= LBRACE && LA251_0 <= LBRACKET)||LA251_0==SMALLER_OP||LA251_0==UIDENTIFIER) ) {
                    	        alt251=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 251, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt251) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:2975:13: v2= variance (ta2= type |)
                    	            {
                    	            pushFollow(FOLLOW_variance_in_typeArguments19808);
                    	            v2=variance();

                    	            state._fsp--;
                    	            if (state.failed) return typeArgumentList;

                    	            if ( state.backtracking==0 ) { v = v2; }

                    	            // /home/david/git/ceylon-spec/Ceylon.g:2977:13: (ta2= type |)
                    	            int alt249=2;
                    	            int LA249_0 = input.LA(1);

                    	            if ( ((LA249_0 >= LBRACE && LA249_0 <= LBRACKET)||LA249_0==SMALLER_OP||LA249_0==UIDENTIFIER) ) {
                    	                alt249=1;
                    	            }
                    	            else if ( (LA249_0==COMMA||LA249_0==LARGER_OP) ) {
                    	                alt249=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 249, 0, input);

                    	                throw nvae;

                    	            }
                    	            switch (alt249) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:2978:15: ta2= type
                    	                    {
                    	                    pushFollow(FOLLOW_type_in_typeArguments19854);
                    	                    ta2=type();

                    	                    state._fsp--;
                    	                    if (state.failed) return typeArgumentList;

                    	                    if ( state.backtracking==0 ) { if (ta2!=null) {
                    	                                        typeArgumentList.addType(ta2);
                    	                                        if (v!=null && ta2!=null) 
                    	                                            ta2.setTypeVariance(v);
                    	                                        typeArgumentList.setEndToken(null); } }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:2984:15: 
                    	                    {
                    	                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                                          new MismatchedTokenException(UIDENTIFIER, input)); }

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:2988:13: (ta3= type |)
                    	            {
                    	            // /home/david/git/ceylon-spec/Ceylon.g:2988:13: (ta3= type |)
                    	            int alt250=2;
                    	            int LA250_0 = input.LA(1);

                    	            if ( ((LA250_0 >= LBRACE && LA250_0 <= LBRACKET)||LA250_0==SMALLER_OP||LA250_0==UIDENTIFIER) ) {
                    	                alt250=1;
                    	            }
                    	            else if ( (LA250_0==COMMA||LA250_0==LARGER_OP) ) {
                    	                alt250=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return typeArgumentList;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 250, 0, input);

                    	                throw nvae;

                    	            }
                    	            switch (alt250) {
                    	                case 1 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:2989:15: ta3= type
                    	                    {
                    	                    pushFollow(FOLLOW_type_in_typeArguments19945);
                    	                    ta3=type();

                    	                    state._fsp--;
                    	                    if (state.failed) return typeArgumentList;

                    	                    if ( state.backtracking==0 ) { if (ta3!=null) {
                    	                                        typeArgumentList.addType(ta3);
                    	                                        typeArgumentList.setEndToken(null); } }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // /home/david/git/ceylon-spec/Ceylon.g:2993:15: 
                    	                    {
                    	                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                                      new MismatchedTokenException(UIDENTIFIER, input)); }

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop252;
                        }
                    } while (true);


                    }
                    break;

            }


            LARGER_OP462=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_typeArguments20031); if (state.failed) return typeArgumentList;

            if ( state.backtracking==0 ) { typeArgumentList.setEndToken(LARGER_OP462); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeArgumentList;
    }
    // $ANTLR end "typeArguments"



    // $ANTLR start "variadicType"
    // /home/david/git/ceylon-spec/Ceylon.g:3003:1: variadicType returns [Type type] : ( ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )? |t= type );
    public Type variadicType() throws RecognitionException {
        Type type = null;


        Token PRODUCT_OP463=null;
        Token SUM_OP464=null;
        StaticType at =null;

        StaticType t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3004:5: ( ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )? |t= type )
            int alt255=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA255_1 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA255_2 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA255_3 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA255_4 = input.LA(2);

                if ( (synpred32_Ceylon()) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }

            switch (alt255) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3004:7: ( unionType ( PRODUCT_OP | SUM_OP ) )=>at= unionType ( PRODUCT_OP | SUM_OP )?
                    {
                    pushFollow(FOLLOW_unionType_in_variadicType20079);
                    at=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = at; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3007:7: ( PRODUCT_OP | SUM_OP )?
                    int alt254=3;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==PRODUCT_OP) ) {
                        alt254=1;
                    }
                    else if ( (LA254_0==SUM_OP) ) {
                        alt254=2;
                    }
                    switch (alt254) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3008:9: PRODUCT_OP
                            {
                            PRODUCT_OP463=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_variadicType20105); if (state.failed) return type;

                            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(null);
                                      st.setType(at); 
                                      st.setEndToken(PRODUCT_OP463);
                                      type = st; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3014:9: SUM_OP
                            {
                            SUM_OP464=(Token)match(input,SUM_OP,FOLLOW_SUM_OP_in_variadicType20133); if (state.failed) return type;

                            if ( state.backtracking==0 ) { SequencedType st = new SequencedType(null);
                                      st.setType(at); 
                                      st.setEndToken(SUM_OP464);
                                      st.setAtLeastOne(true);
                                      type = st; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3021:7: t= type
                    {
                    pushFollow(FOLLOW_type_in_variadicType20162);
                    t=type();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = t; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "variadicType"



    // $ANTLR start "defaultedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3025:1: defaultedType returns [Type type] : ( ( type ( SPECIFY ) )=>t= type ( SPECIFY )? | variadicType );
    public Type defaultedType() throws RecognitionException {
        Type type = null;


        Token SPECIFY465=null;
        StaticType t =null;

        Type variadicType466 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3026:5: ( ( type ( SPECIFY ) )=>t= type ( SPECIFY )? | variadicType )
            int alt257=2;
            switch ( input.LA(1) ) {
            case UIDENTIFIER:
                {
                int LA257_1 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 1, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA257_2 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 2, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA257_3 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 3, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA257_4 = input.LA(2);

                if ( (synpred33_Ceylon()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }

            switch (alt257) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3026:7: ( type ( SPECIFY ) )=>t= type ( SPECIFY )?
                    {
                    pushFollow(FOLLOW_type_in_defaultedType20208);
                    t=type();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type = t; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3029:7: ( SPECIFY )?
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==SPECIFY) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3030:9: SPECIFY
                            {
                            SPECIFY465=(Token)match(input,SPECIFY,FOLLOW_SPECIFY_in_defaultedType20234); if (state.failed) return type;

                            if ( state.backtracking==0 ) { DefaultedType st = new DefaultedType(null);
                                      st.setType(t); 
                                      st.setEndToken(SPECIFY465);
                                      type = st; }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3036:7: variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_defaultedType20261);
                    variadicType466=variadicType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =variadicType466; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "defaultedType"



    // $ANTLR start "spreadType"
    // /home/david/git/ceylon-spec/Ceylon.g:3040:1: spreadType returns [Type type] : PRODUCT_OP (sp= unionType )? ;
    public Type spreadType() throws RecognitionException {
        Type type = null;


        Token PRODUCT_OP467=null;
        StaticType sp =null;


         SpreadType spt = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3042:5: ( PRODUCT_OP (sp= unionType )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3042:7: PRODUCT_OP (sp= unionType )?
            {
            PRODUCT_OP467=(Token)match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_spreadType20299); if (state.failed) return type;

            if ( state.backtracking==0 ) { spt = new SpreadType(PRODUCT_OP467);
                    type =spt; }

            // /home/david/git/ceylon-spec/Ceylon.g:3045:7: (sp= unionType )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( ((LA258_0 >= LBRACE && LA258_0 <= LBRACKET)||LA258_0==SMALLER_OP||LA258_0==UIDENTIFIER) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3046:9: sp= unionType
                    {
                    pushFollow(FOLLOW_unionType_in_spreadType20327);
                    sp=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { spt.setType(sp); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "spreadType"



    // $ANTLR start "tupleType"
    // /home/david/git/ceylon-spec/Ceylon.g:3051:1: tupleType returns [TupleType type] : LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET ;
    public TupleType tupleType() throws RecognitionException {
        TupleType type = null;


        Token c=null;
        Token LBRACKET468=null;
        Token RBRACKET469=null;
        Type spt =null;

        Type t1 =null;

        Type t2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3052:5: ( LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET )
            // /home/david/git/ceylon-spec/Ceylon.g:3052:7: LBRACKET (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )? RBRACKET
            {
            LBRACKET468=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_tupleType20367); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new TupleType(LBRACKET468); }

            // /home/david/git/ceylon-spec/Ceylon.g:3054:7: (spt= spreadType |t1= defaultedType (c= COMMA t2= defaultedType )* )?
            int alt260=3;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==PRODUCT_OP) ) {
                alt260=1;
            }
            else if ( ((LA260_0 >= LBRACE && LA260_0 <= LBRACKET)||LA260_0==SMALLER_OP||LA260_0==UIDENTIFIER) ) {
                alt260=2;
            }
            switch (alt260) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3055:9: spt= spreadType
                    {
                    pushFollow(FOLLOW_spreadType_in_tupleType20395);
                    spt=spreadType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.addElementType(spt); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3058:9: t1= defaultedType (c= COMMA t2= defaultedType )*
                    {
                    pushFollow(FOLLOW_defaultedType_in_tupleType20425);
                    t1=defaultedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.addElementType(t1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3060:9: (c= COMMA t2= defaultedType )*
                    loop259:
                    do {
                        int alt259=2;
                        int LA259_0 = input.LA(1);

                        if ( (LA259_0==COMMA) ) {
                            alt259=1;
                        }


                        switch (alt259) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3061:11: c= COMMA t2= defaultedType
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_tupleType20459); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { type.setEndToken(c); }

                    	    pushFollow(FOLLOW_defaultedType_in_tupleType20485);
                    	    t2=defaultedType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { type.addElementType(t2);
                    	                type.setEndToken(null); }

                    	    }
                    	    break;

                    	default :
                    	    break loop259;
                        }
                    } while (true);


                    }
                    break;

            }


            RBRACKET469=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_tupleType20525); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(RBRACKET469); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "tupleType"



    // $ANTLR start "groupedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3072:1: groupedType returns [GroupedType type] : SMALLER_OP t= type LARGER_OP ;
    public GroupedType groupedType() throws RecognitionException {
        GroupedType type = null;


        Token SMALLER_OP470=null;
        Token LARGER_OP471=null;
        StaticType t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3073:5: ( SMALLER_OP t= type LARGER_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:3073:7: SMALLER_OP t= type LARGER_OP
            {
            SMALLER_OP470=(Token)match(input,SMALLER_OP,FOLLOW_SMALLER_OP_in_groupedType20554); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new GroupedType(SMALLER_OP470); }

            pushFollow(FOLLOW_type_in_groupedType20572);
            t=type();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setType(t); }

            LARGER_OP471=(Token)match(input,LARGER_OP,FOLLOW_LARGER_OP_in_groupedType20588); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(LARGER_OP471); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "groupedType"



    // $ANTLR start "iterableType"
    // /home/david/git/ceylon-spec/Ceylon.g:3081:1: iterableType returns [IterableType type] : LBRACE (t= variadicType )? RBRACE ;
    public IterableType iterableType() throws RecognitionException {
        IterableType type = null;


        Token LBRACE472=null;
        Token RBRACE473=null;
        Type t =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3082:4: ( LBRACE (t= variadicType )? RBRACE )
            // /home/david/git/ceylon-spec/Ceylon.g:3082:6: LBRACE (t= variadicType )? RBRACE
            {
            LBRACE472=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_iterableType20616); if (state.failed) return type;

            if ( state.backtracking==0 ) { type = new IterableType(LBRACE472); }

            // /home/david/git/ceylon-spec/Ceylon.g:3084:6: (t= variadicType )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( ((LA261_0 >= LBRACE && LA261_0 <= LBRACKET)||LA261_0==SMALLER_OP||LA261_0==UIDENTIFIER) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3085:8: t= variadicType
                    {
                    pushFollow(FOLLOW_variadicType_in_iterableType20641);
                    t=variadicType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type.setElementType(t); }

                    }
                    break;

            }


            RBRACE473=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_iterableType20665); if (state.failed) return type;

            if ( state.backtracking==0 ) { type.setEndToken(RBRACE473); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "iterableType"



    // $ANTLR start "type"
    // /home/david/git/ceylon-spec/Ceylon.g:3092:1: type returns [StaticType type] : t1= unionType ( ENTRY_OP (t2= unionType ) )? ;
    public StaticType type() throws RecognitionException {
        StaticType type = null;


        Token ENTRY_OP474=null;
        StaticType t1 =null;

        StaticType t2 =null;


         EntryType bt=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3094:5: (t1= unionType ( ENTRY_OP (t2= unionType ) )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3094:7: t1= unionType ( ENTRY_OP (t2= unionType ) )?
            {
            pushFollow(FOLLOW_unionType_in_type20703);
            t1=unionType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =t1; }

            // /home/david/git/ceylon-spec/Ceylon.g:3096:7: ( ENTRY_OP (t2= unionType ) )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==ENTRY_OP) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3097:9: ENTRY_OP (t2= unionType )
                    {
                    ENTRY_OP474=(Token)match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_type20729); if (state.failed) return type;

                    if ( state.backtracking==0 ) { bt=new EntryType(null);
                              bt.setKeyType(type);
                              bt.setEndToken(ENTRY_OP474); 
                              type =bt; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3102:9: (t2= unionType )
                    // /home/david/git/ceylon-spec/Ceylon.g:3103:11: t2= unionType
                    {
                    pushFollow(FOLLOW_unionType_in_type20763);
                    t2=unionType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { bt.setValueType(t2);
                                bt.setEndToken(null); }

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "type"



    // $ANTLR start "unionType"
    // /home/david/git/ceylon-spec/Ceylon.g:3112:1: unionType returns [StaticType type] : it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )? ;
    public StaticType unionType() throws RecognitionException {
        StaticType type = null;


        Token u=null;
        StaticType it1 =null;

        StaticType it2 =null;


         UnionType ut=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3114:5: (it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3114:7: it1= intersectionType ( (u= UNION_OP (it2= intersectionType ) )+ )?
            {
            pushFollow(FOLLOW_intersectionType_in_unionType20828);
            it1=intersectionType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type = it1;
                    ut = new UnionType(null);
                    ut.addStaticType(type); }

            // /home/david/git/ceylon-spec/Ceylon.g:3118:7: ( (u= UNION_OP (it2= intersectionType ) )+ )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==UNION_OP) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3119:9: (u= UNION_OP (it2= intersectionType ) )+
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3119:9: (u= UNION_OP (it2= intersectionType ) )+
                    int cnt263=0;
                    loop263:
                    do {
                        int alt263=2;
                        int LA263_0 = input.LA(1);

                        if ( (LA263_0==UNION_OP) ) {
                            alt263=1;
                        }


                        switch (alt263) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3120:11: u= UNION_OP (it2= intersectionType )
                    	    {
                    	    u=(Token)match(input,UNION_OP,FOLLOW_UNION_OP_in_unionType20869); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { ut.setEndToken(u); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3122:11: (it2= intersectionType )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3123:13: it2= intersectionType
                    	    {
                    	    pushFollow(FOLLOW_intersectionType_in_unionType20909);
                    	    it2=intersectionType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { if (it2!=null) {
                    	                      ut.addStaticType(it2);
                    	                      ut.setEndToken(null); 
                    	                  } }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt263 >= 1 ) break loop263;
                    	    if (state.backtracking>0) {state.failed=true; return type;}
                                EarlyExitException eee =
                                    new EarlyExitException(263, input);
                                throw eee;
                        }
                        cnt263++;
                    } while (true);


                    if ( state.backtracking==0 ) { type = ut; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "unionType"



    // $ANTLR start "intersectionType"
    // /home/david/git/ceylon-spec/Ceylon.g:3136:1: intersectionType returns [StaticType type] : at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )? ;
    public StaticType intersectionType() throws RecognitionException {
        StaticType type = null;


        Token i=null;
        StaticType at1 =null;

        StaticType at2 =null;


         IntersectionType it=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3138:5: (at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3138:7: at1= abbreviatedType ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )?
            {
            pushFollow(FOLLOW_abbreviatedType_in_intersectionType20999);
            at1=abbreviatedType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type = at1;
                    it = new IntersectionType(null);
                    it.addStaticType(type); }

            // /home/david/git/ceylon-spec/Ceylon.g:3142:7: ( (i= INTERSECTION_OP (at2= abbreviatedType ) )+ )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==INTERSECTION_OP) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3143:9: (i= INTERSECTION_OP (at2= abbreviatedType ) )+
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3143:9: (i= INTERSECTION_OP (at2= abbreviatedType ) )+
                    int cnt265=0;
                    loop265:
                    do {
                        int alt265=2;
                        int LA265_0 = input.LA(1);

                        if ( (LA265_0==INTERSECTION_OP) ) {
                            alt265=1;
                        }


                        switch (alt265) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3144:11: i= INTERSECTION_OP (at2= abbreviatedType )
                    	    {
                    	    i=(Token)match(input,INTERSECTION_OP,FOLLOW_INTERSECTION_OP_in_intersectionType21040); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { it.setEndToken(i); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3146:11: (at2= abbreviatedType )
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3147:13: at2= abbreviatedType
                    	    {
                    	    pushFollow(FOLLOW_abbreviatedType_in_intersectionType21080);
                    	    at2=abbreviatedType();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    if ( state.backtracking==0 ) { if (at2!=null) {
                    	                      it.addStaticType(at2);
                    	                      it.setEndToken(null); 
                    	                  } }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt265 >= 1 ) break loop265;
                    	    if (state.backtracking>0) {state.failed=true; return type;}
                                EarlyExitException eee =
                                    new EarlyExitException(265, input);
                                throw eee;
                        }
                        cnt265++;
                    } while (true);


                    if ( state.backtracking==0 ) { type = it; }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "intersectionType"



    // $ANTLR start "qualifiedOrTupleType"
    // /home/david/git/ceylon-spec/Ceylon.g:3160:1: qualifiedOrTupleType returns [StaticType type] : ( qualifiedType | tupleType | iterableType );
    public StaticType qualifiedOrTupleType() throws RecognitionException {
        StaticType type = null;


        StaticType qualifiedType475 =null;

        TupleType tupleType476 =null;

        IterableType iterableType477 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3161:5: ( qualifiedType | tupleType | iterableType )
            int alt267=3;
            switch ( input.LA(1) ) {
            case SMALLER_OP:
            case UIDENTIFIER:
                {
                alt267=1;
                }
                break;
            case LBRACKET:
                {
                alt267=2;
                }
                break;
            case LBRACE:
                {
                alt267=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }

            switch (alt267) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3161:7: qualifiedType
                    {
                    pushFollow(FOLLOW_qualifiedType_in_qualifiedOrTupleType21159);
                    qualifiedType475=qualifiedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =qualifiedType475; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3163:7: tupleType
                    {
                    pushFollow(FOLLOW_tupleType_in_qualifiedOrTupleType21176);
                    tupleType476=tupleType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =tupleType476; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3165:7: iterableType
                    {
                    pushFollow(FOLLOW_iterableType_in_qualifiedOrTupleType21193);
                    iterableType477=iterableType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =iterableType477; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "qualifiedOrTupleType"



    // $ANTLR start "abbreviatedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3175:1: abbreviatedType returns [StaticType type] : qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )* ;
    public StaticType abbreviatedType() throws RecognitionException {
        StaticType type = null;


        Token OPTIONAL479=null;
        Token LBRACKET480=null;
        Token NATURAL_LITERAL481=null;
        Token RBRACKET482=null;
        Token LPAREN483=null;
        Token COMMA484=null;
        Token RPAREN485=null;
        Type spt =null;

        Type t1 =null;

        Type t2 =null;

        StaticType qualifiedOrTupleType478 =null;


         FunctionType bt=null; SequenceType st=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3177:5: ( qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3177:7: qualifiedOrTupleType ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )*
            {
            pushFollow(FOLLOW_qualifiedOrTupleType_in_abbreviatedType21234);
            qualifiedOrTupleType478=qualifiedOrTupleType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =qualifiedOrTupleType478; }

            // /home/david/git/ceylon-spec/Ceylon.g:3179:7: ( OPTIONAL | LBRACKET ( NATURAL_LITERAL )? RBRACKET | LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN )*
            loop271:
            do {
                int alt271=4;
                switch ( input.LA(1) ) {
                case OPTIONAL:
                    {
                    alt271=1;
                    }
                    break;
                case LBRACKET:
                    {
                    alt271=2;
                    }
                    break;
                case LPAREN:
                    {
                    alt271=3;
                    }
                    break;

                }

                switch (alt271) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3180:9: OPTIONAL
            	    {
            	    OPTIONAL479=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_abbreviatedType21260); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { OptionalType ot = new OptionalType(null);
            	              ot.setDefiniteType(type);
            	              ot.setEndToken(OPTIONAL479);
            	              type =ot; }

            	    }
            	    break;
            	case 2 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3185:9: LBRACKET ( NATURAL_LITERAL )? RBRACKET
            	    {
            	    LBRACKET480=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_abbreviatedType21281); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { st = new SequenceType(null);
            	              st.setElementType(type);
            	              st.setEndToken(LBRACKET480); }

            	    // /home/david/git/ceylon-spec/Ceylon.g:3189:9: ( NATURAL_LITERAL )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==NATURAL_LITERAL) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3190:11: NATURAL_LITERAL
            	            {
            	            NATURAL_LITERAL481=(Token)match(input,NATURAL_LITERAL,FOLLOW_NATURAL_LITERAL_in_abbreviatedType21313); if (state.failed) return type;

            	            if ( state.backtracking==0 ) { st.setLength(new NaturalLiteral(NATURAL_LITERAL481)); 
            	                        st.setEndToken(NATURAL_LITERAL481); }

            	            }
            	            break;

            	    }


            	    RBRACKET482=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_abbreviatedType21347); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { st.setEndToken(RBRACKET482);
            	              type =st; }

            	    }
            	    break;
            	case 3 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3197:9: LPAREN (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )? RPAREN
            	    {
            	    LPAREN483=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_abbreviatedType21368); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { bt = new FunctionType(null);
            	              bt.setEndToken(LPAREN483);
            	              bt.setReturnType(type);
            	              type =bt; }

            	    // /home/david/git/ceylon-spec/Ceylon.g:3202:11: (spt= spreadType |t1= defaultedType ( COMMA t2= defaultedType )* )?
            	    int alt270=3;
            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==PRODUCT_OP) ) {
            	        alt270=1;
            	    }
            	    else if ( ((LA270_0 >= LBRACE && LA270_0 <= LBRACKET)||LA270_0==SMALLER_OP||LA270_0==UIDENTIFIER) ) {
            	        alt270=2;
            	    }
            	    switch (alt270) {
            	        case 1 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3203:13: spt= spreadType
            	            {
            	            pushFollow(FOLLOW_spreadType_in_abbreviatedType21406);
            	            spt=spreadType();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            if ( state.backtracking==0 ) { bt.addArgumentType(spt); }

            	            }
            	            break;
            	        case 2 :
            	            // /home/david/git/ceylon-spec/Ceylon.g:3206:13: t1= defaultedType ( COMMA t2= defaultedType )*
            	            {
            	            pushFollow(FOLLOW_defaultedType_in_abbreviatedType21448);
            	            t1=defaultedType();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            if ( state.backtracking==0 ) { if (t1!=null)
            	                              bt.addArgumentType(t1); }

            	            // /home/david/git/ceylon-spec/Ceylon.g:3209:13: ( COMMA t2= defaultedType )*
            	            loop269:
            	            do {
            	                int alt269=2;
            	                int LA269_0 = input.LA(1);

            	                if ( (LA269_0==COMMA) ) {
            	                    alt269=1;
            	                }


            	                switch (alt269) {
            	            	case 1 :
            	            	    // /home/david/git/ceylon-spec/Ceylon.g:3210:15: COMMA t2= defaultedType
            	            	    {
            	            	    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_abbreviatedType21492); if (state.failed) return type;

            	            	    if ( state.backtracking==0 ) { bt.setEndToken(COMMA484); }

            	            	    pushFollow(FOLLOW_defaultedType_in_abbreviatedType21526);
            	            	    t2=defaultedType();

            	            	    state._fsp--;
            	            	    if (state.failed) return type;

            	            	    if ( state.backtracking==0 ) { if (t2!=null)
            	            	                        bt.addArgumentType(t2); }

            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop269;
            	                }
            	            } while (true);


            	            }
            	            break;

            	    }


            	    RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_abbreviatedType21580); if (state.failed) return type;

            	    if ( state.backtracking==0 ) { bt.setEndToken(RPAREN485); }

            	    }
            	    break;

            	default :
            	    break loop271;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "abbreviatedType"



    // $ANTLR start "baseType"
    // /home/david/git/ceylon-spec/Ceylon.g:3222:1: baseType returns [StaticType type] : (ot= typeNameWithArguments | groupedType );
    public StaticType baseType() throws RecognitionException {
        StaticType type = null;


        CeylonParser.typeNameWithArguments_return ot =null;

        GroupedType groupedType486 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3223:5: (ot= typeNameWithArguments | groupedType )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==UIDENTIFIER) ) {
                alt272=1;
            }
            else if ( (LA272_0==SMALLER_OP) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;

            }
            switch (alt272) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3224:7: ot= typeNameWithArguments
                    {
                    pushFollow(FOLLOW_typeNameWithArguments_in_baseType21629);
                    ot=typeNameWithArguments();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { BaseType bt = new BaseType(null);
                            bt.setIdentifier((ot!=null?ot.identifier:null));
                            if ((ot!=null?ot.typeArgumentList:null)!=null)
                                bt.setTypeArgumentList((ot!=null?ot.typeArgumentList:null));
                            type =bt; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3231:7: groupedType
                    {
                    pushFollow(FOLLOW_groupedType_in_baseType21651);
                    groupedType486=groupedType();

                    state._fsp--;
                    if (state.failed) return type;

                    if ( state.backtracking==0 ) { type =groupedType486; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "baseType"



    // $ANTLR start "qualifiedType"
    // /home/david/git/ceylon-spec/Ceylon.g:3235:1: qualifiedType returns [StaticType type] : baseType ( MEMBER_OP it= typeNameWithArguments )* ;
    public StaticType qualifiedType() throws RecognitionException {
        StaticType type = null;


        Token MEMBER_OP488=null;
        CeylonParser.typeNameWithArguments_return it =null;

        StaticType baseType487 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3236:5: ( baseType ( MEMBER_OP it= typeNameWithArguments )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3236:7: baseType ( MEMBER_OP it= typeNameWithArguments )*
            {
            pushFollow(FOLLOW_baseType_in_qualifiedType21680);
            baseType487=baseType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) { type =baseType487; }

            // /home/david/git/ceylon-spec/Ceylon.g:3238:7: ( MEMBER_OP it= typeNameWithArguments )*
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==MEMBER_OP) ) {
                    int LA273_2 = input.LA(2);

                    if ( (LA273_2==UIDENTIFIER) ) {
                        alt273=1;
                    }


                }


                switch (alt273) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3239:9: MEMBER_OP it= typeNameWithArguments
            	    {
            	    MEMBER_OP488=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_qualifiedType21706); if (state.failed) return type;

            	    pushFollow(FOLLOW_typeNameWithArguments_in_qualifiedType21719);
            	    it=typeNameWithArguments();

            	    state._fsp--;
            	    if (state.failed) return type;

            	    if ( state.backtracking==0 ) { QualifiedType qt = new QualifiedType(MEMBER_OP488);
            	              qt.setIdentifier((it!=null?it.identifier:null));
            	              if ((it!=null?it.typeArgumentList:null)!=null)
            	                  qt.setTypeArgumentList((it!=null?it.typeArgumentList:null));
            	              qt.setOuterType(type);
            	              type =qt; }

            	    }
            	    break;

            	default :
            	    break loop273;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "qualifiedType"


    public static class typeNameWithArguments_return extends ParserRuleReturnScope {
        public Identifier identifier;
        public TypeArgumentList typeArgumentList;
    };


    // $ANTLR start "typeNameWithArguments"
    // /home/david/git/ceylon-spec/Ceylon.g:3250:1: typeNameWithArguments returns [Identifier identifier, TypeArgumentList typeArgumentList] : typeName ( typeArguments )? ;
    public CeylonParser.typeNameWithArguments_return typeNameWithArguments() throws RecognitionException {
        CeylonParser.typeNameWithArguments_return retval = new CeylonParser.typeNameWithArguments_return();
        retval.start = input.LT(1);


        Identifier typeName489 =null;

        TypeArgumentList typeArguments490 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3251:5: ( typeName ( typeArguments )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3251:7: typeName ( typeArguments )?
            {
            pushFollow(FOLLOW_typeName_in_typeNameWithArguments21759);
            typeName489=typeName();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.identifier = typeName489; }

            // /home/david/git/ceylon-spec/Ceylon.g:3253:7: ( typeArguments )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==SMALLER_OP) ) {
                int LA274_1 = input.LA(2);

                if ( (LA274_1==IN_OP||LA274_1==LARGER_OP||(LA274_1 >= LBRACE && LA274_1 <= LBRACKET)||LA274_1==OUT||LA274_1==SMALLER_OP||LA274_1==UIDENTIFIER) ) {
                    alt274=1;
                }
            }
            switch (alt274) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3254:9: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_typeNameWithArguments21786);
                    typeArguments490=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.typeArgumentList = typeArguments490; }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeNameWithArguments"



    // $ANTLR start "annotations"
    // /home/david/git/ceylon-spec/Ceylon.g:3259:1: annotations returns [AnnotationList annotationList] : ( stringLiteral )? ( annotation )* ;
    public AnnotationList annotations() throws RecognitionException {
        AnnotationList annotationList = null;


        StringLiteral stringLiteral491 =null;

        Annotation annotation492 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3260:5: ( ( stringLiteral )? ( annotation )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3260:7: ( stringLiteral )? ( annotation )*
            {
            if ( state.backtracking==0 ) { annotationList = new AnnotationList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3261:7: ( stringLiteral )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==STRING_LITERAL||LA275_0==VERBATIM_STRING) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3262:11: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_annotations21850);
                    stringLiteral491=stringLiteral();

                    state._fsp--;
                    if (state.failed) return annotationList;

                    if ( state.backtracking==0 ) { if (stringLiteral491.getToken().getType()==VERBATIM_STRING)
                                    stringLiteral491.getToken().setType(AVERBATIM_STRING);
                                else
                                    stringLiteral491.getToken().setType(ASTRING_LITERAL);
                                AnonymousAnnotation aa = new AnonymousAnnotation(null);
                                aa.setStringLiteral(stringLiteral491);
                                annotationList.setAnonymousAnnotation(aa); }

                    }
                    break;

            }


            // /home/david/git/ceylon-spec/Ceylon.g:3271:7: ( annotation )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==LIDENTIFIER) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3272:9: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations21889);
            	    annotation492=annotation();

            	    state._fsp--;
            	    if (state.failed) return annotationList;

            	    if ( state.backtracking==0 ) { annotationList.addAnnotation(annotation492); 
            	              new com.redhat.ceylon.compiler.typechecker.tree.Visitor() { 
            	                  public void visit(StringLiteral that) {
            	                      if (that.getToken().getType()==VERBATIM_STRING)
            	                          that.getToken().setType(AVERBATIM_STRING);
            	                      else
            	                          that.getToken().setType(ASTRING_LITERAL);
            	                  }
            	              }.visit(annotation492); }

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotationList;
    }
    // $ANTLR end "annotations"



    // $ANTLR start "annotation"
    // /home/david/git/ceylon-spec/Ceylon.g:3285:1: annotation returns [Annotation annotation] : annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |) ;
    public Annotation annotation() throws RecognitionException {
        Annotation annotation = null;


        Identifier annotationName493 =null;

        PositionalArgumentList positionalArguments494 =null;

        NamedArgumentList namedArguments495 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3286:5: ( annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |) )
            // /home/david/git/ceylon-spec/Ceylon.g:3286:7: annotationName ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |)
            {
            pushFollow(FOLLOW_annotationName_in_annotation21930);
            annotationName493=annotationName();

            state._fsp--;
            if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation = new Annotation(null);
                    BaseMemberExpression bme = new BaseMemberExpression(null);
                    bme.setIdentifier(annotationName493);
                    bme.setTypeArguments( new InferredTypeArguments(null) );
                    annotation.setPrimary(bme); }

            // /home/david/git/ceylon-spec/Ceylon.g:3292:5: ( positionalArguments | ( namedAnnotationArgumentsStart )=> namedArguments |)
            int alt277=3;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt277=1;
                }
                break;
            case LBRACE:
                {
                int LA277_2 = input.LA(2);

                if ( (synpred34_Ceylon()) ) {
                    alt277=2;
                }
                else if ( (true) ) {
                    alt277=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return annotation;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALIAS:
            case ASSERT:
            case ASSIGN:
            case CLASS_DEFINITION:
            case DYNAMIC:
            case FUNCTION_MODIFIER:
            case IMPORT:
            case INTERFACE_DEFINITION:
            case LBRACKET:
            case LIDENTIFIER:
            case MODULE:
            case NEW:
            case OBJECT_DEFINITION:
            case PACKAGE:
            case SMALLER_OP:
            case UIDENTIFIER:
            case VALUE_MODIFIER:
            case VOID_MODIFIER:
                {
                alt277=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return annotation;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;

            }

            switch (alt277) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3293:7: positionalArguments
                    {
                    pushFollow(FOLLOW_positionalArguments_in_annotation21953);
                    positionalArguments494=positionalArguments();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setPositionalArgumentList(positionalArguments494); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3295:7: ( namedAnnotationArgumentsStart )=> namedArguments
                    {
                    pushFollow(FOLLOW_namedArguments_in_annotation21982);
                    namedArguments495=namedArguments();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setNamedArgumentList(namedArguments495); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3298:7: 
                    {
                    if ( state.backtracking==0 ) { annotation.setPositionalArgumentList(new PositionalArgumentList(null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotation;
    }
    // $ANTLR end "annotation"



    // $ANTLR start "prefixOperatorStart"
    // /home/david/git/ceylon-spec/Ceylon.g:3302:1: prefixOperatorStart : ( DIFFERENCE_OP | INCREMENT_OP | DECREMENT_OP | COMPLEMENT_OP );
    public void prefixOperatorStart() throws RecognitionException {
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3303:5: ( DIFFERENCE_OP | INCREMENT_OP | DECREMENT_OP | COMPLEMENT_OP )
            // /home/david/git/ceylon-spec/Ceylon.g:
            {
            if ( input.LA(1)==COMPLEMENT_OP||(input.LA(1) >= DECREMENT_OP && input.LA(1) <= DIFFERENCE_OP)||input.LA(1)==INCREMENT_OP ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "prefixOperatorStart"



    // $ANTLR start "compilerAnnotations"
    // /home/david/git/ceylon-spec/Ceylon.g:3309:1: compilerAnnotations returns [List<CompilerAnnotation> annotations] : ( compilerAnnotation )* ;
    public List<CompilerAnnotation> compilerAnnotations() throws RecognitionException {
        List<CompilerAnnotation> annotations = null;


        CompilerAnnotation compilerAnnotation496 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3310:5: ( ( compilerAnnotation )* )
            // /home/david/git/ceylon-spec/Ceylon.g:3310:7: ( compilerAnnotation )*
            {
            if ( state.backtracking==0 ) { annotations = new ArrayList<CompilerAnnotation>(); }

            // /home/david/git/ceylon-spec/Ceylon.g:3311:5: ( compilerAnnotation )*
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==COMPILER_ANNOTATION) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3312:7: compilerAnnotation
            	    {
            	    pushFollow(FOLLOW_compilerAnnotation_in_compilerAnnotations22086);
            	    compilerAnnotation496=compilerAnnotation();

            	    state._fsp--;
            	    if (state.failed) return annotations;

            	    if ( state.backtracking==0 ) { annotations.add(compilerAnnotation496); }

            	    }
            	    break;

            	default :
            	    break loop278;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotations;
    }
    // $ANTLR end "compilerAnnotations"



    // $ANTLR start "compilerAnnotation"
    // /home/david/git/ceylon-spec/Ceylon.g:3317:1: compilerAnnotation returns [CompilerAnnotation annotation] : COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )? ;
    public CompilerAnnotation compilerAnnotation() throws RecognitionException {
        CompilerAnnotation annotation = null;


        Token COMPILER_ANNOTATION497=null;
        Identifier annotationName498 =null;

        StringLiteral stringLiteral499 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3318:5: ( COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3318:7: COMPILER_ANNOTATION annotationName ( SEGMENT_OP stringLiteral )?
            {
            COMPILER_ANNOTATION497=(Token)match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_compilerAnnotation22126); if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation =new CompilerAnnotation(COMPILER_ANNOTATION497); }

            pushFollow(FOLLOW_annotationName_in_compilerAnnotation22143);
            annotationName498=annotationName();

            state._fsp--;
            if (state.failed) return annotation;

            if ( state.backtracking==0 ) { annotation.setIdentifier(annotationName498); }

            // /home/david/git/ceylon-spec/Ceylon.g:3322:7: ( SEGMENT_OP stringLiteral )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==SEGMENT_OP) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3323:11: SEGMENT_OP stringLiteral
                    {
                    match(input,SEGMENT_OP,FOLLOW_SEGMENT_OP_in_compilerAnnotation22173); if (state.failed) return annotation;

                    pushFollow(FOLLOW_stringLiteral_in_compilerAnnotation22185);
                    stringLiteral499=stringLiteral();

                    state._fsp--;
                    if (state.failed) return annotation;

                    if ( state.backtracking==0 ) { annotation.setStringLiteral(stringLiteral499); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotation;
    }
    // $ANTLR end "compilerAnnotation"



    // $ANTLR start "conditions"
    // /home/david/git/ceylon-spec/Ceylon.g:3329:1: conditions returns [ConditionList conditionList] : LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN ;
    public ConditionList conditions() throws RecognitionException {
        ConditionList conditionList = null;


        Token c=null;
        Token LPAREN500=null;
        Token RPAREN501=null;
        Condition c1 =null;

        Condition c2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3330:5: ( LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3330:7: LPAREN (c1= condition (c= COMMA (c2= condition |) )* )? RPAREN
            {
            LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_conditions22227); if (state.failed) return conditionList;

            if ( state.backtracking==0 ) { conditionList = new ConditionList(LPAREN500); }

            // /home/david/git/ceylon-spec/Ceylon.g:3332:7: (c1= condition (c= COMMA (c2= condition |) )* )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==BACKTICK||LA282_0==CHAR_LITERAL||(LA282_0 >= DECREMENT_OP && LA282_0 <= DIFFERENCE_OP)||LA282_0==DYNAMIC||LA282_0==EXISTS||LA282_0==FLOAT_LITERAL||LA282_0==FUNCTION_MODIFIER||LA282_0==IF_CLAUSE||LA282_0==INCREMENT_OP||LA282_0==IS_OP||(LA282_0 >= LBRACE && LA282_0 <= LIDENTIFIER)||LA282_0==LPAREN||LA282_0==NATURAL_LITERAL||LA282_0==NONEMPTY||(LA282_0 >= NOT_OP && LA282_0 <= OBJECT_DEFINITION)||(LA282_0 >= OUTER && LA282_0 <= PACKAGE)||LA282_0==SATISFIES||LA282_0==STRING_LITERAL||LA282_0==STRING_START||(LA282_0 >= SUM_OP && LA282_0 <= SWITCH_CLAUSE)||LA282_0==THIS||LA282_0==UIDENTIFIER||(LA282_0 >= VERBATIM_STRING && LA282_0 <= VOID_MODIFIER)) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3333:7: c1= condition (c= COMMA (c2= condition |) )*
                    {
                    pushFollow(FOLLOW_condition_in_conditions22253);
                    c1=condition();

                    state._fsp--;
                    if (state.failed) return conditionList;

                    if ( state.backtracking==0 ) { if (c1!=null) 
                                conditionList.addCondition(c1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3336:7: (c= COMMA (c2= condition |) )*
                    loop281:
                    do {
                        int alt281=2;
                        int LA281_0 = input.LA(1);

                        if ( (LA281_0==COMMA) ) {
                            alt281=1;
                        }


                        switch (alt281) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3336:9: c= COMMA (c2= condition |)
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_conditions22273); if (state.failed) return conditionList;

                    	    if ( state.backtracking==0 ) { conditionList.setEndToken(c); }

                    	    // /home/david/git/ceylon-spec/Ceylon.g:3338:9: (c2= condition |)
                    	    int alt280=2;
                    	    int LA280_0 = input.LA(1);

                    	    if ( (LA280_0==BACKTICK||LA280_0==CHAR_LITERAL||(LA280_0 >= DECREMENT_OP && LA280_0 <= DIFFERENCE_OP)||LA280_0==DYNAMIC||LA280_0==EXISTS||LA280_0==FLOAT_LITERAL||LA280_0==FUNCTION_MODIFIER||LA280_0==IF_CLAUSE||LA280_0==INCREMENT_OP||LA280_0==IS_OP||(LA280_0 >= LBRACE && LA280_0 <= LIDENTIFIER)||LA280_0==LPAREN||LA280_0==NATURAL_LITERAL||LA280_0==NONEMPTY||(LA280_0 >= NOT_OP && LA280_0 <= OBJECT_DEFINITION)||(LA280_0 >= OUTER && LA280_0 <= PACKAGE)||LA280_0==SATISFIES||LA280_0==STRING_LITERAL||LA280_0==STRING_START||(LA280_0 >= SUM_OP && LA280_0 <= SWITCH_CLAUSE)||LA280_0==THIS||LA280_0==UIDENTIFIER||(LA280_0 >= VERBATIM_STRING && LA280_0 <= VOID_MODIFIER)) ) {
                    	        alt280=1;
                    	    }
                    	    else if ( (LA280_0==COMMA||LA280_0==RPAREN) ) {
                    	        alt280=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return conditionList;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 280, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt280) {
                    	        case 1 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3339:11: c2= condition
                    	            {
                    	            pushFollow(FOLLOW_condition_in_conditions22308);
                    	            c2=condition();

                    	            state._fsp--;
                    	            if (state.failed) return conditionList;

                    	            if ( state.backtracking==0 ) { if (c2!=null) 
                    	                            conditionList.addCondition(c2);
                    	                        conditionList.setEndToken(null); }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /home/david/git/ceylon-spec/Ceylon.g:3343:11: 
                    	            {
                    	            if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                    	                          new MismatchedTokenException(LIDENTIFIER, input)); }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop281;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN501=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_conditions22370); if (state.failed) return conditionList;

            if ( state.backtracking==0 ) { conditionList.setEndToken(RPAREN501); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return conditionList;
    }
    // $ANTLR end "conditions"



    // $ANTLR start "condition"
    // /home/david/git/ceylon-spec/Ceylon.g:3352:1: condition returns [Condition condition] : ( existsCondition | nonemptyCondition | isCondition | satisfiesCondition | booleanCondition );
    public Condition condition() throws RecognitionException {
        Condition condition = null;


        ExistsCondition existsCondition502 =null;

        NonemptyCondition nonemptyCondition503 =null;

        IsCondition isCondition504 =null;

        SatisfiesCondition satisfiesCondition505 =null;

        BooleanCondition booleanCondition506 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3353:5: ( existsCondition | nonemptyCondition | isCondition | satisfiesCondition | booleanCondition )
            int alt283=5;
            switch ( input.LA(1) ) {
            case NOT_OP:
                {
                switch ( input.LA(2) ) {
                case EXISTS:
                    {
                    alt283=1;
                    }
                    break;
                case NONEMPTY:
                    {
                    alt283=2;
                    }
                    break;
                case IS_OP:
                    {
                    alt283=3;
                    }
                    break;
                case BACKTICK:
                case CHAR_LITERAL:
                case DECREMENT_OP:
                case DIFFERENCE_OP:
                case DYNAMIC:
                case FLOAT_LITERAL:
                case INCREMENT_OP:
                case LBRACE:
                case LBRACKET:
                case LIDENTIFIER:
                case LPAREN:
                case NATURAL_LITERAL:
                case NOT_OP:
                case OBJECT_DEFINITION:
                case OUTER:
                case PACKAGE:
                case STRING_LITERAL:
                case STRING_START:
                case SUM_OP:
                case SUPER:
                case THIS:
                case UIDENTIFIER:
                case VERBATIM_STRING:
                    {
                    alt283=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);

                    throw nvae;

                }

                }
                break;
            case EXISTS:
                {
                alt283=1;
                }
                break;
            case NONEMPTY:
                {
                alt283=2;
                }
                break;
            case IS_OP:
                {
                alt283=3;
                }
                break;
            case SATISFIES:
                {
                alt283=4;
                }
                break;
            case BACKTICK:
            case CHAR_LITERAL:
            case DECREMENT_OP:
            case DIFFERENCE_OP:
            case DYNAMIC:
            case FLOAT_LITERAL:
            case FUNCTION_MODIFIER:
            case IF_CLAUSE:
            case INCREMENT_OP:
            case LBRACE:
            case LBRACKET:
            case LET:
            case LIDENTIFIER:
            case LPAREN:
            case NATURAL_LITERAL:
            case OBJECT_DEFINITION:
            case OUTER:
            case PACKAGE:
            case STRING_LITERAL:
            case STRING_START:
            case SUM_OP:
            case SUPER:
            case SWITCH_CLAUSE:
            case THIS:
            case UIDENTIFIER:
            case VERBATIM_STRING:
            case VOID_MODIFIER:
                {
                alt283=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;

            }

            switch (alt283) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3353:7: existsCondition
                    {
                    pushFollow(FOLLOW_existsCondition_in_condition22399);
                    existsCondition502=existsCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =existsCondition502; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3355:7: nonemptyCondition
                    {
                    pushFollow(FOLLOW_nonemptyCondition_in_condition22415);
                    nonemptyCondition503=nonemptyCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =nonemptyCondition503; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3357:7: isCondition
                    {
                    pushFollow(FOLLOW_isCondition_in_condition22431);
                    isCondition504=isCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =isCondition504; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3359:7: satisfiesCondition
                    {
                    pushFollow(FOLLOW_satisfiesCondition_in_condition22448);
                    satisfiesCondition505=satisfiesCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =satisfiesCondition505; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3361:7: booleanCondition
                    {
                    pushFollow(FOLLOW_booleanCondition_in_condition22464);
                    booleanCondition506=booleanCondition();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition =booleanCondition506; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "condition"



    // $ANTLR start "booleanCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3365:1: booleanCondition returns [BooleanCondition condition] : functionOrExpression ;
    public BooleanCondition booleanCondition() throws RecognitionException {
        BooleanCondition condition = null;


        Expression functionOrExpression507 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3366:5: ( functionOrExpression )
            // /home/david/git/ceylon-spec/Ceylon.g:3366:7: functionOrExpression
            {
            if ( state.backtracking==0 ) { condition = new BooleanCondition(null); }

            pushFollow(FOLLOW_functionOrExpression_in_booleanCondition22505);
            functionOrExpression507=functionOrExpression();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setExpression(functionOrExpression507); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "booleanCondition"



    // $ANTLR start "existsCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
    public ExistsCondition existsCondition() throws RecognitionException {
        ExistsCondition condition = null;


        Token NOT_OP508=null;
        Token EXISTS509=null;
        Statement letVariable510 =null;

        Variable impliedVariable511 =null;

        Expression expression512 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3372:7: ( NOT_OP )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==NOT_OP) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3373:9: NOT_OP
                    {
                    NOT_OP508=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_existsCondition22548); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new ExistsCondition(NOT_OP508);
                              condition.setNot(true); }

                    }
                    break;

            }


            EXISTS509=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsCondition22575); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new ExistsCondition(EXISTS509); }

            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            int alt285=3;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==LBRACKET) ) {
                int LA285_1 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt285=1;
                }
                else if ( (true) ) {
                    alt285=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA285_0==COMPILER_ANNOTATION) && (synpred36_Ceylon())) {
                alt285=1;
            }
            else if ( (LA285_0==UIDENTIFIER) ) {
                int LA285_3 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt285=1;
                }
                else if ( (true) ) {
                    alt285=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA285_0==SMALLER_OP) && (synpred36_Ceylon())) {
                alt285=1;
            }
            else if ( (LA285_0==LBRACE) ) {
                int LA285_5 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt285=1;
                }
                else if ( (true) ) {
                    alt285=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA285_0==VOID_MODIFIER) && (synpred36_Ceylon())) {
                alt285=1;
            }
            else if ( (LA285_0==FUNCTION_MODIFIER) && (synpred36_Ceylon())) {
                alt285=1;
            }
            else if ( (LA285_0==VALUE_MODIFIER) && (synpred36_Ceylon())) {
                alt285=1;
            }
            else if ( (LA285_0==LIDENTIFIER) ) {
                int LA285_9 = input.LA(2);

                if ( (synpred36_Ceylon()) ) {
                    alt285=1;
                }
                else if ( (synpred37_Ceylon()) ) {
                    alt285=2;
                }
                else if ( (true) ) {
                    alt285=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA285_0==BACKTICK||LA285_0==CHAR_LITERAL||(LA285_0 >= DECREMENT_OP && LA285_0 <= DIFFERENCE_OP)||LA285_0==DYNAMIC||LA285_0==FLOAT_LITERAL||LA285_0==INCREMENT_OP||LA285_0==LPAREN||LA285_0==NATURAL_LITERAL||(LA285_0 >= NOT_OP && LA285_0 <= OBJECT_DEFINITION)||(LA285_0 >= OUTER && LA285_0 <= PACKAGE)||LA285_0==STRING_LITERAL||LA285_0==STRING_START||(LA285_0 >= SUM_OP && LA285_0 <= SUPER)||LA285_0==THIS||LA285_0==VERBATIM_STRING) ) {
                alt285=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;

            }
            switch (alt285) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
                    {
                    pushFollow(FOLLOW_letVariable_in_existsCondition22633);
                    letVariable510=letVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(letVariable510); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3385:9: ( LIDENTIFIER )=> impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_existsCondition22667);
                    impliedVariable511=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable511); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3387:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_existsCondition22687);
                    expression512=expression();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setBrokenExpression(expression512); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "existsCondition"



    // $ANTLR start "nonemptyCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
    public NonemptyCondition nonemptyCondition() throws RecognitionException {
        NonemptyCondition condition = null;


        Token NOT_OP513=null;
        Token NONEMPTY514=null;
        Statement letVariable515 =null;

        Variable impliedVariable516 =null;

        Expression expression517 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3393:7: ( NOT_OP )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==NOT_OP) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3394:9: NOT_OP
                    {
                    NOT_OP513=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_nonemptyCondition22740); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new NonemptyCondition(NOT_OP513);
                              condition.setNot(true); }

                    }
                    break;

            }


            NONEMPTY514=(Token)match(input,NONEMPTY,FOLLOW_NONEMPTY_in_nonemptyCondition22767); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new NonemptyCondition(NONEMPTY514); }

            // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
            int alt287=3;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==LBRACKET) ) {
                int LA287_1 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==COMPILER_ANNOTATION) && (synpred39_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==UIDENTIFIER) ) {
                int LA287_3 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==SMALLER_OP) && (synpred39_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==LBRACE) ) {
                int LA287_5 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==VOID_MODIFIER) && (synpred39_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==FUNCTION_MODIFIER) && (synpred39_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==VALUE_MODIFIER) && (synpred39_Ceylon())) {
                alt287=1;
            }
            else if ( (LA287_0==LIDENTIFIER) ) {
                int LA287_9 = input.LA(2);

                if ( (synpred39_Ceylon()) ) {
                    alt287=1;
                }
                else if ( (synpred40_Ceylon()) ) {
                    alt287=2;
                }
                else if ( (true) ) {
                    alt287=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA287_0==BACKTICK||LA287_0==CHAR_LITERAL||(LA287_0 >= DECREMENT_OP && LA287_0 <= DIFFERENCE_OP)||LA287_0==DYNAMIC||LA287_0==FLOAT_LITERAL||LA287_0==INCREMENT_OP||LA287_0==LPAREN||LA287_0==NATURAL_LITERAL||(LA287_0 >= NOT_OP && LA287_0 <= OBJECT_DEFINITION)||(LA287_0 >= OUTER && LA287_0 <= PACKAGE)||LA287_0==STRING_LITERAL||LA287_0==STRING_START||(LA287_0 >= SUM_OP && LA287_0 <= SUPER)||LA287_0==THIS||LA287_0==VERBATIM_STRING) ) {
                alt287=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;

            }
            switch (alt287) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:<invalid or missing tree structure>
                    {
                    pushFollow(FOLLOW_letVariable_in_nonemptyCondition22825);
                    letVariable515=letVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(letVariable515); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3406:9: ( LIDENTIFIER )=> impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_nonemptyCondition22859);
                    impliedVariable516=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable516); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3408:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_nonemptyCondition22880);
                    expression517=expression();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setBrokenExpression(expression517); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "nonemptyCondition"



    // $ANTLR start "isCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3413:1: isCondition returns [IsCondition condition] : ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable ) ;
    public IsCondition isCondition() throws RecognitionException {
        IsCondition condition = null;


        Token NOT_OP518=null;
        Token IS_OP519=null;
        Variable v =null;

        StaticType type520 =null;

        Variable impliedVariable521 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3414:5: ( ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3414:7: ( NOT_OP )? IS_OP type ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3414:7: ( NOT_OP )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==NOT_OP) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3415:9: NOT_OP
                    {
                    NOT_OP518=(Token)match(input,NOT_OP,FOLLOW_NOT_OP_in_isCondition22929); if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition = new IsCondition(NOT_OP518);
                              condition.setNot(true); }

                    }
                    break;

            }


            IS_OP519=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_isCondition22956); if (state.failed) return condition;

            if ( state.backtracking==0 ) { if (condition==null)
                        condition = new IsCondition(IS_OP519); }

            pushFollow(FOLLOW_type_in_isCondition22973);
            type520=type();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setType(type520); }

            // /home/david/git/ceylon-spec/Ceylon.g:3424:7: ( ( LIDENTIFIER SPECIFY )=>v= isConditionVariable | impliedVariable )
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==LIDENTIFIER) ) {
                int LA289_1 = input.LA(2);

                if ( (LA289_1==SPECIFY) && (synpred41_Ceylon())) {
                    alt289=1;
                }
                else if ( (LA289_1==COMMA||LA289_1==RPAREN) ) {
                    alt289=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return condition;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return condition;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;

            }
            switch (alt289) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3425:9: ( LIDENTIFIER SPECIFY )=>v= isConditionVariable
                    {
                    pushFollow(FOLLOW_isConditionVariable_in_isCondition23017);
                    v=isConditionVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(v); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3429:9: impliedVariable
                    {
                    pushFollow(FOLLOW_impliedVariable_in_isCondition23045);
                    impliedVariable521=impliedVariable();

                    state._fsp--;
                    if (state.failed) return condition;

                    if ( state.backtracking==0 ) { condition.setVariable(impliedVariable521); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "isCondition"



    // $ANTLR start "isConditionVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3434:1: isConditionVariable returns [Variable variable] : memberName specifier ;
    public Variable isConditionVariable() throws RecognitionException {
        Variable variable = null;


        Identifier memberName522 =null;

        SpecifierExpression specifier523 =null;


         variable = new Variable(null);
                    variable.setType(new ValueModifier(null));  
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3437:5: ( memberName specifier )
            // /home/david/git/ceylon-spec/Ceylon.g:3437:7: memberName specifier
            {
            pushFollow(FOLLOW_memberName_in_isConditionVariable23094);
            memberName522=memberName();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.setIdentifier(memberName522); }

            pushFollow(FOLLOW_specifier_in_isConditionVariable23110);
            specifier523=specifier();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable.setSpecifierExpression(specifier523); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "isConditionVariable"



    // $ANTLR start "satisfiesCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3443:1: satisfiesCondition returns [SatisfiesCondition condition] : SATISFIES type typeName ;
    public SatisfiesCondition satisfiesCondition() throws RecognitionException {
        SatisfiesCondition condition = null;


        Token SATISFIES524=null;
        StaticType type525 =null;

        Identifier typeName526 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3444:5: ( SATISFIES type typeName )
            // /home/david/git/ceylon-spec/Ceylon.g:3444:7: SATISFIES type typeName
            {
            SATISFIES524=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiesCondition23139); if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition = new SatisfiesCondition(SATISFIES524); }

            pushFollow(FOLLOW_type_in_satisfiesCondition23156);
            type525=type();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setType(type525); }

            pushFollow(FOLLOW_typeName_in_satisfiesCondition23173);
            typeName526=typeName();

            state._fsp--;
            if (state.failed) return condition;

            if ( state.backtracking==0 ) { condition.setIdentifier(typeName526); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "satisfiesCondition"



    // $ANTLR start "controlStatement"
    // /home/david/git/ceylon-spec/Ceylon.g:3452:1: controlStatement returns [ControlStatement controlStatement] : ( ifElse | switchCaseElse | whileLoop | forElse | tryCatchFinally | dynamic );
    public ControlStatement controlStatement() throws RecognitionException {
        ControlStatement controlStatement = null;


        IfStatement ifElse527 =null;

        SwitchStatement switchCaseElse528 =null;

        WhileStatement whileLoop529 =null;

        ForStatement forElse530 =null;

        TryCatchStatement tryCatchFinally531 =null;

        DynamicStatement dynamic532 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3453:5: ( ifElse | switchCaseElse | whileLoop | forElse | tryCatchFinally | dynamic )
            int alt290=6;
            switch ( input.LA(1) ) {
            case IF_CLAUSE:
                {
                alt290=1;
                }
                break;
            case SWITCH_CLAUSE:
                {
                alt290=2;
                }
                break;
            case WHILE_CLAUSE:
                {
                alt290=3;
                }
                break;
            case FOR_CLAUSE:
                {
                alt290=4;
                }
                break;
            case TRY_CLAUSE:
                {
                alt290=5;
                }
                break;
            case DYNAMIC:
                {
                alt290=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return controlStatement;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;

            }

            switch (alt290) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3453:7: ifElse
                    {
                    pushFollow(FOLLOW_ifElse_in_controlStatement23202);
                    ifElse527=ifElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =ifElse527; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3455:7: switchCaseElse
                    {
                    pushFollow(FOLLOW_switchCaseElse_in_controlStatement23219);
                    switchCaseElse528=switchCaseElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =switchCaseElse528; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3457:7: whileLoop
                    {
                    pushFollow(FOLLOW_whileLoop_in_controlStatement23236);
                    whileLoop529=whileLoop();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =whileLoop529; }

                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3459:7: forElse
                    {
                    pushFollow(FOLLOW_forElse_in_controlStatement23253);
                    forElse530=forElse();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =forElse530; }

                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3461:7: tryCatchFinally
                    {
                    pushFollow(FOLLOW_tryCatchFinally_in_controlStatement23270);
                    tryCatchFinally531=tryCatchFinally();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =tryCatchFinally531; }

                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3463:7: dynamic
                    {
                    pushFollow(FOLLOW_dynamic_in_controlStatement23286);
                    dynamic532=dynamic();

                    state._fsp--;
                    if (state.failed) return controlStatement;

                    if ( state.backtracking==0 ) { controlStatement =dynamic532; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return controlStatement;
    }
    // $ANTLR end "controlStatement"



    // $ANTLR start "controlBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3467:1: controlBlock returns [Block block] : ( ( LBRACE )=>b= block |) ;
    public Block controlBlock() throws RecognitionException {
        Block block = null;


        Block b =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3468:5: ( ( ( LBRACE )=>b= block |) )
            // /home/david/git/ceylon-spec/Ceylon.g:3468:7: ( ( LBRACE )=>b= block |)
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3468:7: ( ( LBRACE )=>b= block |)
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LBRACE) ) {
                int LA291_1 = input.LA(2);

                if ( (synpred42_Ceylon()) ) {
                    alt291=1;
                }
                else if ( (true) ) {
                    alt291=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return block;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA291_0==ALIAS||(LA291_0 >= ASSERT && LA291_0 <= ASSIGN)||(LA291_0 >= BACKTICK && LA291_0 <= BREAK)||(LA291_0 >= CATCH_CLAUSE && LA291_0 <= CLASS_DEFINITION)||LA291_0==COMPILER_ANNOTATION||LA291_0==CONTINUE||(LA291_0 >= DECREMENT_OP && LA291_0 <= DIFFERENCE_OP)||LA291_0==DYNAMIC||LA291_0==ELSE_CLAUSE||(LA291_0 >= FINALLY_CLAUSE && LA291_0 <= FUNCTION_MODIFIER)||LA291_0==IF_CLAUSE||(LA291_0 >= INCREMENT_OP && LA291_0 <= INTERFACE_DEFINITION)||LA291_0==LBRACKET||LA291_0==LIDENTIFIER||LA291_0==LPAREN||(LA291_0 >= NATURAL_LITERAL && LA291_0 <= NEW)||(LA291_0 >= NOT_OP && LA291_0 <= OBJECT_DEFINITION)||(LA291_0 >= OUTER && LA291_0 <= PACKAGE)||LA291_0==RBRACE||LA291_0==RETURN||LA291_0==SMALLER_OP||LA291_0==STRING_LITERAL||LA291_0==STRING_START||(LA291_0 >= SUM_OP && LA291_0 <= SWITCH_CLAUSE)||(LA291_0 >= THIS && LA291_0 <= TRY_CLAUSE)||LA291_0==UIDENTIFIER||(LA291_0 >= VALUE_MODIFIER && LA291_0 <= WHILE_CLAUSE)) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return block;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);

                throw nvae;

            }
            switch (alt291) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3468:9: ( LBRACE )=>b= block
                    {
                    pushFollow(FOLLOW_block_in_controlBlock23324);
                    b=block();

                    state._fsp--;
                    if (state.failed) return block;

                    if ( state.backtracking==0 ) { block =b; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3470:9: 
                    {
                    if ( state.backtracking==0 ) { displayRecognitionError(getTokenNames(), 
                                    new MismatchedTokenException(LBRACE, input)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "controlBlock"



    // $ANTLR start "dynamic"
    // /home/david/git/ceylon-spec/Ceylon.g:3475:1: dynamic returns [DynamicStatement statement] : DYNAMIC block ;
    public DynamicStatement dynamic() throws RecognitionException {
        DynamicStatement statement = null;


        Token DYNAMIC533=null;
        Block block534 =null;


         DynamicClause dc = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3477:5: ( DYNAMIC block )
            // /home/david/git/ceylon-spec/Ceylon.g:3477:7: DYNAMIC block
            {
            if ( state.backtracking==0 ) { statement =new DynamicStatement(null); }

            DYNAMIC533=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_dynamic23390); if (state.failed) return statement;

            if ( state.backtracking==0 ) { dc = new DynamicClause(DYNAMIC533);
                    statement.setDynamicClause(dc); }

            pushFollow(FOLLOW_block_in_dynamic23407);
            block534=block();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { dc.setBlock(block534); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "dynamic"



    // $ANTLR start "ifElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3485:1: ifElse returns [IfStatement statement] : ifBlock ( elseBlock )? ;
    public IfStatement ifElse() throws RecognitionException {
        IfStatement statement = null;


        IfClause ifBlock535 =null;

        ElseClause elseBlock536 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3486:5: ( ifBlock ( elseBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3486:7: ifBlock ( elseBlock )?
            {
            if ( state.backtracking==0 ) { statement =new IfStatement(null); }

            pushFollow(FOLLOW_ifBlock_in_ifElse23444);
            ifBlock535=ifBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setIfClause(ifBlock535); }

            // /home/david/git/ceylon-spec/Ceylon.g:3489:7: ( elseBlock )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==ELSE_CLAUSE) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3490:9: elseBlock
                    {
                    pushFollow(FOLLOW_elseBlock_in_ifElse23472);
                    elseBlock536=elseBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { ElseClause ec = elseBlock536;
                              statement.setElseClause(ec);
                              ConditionList cl = ifBlock535.getConditionList();
                              if (cl!=null) {
                                List<Condition> conditions = cl.getConditions();
                                if (conditions.size()==1) {
                                  Condition c = conditions.get(0);
                                  Identifier id = null;
                                  Type t = null;
                                  if (c instanceof ExistsOrNonemptyCondition) {
                                    Statement s = ((ExistsOrNonemptyCondition)c).getVariable();
                                    if (s instanceof Variable) {
                                      Variable v = (Variable) s;
                                      t = v.getType();
                                      id = v.getIdentifier();
                                    }
                                  }
                                  else if (c instanceof IsCondition) {
                                    Variable v = (Variable) ((IsCondition)c).getVariable();
                                    if (v!=null) {
                                      t = v.getType();
                                      id = v.getIdentifier();
                                    }
                                  }
                                  if (id!=null && ec!=null && t instanceof SyntheticVariable) { 
                                    Variable ev = new Variable(null);
                                    ev.setType(new SyntheticVariable(null));
                                    SpecifierExpression ese = new SpecifierExpression(null);
                                    Expression ee = new Expression(null);
                                    BaseMemberExpression ebme = new BaseMemberExpression(null);
                                    ebme.setTypeArguments( new InferredTypeArguments(null) );
                                    ee.setTerm(ebme);
                                    ese.setExpression(ee);
                                    ev.setSpecifierExpression(ese);
                                    ec.setVariable(ev);
                                    ev.setIdentifier(id);
                                    ebme.setIdentifier(id);
                                  }
                                }
                              }
                            }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "ifElse"



    // $ANTLR start "ifBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3535:1: ifBlock returns [IfClause clause] : IF_CLAUSE conditions controlBlock ;
    public IfClause ifBlock() throws RecognitionException {
        IfClause clause = null;


        Token IF_CLAUSE537=null;
        ConditionList conditions538 =null;

        Block controlBlock539 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3536:5: ( IF_CLAUSE conditions controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3536:7: IF_CLAUSE conditions controlBlock
            {
            IF_CLAUSE537=(Token)match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_ifBlock23512); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new IfClause(IF_CLAUSE537); }

            pushFollow(FOLLOW_conditions_in_ifBlock23529);
            conditions538=conditions();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setConditionList(conditions538); }

            pushFollow(FOLLOW_controlBlock_in_ifBlock23545);
            controlBlock539=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock539); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "ifBlock"



    // $ANTLR start "elseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3544:1: elseBlock returns [ElseClause clause] : ELSE_CLAUSE ( elseIf | block ) ;
    public ElseClause elseBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE540=null;
        Block elseIf541 =null;

        Block block542 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3545:5: ( ELSE_CLAUSE ( elseIf | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3545:7: ELSE_CLAUSE ( elseIf | block )
            {
            ELSE_CLAUSE540=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_elseBlock23574); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE540); }

            // /home/david/git/ceylon-spec/Ceylon.g:3547:7: ( elseIf | block )
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==IF_CLAUSE) ) {
                alt293=1;
            }
            else if ( (LA293_0==LBRACE) ) {
                alt293=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return clause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;

            }
            switch (alt293) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3548:9: elseIf
                    {
                    pushFollow(FOLLOW_elseIf_in_elseBlock23601);
                    elseIf541=elseIf();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(elseIf541); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3551:9: block
                    {
                    pushFollow(FOLLOW_block_in_elseBlock23631);
                    block542=block();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(block542); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "elseBlock"



    // $ANTLR start "elseIf"
    // /home/david/git/ceylon-spec/Ceylon.g:3556:1: elseIf returns [Block block] : ifElse ;
    public Block elseIf() throws RecognitionException {
        Block block = null;


        IfStatement ifElse543 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3557:5: ( ifElse )
            // /home/david/git/ceylon-spec/Ceylon.g:3557:7: ifElse
            {
            pushFollow(FOLLOW_ifElse_in_elseIf23670);
            ifElse543=ifElse();

            state._fsp--;
            if (state.failed) return block;

            if ( state.backtracking==0 ) { block = new Block(null);
                    block.addStatement(ifElse543); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return block;
    }
    // $ANTLR end "elseIf"



    // $ANTLR start "switchCaseElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3562:1: switchCaseElse returns [SwitchStatement statement] : switchHeader cases ;
    public SwitchStatement switchCaseElse() throws RecognitionException {
        SwitchStatement statement = null;


        SwitchClause switchHeader544 =null;

        SwitchCaseList cases545 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3563:5: ( switchHeader cases )
            // /home/david/git/ceylon-spec/Ceylon.g:3563:7: switchHeader cases
            {
            if ( state.backtracking==0 ) { statement = new SwitchStatement(null); }

            pushFollow(FOLLOW_switchHeader_in_switchCaseElse23707);
            switchHeader544=switchHeader();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setSwitchClause(switchHeader544); }

            pushFollow(FOLLOW_cases_in_switchCaseElse23724);
            cases545=cases();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setSwitchCaseList(cases545);
                    Identifier id = null;
                    Switched sw = switchHeader544.getSwitched();
                    if (sw!=null) {
                      Expression ex = sw.getExpression();
                      if (ex!=null && ex.getTerm() instanceof BaseMemberExpression) {
                        id = ((BaseMemberExpression) ex.getTerm()).getIdentifier();
                      }
                      TypedDeclaration var = sw.getVariable();
                      if (var!=null) {
                        id = var.getIdentifier();
                      }
                    }
                    if (id!=null) {
                      for (CaseClause cc: cases545.getCaseClauses()) {
                        CaseItem item = cc.getCaseItem();
                        if (item instanceof IsCase) {
                          IsCase ic = (IsCase) item;
                          Variable v = new Variable(null);
                          v.setType(new SyntheticVariable(null));
                          SpecifierExpression se = new SpecifierExpression(null);
                          Expression e = new Expression(null);
                          BaseMemberExpression bme = new BaseMemberExpression(null);
                          bme.setTypeArguments( new InferredTypeArguments(null) );
                          e.setTerm(bme);
                          se.setExpression(e);
                          v.setSpecifierExpression(se);
                          ic.setVariable(v);
                          bme.setIdentifier(id);
                          v.setIdentifier(id);
                        }
                      }
                      ElseClause ec = cases545.getElseClause();
                      if (ec!=null) {
                        Variable ev = new Variable(null);
                        ev.setType(new SyntheticVariable(null));
                        SpecifierExpression ese = new SpecifierExpression(null);
                        Expression ee = new Expression(null);
                        BaseMemberExpression ebme = new BaseMemberExpression(null);
                        ebme.setTypeArguments( new InferredTypeArguments(null) );
                        ee.setTerm(ebme);
                        ese.setExpression(ee);
                        ev.setSpecifierExpression(ese);
                        ec.setVariable(ev);
                        ebme.setIdentifier(id);
                        ev.setIdentifier(id);
                      }
                    }
                  }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "switchCaseElse"



    // $ANTLR start "switchHeader"
    // /home/david/git/ceylon-spec/Ceylon.g:3618:1: switchHeader returns [SwitchClause clause] : SWITCH_CLAUSE LPAREN ( switched )? RPAREN ;
    public SwitchClause switchHeader() throws RecognitionException {
        SwitchClause clause = null;


        Token SWITCH_CLAUSE546=null;
        Switched switched547 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3619:5: ( SWITCH_CLAUSE LPAREN ( switched )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3619:7: SWITCH_CLAUSE LPAREN ( switched )? RPAREN
            {
            SWITCH_CLAUSE546=(Token)match(input,SWITCH_CLAUSE,FOLLOW_SWITCH_CLAUSE_in_switchHeader23753); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new SwitchClause(SWITCH_CLAUSE546); }

            match(input,LPAREN,FOLLOW_LPAREN_in_switchHeader23770); if (state.failed) return clause;

            // /home/david/git/ceylon-spec/Ceylon.g:3622:7: ( switched )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==BACKTICK||LA294_0==CHAR_LITERAL||LA294_0==COMPILER_ANNOTATION||(LA294_0 >= DECREMENT_OP && LA294_0 <= DIFFERENCE_OP)||LA294_0==DYNAMIC||LA294_0==FLOAT_LITERAL||LA294_0==FUNCTION_MODIFIER||LA294_0==INCREMENT_OP||(LA294_0 >= LBRACE && LA294_0 <= LBRACKET)||LA294_0==LIDENTIFIER||LA294_0==LPAREN||LA294_0==NATURAL_LITERAL||(LA294_0 >= NOT_OP && LA294_0 <= OBJECT_DEFINITION)||(LA294_0 >= OUTER && LA294_0 <= PACKAGE)||LA294_0==SMALLER_OP||LA294_0==STRING_LITERAL||LA294_0==STRING_START||(LA294_0 >= SUM_OP && LA294_0 <= SUPER)||LA294_0==THIS||LA294_0==UIDENTIFIER||(LA294_0 >= VALUE_MODIFIER && LA294_0 <= VOID_MODIFIER)) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3623:9: switched
                    {
                    pushFollow(FOLLOW_switched_in_switchHeader23789);
                    switched547=switched();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setSwitched(switched547); }

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_switchHeader23817); if (state.failed) return clause;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "switchHeader"



    // $ANTLR start "switched"
    // /home/david/git/ceylon-spec/Ceylon.g:3629:1: switched returns [Switched switched] : ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) ;
    public Switched switched() throws RecognitionException {
        Switched switched = null;


        Variable specifiedVariable548 =null;

        Expression expression549 =null;


         switched = new Switched(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3631:5: ( ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3631:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3631:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==COMPILER_ANNOTATION) && (synpred43_Ceylon())) {
                alt295=1;
            }
            else if ( (LA295_0==UIDENTIFIER) ) {
                int LA295_2 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt295=1;
                }
                else if ( (true) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA295_0==SMALLER_OP) && (synpred43_Ceylon())) {
                alt295=1;
            }
            else if ( (LA295_0==LBRACKET) ) {
                int LA295_4 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt295=1;
                }
                else if ( (true) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA295_0==LBRACE) ) {
                int LA295_5 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt295=1;
                }
                else if ( (true) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA295_0==VOID_MODIFIER) && (synpred43_Ceylon())) {
                alt295=1;
            }
            else if ( (LA295_0==FUNCTION_MODIFIER) && (synpred43_Ceylon())) {
                alt295=1;
            }
            else if ( (LA295_0==VALUE_MODIFIER) && (synpred43_Ceylon())) {
                alt295=1;
            }
            else if ( (LA295_0==LIDENTIFIER) ) {
                int LA295_9 = input.LA(2);

                if ( (synpred43_Ceylon()) ) {
                    alt295=1;
                }
                else if ( (true) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return switched;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA295_0==BACKTICK||LA295_0==CHAR_LITERAL||(LA295_0 >= DECREMENT_OP && LA295_0 <= DIFFERENCE_OP)||LA295_0==DYNAMIC||LA295_0==FLOAT_LITERAL||LA295_0==INCREMENT_OP||LA295_0==LPAREN||LA295_0==NATURAL_LITERAL||(LA295_0 >= NOT_OP && LA295_0 <= OBJECT_DEFINITION)||(LA295_0 >= OUTER && LA295_0 <= PACKAGE)||LA295_0==STRING_LITERAL||LA295_0==STRING_START||(LA295_0 >= SUM_OP && LA295_0 <= SUPER)||LA295_0==THIS||LA295_0==VERBATIM_STRING) ) {
                alt295=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return switched;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);

                throw nvae;

            }
            switch (alt295) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3631:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable
                    {
                    pushFollow(FOLLOW_specifiedVariable_in_switched23868);
                    specifiedVariable548=specifiedVariable();

                    state._fsp--;
                    if (state.failed) return switched;

                    if ( state.backtracking==0 ) { switched.setVariable(specifiedVariable548); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3634:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_switched23888);
                    expression549=expression();

                    state._fsp--;
                    if (state.failed) return switched;

                    if ( state.backtracking==0 ) { switched.setExpression(expression549); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switched;
    }
    // $ANTLR end "switched"



    // $ANTLR start "cases"
    // /home/david/git/ceylon-spec/Ceylon.g:3639:1: cases returns [SwitchCaseList switchCaseList] : ( caseBlock )+ ( defaultCaseBlock )? ;
    public SwitchCaseList cases() throws RecognitionException {
        SwitchCaseList switchCaseList = null;


        CaseClause caseBlock550 =null;

        ElseClause defaultCaseBlock551 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3640:5: ( ( caseBlock )+ ( defaultCaseBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3640:7: ( caseBlock )+ ( defaultCaseBlock )?
            {
            if ( state.backtracking==0 ) { switchCaseList = new SwitchCaseList(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3641:7: ( caseBlock )+
            int cnt296=0;
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==CASE_CLAUSE) ) {
                    alt296=1;
                }


                switch (alt296) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3642:9: caseBlock
            	    {
            	    pushFollow(FOLLOW_caseBlock_in_cases23945);
            	    caseBlock550=caseBlock();

            	    state._fsp--;
            	    if (state.failed) return switchCaseList;

            	    if ( state.backtracking==0 ) { switchCaseList.addCaseClause(caseBlock550); }

            	    }
            	    break;

            	default :
            	    if ( cnt296 >= 1 ) break loop296;
            	    if (state.backtracking>0) {state.failed=true; return switchCaseList;}
                        EarlyExitException eee =
                            new EarlyExitException(296, input);
                        throw eee;
                }
                cnt296++;
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:3645:7: ( defaultCaseBlock )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==ELSE_CLAUSE) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3646:9: defaultCaseBlock
                    {
                    pushFollow(FOLLOW_defaultCaseBlock_in_cases23982);
                    defaultCaseBlock551=defaultCaseBlock();

                    state._fsp--;
                    if (state.failed) return switchCaseList;

                    if ( state.backtracking==0 ) { switchCaseList.setElseClause(defaultCaseBlock551); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return switchCaseList;
    }
    // $ANTLR end "cases"



    // $ANTLR start "caseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3651:1: caseBlock returns [CaseClause clause] : CASE_CLAUSE caseItemList block ;
    public CaseClause caseBlock() throws RecognitionException {
        CaseClause clause = null;


        Token CASE_CLAUSE552=null;
        CaseItem caseItemList553 =null;

        Block block554 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3652:5: ( CASE_CLAUSE caseItemList block )
            // /home/david/git/ceylon-spec/Ceylon.g:3652:7: CASE_CLAUSE caseItemList block
            {
            CASE_CLAUSE552=(Token)match(input,CASE_CLAUSE,FOLLOW_CASE_CLAUSE_in_caseBlock24026); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CaseClause(CASE_CLAUSE552); }

            pushFollow(FOLLOW_caseItemList_in_caseBlock24043);
            caseItemList553=caseItemList();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCaseItem(caseItemList553); }

            pushFollow(FOLLOW_block_in_caseBlock24059);
            block554=block();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(block554); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "caseBlock"



    // $ANTLR start "defaultCaseBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3660:1: defaultCaseBlock returns [ElseClause clause] : ELSE_CLAUSE block ;
    public ElseClause defaultCaseBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE555=null;
        Block block556 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3661:5: ( ELSE_CLAUSE block )
            // /home/david/git/ceylon-spec/Ceylon.g:3661:7: ELSE_CLAUSE block
            {
            ELSE_CLAUSE555=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_defaultCaseBlock24088); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE555); }

            pushFollow(FOLLOW_block_in_defaultCaseBlock24105);
            block556=block();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(block556); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "defaultCaseBlock"



    // $ANTLR start "caseItemList"
    // /home/david/git/ceylon-spec/Ceylon.g:3667:1: caseItemList returns [CaseItem item] : LPAREN (ci= caseItem )? RPAREN ;
    public CaseItem caseItemList() throws RecognitionException {
        CaseItem item = null;


        Token RPAREN557=null;
        CaseItem ci =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3668:5: ( LPAREN (ci= caseItem )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3668:7: LPAREN (ci= caseItem )? RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_caseItemList24134); if (state.failed) return item;

            // /home/david/git/ceylon-spec/Ceylon.g:3669:7: (ci= caseItem )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==BACKTICK||LA298_0==CHAR_LITERAL||(LA298_0 >= DECREMENT_OP && LA298_0 <= DIFFERENCE_OP)||LA298_0==DYNAMIC||LA298_0==FLOAT_LITERAL||LA298_0==INCREMENT_OP||LA298_0==IS_OP||(LA298_0 >= LBRACE && LA298_0 <= LBRACKET)||LA298_0==LIDENTIFIER||LA298_0==LPAREN||LA298_0==NATURAL_LITERAL||LA298_0==OBJECT_DEFINITION||(LA298_0 >= OUTER && LA298_0 <= PACKAGE)||LA298_0==SATISFIES||LA298_0==STRING_LITERAL||LA298_0==STRING_START||(LA298_0 >= SUM_OP && LA298_0 <= SUPER)||LA298_0==THIS||LA298_0==UIDENTIFIER||LA298_0==VERBATIM_STRING) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3670:9: ci= caseItem
                    {
                    pushFollow(FOLLOW_caseItem_in_caseItemList24155);
                    ci=caseItem();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item = ci; }

                    }
                    break;

            }


            RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_caseItemList24182); if (state.failed) return item;

            if ( state.backtracking==0 ) { if (item!=null) 
                        item.setEndToken(RPAREN557); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "caseItemList"



    // $ANTLR start "caseItem"
    // /home/david/git/ceylon-spec/Ceylon.g:3678:1: caseItem returns [CaseItem item] : ( ( IS_OP )=> isCaseCondition | ( SATISFIES )=> satisfiesCaseCondition | matchCaseCondition );
    public CaseItem caseItem() throws RecognitionException {
        CaseItem item = null;


        IsCase isCaseCondition558 =null;

        SatisfiesCase satisfiesCaseCondition559 =null;

        MatchCase matchCaseCondition560 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3679:5: ( ( IS_OP )=> isCaseCondition | ( SATISFIES )=> satisfiesCaseCondition | matchCaseCondition )
            int alt299=3;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==IS_OP) && (synpred44_Ceylon())) {
                alt299=1;
            }
            else if ( (LA299_0==SATISFIES) && (synpred45_Ceylon())) {
                alt299=2;
            }
            else if ( (LA299_0==BACKTICK||LA299_0==CHAR_LITERAL||(LA299_0 >= DECREMENT_OP && LA299_0 <= DIFFERENCE_OP)||LA299_0==DYNAMIC||LA299_0==FLOAT_LITERAL||LA299_0==INCREMENT_OP||(LA299_0 >= LBRACE && LA299_0 <= LBRACKET)||LA299_0==LIDENTIFIER||LA299_0==LPAREN||LA299_0==NATURAL_LITERAL||LA299_0==OBJECT_DEFINITION||(LA299_0 >= OUTER && LA299_0 <= PACKAGE)||LA299_0==STRING_LITERAL||LA299_0==STRING_START||(LA299_0 >= SUM_OP && LA299_0 <= SUPER)||LA299_0==THIS||LA299_0==UIDENTIFIER||LA299_0==VERBATIM_STRING) ) {
                alt299=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return item;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                throw nvae;

            }
            switch (alt299) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3679:7: ( IS_OP )=> isCaseCondition
                    {
                    pushFollow(FOLLOW_isCaseCondition_in_caseItem24216);
                    isCaseCondition558=isCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =isCaseCondition558; }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3681:7: ( SATISFIES )=> satisfiesCaseCondition
                    {
                    pushFollow(FOLLOW_satisfiesCaseCondition_in_caseItem24237);
                    satisfiesCaseCondition559=satisfiesCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =satisfiesCaseCondition559; }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3683:7: matchCaseCondition
                    {
                    pushFollow(FOLLOW_matchCaseCondition_in_caseItem24253);
                    matchCaseCondition560=matchCaseCondition();

                    state._fsp--;
                    if (state.failed) return item;

                    if ( state.backtracking==0 ) { item =matchCaseCondition560; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "caseItem"



    // $ANTLR start "matchCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3687:1: matchCaseCondition returns [MatchCase item] : valueCaseList ;
    public MatchCase matchCaseCondition() throws RecognitionException {
        MatchCase item = null;


        ExpressionList valueCaseList561 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3688:5: ( valueCaseList )
            // /home/david/git/ceylon-spec/Ceylon.g:3688:7: valueCaseList
            {
            pushFollow(FOLLOW_valueCaseList_in_matchCaseCondition24282);
            valueCaseList561=valueCaseList();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new MatchCase(null);
                    item.setExpressionList(valueCaseList561); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "matchCaseCondition"



    // $ANTLR start "isCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3693:1: isCaseCondition returns [IsCase item] : IS_OP type ;
    public IsCase isCaseCondition() throws RecognitionException {
        IsCase item = null;


        Token IS_OP562=null;
        StaticType type563 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3694:5: ( IS_OP type )
            // /home/david/git/ceylon-spec/Ceylon.g:3694:7: IS_OP type
            {
            IS_OP562=(Token)match(input,IS_OP,FOLLOW_IS_OP_in_isCaseCondition24311); if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new IsCase(IS_OP562); }

            pushFollow(FOLLOW_type_in_isCaseCondition24328);
            type563=type();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item.setType(type563); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "isCaseCondition"



    // $ANTLR start "satisfiesCaseCondition"
    // /home/david/git/ceylon-spec/Ceylon.g:3700:1: satisfiesCaseCondition returns [SatisfiesCase item] : SATISFIES type ;
    public SatisfiesCase satisfiesCaseCondition() throws RecognitionException {
        SatisfiesCase item = null;


        Token SATISFIES564=null;
        StaticType type565 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3701:5: ( SATISFIES type )
            // /home/david/git/ceylon-spec/Ceylon.g:3701:7: SATISFIES type
            {
            SATISFIES564=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_satisfiesCaseCondition24357); if (state.failed) return item;

            if ( state.backtracking==0 ) { item = new SatisfiesCase(SATISFIES564); }

            pushFollow(FOLLOW_type_in_satisfiesCaseCondition24374);
            type565=type();

            state._fsp--;
            if (state.failed) return item;

            if ( state.backtracking==0 ) { item.setType(type565); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return item;
    }
    // $ANTLR end "satisfiesCaseCondition"



    // $ANTLR start "forElse"
    // /home/david/git/ceylon-spec/Ceylon.g:3707:1: forElse returns [ForStatement statement] : forBlock ( failBlock )? ;
    public ForStatement forElse() throws RecognitionException {
        ForStatement statement = null;


        ForClause forBlock566 =null;

        ElseClause failBlock567 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3708:5: ( forBlock ( failBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3708:7: forBlock ( failBlock )?
            {
            if ( state.backtracking==0 ) { statement =new ForStatement(null); }

            pushFollow(FOLLOW_forBlock_in_forElse24411);
            forBlock566=forBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setForClause(forBlock566); }

            // /home/david/git/ceylon-spec/Ceylon.g:3711:7: ( failBlock )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==ELSE_CLAUSE) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3712:9: failBlock
                    {
                    pushFollow(FOLLOW_failBlock_in_forElse24438);
                    failBlock567=failBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setElseClause(failBlock567); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "forElse"



    // $ANTLR start "forBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3717:1: forBlock returns [ForClause clause] : FOR_CLAUSE forIterator controlBlock ;
    public ForClause forBlock() throws RecognitionException {
        ForClause clause = null;


        Token FOR_CLAUSE568=null;
        ForIterator forIterator569 =null;

        Block controlBlock570 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3718:5: ( FOR_CLAUSE forIterator controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3718:7: FOR_CLAUSE forIterator controlBlock
            {
            FOR_CLAUSE568=(Token)match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_forBlock24478); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ForClause(FOR_CLAUSE568); }

            pushFollow(FOLLOW_forIterator_in_forBlock24495);
            forIterator569=forIterator();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setForIterator(forIterator569); }

            pushFollow(FOLLOW_controlBlock_in_forBlock24512);
            controlBlock570=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock570); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "forBlock"



    // $ANTLR start "failBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3726:1: failBlock returns [ElseClause clause] : ELSE_CLAUSE controlBlock ;
    public ElseClause failBlock() throws RecognitionException {
        ElseClause clause = null;


        Token ELSE_CLAUSE571=null;
        Block controlBlock572 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3727:5: ( ELSE_CLAUSE controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3727:7: ELSE_CLAUSE controlBlock
            {
            ELSE_CLAUSE571=(Token)match(input,ELSE_CLAUSE,FOLLOW_ELSE_CLAUSE_in_failBlock24541); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new ElseClause(ELSE_CLAUSE571); }

            pushFollow(FOLLOW_controlBlock_in_failBlock24558);
            controlBlock572=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock572); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "failBlock"



    // $ANTLR start "forIterator"
    // /home/david/git/ceylon-spec/Ceylon.g:3733:1: forIterator returns [ForIterator iterator] : LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN ;
    public ForIterator forIterator() throws RecognitionException {
        ForIterator iterator = null;


        Token LPAREN573=null;
        Token RPAREN577=null;
        Pattern pattern574 =null;

        Variable variable575 =null;

        SpecifierExpression containment576 =null;


         ValueIterator vi = null;
                    PatternIterator pi = null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3736:5: ( LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3736:7: LPAREN ( ( ( patternStart )=> pattern | variable ) ( containment )? )? RPAREN
            {
            LPAREN573=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forIterator24596); if (state.failed) return iterator;

            if ( state.backtracking==0 ) { vi = new ValueIterator(LPAREN573); 
                  pi = new PatternIterator(LPAREN573); 
                  iterator = vi; }

            // /home/david/git/ceylon-spec/Ceylon.g:3740:5: ( ( ( patternStart )=> pattern | variable ) ( containment )? )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==COMPILER_ANNOTATION||LA303_0==FUNCTION_MODIFIER||(LA303_0 >= LBRACE && LA303_0 <= LBRACKET)||LA303_0==LIDENTIFIER||LA303_0==SMALLER_OP||LA303_0==UIDENTIFIER||LA303_0==VALUE_MODIFIER||LA303_0==VOID_MODIFIER) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3741:7: ( ( patternStart )=> pattern | variable ) ( containment )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3741:7: ( ( patternStart )=> pattern | variable )
                    int alt301=2;
                    switch ( input.LA(1) ) {
                    case LBRACKET:
                        {
                        int LA301_1 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case COMPILER_ANNOTATION:
                        {
                        int LA301_2 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case UIDENTIFIER:
                        {
                        int LA301_3 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case SMALLER_OP:
                        {
                        int LA301_4 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 4, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LBRACE:
                        {
                        int LA301_5 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 5, input);

                            throw nvae;

                        }
                        }
                        break;
                    case VOID_MODIFIER:
                        {
                        int LA301_6 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 6, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FUNCTION_MODIFIER:
                        {
                        int LA301_7 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case VALUE_MODIFIER:
                        {
                        int LA301_8 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LIDENTIFIER:
                        {
                        int LA301_9 = input.LA(2);

                        if ( (synpred46_Ceylon()) ) {
                            alt301=1;
                        }
                        else if ( (true) ) {
                            alt301=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return iterator;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return iterator;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 0, input);

                        throw nvae;

                    }

                    switch (alt301) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3742:9: ( patternStart )=> pattern
                            {
                            pushFollow(FOLLOW_pattern_in_forIterator24633);
                            pattern574=pattern();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { pi.setPattern(pattern574);
                                      iterator = pi; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3746:9: variable
                            {
                            pushFollow(FOLLOW_variable_in_forIterator24661);
                            variable575=variable();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { vi.setVariable(variable575); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:3749:7: ( containment )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==IN_OP) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3750:9: containment
                            {
                            pushFollow(FOLLOW_containment_in_forIterator24697);
                            containment576=containment();

                            state._fsp--;
                            if (state.failed) return iterator;

                            if ( state.backtracking==0 ) { iterator.setSpecifierExpression(containment576); }

                            }
                            break;

                    }


                    }
                    break;

            }


            RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forIterator24729); if (state.failed) return iterator;

            if ( state.backtracking==0 ) { iterator.setEndToken(RPAREN577); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return iterator;
    }
    // $ANTLR end "forIterator"



    // $ANTLR start "containment"
    // /home/david/git/ceylon-spec/Ceylon.g:3758:1: containment returns [SpecifierExpression specifierExpression] : IN_OP ( expression )? ;
    public SpecifierExpression containment() throws RecognitionException {
        SpecifierExpression specifierExpression = null;


        Token IN_OP578=null;
        Expression expression579 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3759:5: ( IN_OP ( expression )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3759:7: IN_OP ( expression )?
            {
            IN_OP578=(Token)match(input,IN_OP,FOLLOW_IN_OP_in_containment24760); if (state.failed) return specifierExpression;

            if ( state.backtracking==0 ) { specifierExpression = new SpecifierExpression(IN_OP578); }

            // /home/david/git/ceylon-spec/Ceylon.g:3761:7: ( expression )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==BACKTICK||LA304_0==CHAR_LITERAL||(LA304_0 >= DECREMENT_OP && LA304_0 <= DIFFERENCE_OP)||LA304_0==DYNAMIC||LA304_0==FLOAT_LITERAL||LA304_0==INCREMENT_OP||(LA304_0 >= LBRACE && LA304_0 <= LBRACKET)||LA304_0==LIDENTIFIER||LA304_0==LPAREN||LA304_0==NATURAL_LITERAL||(LA304_0 >= NOT_OP && LA304_0 <= OBJECT_DEFINITION)||(LA304_0 >= OUTER && LA304_0 <= PACKAGE)||LA304_0==STRING_LITERAL||LA304_0==STRING_START||(LA304_0 >= SUM_OP && LA304_0 <= SUPER)||LA304_0==THIS||LA304_0==UIDENTIFIER||LA304_0==VERBATIM_STRING) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3761:8: expression
                    {
                    pushFollow(FOLLOW_expression_in_containment24778);
                    expression579=expression();

                    state._fsp--;
                    if (state.failed) return specifierExpression;

                    if ( state.backtracking==0 ) { specifierExpression.setExpression(expression579); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return specifierExpression;
    }
    // $ANTLR end "containment"



    // $ANTLR start "whileLoop"
    // /home/david/git/ceylon-spec/Ceylon.g:3765:1: whileLoop returns [WhileStatement statement] : whileBlock ;
    public WhileStatement whileLoop() throws RecognitionException {
        WhileStatement statement = null;


        WhileClause whileBlock580 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3766:5: ( whileBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3766:7: whileBlock
            {
            if ( state.backtracking==0 ) { statement = new WhileStatement(null); }

            pushFollow(FOLLOW_whileBlock_in_whileLoop24821);
            whileBlock580=whileBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setWhileClause(whileBlock580); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "whileLoop"



    // $ANTLR start "whileBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3771:1: whileBlock returns [WhileClause clause] : WHILE_CLAUSE conditions controlBlock ;
    public WhileClause whileBlock() throws RecognitionException {
        WhileClause clause = null;


        Token WHILE_CLAUSE581=null;
        ConditionList conditions582 =null;

        Block controlBlock583 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3772:5: ( WHILE_CLAUSE conditions controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3772:7: WHILE_CLAUSE conditions controlBlock
            {
            WHILE_CLAUSE581=(Token)match(input,WHILE_CLAUSE,FOLLOW_WHILE_CLAUSE_in_whileBlock24850); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new WhileClause(WHILE_CLAUSE581); }

            pushFollow(FOLLOW_conditions_in_whileBlock24866);
            conditions582=conditions();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setConditionList(conditions582); }

            pushFollow(FOLLOW_controlBlock_in_whileBlock24882);
            controlBlock583=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock583); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "whileBlock"



    // $ANTLR start "tryCatchFinally"
    // /home/david/git/ceylon-spec/Ceylon.g:3780:1: tryCatchFinally returns [TryCatchStatement statement] : tryBlock ( catchBlock )* ( finallyBlock )? ;
    public TryCatchStatement tryCatchFinally() throws RecognitionException {
        TryCatchStatement statement = null;


        TryClause tryBlock584 =null;

        CatchClause catchBlock585 =null;

        FinallyClause finallyBlock586 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3781:5: ( tryBlock ( catchBlock )* ( finallyBlock )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3781:7: tryBlock ( catchBlock )* ( finallyBlock )?
            {
            if ( state.backtracking==0 ) { statement = new TryCatchStatement(null); }

            pushFollow(FOLLOW_tryBlock_in_tryCatchFinally24919);
            tryBlock584=tryBlock();

            state._fsp--;
            if (state.failed) return statement;

            if ( state.backtracking==0 ) { statement.setTryClause(tryBlock584); }

            // /home/david/git/ceylon-spec/Ceylon.g:3784:7: ( catchBlock )*
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( (LA305_0==CATCH_CLAUSE) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    // /home/david/git/ceylon-spec/Ceylon.g:3785:9: catchBlock
            	    {
            	    pushFollow(FOLLOW_catchBlock_in_tryCatchFinally24946);
            	    catchBlock585=catchBlock();

            	    state._fsp--;
            	    if (state.failed) return statement;

            	    if ( state.backtracking==0 ) { statement.addCatchClause(catchBlock585); }

            	    }
            	    break;

            	default :
            	    break loop305;
                }
            } while (true);


            // /home/david/git/ceylon-spec/Ceylon.g:3788:7: ( finallyBlock )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==FINALLY_CLAUSE) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3789:9: finallyBlock
                    {
                    pushFollow(FOLLOW_finallyBlock_in_tryCatchFinally24985);
                    finallyBlock586=finallyBlock();

                    state._fsp--;
                    if (state.failed) return statement;

                    if ( state.backtracking==0 ) { statement.setFinallyClause(finallyBlock586); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return statement;
    }
    // $ANTLR end "tryCatchFinally"



    // $ANTLR start "tryBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3794:1: tryBlock returns [TryClause clause] : TRY_CLAUSE ( resources controlBlock | block ) ;
    public TryClause tryBlock() throws RecognitionException {
        TryClause clause = null;


        Token TRY_CLAUSE587=null;
        ResourceList resources588 =null;

        Block controlBlock589 =null;

        Block block590 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3795:5: ( TRY_CLAUSE ( resources controlBlock | block ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3795:7: TRY_CLAUSE ( resources controlBlock | block )
            {
            TRY_CLAUSE587=(Token)match(input,TRY_CLAUSE,FOLLOW_TRY_CLAUSE_in_tryBlock25025); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new TryClause(TRY_CLAUSE587); }

            // /home/david/git/ceylon-spec/Ceylon.g:3797:7: ( resources controlBlock | block )
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==LPAREN) ) {
                alt307=1;
            }
            else if ( (LA307_0==LBRACE) ) {
                alt307=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return clause;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);

                throw nvae;

            }
            switch (alt307) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3798:9: resources controlBlock
                    {
                    pushFollow(FOLLOW_resources_in_tryBlock25052);
                    resources588=resources();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setResourceList(resources588); }

                    pushFollow(FOLLOW_controlBlock_in_tryBlock25072);
                    controlBlock589=controlBlock();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(controlBlock589); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3803:9: block
                    {
                    pushFollow(FOLLOW_block_in_tryBlock25100);
                    block590=block();

                    state._fsp--;
                    if (state.failed) return clause;

                    if ( state.backtracking==0 ) { clause.setBlock(block590); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "tryBlock"



    // $ANTLR start "catchBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3808:1: catchBlock returns [CatchClause clause] : CATCH_CLAUSE catchVariable controlBlock ;
    public CatchClause catchBlock() throws RecognitionException {
        CatchClause clause = null;


        Token CATCH_CLAUSE591=null;
        CatchVariable catchVariable592 =null;

        Block controlBlock593 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3809:5: ( CATCH_CLAUSE catchVariable controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3809:7: CATCH_CLAUSE catchVariable controlBlock
            {
            CATCH_CLAUSE591=(Token)match(input,CATCH_CLAUSE,FOLLOW_CATCH_CLAUSE_in_catchBlock25139); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new CatchClause(CATCH_CLAUSE591); }

            pushFollow(FOLLOW_catchVariable_in_catchBlock25156);
            catchVariable592=catchVariable();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setCatchVariable(catchVariable592); }

            pushFollow(FOLLOW_controlBlock_in_catchBlock25172);
            controlBlock593=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock593); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "catchBlock"



    // $ANTLR start "catchVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3817:1: catchVariable returns [CatchVariable catchVariable] : LPAREN ( variable )? RPAREN ;
    public CatchVariable catchVariable() throws RecognitionException {
        CatchVariable catchVariable = null;


        Token LPAREN594=null;
        Token RPAREN596=null;
        Variable variable595 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3818:5: ( LPAREN ( variable )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3818:7: LPAREN ( variable )? RPAREN
            {
            LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchVariable25201); if (state.failed) return catchVariable;

            if ( state.backtracking==0 ) { catchVariable =new CatchVariable(LPAREN594); }

            // /home/david/git/ceylon-spec/Ceylon.g:3820:7: ( variable )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==ALIAS||(LA308_0 >= ASSERT && LA308_0 <= ASSIGN)||(LA308_0 >= BACKTICK && LA308_0 <= BREAK)||(LA308_0 >= CHAR_LITERAL && LA308_0 <= CLASS_DEFINITION)||LA308_0==COMPILER_ANNOTATION||LA308_0==CONTINUE||(LA308_0 >= DECREMENT_OP && LA308_0 <= DIFFERENCE_OP)||LA308_0==DYNAMIC||(LA308_0 >= FLOAT_LITERAL && LA308_0 <= FUNCTION_MODIFIER)||(LA308_0 >= IF_CLAUSE && LA308_0 <= INTERFACE_DEFINITION)||LA308_0==IN_OP||(LA308_0 >= LBRACE && LA308_0 <= LIDENTIFIER)||LA308_0==LPAREN||LA308_0==MODULE||(LA308_0 >= NATURAL_LITERAL && LA308_0 <= NEW)||(LA308_0 >= NOT_OP && LA308_0 <= OBJECT_DEFINITION)||(LA308_0 >= OUT && LA308_0 <= PACKAGE)||LA308_0==PRODUCT_OP||LA308_0==RETURN||(LA308_0 >= SEMICOLON && LA308_0 <= SMALLER_OP)||LA308_0==STRING_LITERAL||LA308_0==STRING_START||(LA308_0 >= SUM_OP && LA308_0 <= SWITCH_CLAUSE)||(LA308_0 >= THIS && LA308_0 <= UIDENTIFIER)||(LA308_0 >= VALUE_MODIFIER && LA308_0 <= WHILE_CLAUSE)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3821:7: variable
                    {
                    pushFollow(FOLLOW_variable_in_catchVariable25226);
                    variable595=variable();

                    state._fsp--;
                    if (state.failed) return catchVariable;

                    if ( state.backtracking==0 ) { catchVariable.setVariable(variable595); }

                    }
                    break;

            }


            RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchVariable25252); if (state.failed) return catchVariable;

            if ( state.backtracking==0 ) { catchVariable.setEndToken(RPAREN596); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return catchVariable;
    }
    // $ANTLR end "catchVariable"



    // $ANTLR start "finallyBlock"
    // /home/david/git/ceylon-spec/Ceylon.g:3829:1: finallyBlock returns [FinallyClause clause] : FINALLY_CLAUSE controlBlock ;
    public FinallyClause finallyBlock() throws RecognitionException {
        FinallyClause clause = null;


        Token FINALLY_CLAUSE597=null;
        Block controlBlock598 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3830:5: ( FINALLY_CLAUSE controlBlock )
            // /home/david/git/ceylon-spec/Ceylon.g:3830:7: FINALLY_CLAUSE controlBlock
            {
            FINALLY_CLAUSE597=(Token)match(input,FINALLY_CLAUSE,FOLLOW_FINALLY_CLAUSE_in_finallyBlock25283); if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause = new FinallyClause(FINALLY_CLAUSE597); }

            pushFollow(FOLLOW_controlBlock_in_finallyBlock25300);
            controlBlock598=controlBlock();

            state._fsp--;
            if (state.failed) return clause;

            if ( state.backtracking==0 ) { clause.setBlock(controlBlock598); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return clause;
    }
    // $ANTLR end "finallyBlock"



    // $ANTLR start "resources"
    // /home/david/git/ceylon-spec/Ceylon.g:3836:1: resources returns [ResourceList resources] : LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN ;
    public ResourceList resources() throws RecognitionException {
        ResourceList resources = null;


        Token c=null;
        Token LPAREN599=null;
        Token RPAREN600=null;
        Resource r1 =null;

        Resource r2 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3837:5: ( LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN )
            // /home/david/git/ceylon-spec/Ceylon.g:3837:7: LPAREN (r1= resource (c= COMMA r2= resource )* )? RPAREN
            {
            LPAREN599=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_resources25329); if (state.failed) return resources;

            if ( state.backtracking==0 ) { resources = new ResourceList(LPAREN599); }

            // /home/david/git/ceylon-spec/Ceylon.g:3839:5: (r1= resource (c= COMMA r2= resource )* )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==BACKTICK||LA310_0==CHAR_LITERAL||LA310_0==COMPILER_ANNOTATION||(LA310_0 >= DECREMENT_OP && LA310_0 <= DIFFERENCE_OP)||LA310_0==DYNAMIC||LA310_0==FLOAT_LITERAL||LA310_0==FUNCTION_MODIFIER||LA310_0==INCREMENT_OP||(LA310_0 >= LBRACE && LA310_0 <= LBRACKET)||LA310_0==LIDENTIFIER||LA310_0==LPAREN||LA310_0==NATURAL_LITERAL||(LA310_0 >= NOT_OP && LA310_0 <= OBJECT_DEFINITION)||(LA310_0 >= OUTER && LA310_0 <= PACKAGE)||LA310_0==SMALLER_OP||LA310_0==STRING_LITERAL||LA310_0==STRING_START||(LA310_0 >= SUM_OP && LA310_0 <= SUPER)||LA310_0==THIS||LA310_0==UIDENTIFIER||(LA310_0 >= VALUE_MODIFIER && LA310_0 <= VOID_MODIFIER)) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3840:7: r1= resource (c= COMMA r2= resource )*
                    {
                    pushFollow(FOLLOW_resource_in_resources25352);
                    r1=resource();

                    state._fsp--;
                    if (state.failed) return resources;

                    if ( state.backtracking==0 ) { resources.addResource(r1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3842:7: (c= COMMA r2= resource )*
                    loop309:
                    do {
                        int alt309=2;
                        int LA309_0 = input.LA(1);

                        if ( (LA309_0==COMMA) ) {
                            alt309=1;
                        }


                        switch (alt309) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3843:9: c= COMMA r2= resource
                    	    {
                    	    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_resources25380); if (state.failed) return resources;

                    	    if ( state.backtracking==0 ) { resources.setEndToken(c); }

                    	    pushFollow(FOLLOW_resource_in_resources25403);
                    	    r2=resource();

                    	    state._fsp--;
                    	    if (state.failed) return resources;

                    	    if ( state.backtracking==0 ) { resources.addResource(r2);
                    	              resources.setEndToken(null); }

                    	    }
                    	    break;

                    	default :
                    	    break loop309;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_resources25435); if (state.failed) return resources;

            if ( state.backtracking==0 ) { resources.setEndToken(RPAREN600); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return resources;
    }
    // $ANTLR end "resources"



    // $ANTLR start "resource"
    // /home/david/git/ceylon-spec/Ceylon.g:3854:1: resource returns [Resource resource] : ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) ;
    public Resource resource() throws RecognitionException {
        Resource resource = null;


        Variable specifiedVariable601 =null;

        Expression expression602 =null;


         resource = new Resource(null); 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3856:5: ( ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3856:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            {
            // /home/david/git/ceylon-spec/Ceylon.g:3856:7: ( ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable | expression )
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==COMPILER_ANNOTATION) && (synpred47_Ceylon())) {
                alt311=1;
            }
            else if ( (LA311_0==UIDENTIFIER) ) {
                int LA311_2 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt311=1;
                }
                else if ( (true) ) {
                    alt311=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA311_0==SMALLER_OP) && (synpred47_Ceylon())) {
                alt311=1;
            }
            else if ( (LA311_0==LBRACKET) ) {
                int LA311_4 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt311=1;
                }
                else if ( (true) ) {
                    alt311=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA311_0==LBRACE) ) {
                int LA311_5 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt311=1;
                }
                else if ( (true) ) {
                    alt311=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA311_0==VOID_MODIFIER) && (synpred47_Ceylon())) {
                alt311=1;
            }
            else if ( (LA311_0==FUNCTION_MODIFIER) && (synpred47_Ceylon())) {
                alt311=1;
            }
            else if ( (LA311_0==VALUE_MODIFIER) && (synpred47_Ceylon())) {
                alt311=1;
            }
            else if ( (LA311_0==LIDENTIFIER) ) {
                int LA311_9 = input.LA(2);

                if ( (synpred47_Ceylon()) ) {
                    alt311=1;
                }
                else if ( (true) ) {
                    alt311=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return resource;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA311_0==BACKTICK||LA311_0==CHAR_LITERAL||(LA311_0 >= DECREMENT_OP && LA311_0 <= DIFFERENCE_OP)||LA311_0==DYNAMIC||LA311_0==FLOAT_LITERAL||LA311_0==INCREMENT_OP||LA311_0==LPAREN||LA311_0==NATURAL_LITERAL||(LA311_0 >= NOT_OP && LA311_0 <= OBJECT_DEFINITION)||(LA311_0 >= OUTER && LA311_0 <= PACKAGE)||LA311_0==STRING_LITERAL||LA311_0==STRING_START||(LA311_0 >= SUM_OP && LA311_0 <= SUPER)||LA311_0==THIS||LA311_0==VERBATIM_STRING) ) {
                alt311=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return resource;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);

                throw nvae;

            }
            switch (alt311) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3856:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )=> specifiedVariable
                    {
                    pushFollow(FOLLOW_specifiedVariable_in_resource25492);
                    specifiedVariable601=specifiedVariable();

                    state._fsp--;
                    if (state.failed) return resource;

                    if ( state.backtracking==0 ) { resource.setVariable(specifiedVariable601); }

                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3859:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_resource25512);
                    expression602=expression();

                    state._fsp--;
                    if (state.failed) return resource;

                    if ( state.backtracking==0 ) { resource.setExpression(expression602); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return resource;
    }
    // $ANTLR end "resource"



    // $ANTLR start "specifiedVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3864:1: specifiedVariable returns [Variable variable] : v= variable ( specifier )? ;
    public Variable specifiedVariable() throws RecognitionException {
        Variable variable = null;


        Variable v =null;

        SpecifierExpression specifier603 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3865:5: (v= variable ( specifier )? )
            // /home/david/git/ceylon-spec/Ceylon.g:3865:7: v= variable ( specifier )?
            {
            pushFollow(FOLLOW_variable_in_specifiedVariable25553);
            v=variable();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable = v; }

            // /home/david/git/ceylon-spec/Ceylon.g:3867:7: ( specifier )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==SPECIFY) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3868:9: specifier
                    {
                    pushFollow(FOLLOW_specifier_in_specifiedVariable25580);
                    specifier603=specifier();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setSpecifierExpression(specifier603); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "specifiedVariable"



    // $ANTLR start "variable"
    // /home/david/git/ceylon-spec/Ceylon.g:3873:1: variable returns [Variable variable] : compilerAnnotations var ;
    public Variable variable() throws RecognitionException {
        Variable variable = null;


        Variable var604 =null;

        List<CompilerAnnotation> compilerAnnotations605 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3874:5: ( compilerAnnotations var )
            // /home/david/git/ceylon-spec/Ceylon.g:3874:7: compilerAnnotations var
            {
            pushFollow(FOLLOW_compilerAnnotations_in_variable25620);
            compilerAnnotations605=compilerAnnotations();

            state._fsp--;
            if (state.failed) return variable;

            pushFollow(FOLLOW_var_in_variable25628);
            var604=var();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { variable =var604;
                    variable.getCompilerAnnotations().addAll(compilerAnnotations605); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "variable"



    // $ANTLR start "var"
    // /home/david/git/ceylon-spec/Ceylon.g:3880:1: var returns [Variable variable] : ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName |mn3= memberName (p3= parameters )+ ) ;
    public Variable var() throws RecognitionException {
        Variable variable = null;


        Token VOID_MODIFIER607=null;
        Token FUNCTION_MODIFIER608=null;
        Token VALUE_MODIFIER609=null;
        Identifier mn1 =null;

        ParameterList p1 =null;

        Identifier mn2 =null;

        Identifier mn3 =null;

        ParameterList p3 =null;

        StaticType type606 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3881:5: ( ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName |mn3= memberName (p3= parameters )+ ) )
            // /home/david/git/ceylon-spec/Ceylon.g:3881:7: ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName |mn3= memberName (p3= parameters )+ )
            {
            if ( state.backtracking==0 ) { variable = new Variable(null); }

            // /home/david/git/ceylon-spec/Ceylon.g:3882:5: ( ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )* |mn2= memberName |mn3= memberName (p3= parameters )+ )
            int alt316=3;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==FUNCTION_MODIFIER||(LA316_0 >= LBRACE && LA316_0 <= LBRACKET)||LA316_0==SMALLER_OP||LA316_0==UIDENTIFIER||LA316_0==VALUE_MODIFIER||LA316_0==VOID_MODIFIER) ) {
                alt316=1;
            }
            else if ( (LA316_0==LIDENTIFIER) ) {
                int LA316_2 = input.LA(2);

                if ( (LA316_2==COMMA||LA316_2==ENTRY_OP||LA316_2==IN_OP||LA316_2==RBRACKET||LA316_2==RPAREN||LA316_2==SEMICOLON||LA316_2==SPECIFY) ) {
                    alt316=2;
                }
                else if ( (LA316_2==LPAREN) ) {
                    alt316=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return variable;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 316, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return variable;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);

                throw nvae;

            }
            switch (alt316) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3883:7: ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER ) mn1= memberName (p1= parameters )*
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:3883:7: ( type | VOID_MODIFIER | FUNCTION_MODIFIER | VALUE_MODIFIER )
                    int alt313=4;
                    switch ( input.LA(1) ) {
                    case LBRACE:
                    case LBRACKET:
                    case SMALLER_OP:
                    case UIDENTIFIER:
                        {
                        alt313=1;
                        }
                        break;
                    case VOID_MODIFIER:
                        {
                        alt313=2;
                        }
                        break;
                    case FUNCTION_MODIFIER:
                        {
                        alt313=3;
                        }
                        break;
                    case VALUE_MODIFIER:
                        {
                        alt313=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return variable;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 0, input);

                        throw nvae;

                    }

                    switch (alt313) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3883:9: type
                            {
                            pushFollow(FOLLOW_type_in_var25677);
                            type606=type();

                            state._fsp--;
                            if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(type606); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3885:9: VOID_MODIFIER
                            {
                            VOID_MODIFIER607=(Token)match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_var25698); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new VoidModifier(VOID_MODIFIER607)); }

                            }
                            break;
                        case 3 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3887:9: FUNCTION_MODIFIER
                            {
                            FUNCTION_MODIFIER608=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_var25718); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new FunctionModifier(FUNCTION_MODIFIER608)); }

                            }
                            break;
                        case 4 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3889:9: VALUE_MODIFIER
                            {
                            VALUE_MODIFIER609=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_var25738); if (state.failed) return variable;

                            if ( state.backtracking==0 ) { variable.setType(new ValueModifier(VALUE_MODIFIER609)); }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_memberName_in_var25766);
                    mn1=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(mn1); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3894:7: (p1= parameters )*
                    loop314:
                    do {
                        int alt314=2;
                        int LA314_0 = input.LA(1);

                        if ( (LA314_0==LPAREN) ) {
                            alt314=1;
                        }


                        switch (alt314) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3895:9: p1= parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_var25796);
                    	    p1=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return variable;

                    	    if ( state.backtracking==0 ) { variable.addParameterList(p1); }

                    	    }
                    	    break;

                    	default :
                    	    break loop314;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3899:7: mn2= memberName
                    {
                    if ( state.backtracking==0 ) { variable.setType( new ValueModifier(null) ); }

                    pushFollow(FOLLOW_memberName_in_var25840);
                    mn2=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(mn2); }

                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3903:7: mn3= memberName (p3= parameters )+
                    {
                    if ( state.backtracking==0 ) { variable.setType( new FunctionModifier(null) ); }

                    pushFollow(FOLLOW_memberName_in_var25873);
                    mn3=memberName();

                    state._fsp--;
                    if (state.failed) return variable;

                    if ( state.backtracking==0 ) { variable.setIdentifier(mn3); }

                    // /home/david/git/ceylon-spec/Ceylon.g:3906:7: (p3= parameters )+
                    int cnt315=0;
                    loop315:
                    do {
                        int alt315=2;
                        int LA315_0 = input.LA(1);

                        if ( (LA315_0==LPAREN) ) {
                            alt315=1;
                        }


                        switch (alt315) {
                    	case 1 :
                    	    // /home/david/git/ceylon-spec/Ceylon.g:3907:9: p3= parameters
                    	    {
                    	    pushFollow(FOLLOW_parameters_in_var25902);
                    	    p3=parameters();

                    	    state._fsp--;
                    	    if (state.failed) return variable;

                    	    if ( state.backtracking==0 ) { variable.addParameterList(p3); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt315 >= 1 ) break loop315;
                    	    if (state.backtracking>0) {state.failed=true; return variable;}
                                EarlyExitException eee =
                                    new EarlyExitException(315, input);
                                throw eee;
                        }
                        cnt315++;
                    } while (true);


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "var"



    // $ANTLR start "impliedVariable"
    // /home/david/git/ceylon-spec/Ceylon.g:3913:1: impliedVariable returns [Variable variable] : memberName ;
    public Variable impliedVariable() throws RecognitionException {
        Variable variable = null;


        Identifier memberName610 =null;


        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3914:5: ( memberName )
            // /home/david/git/ceylon-spec/Ceylon.g:3914:7: memberName
            {
            pushFollow(FOLLOW_memberName_in_impliedVariable25948);
            memberName610=memberName();

            state._fsp--;
            if (state.failed) return variable;

            if ( state.backtracking==0 ) { Variable v = new Variable(null);
                    v.setType(new SyntheticVariable(null));
                    v.setIdentifier(memberName610);
                    SpecifierExpression se = new SpecifierExpression(null);
                    Expression e = new Expression(null);
                    BaseMemberExpression bme = new BaseMemberExpression(null);
                    bme.setIdentifier(memberName610);
                    bme.setTypeArguments( new InferredTypeArguments(null) );
                    e.setTerm(bme);
                    se.setExpression(e);
                    v.setSpecifierExpression(se); 
                    variable = v; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return variable;
    }
    // $ANTLR end "impliedVariable"



    // $ANTLR start "metaLiteral"
    // /home/david/git/ceylon-spec/Ceylon.g:3930:1: metaLiteral returns [MetaLiteral meta] : d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK ;
    public MetaLiteral metaLiteral() throws RecognitionException {
        MetaLiteral meta = null;


        Token d1=null;
        Token vo=null;
        Token fo=null;
        Token o1=null;
        Token o2=null;
        Token d2=null;
        Token MODULE611=null;
        Token PACKAGE612=null;
        Token CLASS_DEFINITION613=null;
        Token NEW614=null;
        Token INTERFACE_DEFINITION615=null;
        Token ALIAS616=null;
        Token TYPE_CONSTRAINT617=null;
        Token VALUE_MODIFIER618=null;
        Token OBJECT_DEFINITION619=null;
        Token FUNCTION_MODIFIER620=null;
        ImportPath p1 =null;

        ImportPath p2 =null;

        StaticType ct =null;

        Identifier ot =null;

        StaticType nt =null;

        StaticType it =null;

        StaticType at =null;

        StaticType tt =null;

        StaticType vt =null;

        Identifier vom =null;

        Identifier vm =null;

        TypeArgumentList ta6 =null;

        StaticType ft =null;

        Identifier fom =null;

        Identifier fm =null;

        TypeArgumentList ta5 =null;

        Identifier m1 =null;

        TypeArgumentList ta1 =null;

        GroupedType gt =null;

        Identifier m2 =null;

        TypeArgumentList ta2 =null;

        Identifier mn =null;

        Identifier m4 =null;

        StaticType t =null;

        Identifier m3 =null;

        TypeArgumentList ta3 =null;


         TypeLiteral tl=null; 
                    MemberLiteral ml=null; 
                    PackageLiteral p=null;
                    ModuleLiteral m=null; 
                    ClassLiteral c=null;
                    InterfaceLiteral i=null;
                    NewLiteral n=null;
                    AliasLiteral a=null;
                    TypeParameterLiteral tp=null;
                    ValueLiteral v=null;
                    FunctionLiteral f=null; 
        try {
            // /home/david/git/ceylon-spec/Ceylon.g:3942:5: (d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK )
            // /home/david/git/ceylon-spec/Ceylon.g:3942:7: d1= BACKTICK ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? ) d2= BACKTICK
            {
            d1=(Token)match(input,BACKTICK,FOLLOW_BACKTICK_in_metaLiteral25990); if (state.failed) return meta;

            if ( state.backtracking==0 ) { tl = new TypeLiteral(d1);
                    meta = tl; }

            // /home/david/git/ceylon-spec/Ceylon.g:3945:5: ( MODULE (p1= packagePath )? | PACKAGE (p2= packagePath )? | CLASS_DEFINITION (ct= type |ot= memberName )? | NEW (nt= type )? | INTERFACE_DEFINITION (it= type )? | ALIAS (at= type )? | TYPE_CONSTRAINT (tt= type )? | ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )? | FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )? | ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )? | ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )? | ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )? |t= type |m3= memberName (ta3= typeArguments )? )
            int alt337=14;
            switch ( input.LA(1) ) {
            case MODULE:
                {
                alt337=1;
                }
                break;
            case PACKAGE:
                {
                alt337=2;
                }
                break;
            case CLASS_DEFINITION:
                {
                alt337=3;
                }
                break;
            case NEW:
                {
                alt337=4;
                }
                break;
            case INTERFACE_DEFINITION:
                {
                alt337=5;
                }
                break;
            case ALIAS:
                {
                alt337=6;
                }
                break;
            case TYPE_CONSTRAINT:
                {
                alt337=7;
                }
                break;
            case OBJECT_DEFINITION:
            case VALUE_MODIFIER:
                {
                alt337=8;
                }
                break;
            case FUNCTION_MODIFIER:
                {
                alt337=9;
                }
                break;
            case UIDENTIFIER:
                {
                int LA337_11 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt337=10;
                }
                else if ( (true) ) {
                    alt337=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 11, input);

                    throw nvae;

                }
                }
                break;
            case SMALLER_OP:
                {
                int LA337_12 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt337=10;
                }
                else if ( (synpred49_Ceylon()) ) {
                    alt337=11;
                }
                else if ( (true) ) {
                    alt337=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 12, input);

                    throw nvae;

                }
                }
                break;
            case LBRACKET:
                {
                int LA337_13 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt337=10;
                }
                else if ( (true) ) {
                    alt337=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 13, input);

                    throw nvae;

                }
                }
                break;
            case LBRACE:
                {
                int LA337_14 = input.LA(2);

                if ( (synpred48_Ceylon()) ) {
                    alt337=10;
                }
                else if ( (true) ) {
                    alt337=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 14, input);

                    throw nvae;

                }
                }
                break;
            case LIDENTIFIER:
                {
                int LA337_15 = input.LA(2);

                if ( (synpred50_Ceylon()) ) {
                    alt337=12;
                }
                else if ( (true) ) {
                    alt337=14;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return meta;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 15, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return meta;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);

                throw nvae;

            }

            switch (alt337) {
                case 1 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3946:7: MODULE (p1= packagePath )?
                    {
                    MODULE611=(Token)match(input,MODULE,FOLLOW_MODULE_in_metaLiteral26012); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { m = new ModuleLiteral(d1);
                            m.setEndToken(MODULE611); 
                            meta =m; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3950:7: (p1= packagePath )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==LIDENTIFIER||LA317_0==UIDENTIFIER) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3951:9: p1= packagePath
                            {
                            pushFollow(FOLLOW_packagePath_in_metaLiteral26040);
                            p1=packagePath();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { m.setImportPath(p1); 
                                      m.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3956:7: PACKAGE (p2= packagePath )?
                    {
                    PACKAGE612=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_metaLiteral26073); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { p = new PackageLiteral(d1);
                            p.setEndToken(PACKAGE612); 
                            meta =p; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3960:7: (p2= packagePath )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==LIDENTIFIER||LA318_0==UIDENTIFIER) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3961:9: p2= packagePath
                            {
                            pushFollow(FOLLOW_packagePath_in_metaLiteral26101);
                            p2=packagePath();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { p.setImportPath(p2); 
                                      p.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3966:7: CLASS_DEFINITION (ct= type |ot= memberName )?
                    {
                    CLASS_DEFINITION613=(Token)match(input,CLASS_DEFINITION,FOLLOW_CLASS_DEFINITION_in_metaLiteral26134); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { c = new ClassLiteral(d1);
                            c.setEndToken(CLASS_DEFINITION613); 
                            meta =c; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3970:7: (ct= type |ot= memberName )?
                    int alt319=3;
                    int LA319_0 = input.LA(1);

                    if ( ((LA319_0 >= LBRACE && LA319_0 <= LBRACKET)||LA319_0==SMALLER_OP||LA319_0==UIDENTIFIER) ) {
                        alt319=1;
                    }
                    else if ( (LA319_0==LIDENTIFIER) ) {
                        alt319=2;
                    }
                    switch (alt319) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3971:9: ct= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26162);
                            ct=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { c.setType(ct); 
                                      c.setEndToken(null); }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3975:9: ot= memberName
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26192);
                            ot=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                      bme.setIdentifier(ot);
                                      bme.setTypeArguments(new InferredTypeArguments(null));
                                      c.setObjectExpression(bme); }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3982:7: NEW (nt= type )?
                    {
                    NEW614=(Token)match(input,NEW,FOLLOW_NEW_in_metaLiteral26225); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { n = new NewLiteral(d1);
                            n.setEndToken(NEW614); 
                            meta =n; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3986:7: (nt= type )?
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( ((LA320_0 >= LBRACE && LA320_0 <= LBRACKET)||LA320_0==SMALLER_OP||LA320_0==UIDENTIFIER) ) {
                        alt320=1;
                    }
                    switch (alt320) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3987:9: nt= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26253);
                            nt=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { n.setType(nt); 
                                      n.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /home/david/git/ceylon-spec/Ceylon.g:3992:7: INTERFACE_DEFINITION (it= type )?
                    {
                    INTERFACE_DEFINITION615=(Token)match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_metaLiteral26286); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { i = new InterfaceLiteral(d1);
                            i.setEndToken(INTERFACE_DEFINITION615); 
                            meta =i; }

                    // /home/david/git/ceylon-spec/Ceylon.g:3996:7: (it= type )?
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( ((LA321_0 >= LBRACE && LA321_0 <= LBRACKET)||LA321_0==SMALLER_OP||LA321_0==UIDENTIFIER) ) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:3997:9: it= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26314);
                            it=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { i.setType(it); 
                                      i.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4002:7: ALIAS (at= type )?
                    {
                    ALIAS616=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_metaLiteral26347); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { a = new AliasLiteral(d1);
                            a.setEndToken(ALIAS616); 
                            meta =a; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4006:7: (at= type )?
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( ((LA322_0 >= LBRACE && LA322_0 <= LBRACKET)||LA322_0==SMALLER_OP||LA322_0==UIDENTIFIER) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4007:9: at= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26375);
                            at=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { a.setType(at); 
                                      a.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4012:7: TYPE_CONSTRAINT (tt= type )?
                    {
                    TYPE_CONSTRAINT617=(Token)match(input,TYPE_CONSTRAINT,FOLLOW_TYPE_CONSTRAINT_in_metaLiteral26408); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { tp = new TypeParameterLiteral(d1);
                            tp.setEndToken(TYPE_CONSTRAINT617); 
                            meta =tp; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4016:7: (tt= type )?
                    int alt323=2;
                    int LA323_0 = input.LA(1);

                    if ( ((LA323_0 >= LBRACE && LA323_0 <= LBRACKET)||LA323_0==SMALLER_OP||LA323_0==UIDENTIFIER) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4017:9: tt= type
                            {
                            pushFollow(FOLLOW_type_in_metaLiteral26436);
                            tt=type();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { tp.setType(tt); 
                                    tp.setEndToken(null); }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4022:7: ( VALUE_MODIFIER | OBJECT_DEFINITION ) ( (vt= type |vom= memberName ) vo= MEMBER_OP )? (vm= memberName (ta6= typeArguments )? )?
                    {
                    // /home/david/git/ceylon-spec/Ceylon.g:4022:7: ( VALUE_MODIFIER | OBJECT_DEFINITION )
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( (LA324_0==VALUE_MODIFIER) ) {
                        alt324=1;
                    }
                    else if ( (LA324_0==OBJECT_DEFINITION) ) {
                        alt324=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return meta;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 324, 0, input);

                        throw nvae;

                    }
                    switch (alt324) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4023:9: VALUE_MODIFIER
                            {
                            VALUE_MODIFIER618=(Token)match(input,VALUE_MODIFIER,FOLLOW_VALUE_MODIFIER_in_metaLiteral26479); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v = new ValueLiteral(d1);
                                      v.setEndToken(VALUE_MODIFIER618); 
                                      meta =v; }

                            }
                            break;
                        case 2 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4028:9: OBJECT_DEFINITION
                            {
                            OBJECT_DEFINITION619=(Token)match(input,OBJECT_DEFINITION,FOLLOW_OBJECT_DEFINITION_in_metaLiteral26507); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v = new ValueLiteral(d1);
                                      v.setEndToken(OBJECT_DEFINITION619);
                                      v.setBroken(true); 
                                      meta =v; }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4034:7: ( (vt= type |vom= memberName ) vo= MEMBER_OP )?
                    int alt326=2;
                    int LA326_0 = input.LA(1);

                    if ( ((LA326_0 >= LBRACE && LA326_0 <= LBRACKET)||LA326_0==SMALLER_OP||LA326_0==UIDENTIFIER) ) {
                        alt326=1;
                    }
                    else if ( (LA326_0==LIDENTIFIER) ) {
                        int LA326_2 = input.LA(2);

                        if ( (LA326_2==MEMBER_OP) ) {
                            alt326=1;
                        }
                    }
                    switch (alt326) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4035:9: (vt= type |vom= memberName ) vo= MEMBER_OP
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:4035:9: (vt= type |vom= memberName )
                            int alt325=2;
                            int LA325_0 = input.LA(1);

                            if ( ((LA325_0 >= LBRACE && LA325_0 <= LBRACKET)||LA325_0==SMALLER_OP||LA325_0==UIDENTIFIER) ) {
                                alt325=1;
                            }
                            else if ( (LA325_0==LIDENTIFIER) ) {
                                alt325=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return meta;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 325, 0, input);

                                throw nvae;

                            }
                            switch (alt325) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4036:11: vt= type
                                    {
                                    pushFollow(FOLLOW_type_in_metaLiteral26557);
                                    vt=type();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { v.setType(vt); 
                                                v.setEndToken(null); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4040:11: vom= memberName
                                    {
                                    pushFollow(FOLLOW_memberName_in_metaLiteral26593);
                                    vom=memberName();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                                bme.setIdentifier(vom);
                                                bme.setTypeArguments(new InferredTypeArguments(null));
                                                v.setObjectExpression(bme);
                                                v.setEndToken(null); }

                                    }
                                    break;

                            }


                            vo=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral26627); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v.setEndToken(vo); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4050:7: (vm= memberName (ta6= typeArguments )? )?
                    int alt328=2;
                    int LA328_0 = input.LA(1);

                    if ( (LA328_0==LIDENTIFIER) ) {
                        alt328=1;
                    }
                    switch (alt328) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4051:9: vm= memberName (ta6= typeArguments )?
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26666);
                            vm=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { v.setIdentifier(vm); 
                                      v.setEndToken(null); }

                            // /home/david/git/ceylon-spec/Ceylon.g:4054:9: (ta6= typeArguments )?
                            int alt327=2;
                            int LA327_0 = input.LA(1);

                            if ( (LA327_0==SMALLER_OP) ) {
                                alt327=1;
                            }
                            switch (alt327) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4056:11: ta6= typeArguments
                                    {
                                    pushFollow(FOLLOW_typeArguments_in_metaLiteral26711);
                                    ta6=typeArguments();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { v.setTypeArgumentList(ta6); }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4061:7: FUNCTION_MODIFIER ( (ft= type |fom= memberName ) fo= MEMBER_OP )? (fm= memberName (ta5= typeArguments )? )?
                    {
                    FUNCTION_MODIFIER620=(Token)match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_metaLiteral26757); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { f = new FunctionLiteral(d1);
                            f.setEndToken(FUNCTION_MODIFIER620); 
                            meta =f; }

                    // /home/david/git/ceylon-spec/Ceylon.g:4065:7: ( (ft= type |fom= memberName ) fo= MEMBER_OP )?
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( ((LA330_0 >= LBRACE && LA330_0 <= LBRACKET)||LA330_0==SMALLER_OP||LA330_0==UIDENTIFIER) ) {
                        alt330=1;
                    }
                    else if ( (LA330_0==LIDENTIFIER) ) {
                        int LA330_2 = input.LA(2);

                        if ( (LA330_2==MEMBER_OP) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4066:9: (ft= type |fom= memberName ) fo= MEMBER_OP
                            {
                            // /home/david/git/ceylon-spec/Ceylon.g:4066:9: (ft= type |fom= memberName )
                            int alt329=2;
                            int LA329_0 = input.LA(1);

                            if ( ((LA329_0 >= LBRACE && LA329_0 <= LBRACKET)||LA329_0==SMALLER_OP||LA329_0==UIDENTIFIER) ) {
                                alt329=1;
                            }
                            else if ( (LA329_0==LIDENTIFIER) ) {
                                alt329=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return meta;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 329, 0, input);

                                throw nvae;

                            }
                            switch (alt329) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4067:11: ft= type
                                    {
                                    pushFollow(FOLLOW_type_in_metaLiteral26797);
                                    ft=type();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { f.setType(ft); 
                                                f.setEndToken(null); }

                                    }
                                    break;
                                case 2 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4071:11: fom= memberName
                                    {
                                    pushFollow(FOLLOW_memberName_in_metaLiteral26833);
                                    fom=memberName();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                                                bme.setIdentifier(fom);
                                                bme.setTypeArguments(new InferredTypeArguments(null));
                                                f.setObjectExpression(bme);
                                                f.setEndToken(null); }

                                    }
                                    break;

                            }


                            fo=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral26867); if (state.failed) return meta;

                            if ( state.backtracking==0 ) { f.setEndToken(fo); }

                            }
                            break;

                    }


                    // /home/david/git/ceylon-spec/Ceylon.g:4081:7: (fm= memberName (ta5= typeArguments )? )?
                    int alt332=2;
                    int LA332_0 = input.LA(1);

                    if ( (LA332_0==LIDENTIFIER) ) {
                        alt332=1;
                    }
                    switch (alt332) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4082:9: fm= memberName (ta5= typeArguments )?
                            {
                            pushFollow(FOLLOW_memberName_in_metaLiteral26906);
                            fm=memberName();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { f.setIdentifier(fm); 
                                      f.setEndToken(null); }

                            // /home/david/git/ceylon-spec/Ceylon.g:4085:9: (ta5= typeArguments )?
                            int alt331=2;
                            int LA331_0 = input.LA(1);

                            if ( (LA331_0==SMALLER_OP) ) {
                                alt331=1;
                            }
                            switch (alt331) {
                                case 1 :
                                    // /home/david/git/ceylon-spec/Ceylon.g:4087:11: ta5= typeArguments
                                    {
                                    pushFollow(FOLLOW_typeArguments_in_metaLiteral26951);
                                    ta5=typeArguments();

                                    state._fsp--;
                                    if (state.failed) return meta;

                                    if ( state.backtracking==0 ) { f.setTypeArgumentList(ta5); }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 10 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4092:7: ( abbreviatedType MEMBER_OP )=>at= abbreviatedType o1= MEMBER_OP m1= memberName (ta1= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_abbreviatedType_in_metaLiteral27021);
                    at=abbreviatedType();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setType(at); }

                    o1=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27039); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o1); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27057);
                    m1=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m1); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4102:7: (ta1= typeArguments )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==SMALLER_OP) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4103:9: ta1= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27085);
                            ta1=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta1); }

                            }
                            break;

                    }


                    }
                    break;
                case 11 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4107:7: ( groupedType MEMBER_OP )=>gt= groupedType o2= MEMBER_OP m2= memberName (ta2= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_groupedType_in_metaLiteral27143);
                    gt=groupedType();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setType(gt); }

                    o2=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27161); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o2); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27179);
                    m2=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m2); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4117:7: (ta2= typeArguments )?
                    int alt334=2;
                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==SMALLER_OP) ) {
                        alt334=1;
                    }
                    switch (alt334) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4118:9: ta2= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27207);
                            ta2=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta2); }

                            }
                            break;

                    }


                    }
                    break;
                case 12 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4122:7: ( memberName MEMBER_OP )=>mn= memberName o1= MEMBER_OP m4= memberName (ta1= typeArguments )?
                    {
                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml; }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27264);
                    mn=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { BaseMemberExpression bme = new BaseMemberExpression(null);
                            bme.setIdentifier(mn);
                            bme.setTypeArguments(new InferredTypeArguments(null));
                            ml.setObjectExpression(bme); }

                    o1=(Token)match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_metaLiteral27282); if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setEndToken(o1); }

                    pushFollow(FOLLOW_memberName_in_metaLiteral27300);
                    m4=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml.setIdentifier(m4); 
                            ml.setEndToken(null); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4135:7: (ta1= typeArguments )?
                    int alt335=2;
                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==SMALLER_OP) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4136:9: ta1= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27328);
                            ta1=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta1); }

                            }
                            break;

                    }


                    }
                    break;
                case 13 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4140:7: t= type
                    {
                    pushFollow(FOLLOW_type_in_metaLiteral27364);
                    t=type();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { tl = new TypeLiteral(d1);
                            meta = tl;
                            tl.setType(t); }

                    }
                    break;
                case 14 :
                    // /home/david/git/ceylon-spec/Ceylon.g:4145:7: m3= memberName (ta3= typeArguments )?
                    {
                    pushFollow(FOLLOW_memberName_in_metaLiteral27389);
                    m3=memberName();

                    state._fsp--;
                    if (state.failed) return meta;

                    if ( state.backtracking==0 ) { ml = new MemberLiteral(d1);
                            meta = ml;
                            ml.setIdentifier(m3); }

                    // /home/david/git/ceylon-spec/Ceylon.g:4149:7: (ta3= typeArguments )?
                    int alt336=2;
                    int LA336_0 = input.LA(1);

                    if ( (LA336_0==SMALLER_OP) ) {
                        alt336=1;
                    }
                    switch (alt336) {
                        case 1 :
                            // /home/david/git/ceylon-spec/Ceylon.g:4150:9: ta3= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_metaLiteral27417);
                            ta3=typeArguments();

                            state._fsp--;
                            if (state.failed) return meta;

                            if ( state.backtracking==0 ) { ml.setTypeArgumentList(ta3); }

                            }
                            break;

                    }


                    }
                    break;

            }


            d2=(Token)match(input,BACKTICK,FOLLOW_BACKTICK_in_metaLiteral27452); if (state.failed) return meta;

            if ( state.backtracking==0 ) { meta.setEndToken(d2); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return meta;
    }
    // $ANTLR end "metaLiteral"

    // $ANTLR start synpred1_Ceylon
    public void synpred1_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:76:9: ( annotatedModuleDescriptorStart )
        // /home/david/git/ceylon-spec/Ceylon.g:76:10: annotatedModuleDescriptorStart
        {
        pushFollow(FOLLOW_annotatedModuleDescriptorStart_in_synpred1_Ceylon164);
        annotatedModuleDescriptorStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Ceylon

    // $ANTLR start synpred2_Ceylon
    public void synpred2_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:80:9: ( annotatedPackageDescriptorStart )
        // /home/david/git/ceylon-spec/Ceylon.g:80:10: annotatedPackageDescriptorStart
        {
        pushFollow(FOLLOW_annotatedPackageDescriptorStart_in_synpred2_Ceylon207);
        annotatedPackageDescriptorStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Ceylon

    // $ANTLR start synpred3_Ceylon
    public void synpred3_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:456:9: ( compilerAnnotations declarationStart )
        // /home/david/git/ceylon-spec/Ceylon.g:456:10: compilerAnnotations declarationStart
        {
        pushFollow(FOLLOW_compilerAnnotations_in_synpred3_Ceylon2741);
        compilerAnnotations();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_declarationStart_in_synpred3_Ceylon2743);
        declarationStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Ceylon

    // $ANTLR start synpred4_Ceylon
    public void synpred4_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:465:7: ( tuplePatternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:465:8: tuplePatternStart
        {
        pushFollow(FOLLOW_tuplePatternStart_in_synpred4_Ceylon2816);
        tuplePatternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Ceylon

    // $ANTLR start synpred5_Ceylon
    public void synpred5_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:474:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:474:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred5_Ceylon2881);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred5_Ceylon2883); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Ceylon

    // $ANTLR start synpred6_Ceylon
    public void synpred6_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:478:7: ( tuplePattern ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:478:8: tuplePattern ENTRY_OP
        {
        pushFollow(FOLLOW_tuplePattern_in_synpred6_Ceylon2919);
        tuplePattern();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred6_Ceylon2921); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Ceylon

    // $ANTLR start synpred7_Ceylon
    public void synpred7_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:482:7: ( tuplePatternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:482:8: tuplePatternStart
        {
        pushFollow(FOLLOW_tuplePatternStart_in_synpred7_Ceylon2957);
        tuplePatternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Ceylon

    // $ANTLR start synpred8_Ceylon
    public void synpred8_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:492:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:492:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred8_Ceylon3029);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred8_Ceylon3031); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Ceylon

    // $ANTLR start synpred9_Ceylon
    public void synpred9_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:496:7: ( tuplePattern ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:496:8: tuplePattern ENTRY_OP
        {
        pushFollow(FOLLOW_tuplePattern_in_synpred9_Ceylon3067);
        tuplePattern();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred9_Ceylon3069); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Ceylon

    // $ANTLR start synpred10_Ceylon
    public void synpred10_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:532:9: ( compilerAnnotations ( unionType )? PRODUCT_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:532:10: compilerAnnotations ( unionType )? PRODUCT_OP
        {
        pushFollow(FOLLOW_compilerAnnotations_in_synpred10_Ceylon3358);
        compilerAnnotations();

        state._fsp--;
        if (state.failed) return ;

        // /home/david/git/ceylon-spec/Ceylon.g:532:30: ( unionType )?
        int alt338=2;
        int LA338_0 = input.LA(1);

        if ( ((LA338_0 >= LBRACE && LA338_0 <= LBRACKET)||LA338_0==SMALLER_OP||LA338_0==UIDENTIFIER) ) {
            alt338=1;
        }
        switch (alt338) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:532:30: unionType
                {
                pushFollow(FOLLOW_unionType_in_synpred10_Ceylon3360);
                unionType();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,PRODUCT_OP,FOLLOW_PRODUCT_OP_in_synpred10_Ceylon3363); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Ceylon

    // $ANTLR start synpred11_Ceylon
    public void synpred11_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1272:9: ( destructureStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1272:10: destructureStart
        {
        pushFollow(FOLLOW_destructureStart_in_synpred11_Ceylon8463);
        destructureStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Ceylon

    // $ANTLR start synpred12_Ceylon
    public void synpred12_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1274:9: ( annotatedDeclarationStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1274:10: annotatedDeclarationStart
        {
        pushFollow(FOLLOW_annotatedDeclarationStart_in_synpred12_Ceylon8489);
        annotatedDeclarationStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Ceylon

    // $ANTLR start synpred13_Ceylon
    public void synpred13_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1276:9: ( annotatedAssertionStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1276:10: annotatedAssertionStart
        {
        pushFollow(FOLLOW_annotatedAssertionStart_in_synpred13_Ceylon8517);
        annotatedAssertionStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Ceylon

    // $ANTLR start synpred14_Ceylon
    public void synpred14_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1278:9: ( annotationListStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1278:10: annotationListStart
        {
        pushFollow(FOLLOW_annotationListStart_in_synpred14_Ceylon8543);
        annotationListStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Ceylon

    // $ANTLR start synpred15_Ceylon
    public void synpred15_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1295:7: ( INTERFACE_DEFINITION | DYNAMIC UIDENTIFIER )
        int alt339=2;
        int LA339_0 = input.LA(1);

        if ( (LA339_0==INTERFACE_DEFINITION) ) {
            alt339=1;
        }
        else if ( (LA339_0==DYNAMIC) ) {
            alt339=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 339, 0, input);

            throw nvae;

        }
        switch (alt339) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1295:8: INTERFACE_DEFINITION
                {
                match(input,INTERFACE_DEFINITION,FOLLOW_INTERFACE_DEFINITION_in_synpred15_Ceylon8668); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1295:29: DYNAMIC UIDENTIFIER
                {
                match(input,DYNAMIC,FOLLOW_DYNAMIC_in_synpred15_Ceylon8670); if (state.failed) return ;

                match(input,UIDENTIFIER,FOLLOW_UIDENTIFIER_in_synpred15_Ceylon8672); if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred15_Ceylon

    // $ANTLR start synpred16_Ceylon
    public void synpred16_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1322:8: ( unambiguousType )
        // /home/david/git/ceylon-spec/Ceylon.g:1322:9: unambiguousType
        {
        pushFollow(FOLLOW_unambiguousType_in_synpred16_Ceylon8847);
        unambiguousType();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Ceylon

    // $ANTLR start synpred17_Ceylon
    public void synpred17_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1609:9: ( specifierParametersStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1609:10: specifierParametersStart
        {
        pushFollow(FOLLOW_specifierParametersStart_in_synpred17_Ceylon10664);
        specifierParametersStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Ceylon

    // $ANTLR start synpred18_Ceylon
    public void synpred18_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1656:9: (~ ( LIDENTIFIER | UIDENTIFIER ) )
        // /home/david/git/ceylon-spec/Ceylon.g:
        {
        if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= LET)||(input.LA(1) >= LINE_COMMENT && input.LA(1) <= TYPE_CONSTRAINT)||(input.LA(1) >= UIdentifierPrefix && input.LA(1) <= WS) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred18_Ceylon

    // $ANTLR start synpred19_Ceylon
    public void synpred19_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1701:9: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1701:10: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred19_Ceylon11206);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Ceylon

    // $ANTLR start synpred20_Ceylon
    public void synpred20_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1705:9: ( anonymousArgument )
        // /home/david/git/ceylon-spec/Ceylon.g:1705:10: anonymousArgument
        {
        pushFollow(FOLLOW_anonymousArgument_in_synpred20_Ceylon11241);
        anonymousArgument();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Ceylon

    // $ANTLR start synpred21_Ceylon
    public void synpred21_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1749:9: ( typeArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1749:10: typeArgumentsStart
        {
        pushFollow(FOLLOW_typeArgumentsStart_in_synpred21_Ceylon11569);
        typeArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Ceylon

    // $ANTLR start synpred22_Ceylon
    public void synpred22_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1760:9: ( typeArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1760:10: typeArgumentsStart
        {
        pushFollow(FOLLOW_typeArgumentsStart_in_synpred22_Ceylon11650);
        typeArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Ceylon

    // $ANTLR start synpred23_Ceylon
    public void synpred23_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1841:9: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:1841:10: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred23_Ceylon12171);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Ceylon

    // $ANTLR start synpred24_Ceylon
    public void synpred24_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1845:9: ( anonymousArgument )
        // /home/david/git/ceylon-spec/Ceylon.g:1845:10: anonymousArgument
        {
        pushFollow(FOLLOW_anonymousArgument_in_synpred24_Ceylon12206);
        anonymousArgument();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Ceylon

    // $ANTLR start synpred25_Ceylon
    public void synpred25_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1863:11: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )
        int alt340=2;
        int LA340_0 = input.LA(1);

        if ( (LA340_0==FOR_CLAUSE) ) {
            alt340=1;
        }
        else if ( (LA340_0==IF_CLAUSE) ) {
            alt340=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 340, 0, input);

            throw nvae;

        }
        switch (alt340) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1863:12: FOR_CLAUSE
                {
                match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_synpred25_Ceylon12344); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1863:25: IF_CLAUSE conditions ~ THEN_CLAUSE
                {
                match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred25_Ceylon12348); if (state.failed) return ;

                pushFollow(FOLLOW_conditions_in_synpred25_Ceylon12350);
                conditions();

                state._fsp--;
                if (state.failed) return ;

                if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
                    input.consume();
                    state.errorRecovery=false;
                    state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }
    }
    // $ANTLR end synpred25_Ceylon

    // $ANTLR start synpred26_Ceylon
    public void synpred26_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:1880:13: ( FOR_CLAUSE | IF_CLAUSE conditions ~ THEN_CLAUSE )
        int alt341=2;
        int LA341_0 = input.LA(1);

        if ( (LA341_0==FOR_CLAUSE) ) {
            alt341=1;
        }
        else if ( (LA341_0==IF_CLAUSE) ) {
            alt341=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 341, 0, input);

            throw nvae;

        }
        switch (alt341) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:1880:14: FOR_CLAUSE
                {
                match(input,FOR_CLAUSE,FOLLOW_FOR_CLAUSE_in_synpred26_Ceylon12527); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:1880:27: IF_CLAUSE conditions ~ THEN_CLAUSE
                {
                match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred26_Ceylon12531); if (state.failed) return ;

                pushFollow(FOLLOW_conditions_in_synpred26_Ceylon12533);
                conditions();

                state._fsp--;
                if (state.failed) return ;

                if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
                    input.consume();
                    state.errorRecovery=false;
                    state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }
    }
    // $ANTLR end synpred26_Ceylon

    // $ANTLR start synpred27_Ceylon
    public void synpred27_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2129:15: ( namedArgumentStart )
        // /home/david/git/ceylon-spec/Ceylon.g:2129:16: namedArgumentStart
        {
        pushFollow(FOLLOW_namedArgumentStart_in_synpred27_Ceylon14579);
        namedArgumentStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Ceylon

    // $ANTLR start synpred28_Ceylon
    public void synpred28_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2196:7: ( FUNCTION_MODIFIER | VOID_MODIFIER | anonParametersStart )
        int alt342=3;
        switch ( input.LA(1) ) {
        case FUNCTION_MODIFIER:
            {
            alt342=1;
            }
            break;
        case VOID_MODIFIER:
            {
            alt342=2;
            }
            break;
        case LPAREN:
            {
            alt342=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 342, 0, input);

            throw nvae;

        }

        switch (alt342) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:2196:8: FUNCTION_MODIFIER
                {
                match(input,FUNCTION_MODIFIER,FOLLOW_FUNCTION_MODIFIER_in_synpred28_Ceylon14999); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:2196:26: VOID_MODIFIER
                {
                match(input,VOID_MODIFIER,FOLLOW_VOID_MODIFIER_in_synpred28_Ceylon15001); if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:2196:40: anonParametersStart
                {
                pushFollow(FOLLOW_anonParametersStart_in_synpred28_Ceylon15003);
                anonParametersStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred28_Ceylon

    // $ANTLR start synpred29_Ceylon
    public void synpred29_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2217:7: ( variable ENTRY_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:2217:8: variable ENTRY_OP
        {
        pushFollow(FOLLOW_variable_in_synpred29_Ceylon15119);
        variable();

        state._fsp--;
        if (state.failed) return ;

        match(input,ENTRY_OP,FOLLOW_ENTRY_OP_in_synpred29_Ceylon15121); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Ceylon

    // $ANTLR start synpred30_Ceylon
    public void synpred30_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2223:9: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:2223:10: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred30_Ceylon15171);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Ceylon

    // $ANTLR start synpred31_Ceylon
    public void synpred31_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:2472:7: ( IF_CLAUSE conditions ~ THEN_CLAUSE )
        // /home/david/git/ceylon-spec/Ceylon.g:2472:8: IF_CLAUSE conditions ~ THEN_CLAUSE
        {
        match(input,IF_CLAUSE,FOLLOW_IF_CLAUSE_in_synpred31_Ceylon16254); if (state.failed) return ;

        pushFollow(FOLLOW_conditions_in_synpred31_Ceylon16256);
        conditions();

        state._fsp--;
        if (state.failed) return ;

        if ( (input.LA(1) >= ABSTRACTED_TYPE && input.LA(1) <= StringPart)||(input.LA(1) >= THIS && input.LA(1) <= WS) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred31_Ceylon

    // $ANTLR start synpred32_Ceylon
    public void synpred32_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3004:7: ( unionType ( PRODUCT_OP | SUM_OP ) )
        // /home/david/git/ceylon-spec/Ceylon.g:3004:8: unionType ( PRODUCT_OP | SUM_OP )
        {
        pushFollow(FOLLOW_unionType_in_synpred32_Ceylon20061);
        unionType();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==PRODUCT_OP||input.LA(1)==SUM_OP ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred32_Ceylon

    // $ANTLR start synpred33_Ceylon
    public void synpred33_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3026:7: ( type ( SPECIFY ) )
        // /home/david/git/ceylon-spec/Ceylon.g:3026:8: type ( SPECIFY )
        {
        pushFollow(FOLLOW_type_in_synpred33_Ceylon20192);
        type();

        state._fsp--;
        if (state.failed) return ;

        // /home/david/git/ceylon-spec/Ceylon.g:3026:13: ( SPECIFY )
        // /home/david/git/ceylon-spec/Ceylon.g:3026:14: SPECIFY
        {
        match(input,SPECIFY,FOLLOW_SPECIFY_in_synpred33_Ceylon20195); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred33_Ceylon

    // $ANTLR start synpred34_Ceylon
    public void synpred34_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3295:7: ( namedAnnotationArgumentsStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3295:8: namedAnnotationArgumentsStart
        {
        pushFollow(FOLLOW_namedAnnotationArgumentsStart_in_synpred34_Ceylon21970);
        namedAnnotationArgumentsStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Ceylon

    // $ANTLR start synpred35_Ceylon
    public void synpred35_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3381:10: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3381:11: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred35_Ceylon22605);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_Ceylon

    // $ANTLR start synpred36_Ceylon
    public void synpred36_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3381:9: ( ( patternStart )=> patternStart | compilerAnnotations ( declarationStart | specificationStart ) )
        int alt344=2;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            int LA344_1 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 1, input);

                throw nvae;

            }
            }
            break;
        case UIDENTIFIER:
            {
            int LA344_2 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 2, input);

                throw nvae;

            }
            }
            break;
        case SMALLER_OP:
            {
            int LA344_3 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 3, input);

                throw nvae;

            }
            }
            break;
        case LBRACKET:
            {
            int LA344_4 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 4, input);

                throw nvae;

            }
            }
            break;
        case LBRACE:
            {
            int LA344_5 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 5, input);

                throw nvae;

            }
            }
            break;
        case VOID_MODIFIER:
            {
            int LA344_6 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 6, input);

                throw nvae;

            }
            }
            break;
        case FUNCTION_MODIFIER:
            {
            int LA344_7 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 7, input);

                throw nvae;

            }
            }
            break;
        case VALUE_MODIFIER:
            {
            int LA344_8 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 8, input);

                throw nvae;

            }
            }
            break;
        case LIDENTIFIER:
            {
            int LA344_9 = input.LA(2);

            if ( (synpred35_Ceylon()) ) {
                alt344=1;
            }
            else if ( (true) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 9, input);

                throw nvae;

            }
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case INTERFACE_DEFINITION:
        case NEW:
        case OBJECT_DEFINITION:
            {
            alt344=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 344, 0, input);

            throw nvae;

        }

        switch (alt344) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3381:10: ( patternStart )=> patternStart
                {
                pushFollow(FOLLOW_patternStart_in_synpred36_Ceylon22610);
                patternStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3381:43: compilerAnnotations ( declarationStart | specificationStart )
                {
                pushFollow(FOLLOW_compilerAnnotations_in_synpred36_Ceylon22614);
                compilerAnnotations();

                state._fsp--;
                if (state.failed) return ;

                // /home/david/git/ceylon-spec/Ceylon.g:3381:63: ( declarationStart | specificationStart )
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==ALIAS||LA343_0==ASSIGN||LA343_0==CLASS_DEFINITION||LA343_0==DYNAMIC||LA343_0==FUNCTION_MODIFIER||LA343_0==INTERFACE_DEFINITION||(LA343_0 >= LBRACE && LA343_0 <= LBRACKET)||LA343_0==NEW||LA343_0==OBJECT_DEFINITION||LA343_0==SMALLER_OP||LA343_0==UIDENTIFIER||LA343_0==VALUE_MODIFIER||LA343_0==VOID_MODIFIER) ) {
                    alt343=1;
                }
                else if ( (LA343_0==LIDENTIFIER) ) {
                    alt343=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 343, 0, input);

                    throw nvae;

                }
                switch (alt343) {
                    case 1 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3381:64: declarationStart
                        {
                        pushFollow(FOLLOW_declarationStart_in_synpred36_Ceylon22617);
                        declarationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3381:81: specificationStart
                        {
                        pushFollow(FOLLOW_specificationStart_in_synpred36_Ceylon22619);
                        specificationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }
    }
    // $ANTLR end synpred36_Ceylon

    // $ANTLR start synpred37_Ceylon
    public void synpred37_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3385:9: ( LIDENTIFIER )
        // /home/david/git/ceylon-spec/Ceylon.g:3385:10: LIDENTIFIER
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred37_Ceylon22663); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_Ceylon

    // $ANTLR start synpred38_Ceylon
    public void synpred38_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3402:10: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3402:11: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred38_Ceylon22797);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_Ceylon

    // $ANTLR start synpred39_Ceylon
    public void synpred39_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3402:9: ( ( patternStart )=> patternStart | compilerAnnotations ( declarationStart | specificationStart ) )
        int alt346=2;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            int LA346_1 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 1, input);

                throw nvae;

            }
            }
            break;
        case UIDENTIFIER:
            {
            int LA346_2 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 2, input);

                throw nvae;

            }
            }
            break;
        case SMALLER_OP:
            {
            int LA346_3 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 3, input);

                throw nvae;

            }
            }
            break;
        case LBRACKET:
            {
            int LA346_4 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 4, input);

                throw nvae;

            }
            }
            break;
        case LBRACE:
            {
            int LA346_5 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 5, input);

                throw nvae;

            }
            }
            break;
        case VOID_MODIFIER:
            {
            int LA346_6 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 6, input);

                throw nvae;

            }
            }
            break;
        case FUNCTION_MODIFIER:
            {
            int LA346_7 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 7, input);

                throw nvae;

            }
            }
            break;
        case VALUE_MODIFIER:
            {
            int LA346_8 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 8, input);

                throw nvae;

            }
            }
            break;
        case LIDENTIFIER:
            {
            int LA346_9 = input.LA(2);

            if ( (synpred38_Ceylon()) ) {
                alt346=1;
            }
            else if ( (true) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 9, input);

                throw nvae;

            }
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case INTERFACE_DEFINITION:
        case NEW:
        case OBJECT_DEFINITION:
            {
            alt346=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 346, 0, input);

            throw nvae;

        }

        switch (alt346) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3402:10: ( patternStart )=> patternStart
                {
                pushFollow(FOLLOW_patternStart_in_synpred39_Ceylon22802);
                patternStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3402:43: compilerAnnotations ( declarationStart | specificationStart )
                {
                pushFollow(FOLLOW_compilerAnnotations_in_synpred39_Ceylon22806);
                compilerAnnotations();

                state._fsp--;
                if (state.failed) return ;

                // /home/david/git/ceylon-spec/Ceylon.g:3402:63: ( declarationStart | specificationStart )
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==ALIAS||LA345_0==ASSIGN||LA345_0==CLASS_DEFINITION||LA345_0==DYNAMIC||LA345_0==FUNCTION_MODIFIER||LA345_0==INTERFACE_DEFINITION||(LA345_0 >= LBRACE && LA345_0 <= LBRACKET)||LA345_0==NEW||LA345_0==OBJECT_DEFINITION||LA345_0==SMALLER_OP||LA345_0==UIDENTIFIER||LA345_0==VALUE_MODIFIER||LA345_0==VOID_MODIFIER) ) {
                    alt345=1;
                }
                else if ( (LA345_0==LIDENTIFIER) ) {
                    alt345=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 0, input);

                    throw nvae;

                }
                switch (alt345) {
                    case 1 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3402:64: declarationStart
                        {
                        pushFollow(FOLLOW_declarationStart_in_synpred39_Ceylon22809);
                        declarationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/david/git/ceylon-spec/Ceylon.g:3402:81: specificationStart
                        {
                        pushFollow(FOLLOW_specificationStart_in_synpred39_Ceylon22811);
                        specificationStart();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }
    }
    // $ANTLR end synpred39_Ceylon

    // $ANTLR start synpred40_Ceylon
    public void synpred40_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3406:9: ( LIDENTIFIER )
        // /home/david/git/ceylon-spec/Ceylon.g:3406:10: LIDENTIFIER
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred40_Ceylon22855); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_Ceylon

    // $ANTLR start synpred41_Ceylon
    public void synpred41_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3425:9: ( LIDENTIFIER SPECIFY )
        // /home/david/git/ceylon-spec/Ceylon.g:3425:10: LIDENTIFIER SPECIFY
        {
        match(input,LIDENTIFIER,FOLLOW_LIDENTIFIER_in_synpred41_Ceylon23000); if (state.failed) return ;

        match(input,SPECIFY,FOLLOW_SPECIFY_in_synpred41_Ceylon23002); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_Ceylon

    // $ANTLR start synpred42_Ceylon
    public void synpred42_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3468:9: ( LBRACE )
        // /home/david/git/ceylon-spec/Ceylon.g:3468:10: LBRACE
        {
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred42_Ceylon23318); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_Ceylon

    // $ANTLR start synpred43_Ceylon
    public void synpred43_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3631:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )
        int alt347=3;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            alt347=1;
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case FUNCTION_MODIFIER:
        case INTERFACE_DEFINITION:
        case LBRACE:
        case LBRACKET:
        case NEW:
        case OBJECT_DEFINITION:
        case SMALLER_OP:
        case UIDENTIFIER:
        case VALUE_MODIFIER:
        case VOID_MODIFIER:
            {
            alt347=2;
            }
            break;
        case LIDENTIFIER:
            {
            alt347=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 347, 0, input);

            throw nvae;

        }

        switch (alt347) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3631:10: COMPILER_ANNOTATION
                {
                match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_synpred43_Ceylon23850); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3631:30: declarationStart
                {
                pushFollow(FOLLOW_declarationStart_in_synpred43_Ceylon23852);
                declarationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:3631:47: specificationStart
                {
                pushFollow(FOLLOW_specificationStart_in_synpred43_Ceylon23854);
                specificationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred43_Ceylon

    // $ANTLR start synpred44_Ceylon
    public void synpred44_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3679:7: ( IS_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:3679:8: IS_OP
        {
        match(input,IS_OP,FOLLOW_IS_OP_in_synpred44_Ceylon24213); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_Ceylon

    // $ANTLR start synpred45_Ceylon
    public void synpred45_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3681:7: ( SATISFIES )
        // /home/david/git/ceylon-spec/Ceylon.g:3681:8: SATISFIES
        {
        match(input,SATISFIES,FOLLOW_SATISFIES_in_synpred45_Ceylon24234); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_Ceylon

    // $ANTLR start synpred46_Ceylon
    public void synpred46_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3742:9: ( patternStart )
        // /home/david/git/ceylon-spec/Ceylon.g:3742:10: patternStart
        {
        pushFollow(FOLLOW_patternStart_in_synpred46_Ceylon24628);
        patternStart();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_Ceylon

    // $ANTLR start synpred47_Ceylon
    public void synpred47_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:3856:9: ( COMPILER_ANNOTATION | declarationStart | specificationStart )
        int alt348=3;
        switch ( input.LA(1) ) {
        case COMPILER_ANNOTATION:
            {
            alt348=1;
            }
            break;
        case ALIAS:
        case ASSIGN:
        case CLASS_DEFINITION:
        case DYNAMIC:
        case FUNCTION_MODIFIER:
        case INTERFACE_DEFINITION:
        case LBRACE:
        case LBRACKET:
        case NEW:
        case OBJECT_DEFINITION:
        case SMALLER_OP:
        case UIDENTIFIER:
        case VALUE_MODIFIER:
        case VOID_MODIFIER:
            {
            alt348=2;
            }
            break;
        case LIDENTIFIER:
            {
            alt348=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 348, 0, input);

            throw nvae;

        }

        switch (alt348) {
            case 1 :
                // /home/david/git/ceylon-spec/Ceylon.g:3856:10: COMPILER_ANNOTATION
                {
                match(input,COMPILER_ANNOTATION,FOLLOW_COMPILER_ANNOTATION_in_synpred47_Ceylon25474); if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/david/git/ceylon-spec/Ceylon.g:3856:30: declarationStart
                {
                pushFollow(FOLLOW_declarationStart_in_synpred47_Ceylon25476);
                declarationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/david/git/ceylon-spec/Ceylon.g:3856:47: specificationStart
                {
                pushFollow(FOLLOW_specificationStart_in_synpred47_Ceylon25478);
                specificationStart();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred47_Ceylon

    // $ANTLR start synpred48_Ceylon
    public void synpred48_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4092:7: ( abbreviatedType MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4092:8: abbreviatedType MEMBER_OP
        {
        pushFollow(FOLLOW_abbreviatedType_in_synpred48_Ceylon26998);
        abbreviatedType();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred48_Ceylon27000); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred48_Ceylon

    // $ANTLR start synpred49_Ceylon
    public void synpred49_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4107:7: ( groupedType MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4107:8: groupedType MEMBER_OP
        {
        pushFollow(FOLLOW_groupedType_in_synpred49_Ceylon27120);
        groupedType();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred49_Ceylon27122); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_Ceylon

    // $ANTLR start synpred50_Ceylon
    public void synpred50_Ceylon_fragment() throws RecognitionException {
        // /home/david/git/ceylon-spec/Ceylon.g:4122:7: ( memberName MEMBER_OP )
        // /home/david/git/ceylon-spec/Ceylon.g:4122:8: memberName MEMBER_OP
        {
        pushFollow(FOLLOW_memberName_in_synpred50_Ceylon27241);
        memberName();

        state._fsp--;
        if (state.failed) return ;

        match(input,MEMBER_OP,FOLLOW_MEMBER_OP_in_synpred50_Ceylon27243); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_Ceylon

    // Delegated rules

    public boolean synpred46_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred37_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred13_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred25_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred9_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred7_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred49_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred16_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred12_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred20_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred8_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred42_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred28_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred30_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred48_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred32_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred44_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred27_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred22_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred3_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred26_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred43_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred35_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred45_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred24_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred34_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred41_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred15_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred10_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred1_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred38_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred2_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred36_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred6_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred23_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred11_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred14_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred40_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred18_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred31_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred29_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred4_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred21_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred47_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred50_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred17_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred33_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred39_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred5_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public boolean synpred19_Ceylon() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Ceylon_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    static final String DFA1_eotS =
        "\10\uffff";
    static final String DFA1_eofS =
        "\1\3\7\uffff";
    static final String DFA1_minS =
        "\1\7\1\105\2\uffff\1\7\1\160\2\7";
    static final String DFA1_maxS =
        "\1\u0083\1\105\2\uffff\1\u0083\1\u0082\2\u0083";
    static final String DFA1_acceptS =
        "\2\uffff\1\1\1\2\4\uffff";
    static final String DFA1_specialS =
        "\10\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\5\uffff\1\3\1\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff"+
            "\1\3\4\uffff\1\3\3\uffff\1\3\5\uffff\1\3\5\uffff\1\3\11\uffff"+
            "\1\2\1\3\4\uffff\1\3\14\uffff\1\3\3\uffff\3\3",
            "\1\4",
            "",
            "",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\16\uffff\1\5\1\2\1\3\4\uffff\1"+
            "\3\14\uffff\1\3\3\uffff\3\3",
            "\1\6\21\uffff\1\7",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\17\uffff\1\2\1\3\4\uffff\1\3\14"+
            "\uffff\1\3\3\uffff\3\3",
            "\1\3\4\uffff\1\3\12\uffff\1\3\2\uffff\1\1\10\uffff\1\3\15\uffff"+
            "\1\3\7\uffff\1\3\10\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\3\uffff\1\3\5\uffff\1\3\17\uffff\1\2\1\3\4\uffff\1\3\14"+
            "\uffff\1\3\3\uffff\3\3"
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "66:7: (ca= compilerAnnotations SEMICOLON )?";
        }
    }
    static final String DFA143_eotS =
        "\100\uffff";
    static final String DFA143_eofS =
        "\100\uffff";
    static final String DFA143_minS =
        "\1\5\73\uffff\1\0\3\uffff";
    static final String DFA143_maxS =
        "\1\u0080\73\uffff\1\0\3\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\6\66\uffff\1\1\2\uffff\1\2\1\uffff\1\5\1\3\1\4";
    static final String DFA143_specialS =
        "\74\uffff\1\0\3\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\2\1\3\uffff\2\1\1\uffff\3\1\2\uffff"+
            "\3\1\3\uffff\6\1\11\uffff\1\1\2\uffff\1\1\1\uffff\4\1\2\uffff"+
            "\2\1\1\75\1\73\4\uffff\1\74\1\uffff\1\70\1\uffff\1\1\4\uffff"+
            "\2\1\3\uffff\2\1\4\uffff\10\1\1\uffff\1\1\1\70\7\1\1\70\1\1"+
            "\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\6\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 1590:5: ( qualifiedReference | indexOrIndexRange | ( specifierParametersStart )=> parameters | positionalArguments | namedArguments )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_60 = input.LA(1);

                         
                        int index143_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index143_60);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA146_eotS =
        "\100\uffff";
    static final String DFA146_eofS =
        "\100\uffff";
    static final String DFA146_minS =
        "\1\5\77\uffff";
    static final String DFA146_maxS =
        "\1\u0080\77\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\75\3";
    static final String DFA146_specialS =
        "\1\0\77\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\60\2\uffff\1\46\1\70\11\uffff\1\55\1\42\3\uffff\1\7\1\31"+
            "\1\uffff\1\12\1\67\1\51\2\uffff\1\3\1\22\1\63\3\uffff\1\23\1"+
            "\54\1\26\1\43\1\27\1\40\11\uffff\1\45\2\uffff\1\4\1\uffff\1"+
            "\6\1\65\1\32\1\37\2\uffff\1\34\1\33\1\77\1\75\1\uffff\1\1\2"+
            "\uffff\1\76\1\uffff\1\72\1\uffff\1\62\4\uffff\1\30\1\44\3\uffff"+
            "\1\47\1\71\4\uffff\1\5\1\15\1\16\1\24\1\13\1\14\1\17\1\64\1"+
            "\uffff\1\11\1\73\1\41\1\20\1\25\1\50\1\36\1\35\1\57\1\74\1\53"+
            "\1\uffff\1\52\1\uffff\1\61\1\21\3\uffff\1\56\4\uffff\1\2\1\uffff"+
            "\1\10\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1648:7: ( memberReference | typeReference | (~ ( LIDENTIFIER | UIDENTIFIER ) )=>)";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA146_0==LIDENTIFIER) ) {s = 1;}

                        else if ( (LA146_0==UIDENTIFIER) ) {s = 2;}

                        else if ( (LA146_0==DECREMENT_OP) && (synpred18_Ceylon())) {s = 3;}

                        else if ( (LA146_0==INCREMENT_OP) && (synpred18_Ceylon())) {s = 4;}

                        else if ( (LA146_0==POWER_OP) && (synpred18_Ceylon())) {s = 5;}

                        else if ( (LA146_0==INTERSECTION_OP) && (synpred18_Ceylon())) {s = 6;}

                        else if ( (LA146_0==COMMA) && (synpred18_Ceylon())) {s = 7;}

                        else if ( (LA146_0==UNION_OP) && (synpred18_Ceylon())) {s = 8;}

                        else if ( (LA146_0==RPAREN) && (synpred18_Ceylon())) {s = 9;}

                        else if ( (LA146_0==COMPLEMENT_OP) && (synpred18_Ceylon())) {s = 10;}

                        else if ( (LA146_0==RBRACE) && (synpred18_Ceylon())) {s = 11;}

                        else if ( (LA146_0==RBRACKET) && (synpred18_Ceylon())) {s = 12;}

                        else if ( (LA146_0==PRODUCT_OP) && (synpred18_Ceylon())) {s = 13;}

                        else if ( (LA146_0==QUOTIENT_OP) && (synpred18_Ceylon())) {s = 14;}

                        else if ( (LA146_0==REMAINDER_OP) && (synpred18_Ceylon())) {s = 15;}

                        else if ( (LA146_0==SCALE_OP) && (synpred18_Ceylon())) {s = 16;}

                        else if ( (LA146_0==SUM_OP) && (synpred18_Ceylon())) {s = 17;}

                        else if ( (LA146_0==DIFFERENCE_OP) && (synpred18_Ceylon())) {s = 18;}

                        else if ( (LA146_0==ELLIPSIS) && (synpred18_Ceylon())) {s = 19;}

                        else if ( (LA146_0==RANGE_OP) && (synpred18_Ceylon())) {s = 20;}

                        else if ( (LA146_0==SEGMENT_OP) && (synpred18_Ceylon())) {s = 21;}

                        else if ( (LA146_0==ENTRY_OP) && (synpred18_Ceylon())) {s = 22;}

                        else if ( (LA146_0==EXISTS) && (synpred18_Ceylon())) {s = 23;}

                        else if ( (LA146_0==NONEMPTY) && (synpred18_Ceylon())) {s = 24;}

                        else if ( (LA146_0==COMPARE_OP) && (synpred18_Ceylon())) {s = 25;}

                        else if ( (LA146_0==IN_OP) && (synpred18_Ceylon())) {s = 26;}

                        else if ( (LA146_0==LARGE_AS_OP) && (synpred18_Ceylon())) {s = 27;}

                        else if ( (LA146_0==LARGER_OP) && (synpred18_Ceylon())) {s = 28;}

                        else if ( (LA146_0==SMALL_AS_OP) && (synpred18_Ceylon())) {s = 29;}

                        else if ( (LA146_0==SMALLER_OP) && (synpred18_Ceylon())) {s = 30;}

                        else if ( (LA146_0==IS_OP) && (synpred18_Ceylon())) {s = 31;}

                        else if ( (LA146_0==EXTENDS) && (synpred18_Ceylon())) {s = 32;}

                        else if ( (LA146_0==SATISFIES) && (synpred18_Ceylon())) {s = 33;}

                        else if ( (LA146_0==CASE_TYPES) && (synpred18_Ceylon())) {s = 34;}

                        else if ( (LA146_0==EQUAL_OP) && (synpred18_Ceylon())) {s = 35;}

                        else if ( (LA146_0==NOT_EQUAL_OP) && (synpred18_Ceylon())) {s = 36;}

                        else if ( (LA146_0==IDENTICAL_OP) && (synpred18_Ceylon())) {s = 37;}

                        else if ( (LA146_0==AND_OP) && (synpred18_Ceylon())) {s = 38;}

                        else if ( (LA146_0==OR_OP) && (synpred18_Ceylon())) {s = 39;}

                        else if ( (LA146_0==SEMICOLON) && (synpred18_Ceylon())) {s = 40;}

                        else if ( (LA146_0==COMPUTE) && (synpred18_Ceylon())) {s = 41;}

                        else if ( (LA146_0==STRING_MID) && (synpred18_Ceylon())) {s = 42;}

                        else if ( (LA146_0==STRING_END) && (synpred18_Ceylon())) {s = 43;}

                        else if ( (LA146_0==ELSE_CLAUSE) && (synpred18_Ceylon())) {s = 44;}

                        else if ( (LA146_0==CASE_CLAUSE) && (synpred18_Ceylon())) {s = 45;}

                        else if ( (LA146_0==THEN_CLAUSE) && (synpred18_Ceylon())) {s = 46;}

                        else if ( (LA146_0==SPECIFY) && (synpred18_Ceylon())) {s = 47;}

                        else if ( (LA146_0==ADD_SPECIFY) && (synpred18_Ceylon())) {s = 48;}

                        else if ( (LA146_0==SUBTRACT_SPECIFY) && (synpred18_Ceylon())) {s = 49;}

                        else if ( (LA146_0==MULTIPLY_SPECIFY) && (synpred18_Ceylon())) {s = 50;}

                        else if ( (LA146_0==DIVIDE_SPECIFY) && (synpred18_Ceylon())) {s = 51;}

                        else if ( (LA146_0==REMAINDER_SPECIFY) && (synpred18_Ceylon())) {s = 52;}

                        else if ( (LA146_0==INTERSECT_SPECIFY) && (synpred18_Ceylon())) {s = 53;}

                        else if ( (LA146_0==UNION_SPECIFY) && (synpred18_Ceylon())) {s = 54;}

                        else if ( (LA146_0==COMPLEMENT_SPECIFY) && (synpred18_Ceylon())) {s = 55;}

                        else if ( (LA146_0==AND_SPECIFY) && (synpred18_Ceylon())) {s = 56;}

                        else if ( (LA146_0==OR_SPECIFY) && (synpred18_Ceylon())) {s = 57;}

                        else if ( (LA146_0==MEMBER_OP) && (synpred18_Ceylon())) {s = 58;}

                        else if ( (LA146_0==SAFE_MEMBER_OP) && (synpred18_Ceylon())) {s = 59;}

                        else if ( (LA146_0==SPREAD_OP) && (synpred18_Ceylon())) {s = 60;}

                        else if ( (LA146_0==LBRACKET) && (synpred18_Ceylon())) {s = 61;}

                        else if ( (LA146_0==LPAREN) && (synpred18_Ceylon())) {s = 62;}

                        else if ( (LA146_0==LBRACE) && (synpred18_Ceylon())) {s = 63;}

                         
                        input.seek(index146_0);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA155_eotS =
        "\77\uffff";
    static final String DFA155_eofS =
        "\77\uffff";
    static final String DFA155_minS =
        "\1\5\1\0\75\uffff";
    static final String DFA155_maxS =
        "\1\u0080\1\0\75\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\73\uffff\1\1";
    static final String DFA155_specialS =
        "\1\uffff\1\0\75\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\2\2\3\uffff\2\2\1\uffff\3\2\2\uffff"+
            "\3\2\3\uffff\6\2\11\uffff\1\2\2\uffff\1\2\1\uffff\4\2\2\uffff"+
            "\4\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\4\uffff\2\2\3\uffff"+
            "\2\2\4\uffff\10\2\1\uffff\6\2\1\1\4\2\1\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\6\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "1748:7: ( ( typeArgumentsStart )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred21_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA156_eotS =
        "\77\uffff";
    static final String DFA156_eofS =
        "\77\uffff";
    static final String DFA156_minS =
        "\1\5\1\0\75\uffff";
    static final String DFA156_maxS =
        "\1\u0080\1\0\75\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\2\73\uffff\1\1";
    static final String DFA156_specialS =
        "\1\uffff\1\0\75\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\2\2\3\uffff\2\2\1\uffff\3\2\2\uffff"+
            "\3\2\3\uffff\6\2\11\uffff\1\2\2\uffff\1\2\1\uffff\4\2\2\uffff"+
            "\4\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\4\uffff\2\2\3\uffff"+
            "\2\2\4\uffff\10\2\1\uffff\6\2\1\1\4\2\1\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\6\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1759:7: ( ( typeArgumentsStart )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred22_Ceylon()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_compilerAnnotations_in_compilationUnit86 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_compilationUnit96 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit134 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_moduleDescriptor_in_compilationUnit177 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_packageDescriptor_in_compilationUnit220 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_toplevelDeclaration_in_compilationUnit248 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RBRACE_in_compilationUnit268 = new BitSet(new long[]{0x0282000804801080L,0x200108010411082CL,0x000000000000000EL});
    public static final BitSet FOLLOW_EOF_in_compilationUnit295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_toplevelDeclaration318 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_declaration_in_toplevelDeclaration329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_annotatedModuleDescriptorStart354 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000820L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_annotatedModuleDescriptorStart356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MODULE_in_annotatedModuleDescriptorStart358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_annotatedPackageDescriptorStart375 = new BitSet(new long[]{0x0000000000000000L,0x0001000004000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_annotatedPackageDescriptorStart377 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PACKAGE_in_annotatedPackageDescriptorStart379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_moduleDescriptor400 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000820L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_moduleDescriptor402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MODULE_in_moduleDescriptor410 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_moduleDescriptor427 = new BitSet(new long[]{0x0000000000400000L,0x0001000000000000L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_moduleDescriptor453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_moduleDescriptor481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_importModuleList_in_moduleDescriptor507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_importModuleList536 = new BitSet(new long[]{0x0080000004000000L,0x0001000100000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_compilerAnnotations_in_importModuleList562 = new BitSet(new long[]{0x0080000000000000L,0x0001000000000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_importModuleList564 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_importModule_in_importModuleList574 = new BitSet(new long[]{0x0080000004000000L,0x0001000100000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_RBRACE_in_importModuleList601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_packageDescriptor630 = new BitSet(new long[]{0x0000000000000000L,0x0001000004000020L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_packageDescriptor632 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDescriptor640 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_packageDescriptor657 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_packageDescriptor673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importModule702 = new BitSet(new long[]{0x0000000000400000L,0x2001000000000020L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_importModule731 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_importModule761 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_packagePath_in_importModule789 = new BitSet(new long[]{0x0000000000400000L,0x0001040000000000L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_importModule827 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_importModule857 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_importModule884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration913 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000024L});
    public static final BitSet FOLLOW_packagePath_in_importDeclaration941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_importElementList_in_importDeclaration977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_importElementList1019 = new BitSet(new long[]{0x0000004004000000L,0x2000000100000020L});
    public static final BitSet FOLLOW_importElement_in_importElementList1042 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_importElementList1073 = new BitSet(new long[]{0x0000004005000000L,0x2000000100000020L});
    public static final BitSet FOLLOW_importElement_in_importElementList1108 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_importWildcard_in_importElementList1136 = new BitSet(new long[]{0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_importWildcard_in_importElementList1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_importElementList1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_importElement1241 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_importName_in_importElement1251 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000004L});
    public static final BitSet FOLLOW_SPECIFY_in_importElement1270 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000024L});
    public static final BitSet FOLLOW_importName_in_importElement1304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_importElementList_in_importElement1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_importWildcard1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_importName1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_importName1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageName_in_packagePath1493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_packagePath1524 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000420L});
    public static final BitSet FOLLOW_packageName_in_packagePath1559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_packageName1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_packageName1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_typeName1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_annotationName1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_memberName1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_memberNameDeclaration1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_memberNameDeclaration1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_typeNameDeclaration1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_typeNameDeclaration1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectDeclaration1864 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_objectDeclaration1880 = new BitSet(new long[]{0x0000080000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectDeclaration1907 = new BitSet(new long[]{0x0000000000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectDeclaration1946 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000004L});
    public static final BitSet FOLLOW_classBody_in_objectDeclaration1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_objectDeclaration2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectExpression2053 = new BitSet(new long[]{0x0000080000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectExpression2080 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectExpression2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_objectExpression2147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodDeclaration2195 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodDeclaration2215 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_voidOrInferredMethodDeclaration2241 = new BitSet(new long[]{0x0000000024000000L,0x10002C0000000104L});
    public static final BitSet FOLLOW_typeParameters_in_voidOrInferredMethodDeclaration2267 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_parameters_in_voidOrInferredMethodDeclaration2312 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_typeConstraints_in_voidOrInferredMethodDeclaration2356 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_voidOrInferredMethodDeclaration2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_voidOrInferredMethodDeclaration2446 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidOrInferredMethodDeclaration2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_setterDeclaration2538 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_setterDeclaration2555 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_setterDeclaration2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_setterDeclaration2624 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_setterDeclaration2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuplePatternStart2702 = new BitSet(new long[]{0x0202000804801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_compilerAnnotations_in_tuplePatternStart2720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_tuplePatternStart2722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_tuplePatternStart2758 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_tuplePatternStart2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_tuplePatternStart2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_variableOrTuplePattern2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variablePattern_in_variableOrTuplePattern2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_pattern2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_pattern2934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_pattern2969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variablePattern_in_pattern2992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_tupleOrEntryPattern3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyItemPattern_in_tupleOrEntryPattern3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_tupleOrEntryPattern3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_variablePattern3133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuplePattern3162 = new BitSet(new long[]{0x0002000004000000L,0x200008022000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variadicPattern_in_tuplePattern3190 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_tuplePattern3224 = new BitSet(new long[]{0x0002000004000000L,0x200008002000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variadicPattern_in_tuplePattern3264 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tuplePattern3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicVariable_in_variadicPattern3376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_variadicPattern3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_variadicVariable3452 = new BitSet(new long[]{0x0000000000000000L,0x200008002000000CL});
    public static final BitSet FOLLOW_unionType_in_variadicVariable3478 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_variadicVariable3515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_variadicVariable3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableOrTuplePattern_in_keyItemPattern3601 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_keyItemPattern3617 = new BitSet(new long[]{0x0002000004000002L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variableOrTuplePattern_in_keyItemPattern3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructure3685 = new BitSet(new long[]{0x0002000004000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_tupleOrEntryPattern_in_destructure3701 = new BitSet(new long[]{0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_specifier_in_destructure3727 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_destructure3764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_inferredAttributeDeclaration3802 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_inferredAttributeDeclaration3819 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_specifier_in_inferredAttributeDeclaration3858 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_inferredAttributeDeclaration3893 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_inferredAttributeDeclaration3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_inferredAttributeDeclaration3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_typedMethodOrAttributeDeclaration4025 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_typedMethodOrAttributeDeclaration4045 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_typedMethodOrAttributeDeclaration4071 = new BitSet(new long[]{0x0000000020000000L,0x00002C0000000104L});
    public static final BitSet FOLLOW_typeParameters_in_typedMethodOrAttributeDeclaration4120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_typedMethodOrAttributeDeclaration4165 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000104L});
    public static final BitSet FOLLOW_typeConstraints_in_typedMethodOrAttributeDeclaration4220 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_typedMethodOrAttributeDeclaration4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_typedMethodOrAttributeDeclaration4330 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_typedMethodOrAttributeDeclaration4437 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_typedMethodOrAttributeDeclaration4475 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrAttributeDeclaration4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_typedMethodOrAttributeDeclaration4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_interfaceDeclaration4621 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_interfaceDeclaration4650 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_interfaceDeclaration4676 = new BitSet(new long[]{0x0000000024100000L,0x10002C8000000004L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceDeclaration4703 = new BitSet(new long[]{0x0000000024100000L,0x1000248000000004L});
    public static final BitSet FOLLOW_caseTypes_in_interfaceDeclaration4741 = new BitSet(new long[]{0x0000000024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_interfaceDeclaration4795 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000004L});
    public static final BitSet FOLLOW_typeConstraints_in_interfaceDeclaration4832 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceDeclaration4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSpecifier_in_interfaceDeclaration4920 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceDeclaration4964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_classDeclaration5012 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_classDeclaration5029 = new BitSet(new long[]{0x0000080024100000L,0x10002C8000000104L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration5055 = new BitSet(new long[]{0x0000080024100000L,0x1000248000000104L});
    public static final BitSet FOLLOW_parameters_in_classDeclaration5092 = new BitSet(new long[]{0x0000080024100000L,0x1000248000000004L});
    public static final BitSet FOLLOW_caseTypes_in_classDeclaration5129 = new BitSet(new long[]{0x0000080024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_extendedType_in_classDeclaration5175 = new BitSet(new long[]{0x0000000024000000L,0x1000248000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_classDeclaration5213 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000004L});
    public static final BitSet FOLLOW_typeConstraints_in_classDeclaration5250 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration5297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classSpecifier_in_classDeclaration5338 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_classDeclaration5381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_constructor5420 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_constructor5436 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_parameters_in_constructor5462 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_delegatedConstructor_in_constructor5503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_constructor5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_delegatedConstructor5559 = new BitSet(new long[]{0x0000000000000000L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_delegatedConstructor5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_aliasDeclaration5626 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_aliasDeclaration5642 = new BitSet(new long[]{0x0000000024000000L,0x10002C0000000000L});
    public static final BitSet FOLLOW_typeParameters_in_aliasDeclaration5669 = new BitSet(new long[]{0x0000000024000000L,0x1000240000000000L});
    public static final BitSet FOLLOW_typeConstraints_in_aliasDeclaration5707 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_typeSpecifier_in_aliasDeclaration5744 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_aliasDeclaration5779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_assertion5808 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_ASSERT_in_assertion5816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_assertion5832 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_assertion5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_block5885 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_block5912 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_block5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_interfaceBody5972 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_interfaceBody5999 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_interfaceBody6026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_classBody6055 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_declarationOrStatement_in_classBody6081 = new BitSet(new long[]{0x0343800B44C19880L,0x2E7508110619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_RBRACE_in_classBody6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_extendedType6137 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_extendedType6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_classSpecifier6211 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_classSpecifier6240 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_classInstantiation_in_classSpecifier6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000500L});
    public static final BitSet FOLLOW_MEMBER_OP_in_classInstantiation6372 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_SUPER_in_classInstantiation6419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_classInstantiation6421 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_classInstantiation6434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_positionalArguments_in_classInstantiation6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiedTypes6521 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_satisfiedTypes6551 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_satisfiedTypes6603 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_COMMA_in_satisfiedTypes6638 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_UNION_OP_in_satisfiedTypes6640 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_satisfiedTypes6686 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_CASE_TYPES_in_caseTypes6738 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_caseType_in_caseTypes6756 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_caseTypes6798 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_COMMA_in_caseTypes6834 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_caseTypes6836 = new BitSet(new long[]{0x0000000000000000L,0x200008000000002CL});
    public static final BitSet FOLLOW_caseType_in_caseTypes6882 = new BitSet(new long[]{0x0400000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_abbreviatedType_in_caseType6936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_caseType6953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACTED_TYPE_in_abstractedType6988 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_abstractedType7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters7033 = new BitSet(new long[]{0x0002000804000000L,0x200108200000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_parameterDeclarationOrRef_in_parameters7061 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_parameters7096 = new BitSet(new long[]{0x0002000805000000L,0x200108200000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_parameterDeclarationOrRef_in_parameters7136 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters7216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_parameter7245 = new BitSet(new long[]{0x0002000800000000L,0x200108000000002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotations_in_parameter7253 = new BitSet(new long[]{0x0002000800000000L,0x200008000000000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_parameterDeclaration_in_parameter7261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_parameterDeclaration7314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_parameterDeclaration7334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_parameterDeclaration7354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_parameterDeclaration7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_parameterDeclaration7394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_parameterDeclaration7420 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000100L});
    public static final BitSet FOLLOW_specifier_in_parameterDeclaration7458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_in_parameterDeclaration7511 = new BitSet(new long[]{0x0000000020000002L,0x0000200000000100L});
    public static final BitSet FOLLOW_functionSpecifier_in_parameterDeclaration7556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_parameterRef7608 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_parameterRef7634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameterRef_in_parameterDeclarationOrRef7682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_in_parameterDeclarationOrRef7707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeParameters7736 = new BitSet(new long[]{0x1000000004000000L,0x2000000001000020L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters7754 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters7782 = new BitSet(new long[]{0x1000000005000000L,0x2000000001000021L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters7816 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeParameters7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_typeParameter7904 = new BitSet(new long[]{0x1000000000000000L,0x2000000001000020L});
    public static final BitSet FOLLOW_variance_in_typeParameter7923 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_typeParameter7953 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_typeDefault_in_typeParameter7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_variance8027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_variance8043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_typeConstraint8076 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_TYPE_CONSTRAINT_in_typeConstraint8084 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_typeNameDeclaration_in_typeConstraint8100 = new BitSet(new long[]{0x0000000000100012L,0x0000008000000100L});
    public static final BitSet FOLLOW_parameters_in_typeConstraint8134 = new BitSet(new long[]{0x0000000000100012L,0x0000008000000000L});
    public static final BitSet FOLLOW_caseTypes_in_typeConstraint8171 = new BitSet(new long[]{0x0000000000000012L,0x0000008000000000L});
    public static final BitSet FOLLOW_satisfiedTypes_in_typeConstraint8215 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_abstractedType_in_typeConstraint8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeConstraint_in_typeConstraints8311 = new BitSet(new long[]{0x0000000004000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_annotationListStart8348 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000020L,0x000000000000000AL});
    public static final BitSet FOLLOW_annotation_in_annotationListStart8350 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000020L,0x000000000000000AL});
    public static final BitSet FOLLOW_set_in_annotationListStart8360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructureStart8387 = new BitSet(new long[]{0x0002000004000000L,0x2000000000000028L,0x000000000000000AL});
    public static final BitSet FOLLOW_compilerAnnotations_in_destructureStart8389 = new BitSet(new long[]{0x0002000000000000L,0x2000000000000028L,0x000000000000000AL});
    public static final BitSet FOLLOW_LBRACKET_in_destructureStart8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_destructureStart8401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_destructureStart8403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_destructureStart8405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_destructureStart8407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_destructureStart8409 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_destructureStart8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_declarationOrStatement8444 = new BitSet(new long[]{0x0343800B40C19880L,0x2E7508100619812CL,0x000000000000001EL});
    public static final BitSet FOLLOW_destructure_in_declarationOrStatement8468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarationOrStatement8496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assertion_in_declarationOrStatement8522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarationOrStatement8550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_declarationOrStatement8572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_declaration8628 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_classDeclaration_in_declaration8651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_declaration8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aliasDeclaration_in_declaration8693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectDeclaration_in_declaration8709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setterDeclaration_in_declaration8725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidOrInferredMethodDeclaration_in_declaration8741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredAttributeDeclaration_in_declaration8757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedMethodOrAttributeDeclaration_in_declaration8773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_declaration8789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotatedDeclarationStart8832 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_annotation_in_annotatedDeclarationStart8835 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_unambiguousType_in_annotatedDeclarationStart8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_annotatedDeclarationStart8856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotatedAssertionStart8874 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotation_in_annotatedAssertionStart8877 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000020L});
    public static final BitSet FOLLOW_ASSERT_in_annotatedAssertionStart8880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_declarationStart8900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_declarationStart8908 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_declarationStart8923 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_declarationStart8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_declarationStart8946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_declarationStart8954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_declarationStart8962 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart8964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_declarationStart8977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_declarationStart8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_declarationStart8994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_declarationStart8996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_declarationStart9004 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_set_in_declarationStart9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9034 = new BitSet(new long[]{0x0000010000000000L,0x0000000000200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9054 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9058 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9060 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9073 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9097 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_unambiguousType9108 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9117 = new BitSet(new long[]{0x0000010000000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9120 = new BitSet(new long[]{0x0000010000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9124 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9126 = new BitSet(new long[]{0x0000010000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9146 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9148 = new BitSet(new long[]{0x0000000000000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9160 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9164 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9166 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_unambiguousType9186 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_unambiguousType9199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9207 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9216 = new BitSet(new long[]{0x0000010001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9219 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9223 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9225 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9246 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9248 = new BitSet(new long[]{0x0000000001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9259 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9263 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9265 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_COMMA_in_unambiguousType9295 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9306 = new BitSet(new long[]{0x0000010001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9309 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9313 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9315 = new BitSet(new long[]{0x0000010001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_unambiguousType9340 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_qualifiedType_in_unambiguousType9342 = new BitSet(new long[]{0x0000000001000000L,0x0010000020200008L});
    public static final BitSet FOLLOW_OPTIONAL_in_unambiguousType9356 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_LBRACKET_in_unambiguousType9360 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9362 = new BitSet(new long[]{0x0000000001000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_unambiguousType9393 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_unambiguousType9406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directiveStatement_in_statement9427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_controlStatement_in_statement9443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionOrSpecificationStatement_in_statement9459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionOrSpecificationStatement9497 = new BitSet(new long[]{0x0000000021000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_expressionOrSpecificationStatement9533 = new BitSet(new long[]{0x0000000001000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_expressionOrSpecificationStatement9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_expressionOrSpecificationStatement9608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_directiveStatement9657 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_directiveStatement9674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnDirective_in_directive9703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwDirective_in_directive9719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakDirective_in_directive9735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueDirective_in_directive9751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnDirective9780 = new BitSet(new long[]{0x0142800B00408002L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_returnDirective9807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throwDirective9847 = new BitSet(new long[]{0x0100800B00408002L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_throwDirective9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakDirective9914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continueDirective9943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_typeSpecifier9982 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_SPECIFY_in_typeSpecifier10011 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_typeSpecifier10048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_typeDefault10088 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_typeDefault10105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_specifier10134 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_specifier10150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_lazySpecifier10179 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_lazySpecifier10195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_functionSpecifier10234 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_SPECIFY_in_functionSpecifier10262 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_functionSpecifier10288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonstringLiteral_in_base10354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_base10370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaLiteral_in_base10386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_in_base10402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_base10418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamicObject_in_base10434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectExpression_in_base10450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selfReference_in_base10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_base10482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseReference_in_base10498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberReference_in_baseReference10540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeReference_in_baseReference10556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_in_primary10591 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_qualifiedReference_in_primary10624 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_indexOrIndexRange_in_primary10642 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_parameters_in_primary10668 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_positionalArguments_in_primary10688 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_namedArguments_in_primary10709 = new BitSet(new long[]{0x0000000000000002L,0x000040400000050CL});
    public static final BitSet FOLLOW_LPAREN_in_specifierParametersStart10743 = new BitSet(new long[]{0x0202000804801080L,0x200108200011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RPAREN_in_specifierParametersStart10759 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_SPECIFY_in_specifierParametersStart10762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPUTE_in_specifierParametersStart10764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifierParametersStart_in_specifierParametersStart10766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_specifierParametersStart10782 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_specifierParametersStart10784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberSelectionOperator_in_qualifiedReference10811 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberReference_in_qualifiedReference10839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeReference_in_qualifiedReference10859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEMBER_OP_in_memberSelectionOperator10926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAFE_MEMBER_OP_in_memberSelectionOperator10942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPREAD_OP_in_memberSelectionOperator10958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_enumeration10987 = new BitSet(new long[]{0x0143800B04408000L,0x227500012618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_enumeration11015 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_enumeration11042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tuple11071 = new BitSet(new long[]{0x0143800B04408000L,0x227500022618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_tuple11098 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tuple11125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_dynamicObject11167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACKET_in_dynamicObject11169 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgument_in_dynamicObject11220 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_anonymousArgument_in_dynamicObject11254 = new BitSet(new long[]{0x0143800B04408000L,0x227508022618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_sequencedArgument_in_dynamicObject11292 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_dynamicObject11319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionExpression_in_valueCaseList11362 = new BitSet(new long[]{0x0000000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_valueCaseList11404 = new BitSet(new long[]{0x0100800B01408002L,0xA23500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_UNION_OP_in_valueCaseList11431 = new BitSet(new long[]{0x0100800B01408002L,0xA23500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_intersectionExpression_in_valueCaseList11477 = new BitSet(new long[]{0x0000000001000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_memberName_in_memberReference11542 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_memberReference11582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_typeReference11622 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_typeReference11663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArgumentsStart11702 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArgumentsStart11716 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000001L});
    public static final BitSet FOLLOW_set_in_typeArgumentsStart11724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArgumentsStart11744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeArgumentsStart11759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_indexOrIndexRange11807 = new BitSet(new long[]{0x0100804B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_ELLIPSIS_in_indexOrIndexRange11835 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11857 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11887 = new BitSet(new long[]{0x0000004000000000L,0x0000020280000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_indexOrIndexRange11921 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RANGE_OP_in_indexOrIndexRange11956 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange11983 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_indexOrIndexRange12008 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_indexOrIndexRange12034 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_indexOrIndexRange12074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_index12103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_namedArguments12133 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgument_in_namedArguments12185 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_anonymousArgument_in_namedArguments12219 = new BitSet(new long[]{0x0143800B04408000L,0x227508012618813CL,0x000000000000000EL});
    public static final BitSet FOLLOW_sequencedArgument_in_namedArguments12257 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_namedArguments12284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_sequencedArgument12313 = new BitSet(new long[]{0x0143800B00408000L,0x227500002618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehension_in_sequencedArgument12369 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_positionalArgument_in_sequencedArgument12406 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_spreadArgument_in_sequencedArgument12442 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_sequencedArgument12488 = new BitSet(new long[]{0x0143800B01408002L,0x227500002618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehension_in_sequencedArgument12554 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_positionalArgument_in_sequencedArgument12597 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_spreadArgument_in_sequencedArgument12640 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_namedArgument12725 = new BitSet(new long[]{0x0002000800000000L,0x200008000010002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_namedSpecifiedArgument_in_namedArgument12742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentDeclaration_in_namedArgument12764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_namedSpecifiedArgument12805 = new BitSet(new long[]{0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_specifier_in_namedSpecifiedArgument12831 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_namedSpecifiedArgument12867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_anonymousArgument12905 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_anonymousArgument12931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_objectArgument12960 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_objectArgument12977 = new BitSet(new long[]{0x0000080000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_extendedType_in_objectArgument13004 = new BitSet(new long[]{0x0000000000000000L,0x0000048000000004L});
    public static final BitSet FOLLOW_satisfiedTypes_in_objectArgument13043 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000004L});
    public static final BitSet FOLLOW_classBody_in_objectArgument13081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_objectArgument13111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_voidOrInferredMethodArgument13168 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_voidOrInferredMethodArgument13196 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_voidOrInferredMethodArgument13223 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_parameters_in_voidOrInferredMethodArgument13250 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_block_in_voidOrInferredMethodArgument13287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_voidOrInferredMethodArgument13328 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidOrInferredMethodArgument13371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_inferredGetterArgument13428 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_inferredGetterArgument13445 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000004L});
    public static final BitSet FOLLOW_block_in_inferredGetterArgument13472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_inferredGetterArgument13513 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_inferredGetterArgument13549 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_inferredGetterArgument13593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typedMethodOrGetterArgument13661 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_DYNAMIC_in_typedMethodOrGetterArgument13690 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000020L});
    public static final BitSet FOLLOW_memberNameDeclaration_in_typedMethodOrGetterArgument13716 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_parameters_in_typedMethodOrGetterArgument13764 = new BitSet(new long[]{0x0000000020000000L,0x0000240000000104L});
    public static final BitSet FOLLOW_block_in_typedMethodOrGetterArgument13811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSpecifier_in_typedMethodOrGetterArgument13860 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument13913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_typedMethodOrGetterArgument13979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_in_typedMethodOrGetterArgument14028 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_typedMethodOrGetterArgument14070 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedMethodOrGetterArgument14124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_untypedMethodOrGetterArgument14196 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_untypedMethodOrGetterArgument14245 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_functionSpecifier_in_untypedMethodOrGetterArgument14290 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lazySpecifier_in_untypedMethodOrGetterArgument14368 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_untypedMethodOrGetterArgument14414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectArgument_in_namedArgumentDeclaration14451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedMethodOrGetterArgument_in_namedArgumentDeclaration14467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidOrInferredMethodArgument_in_namedArgumentDeclaration14483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredGetterArgument_in_namedArgumentDeclaration14499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_untypedMethodOrGetterArgument_in_namedArgumentDeclaration14515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_namedArgumentStart14543 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_specificationStart_in_namedArgumentStart14553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_namedArgumentStart14557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_namedAnnotationArgumentsStart14575 = new BitSet(new long[]{0x0302800B04C09080L,0x223508010619812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_namedArgumentStart_in_namedAnnotationArgumentsStart14582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterableArgumentStart_in_namedAnnotationArgumentsStart14586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACE_in_namedAnnotationArgumentsStart14590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_iterableArgumentStart14608 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_iterableArgumentStart14610 = new BitSet(new long[]{0x0000000001000000L,0x0000040100000000L});
    public static final BitSet FOLLOW_set_in_iterableArgumentStart14612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_specificationStart14636 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_parameters_in_specificationStart14638 = new BitSet(new long[]{0x0000000020000000L,0x0000200000000100L});
    public static final BitSet FOLLOW_set_in_specificationStart14641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parExpression14667 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_parExpression14684 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parExpression14700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_positionalArguments14737 = new BitSet(new long[]{0x0143800B04408000L,0x227500202618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_sequencedArgument_in_positionalArguments14766 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_positionalArguments14793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_positionalArgument14830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_spreadArgument14859 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_unionExpression_in_spreadArgument14875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_anonParametersStart14900 = new BitSet(new long[]{0x0202000804801080L,0x200108200011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_RPAREN_in_anonParametersStart14916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_anonParametersStart14924 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_anonParametersStart14927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_anonParametersStart14931 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_anonParametersStart14933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_anonParametersStart14947 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_anonParametersStart14949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_nonemptyParametersStart14973 = new BitSet(new long[]{0x0202000804801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_compilerAnnotations_in_nonemptyParametersStart14975 = new BitSet(new long[]{0x0202000800801080L,0x200108000011002CL,0x000000000000000EL});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_nonemptyParametersStart14977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousFunction_in_functionOrExpression15014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_functionOrExpression15030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchExpression_in_functionOrExpression15046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_functionOrExpression15064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letClause_in_let15093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_patternStart15126 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_patternStart15128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_patternStart15139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_letVariable15176 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_variable_in_letVariable15204 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_letVariable15240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause15280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_letClause15296 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_letVariable_in_letClause15324 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_letClause15356 = new BitSet(new long[]{0x0002000004000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_letVariable_in_letClause15382 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_letClause15422 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_letClause15438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpression_in_conditionalExpression15467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_in_conditionalExpression15483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchHeader_in_switchExpression15512 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_caseExpressions_in_switchExpression15528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_caseExpressions15575 = new BitSet(new long[]{0x0000008000080002L});
    public static final BitSet FOLLOW_defaultCaseExpression_in_caseExpressions15612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_CLAUSE_in_caseExpression15656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_caseItemList_in_caseExpression15673 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_caseExpression15689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_defaultCaseExpression15718 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_defaultCaseExpression15735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifExpression15764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_thenElseClauses_in_ifExpression15780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalBranch15809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_disjunctionExpression_in_conditionalBranch15825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditions_in_thenElseClauses15854 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_THEN_CLAUSE_in_thenElseClauses15870 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_thenElseClauses15888 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_thenElseClauses15904 = new BitSet(new long[]{0x0140800B00408000L,0x223500000618813CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conditionalBranch_in_thenElseClauses15922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_anonymousFunction15970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_anonymousFunction15998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_anonymousFunction16027 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_parameters_in_anonymousFunction16056 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_COMPUTE_in_anonymousFunction16094 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_anonymousFunction16115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymousFunction16143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forComprehensionClause_in_comprehension16191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifComprehensionClause_in_comprehension16207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forComprehensionClause_in_comprehensionClause16236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifComprehensionClause_in_comprehensionClause16271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionComprehensionClause_in_comprehensionClause16288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_expressionComprehensionClause16318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_forComprehensionClause16355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_forIterator_in_forComprehensionClause16371 = new BitSet(new long[]{0x0143800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehensionClause_in_forComprehensionClause16387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifComprehensionClause16420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_ifComprehensionClause16436 = new BitSet(new long[]{0x0143800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_comprehensionClause_in_ifComprehensionClause16452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_thenElseExpression_in_assignmentExpression16496 = new BitSet(new long[]{0x0800000410000222L,0x0008200800801000L,0x0000000000000001L});
    public static final BitSet FOLLOW_assignmentOperator_in_assignmentExpression16522 = new BitSet(new long[]{0x0142800B00408000L,0x227500000618813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_functionOrExpression_in_assignmentExpression16545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPECIFY_in_assignmentOperator16585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SPECIFY_in_assignmentOperator16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTRACT_SPECIFY_in_assignmentOperator16605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLY_SPECIFY_in_assignmentOperator16615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_SPECIFY_in_assignmentOperator16625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMAINDER_SPECIFY_in_assignmentOperator16635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERSECT_SPECIFY_in_assignmentOperator16645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_SPECIFY_in_assignmentOperator16655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_SPECIFY_in_assignmentOperator16665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_SPECIFY_in_assignmentOperator16675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_SPECIFY_in_assignmentOperator16685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_disjunctionExpression_in_thenElseExpression16710 = new BitSet(new long[]{0x0000008000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_thenElseOperator_in_thenElseExpression16736 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_disjunctionExpression_in_thenElseExpression16758 = new BitSet(new long[]{0x0000008000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_thenElseOperator16798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_CLAUSE_in_thenElseOperator16815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunctionExpression_in_disjunctionExpression16846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_disjunctionOperator_in_disjunctionExpression16872 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_conjunctionExpression_in_disjunctionExpression16895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_OR_OP_in_disjunctionOperator16935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_conjunctionExpression16967 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_conjunctionOperator_in_conjunctionExpression16993 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_conjunctionExpression17016 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_AND_OP_in_conjunctionOperator17056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notOperator_in_logicalNegationExpression17086 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_logicalNegationExpression_in_logicalNegationExpression17105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_logicalNegationExpression17121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_notOperator17150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparisonExpression_in_equalityExpression17182 = new BitSet(new long[]{0x0020020000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_equalityOperator_in_equalityExpression17208 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_comparisonExpression_in_equalityExpression17231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_OP_in_equalityOperator17271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_OP_in_equalityOperator17288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTICAL_OP_in_equalityOperator17304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17335 = new BitSet(new long[]{0x3000080002100002L,0x0000188000000003L});
    public static final BitSet FOLLOW_comparisonOperator_in_comparisonExpression17363 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_largerOperator_in_comparisonExpression17408 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_smallerOperator_in_comparisonExpression17453 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17476 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_smallerOperator_in_comparisonExpression17511 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_existenceEmptinessExpression_in_comparisonExpression17525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeOperator_in_comparisonExpression17560 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_comparisonExpression17582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALL_AS_OP_in_smallerOperator17628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_smallerOperator17644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGE_AS_OP_in_largerOperator17673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LARGER_OP_in_largerOperator17689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPARE_OP_in_comparisonOperator17718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_comparisonOperator17735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_typeOperator17764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_typeOperator17780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_typeOperator17796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_TYPES_in_typeOperator17812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entryRangeExpression_in_existenceEmptinessExpression17843 = new BitSet(new long[]{0x0000040000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_existsNonemptyOperator_in_existenceEmptinessExpression17871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsNonemptyOperator17917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NONEMPTY_in_existsNonemptyOperator17934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_entryRangeExpression17965 = new BitSet(new long[]{0x0000010000000002L,0x0000020080000000L});
    public static final BitSet FOLLOW_rangeIntervalEntryOperator_in_entryRangeExpression17991 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_additiveExpression_in_entryRangeExpression18014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANGE_OP_in_rangeIntervalEntryOperator18054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_rangeIntervalEntryOperator18071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTRY_OP_in_rangeIntervalEntryOperator18087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scaleExpression_in_additiveExpression18118 = new BitSet(new long[]{0x0000000200000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_additiveOperator_in_additiveExpression18144 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_scaleExpression_in_additiveExpression18167 = new BitSet(new long[]{0x0000000200000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_SUM_OP_in_additiveOperator18207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIFFERENCE_OP_in_additiveOperator18224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_scaleExpression18253 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_scaleOperator_in_scaleExpression18279 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_scaleExpression_in_scaleExpression18301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionExpression_in_multiplicativeExpression18343 = new BitSet(new long[]{0x0000000000000002L,0x0000000460000000L});
    public static final BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression18369 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_unionExpression_in_multiplicativeExpression18392 = new BitSet(new long[]{0x0000000000000002L,0x0000000460000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_multiplicativeOperator18432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTIENT_OP_in_multiplicativeOperator18449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMAINDER_OP_in_multiplicativeOperator18465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionExpression_in_unionExpression18496 = new BitSet(new long[]{0x0000000008000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_unionOperator_in_unionExpression18522 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_intersectionExpression_in_unionExpression18545 = new BitSet(new long[]{0x0000000008000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_unionOperator18589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_OP_in_unionOperator18605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_negationComplementExpression_in_intersectionExpression18636 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_intersectionOperator_in_intersectionExpression18662 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_negationComplementExpression_in_intersectionExpression18685 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_intersectionOperator18729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryMinusOrComplementOperator_in_negationComplementExpression18758 = new BitSet(new long[]{0x0100800B00408000L,0x223500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_negationComplementExpression_in_negationComplementExpression18777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exponentiationExpression_in_negationComplementExpression18793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIFFERENCE_OP_in_unaryMinusOrComplementOperator18822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_OP_in_unaryMinusOrComplementOperator18839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incrementDecrementExpression_in_exponentiationExpression18868 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_exponentiationOperator_in_exponentiationExpression18894 = new BitSet(new long[]{0x0100800900408000L,0x222500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_exponentiationExpression_in_exponentiationExpression18916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POWER_OP_in_exponentiationOperator18956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCALE_OP_in_scaleOperator18986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixOperator_in_incrementDecrementExpression19016 = new BitSet(new long[]{0x0100800900408000L,0x222500000610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_incrementDecrementExpression_in_incrementDecrementExpression19034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixIncrementDecrementExpression_in_incrementDecrementExpression19050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECREMENT_OP_in_prefixOperator19079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCREMENT_OP_in_prefixOperator19096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_postfixIncrementDecrementExpression19126 = new BitSet(new long[]{0x0100000100000002L});
    public static final BitSet FOLLOW_postfixOperator_in_postfixIncrementDecrementExpression19154 = new BitSet(new long[]{0x0100000100000002L});
    public static final BitSet FOLLOW_DECREMENT_OP_in_postfixOperator19194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCREMENT_OP_in_postfixOperator19211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_selfReference19241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_selfReference19257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_selfReference19274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_selfReference19290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATURAL_LITERAL_in_nonstringLiteral19323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_LITERAL_in_nonstringLiteral19340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_nonstringLiteral19357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringLiteral19387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VERBATIM_STRING_in_stringLiteral19404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_stringExpression19444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_START_in_stringExpression19460 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_stringExpression19478 = new BitSet(new long[]{0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_STRING_MID_in_stringExpression19504 = new BitSet(new long[]{0x0100800B00408000L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_stringExpression19526 = new BitSet(new long[]{0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_STRING_END_in_stringExpression19553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_typeArguments19591 = new BitSet(new long[]{0x1000000000000000L,0x200008000100000DL});
    public static final BitSet FOLLOW_variance_in_typeArguments19631 = new BitSet(new long[]{0x0000000001000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArguments19671 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_in_typeArguments19722 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments19768 = new BitSet(new long[]{0x1000000001000000L,0x200008000100000DL});
    public static final BitSet FOLLOW_variance_in_typeArguments19808 = new BitSet(new long[]{0x0000000001000000L,0x200008000000000DL});
    public static final BitSet FOLLOW_type_in_typeArguments19854 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_in_typeArguments19945 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_typeArguments20031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_variadicType20079 = new BitSet(new long[]{0x0000000000000002L,0x0010000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_variadicType20105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_OP_in_variadicType20133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variadicType20162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_defaultedType20208 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_defaultedType20234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variadicType_in_defaultedType20261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_spreadType20299 = new BitSet(new long[]{0x0000000000000002L,0x200008000000000CL});
    public static final BitSet FOLLOW_unionType_in_spreadType20327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_tupleType20367 = new BitSet(new long[]{0x0000000000000000L,0x200008022000000CL});
    public static final BitSet FOLLOW_spreadType_in_tupleType20395 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_defaultedType_in_tupleType20425 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_tupleType20459 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_defaultedType_in_tupleType20485 = new BitSet(new long[]{0x0000000001000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_tupleType20525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_OP_in_groupedType20554 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_groupedType20572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LARGER_OP_in_groupedType20588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_iterableType20616 = new BitSet(new long[]{0x0000000000000000L,0x200008010000000CL});
    public static final BitSet FOLLOW_variadicType_in_iterableType20641 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RBRACE_in_iterableType20665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type20703 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_ENTRY_OP_in_type20729 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_unionType_in_type20763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectionType_in_unionType20828 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNION_OP_in_unionType20869 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_intersectionType_in_unionType20909 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_abbreviatedType_in_intersectionType20999 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_INTERSECTION_OP_in_intersectionType21040 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_abbreviatedType_in_intersectionType21080 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_qualifiedType_in_qualifiedOrTupleType21159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tupleType_in_qualifiedOrTupleType21176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterableType_in_qualifiedOrTupleType21193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedOrTupleType_in_abbreviatedType21234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_OPTIONAL_in_abbreviatedType21260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_LBRACKET_in_abbreviatedType21281 = new BitSet(new long[]{0x0000000000000000L,0x0000000200008000L});
    public static final BitSet FOLLOW_NATURAL_LITERAL_in_abbreviatedType21313 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RBRACKET_in_abbreviatedType21347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_LPAREN_in_abbreviatedType21368 = new BitSet(new long[]{0x0000000000000000L,0x200008202000000CL});
    public static final BitSet FOLLOW_spreadType_in_abbreviatedType21406 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_defaultedType_in_abbreviatedType21448 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_abbreviatedType21492 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_defaultedType_in_abbreviatedType21526 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_abbreviatedType21580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200108L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_baseType21629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupedType_in_baseType21651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseType_in_qualifiedType21680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_qualifiedType21706 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeNameWithArguments_in_qualifiedType21719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeName_in_typeNameWithArguments21759 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_typeNameWithArguments21786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_annotations21850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotation_in_annotations21889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotationName_in_annotation21930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000104L});
    public static final BitSet FOLLOW_positionalArguments_in_annotation21953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArguments_in_annotation21982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotation_in_compilerAnnotations22086 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_compilerAnnotation22126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotationName_in_compilerAnnotation22143 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_SEGMENT_OP_in_compilerAnnotation22173 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_stringLiteral_in_compilerAnnotation22185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_conditions22227 = new BitSet(new long[]{0x2142840B00408000L,0x227500A0061A813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_condition_in_conditions22253 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_conditions22273 = new BitSet(new long[]{0x2142840B01408000L,0x227500A0061A813CL,0x000000000000000CL});
    public static final BitSet FOLLOW_condition_in_conditions22308 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_conditions22370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsCondition_in_condition22399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonemptyCondition_in_condition22415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_isCondition_in_condition22431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_satisfiesCondition_in_condition22448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanCondition_in_condition22464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionOrExpression_in_booleanCondition22505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_existsCondition22548 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EXISTS_in_existsCondition22575 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_letVariable_in_existsCondition22633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_existsCondition22667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_existsCondition22687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_nonemptyCondition22740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_NONEMPTY_in_nonemptyCondition22767 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_letVariable_in_nonemptyCondition22825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_nonemptyCondition22859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_nonemptyCondition22880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OP_in_isCondition22929 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IS_OP_in_isCondition22956 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_isCondition22973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_isConditionVariable_in_isCondition23017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_impliedVariable_in_isCondition23045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_isConditionVariable23094 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_isConditionVariable23110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiesCondition23139 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_satisfiesCondition23156 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeName_in_satisfiesCondition23173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifElse_in_controlStatement23202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseElse_in_controlStatement23219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileLoop_in_controlStatement23236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forElse_in_controlStatement23253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryCatchFinally_in_controlStatement23270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_in_controlStatement23286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_controlBlock23324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_dynamic23390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_dynamic23407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifBlock_in_ifElse23444 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_elseBlock_in_ifElse23472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_ifBlock23512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_ifBlock23529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_ifBlock23545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_elseBlock23574 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_elseIf_in_elseBlock23601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_elseBlock23631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifElse_in_elseIf23670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchHeader_in_switchCaseElse23707 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_cases_in_switchCaseElse23724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_CLAUSE_in_switchHeader23753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_switchHeader23770 = new BitSet(new long[]{0x0102800B04408000L,0x223508200618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_switched_in_switchHeader23789 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_switchHeader23817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifiedVariable_in_switched23868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_switched23888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseBlock_in_cases23945 = new BitSet(new long[]{0x0000008000080002L});
    public static final BitSet FOLLOW_defaultCaseBlock_in_cases23982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_CLAUSE_in_caseBlock24026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_caseItemList_in_caseBlock24043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_caseBlock24059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_defaultCaseBlock24088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_defaultCaseBlock24105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_caseItemList24134 = new BitSet(new long[]{0x2100800B00408000L,0x223500A00610812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_caseItem_in_caseItemList24155 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_caseItemList24182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_isCaseCondition_in_caseItem24216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_satisfiesCaseCondition_in_caseItem24237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchCaseCondition_in_caseItem24253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valueCaseList_in_matchCaseCondition24282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_isCaseCondition24311 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_isCaseCondition24328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_satisfiesCaseCondition24357 = new BitSet(new long[]{0x0000000000000000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_satisfiesCaseCondition24374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forBlock_in_forElse24411 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_failBlock_in_forElse24438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_forBlock24478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_forIterator_in_forBlock24495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_forBlock24512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_CLAUSE_in_failBlock24541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_failBlock24558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_forIterator24596 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_forIterator24633 = new BitSet(new long[]{0x1000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variable_in_forIterator24661 = new BitSet(new long[]{0x1000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_containment_in_forIterator24697 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forIterator24729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_OP_in_containment24760 = new BitSet(new long[]{0x0100800B00408002L,0x223500000618812CL,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_containment24778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileBlock_in_whileLoop24821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_CLAUSE_in_whileBlock24850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_whileBlock24866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_whileBlock24882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryBlock_in_tryCatchFinally24919 = new BitSet(new long[]{0x0000400000200002L});
    public static final BitSet FOLLOW_catchBlock_in_tryCatchFinally24946 = new BitSet(new long[]{0x0000400000200002L});
    public static final BitSet FOLLOW_finallyBlock_in_tryCatchFinally24985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_CLAUSE_in_tryBlock25025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_resources_in_tryBlock25052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_tryBlock25072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_tryBlock25100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_CLAUSE_in_catchBlock25139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_catchVariable_in_catchBlock25156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_catchBlock25172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_catchVariable25201 = new BitSet(new long[]{0x0002000004000000L,0x200008200000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_in_catchVariable25226 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchVariable25252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_CLAUSE_in_finallyBlock25283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_controlBlock_in_finallyBlock25300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_resources25329 = new BitSet(new long[]{0x0102800B04408000L,0x223508200618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_resource_in_resources25352 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_resources25380 = new BitSet(new long[]{0x0102800B04408000L,0x223508000618812CL,0x000000000000000EL});
    public static final BitSet FOLLOW_resource_in_resources25403 = new BitSet(new long[]{0x0000000001000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_resources25435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifiedVariable_in_resource25492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource25512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_specifiedVariable25553 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_specifier_in_specifiedVariable25580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_variable25620 = new BitSet(new long[]{0x0002000000000000L,0x200008000000002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_var_in_variable25628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_var25677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_var25698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_var25718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_var25738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_var25766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_var25796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_memberName_in_var25840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_var25873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameters_in_var25902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_memberName_in_impliedVariable25948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKTICK_in_metaLiteral25990 = new BitSet(new long[]{0x0202000000800080L,0x300008000411082CL,0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_metaLiteral26012 = new BitSet(new long[]{0x0000000000008000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_metaLiteral26040 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_PACKAGE_in_metaLiteral26073 = new BitSet(new long[]{0x0000000000008000L,0x2000000000000020L});
    public static final BitSet FOLLOW_packagePath_in_metaLiteral26101 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CLASS_DEFINITION_in_metaLiteral26134 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26162 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26192 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_NEW_in_metaLiteral26225 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26253 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_metaLiteral26286 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26314 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ALIAS_in_metaLiteral26347 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26375 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_TYPE_CONSTRAINT_in_metaLiteral26408 = new BitSet(new long[]{0x0000000000008000L,0x200008000000000CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26436 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_VALUE_MODIFIER_in_metaLiteral26479 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_OBJECT_DEFINITION_in_metaLiteral26507 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral26627 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26666 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral26711 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_metaLiteral26757 = new BitSet(new long[]{0x0000000000008000L,0x200008000000002CL});
    public static final BitSet FOLLOW_type_in_metaLiteral26797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral26867 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral26906 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral26951 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_abbreviatedType_in_metaLiteral27021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27057 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27085 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_groupedType_in_metaLiteral27143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27179 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27207 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_metaLiteral27282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27300 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27328 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_type_in_metaLiteral27364 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_memberName_in_metaLiteral27389 = new BitSet(new long[]{0x0000000000008000L,0x0000080000000000L});
    public static final BitSet FOLLOW_typeArguments_in_metaLiteral27417 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BACKTICK_in_metaLiteral27452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedModuleDescriptorStart_in_synpred1_Ceylon164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedPackageDescriptorStart_in_synpred2_Ceylon207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred3_Ceylon2741 = new BitSet(new long[]{0x0202000800801080L,0x200008000011000CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred3_Ceylon2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_synpred4_Ceylon2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred5_Ceylon2881 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred5_Ceylon2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_synpred6_Ceylon2919 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred6_Ceylon2921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePatternStart_in_synpred7_Ceylon2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred8_Ceylon3029 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred8_Ceylon3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuplePattern_in_synpred9_Ceylon3067 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred9_Ceylon3069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred10_Ceylon3358 = new BitSet(new long[]{0x0000000000000000L,0x200008002000000CL});
    public static final BitSet FOLLOW_unionType_in_synpred10_Ceylon3360 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PRODUCT_OP_in_synpred10_Ceylon3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructureStart_in_synpred11_Ceylon8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedDeclarationStart_in_synpred12_Ceylon8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedAssertionStart_in_synpred13_Ceylon8517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationListStart_in_synpred14_Ceylon8543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_DEFINITION_in_synpred15_Ceylon8668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_synpred15_Ceylon8670 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_UIDENTIFIER_in_synpred15_Ceylon8672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unambiguousType_in_synpred16_Ceylon8847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifierParametersStart_in_synpred17_Ceylon10664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred19_Ceylon11206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousArgument_in_synpred20_Ceylon11241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArgumentsStart_in_synpred21_Ceylon11569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArgumentsStart_in_synpred22_Ceylon11650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred23_Ceylon12171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousArgument_in_synpred24_Ceylon12206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_synpred25_Ceylon12344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred25_Ceylon12348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred25_Ceylon12350 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred25_Ceylon12352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_CLAUSE_in_synpred26_Ceylon12527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred26_Ceylon12531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred26_Ceylon12533 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred26_Ceylon12535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedArgumentStart_in_synpred27_Ceylon14579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_MODIFIER_in_synpred28_Ceylon14999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_MODIFIER_in_synpred28_Ceylon15001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonParametersStart_in_synpred28_Ceylon15003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_synpred29_Ceylon15119 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENTRY_OP_in_synpred29_Ceylon15121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred30_Ceylon15171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_CLAUSE_in_synpred31_Ceylon16254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_conditions_in_synpred31_Ceylon16256 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_synpred31_Ceylon16258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_synpred32_Ceylon20061 = new BitSet(new long[]{0x0000000000000000L,0x0010000020000000L});
    public static final BitSet FOLLOW_set_in_synpred32_Ceylon20063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred33_Ceylon20192 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_synpred33_Ceylon20195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedAnnotationArgumentsStart_in_synpred34_Ceylon21970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred35_Ceylon22605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred36_Ceylon22610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred36_Ceylon22614 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred36_Ceylon22617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred36_Ceylon22619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred37_Ceylon22663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred38_Ceylon22797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred39_Ceylon22802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilerAnnotations_in_synpred39_Ceylon22806 = new BitSet(new long[]{0x0202000800801080L,0x200008000011002CL,0x000000000000000AL});
    public static final BitSet FOLLOW_declarationStart_in_synpred39_Ceylon22809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred39_Ceylon22811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred40_Ceylon22855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIDENTIFIER_in_synpred41_Ceylon23000 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_SPECIFY_in_synpred41_Ceylon23002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_synpred42_Ceylon23318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_synpred43_Ceylon23850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_synpred43_Ceylon23852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred43_Ceylon23854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_OP_in_synpred44_Ceylon24213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_synpred45_Ceylon24234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternStart_in_synpred46_Ceylon24628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPILER_ANNOTATION_in_synpred47_Ceylon25474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStart_in_synpred47_Ceylon25476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specificationStart_in_synpred47_Ceylon25478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbreviatedType_in_synpred48_Ceylon26998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred48_Ceylon27000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupedType_in_synpred49_Ceylon27120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred49_Ceylon27122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberName_in_synpred50_Ceylon27241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MEMBER_OP_in_synpred50_Ceylon27243 = new BitSet(new long[]{0x0000000000000002L});

}