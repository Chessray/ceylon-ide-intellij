/* The following code was generated by JFlex 1.4.3 on 3/20/14 11:18 AM */

package org.intellij.plugins.ceylon.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.intellij.plugins.ceylon.psi.CeylonTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/20/14 11:18 AM from the specification file
 * <tt>/Users/matic/Projects/ceylon/ceylon-ide-intellij/src/org/intellij/plugins/ceylon/parser/Ceylon.flex</tt>
 */
class CeylonFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_IMPORT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1\1\6\1\41"+
    "\1\5\1\0\1\75\1\73\1\35\1\63\1\64\1\7\1\24\1\70"+
    "\1\25\1\20\1\4\12\14\1\62\1\67\1\76\1\10\1\11\1\71"+
    "\1\100\4\13\1\22\1\13\1\27\1\13\1\17\3\13\1\27\2\13"+
    "\1\27\3\13\1\27\6\13\1\65\1\15\1\66\1\77\1\21\1\42"+
    "\1\43\1\45\1\52\1\40\1\23\1\34\1\53\1\54\1\16\1\61"+
    "\1\26\1\46\1\30\1\32\1\55\1\33\1\12\1\50\1\44\1\51"+
    "\1\31\1\57\1\60\1\56\1\47\1\12\1\36\1\74\1\37\1\72"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\10\1\13\1\10"+
    "\1\14\1\15\4\10\1\1\1\16\1\17\1\10\1\20"+
    "\1\21\12\10\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\12\2\0\1\12\1\53\2\0"+
    "\1\10\1\54\1\55\1\56\1\57\2\10\1\60\1\61"+
    "\1\62\1\63\1\64\6\10\2\0\1\65\1\10\3\20"+
    "\17\10\1\66\4\10\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\2\41\1\42\1\77\1\12\1\53"+
    "\1\0\2\10\1\100\10\10\1\101\1\65\1\0\1\10"+
    "\2\20\1\102\10\10\1\103\10\10\1\104\4\10\1\105"+
    "\1\106\1\107\1\42\1\12\1\53\2\0\2\10\1\110"+
    "\7\10\1\65\1\10\1\102\11\10\1\111\1\112\1\10"+
    "\1\113\7\10\1\114\1\10\2\53\1\0\1\12\12\10"+
    "\1\102\4\10\1\115\1\116\2\10\1\117\1\10\1\120"+
    "\1\121\1\122\1\10\1\123\1\124\1\10\1\125\1\126"+
    "\1\53\1\0\1\53\1\0\1\127\1\10\1\130\1\10"+
    "\1\131\5\10\1\102\1\132\1\10\1\133\2\10\1\134"+
    "\1\135\1\10\1\136\2\53\1\0\1\10\1\137\1\10"+
    "\1\140\1\141\1\10\1\142\1\102\4\10\2\53\1\0"+
    "\1\10\1\143\1\144\1\102\1\145\2\10\1\146\2\53"+
    "\1\147\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\101"+
    "\0\101\0\u0596\0\u05d7\0\101\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\101\0\101\0\u0a28\0\u0a69\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0aaa\0\101\0\101\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\101\0\101\0\u0208\0\u0249\0\u0bae\0\u0bef"+
    "\0\u0208\0\u0208\0\u0c30\0\u0c71\0\u0cb2\0\101\0\101\0\101"+
    "\0\101\0\101\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0555\0\u0e79\0\101\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u0208\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\101\0\101\0\101\0\u1491\0\101"+
    "\0\u14d2\0\101\0\u1513\0\101\0\u1554\0\u1595\0\101\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\101\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u0208\0\u0555\0\u1923"+
    "\0\u1964\0\101\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u0208\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\101\0\101\0\101\0\101\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u0208\0\u2102\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\u2247\0\u2288\0\u1923\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u0208\0\u0208\0\u2594\0\u0208\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u0208\0\u279c\0\u27dd\0\u281e\0\u285f"+
    "\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f"+
    "\0\u0208\0\u0208\0\u2cb0\0\u2cf1\0\u0208\0\u2d32\0\u0208\0\u0208"+
    "\0\u0208\0\u2d73\0\u0208\0\u0208\0\u2db4\0\u0208\0\u0208\0\u2df5"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u0208\0\u2ef9\0\u0208\0\u2f3a\0\u0208"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u0208\0\u3101"+
    "\0\u0208\0\u3142\0\u3183\0\u0208\0\u0208\0\u31c4\0\u0208\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u0208\0\u3309\0\u0208\0\u0208\0\u334a"+
    "\0\u0208\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u3552\0\u3593\0\u0208\0\u0208\0\101\0\u0208\0\u35d4\0\u3615"+
    "\0\u0208\0\u3656\0\u3697\0\u0208\0\u0208\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\1\12"+
    "\1\13\1\20\1\21\1\22\1\12\1\13\1\23\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\12\1\40\1\41\1\42"+
    "\1\43\1\12\1\44\1\12\1\45\1\46\1\12\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\105\0\1\66"+
    "\2\0\1\67\1\70\76\0\1\66\102\0\1\71\77\0"+
    "\1\72\1\73\7\0\1\74\70\0\1\75\1\76\77\0"+
    "\1\77\102\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\17\12\31\0\3\13\1\0"+
    "\2\13\1\0\3\13\2\0\7\13\3\0\1\13\2\0"+
    "\17\13\33\0\1\100\3\0\1\101\1\102\4\0\2\103"+
    "\5\104\62\0\1\105\1\106\73\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\2\12\1\107\1\12\1\110\1\12"+
    "\1\111\3\0\1\12\2\0\1\12\1\112\15\12\37\0"+
    "\1\113\72\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\3\12\1\114\7\12\1\115"+
    "\3\12\27\0\1\116\13\0\1\117\64\0\1\120\1\121"+
    "\13\0\1\122\65\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\12\12\1\123\4\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\12\12\1\124\4\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\1\125\16\12\31\0\3\12\1\0\1\126\1\12"+
    "\1\0\3\12\2\0\3\12\1\127\3\12\3\0\1\12"+
    "\2\0\12\12\1\130\4\12\17\0\15\131\1\132\17\131"+
    "\1\133\43\131\12\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\4\12\1\134\12\12"+
    "\17\0\15\135\1\136\23\135\1\137\37\135\12\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\1\12\1\140\1\141\1\142\13\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\3\12\1\143\3\12"+
    "\3\0\1\12\2\0\1\144\14\12\1\145\1\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\5\12\1\146\11\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\147\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\5\12\1\150\3\12"+
    "\1\151\5\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\152\2\12\1\153"+
    "\6\12\1\154\4\12\31\0\3\12\1\0\1\155\1\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\17\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\3\12"+
    "\1\156\2\12\1\157\3\0\1\12\2\0\2\12\1\160"+
    "\14\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\1\161\11\12\1\162\4\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\11\12\1\163\5\12\37\0\1\164"+
    "\70\0\1\165\100\0\1\166\62\0\1\167\15\0\1\170"+
    "\63\0\1\171\14\0\1\172\100\0\1\173\70\0\2\66"+
    "\1\174\1\175\75\66\7\67\1\176\71\67\10\0\1\177"+
    "\104\0\1\200\3\0\1\101\1\102\4\0\2\103\5\104"+
    "\60\0\1\201\100\0\1\202\76\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\5\12\1\203\1\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\6\12\1\204\10\12"+
    "\37\0\1\205\72\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\12\1\206\15\12"+
    "\31\0\3\12\1\0\1\207\1\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\6\12\1\210\10\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\211\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\4\12\1\212\2\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\7\12\1\213\7\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\4\12\1\214"+
    "\2\12\3\0\1\12\2\0\17\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\4\12\1\215\2\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\5\12\1\216"+
    "\11\12\17\0\15\131\1\132\17\131\1\217\1\220\42\131"+
    "\12\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\221\2\12\3\0\1\12\2\0\17\12\17\0\15\135"+
    "\1\136\23\135\1\222\54\135\1\136\20\135\1\223\42\135"+
    "\41\0\1\224\51\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\12\1\225\15\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\1\12\1\226\15\12\31\0\3\12"+
    "\1\0\1\227\1\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\5\12\1\230\1\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\6\12\1\231\10\12\31\0"+
    "\3\12\1\0\1\232\1\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\233\2\0\7\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\6\12\1\234\10\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\4\12\1\235\12\12\31\0\3\12\1\0"+
    "\1\236\1\12\1\0\2\12\1\237\2\0\7\12\3\0"+
    "\1\12\2\0\5\12\1\240\11\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\1\12\1\241\4\12\1\242\10\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\1\243\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\4\12\1\244\2\12\3\0\1\12\2\0\17\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\14\12\1\245\2\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\6\12\1\246\10\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\16\12"+
    "\1\247\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\3\12\1\250\13\12\31\0"+
    "\3\12\1\0\1\251\1\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\1\252"+
    "\1\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\17\12\27\0\1\253\100\0\1\254\101\0\1\255\71\0"+
    "\1\174\76\0\4\67\1\256\2\67\1\176\71\67\14\0"+
    "\1\257\3\0\1\101\1\102\4\0\2\103\5\104\60\0"+
    "\1\260\5\0\2\261\2\0\7\104\60\0\1\262\76\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\12\12\1\263\4\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\264\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\265\2\0\7\12\3\0\1\12\2\0\17\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\1\12\1\266\15\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\267\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\3\12\1\270\3\12\3\0\1\12\2\0\17\12"+
    "\31\0\3\12\1\0\2\12\1\0\2\12\1\271\2\0"+
    "\7\12\3\0\1\12\2\0\17\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\1\272\6\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\273\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\7\12\1\274\7\12\17\0\35\220\1\275"+
    "\1\220\1\131\41\220\12\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\1\276\16\12"+
    "\17\0\37\223\1\135\41\223\41\224\1\277\37\224\12\0"+
    "\3\12\1\0\1\300\1\12\1\0\2\12\1\301\2\0"+
    "\7\12\3\0\1\12\2\0\17\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\6\12\1\302\10\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\1\303\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\2\12\1\304\2\0"+
    "\7\12\3\0\1\12\2\0\17\12\31\0\3\12\1\0"+
    "\1\305\1\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\6\12\1\306\10\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\1\307\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\3\12\1\310\3\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\1\12\1\311"+
    "\15\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\4\12\1\312\2\12\3\0\1\12\2\0\17\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\12\12\1\313\4\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\314\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\7\12\1\315\7\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\1\12\1\316\15\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\6\12\1\317\10\12\31\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\320\2\0\7\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\2\12\1\321"+
    "\2\0\7\12\3\0\1\12\2\0\17\12\31\0\3\12"+
    "\1\0\2\12\1\0\2\12\1\322\2\0\7\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\3\12\1\323\3\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\324\2\0\17\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\3\12\1\325\13\12\33\0\1\257\3\0\1\101\5\0"+
    "\2\103\5\104\60\0\1\326\5\0\2\261\2\0\7\104"+
    "\60\0\1\327\7\0\2\330\67\0\1\331\76\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\5\12\1\332\11\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\5\12"+
    "\1\333\11\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\6\12\1\334\10\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\335\2\12\3\0\1\12\2\0\17\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\3\12\1\336\13\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\2\12\1\337\4\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\340\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\3\12\1\341\13\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\6\12\1\342\10\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\2\12\1\343\4\12\3\0\1\12\2\0"+
    "\17\12\17\0\41\224\1\344\37\224\12\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\10\12\1\345\6\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\2\12\1\346\4\12\3\0\1\12\2\0"+
    "\5\12\1\347\11\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\5\12\1\350"+
    "\11\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\1\12\1\351\15\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\5\12\1\352\11\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\1\12\1\353\15\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\7\12\1\354"+
    "\7\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\1\355\6\12\3\0\1\12\2\0\17\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\5\12\1\356\11\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\15\12"+
    "\1\357\1\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\11\12\1\360\5\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\1\12\1\361\15\12\31\0\3\12"+
    "\1\0\1\362\1\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\4\12\1\363\2\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\5\12\1\364\11\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\7\12\1\365\7\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\366\2\0\7\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\367\2\0\7\12\3\0\1\12\2\0\17\12\33\0"+
    "\1\370\4\0\1\371\2\261\2\0\7\104\60\0\1\372"+
    "\4\0\1\373\73\0\1\327\104\0\1\101\1\102\4\0"+
    "\2\103\5\104\56\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\6\12\1\374\10\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\6\12"+
    "\1\375\3\0\1\12\2\0\17\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\1\12\1\376\15\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\377\2\0\17\12\31\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\u0100\2\0\7\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\5\12\1\u0101\1\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\10\12\1\u0102\6\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\3\12\1\u0103\13\12\31\0\3\12"+
    "\1\0\1\u0104\1\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\17\12\31\0\3\12\1\0\1\u0105\1\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\17\12"+
    "\17\0\41\224\1\u0106\37\224\12\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\4\12\1\u0107\2\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\2\12\1\u0108\14\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\6\12\1\u0109\10\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\1\u010a\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\6\12\1\u010b\3\0\1\12\2\0\17\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\11\12\1\u010c\5\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\4\12\1\u010d\2\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\4\12\1\u010e\2\12\3\0\1\12"+
    "\2\0\17\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\6\12\1\u010f\10\12"+
    "\33\0\1\370\5\0\2\261\2\0\7\104\60\0\1\u0110"+
    "\100\0\1\u0111\4\0\1\373\73\0\1\u0112\76\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\1\u0113\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\1\12\1\u0114"+
    "\15\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\6\12\1\u0115\10\12\31\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\u0116\2\0\7\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\4\12"+
    "\1\u0117\12\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\12\12\1\u0118\4\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\7\12\1\u0119\7\12\60\0\1\u011a"+
    "\51\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\3\0\1\12\2\0\3\12\1\u011b\13\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\3\0\1\12"+
    "\2\0\7\12\1\u011c\7\12\31\0\3\12\1\0\1\u011d"+
    "\1\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\17\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\3\12\1\u011e\3\12\3\0\1\12\2\0\17\12\33\0"+
    "\1\u011f\5\0\2\261\2\0\7\104\60\0\1\u0120\4\0"+
    "\1\373\73\0\1\u0121\76\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\3\0\1\12\2\0\7\12\1\u0122"+
    "\7\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\3\0\1\12\2\0\4\12\1\u0123\12\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\4\12\1\u0124"+
    "\2\12\3\0\1\12\2\0\17\12\60\0\1\u0125\51\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\3\0"+
    "\1\12\2\0\4\12\1\u0126\12\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\3\0\1\12\2\0"+
    "\6\12\1\u0127\10\12\31\0\3\12\1\0\2\12\1\0"+
    "\2\12\1\u0128\2\0\7\12\3\0\1\12\2\0\17\12"+
    "\31\0\3\12\1\0\2\12\1\0\2\12\1\u0129\2\0"+
    "\7\12\3\0\1\12\2\0\17\12\33\0\1\u012a\5\0"+
    "\2\261\2\0\7\104\60\0\1\u0120\100\0\1\u012b\76\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\u012c\2\0\7\12"+
    "\3\0\1\12\2\0\17\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\3\0\1\12\2\0\1\12"+
    "\1\u012d\15\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\3\0\1\12\2\0\1\12\1\u012e\15\12"+
    "\40\0\1\371\2\261\2\0\7\104\65\0\1\373\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\24\1\2\11\2\1\1\11\12\1\7\11"+
    "\6\1\2\11\2\1\5\11\1\1\2\11\1\1\2\0"+
    "\2\11\2\0\7\1\5\11\6\1\2\0\1\11\30\1"+
    "\3\11\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\0\2\1\1\11\12\1\1\0\1\1"+
    "\1\11\30\1\4\11\2\1\2\0\45\1\1\0\40\1"+
    "\1\0\1\1\1\0\26\1\1\0\16\1\1\0\3\1"+
    "\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CeylonFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CeylonFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { return CeylonTokens.INCREMENT_OP;
          }
        case 106: break;
        case 30: 
          { return CeylonTokens.SMALLER_OP;
          }
        case 107: break;
        case 39: 
          { return CeylonTokens.SPREAD_OP ;
          }
        case 108: break;
        case 50: 
          { return CeylonTokens.SUBTRACT_SPECIFY;
          }
        case 109: break;
        case 42: 
          { return CeylonTokens.LARGE_AS_OP;
          }
        case 110: break;
        case 16: 
          { return CeylonTokens.STRING_LITERAL;
          }
        case 111: break;
        case 41: 
          { return CeylonTokens.COMPUTE;
          }
        case 112: break;
        case 33: 
          { return CeylonTokens.LINE_COMMENT;
          }
        case 113: break;
        case 85: 
          { return CeylonTokens.VALUE_MODIFIER;
          }
        case 114: break;
        case 75: 
          { return CeylonTokens.CASE_CLAUSE;
          }
        case 115: break;
        case 4: 
          { return CeylonTokens.NOT_OP;
          }
        case 116: break;
        case 65: 
          { return CeylonTokens.FOR_CLAUSE;
          }
        case 117: break;
        case 77: 
          { return CeylonTokens.ALIAS;
          }
        case 118: break;
        case 13: 
          { return CeylonTokens.DIFFERENCE_OP;
          }
        case 119: break;
        case 8: 
          { return CeylonTokens.LIDENTIFIER;
          }
        case 120: break;
        case 45: 
          { return CeylonTokens.IF_CLAUSE;
          }
        case 121: break;
        case 15: 
          { return CeylonTokens.RBRACE;
          }
        case 122: break;
        case 98: 
          { return CeylonTokens.DYNAMIC;
          }
        case 123: break;
        case 17: 
          { return CeylonTokens.BACKTICK ;
          }
        case 124: break;
        case 38: 
          { return CeylonTokens.MULTIPLY_SPECIFY;
          }
        case 125: break;
        case 14: 
          { return CeylonTokens.LBRACE;
          }
        case 126: break;
        case 90: 
          { return CeylonTokens.ASSIGN;
          }
        case 127: break;
        case 26: 
          { return CeylonTokens.COMPLEMENT_OP;
          }
        case 128: break;
        case 63: 
          { return CeylonTokens.IDENTICAL_OP;
          }
        case 129: break;
        case 27: 
          { return CeylonTokens.INTERSECTION_OP;
          }
        case 130: break;
        case 83: 
          { return CeylonTokens.TYPE_CONSTRAINT;
          }
        case 131: break;
        case 58: 
          { return CeylonTokens.AND_OP;
          }
        case 132: break;
        case 9: 
          { return CeylonTokens.UIDENTIFIER;
          }
        case 133: break;
        case 31: 
          { return CeylonTokens.POWER_OP;
          }
        case 134: break;
        case 87: 
          { return CeylonTokens.IMPORT;
          }
        case 135: break;
        case 88: 
          { return CeylonTokens.EXISTS;
          }
        case 136: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 137: break;
        case 18: 
          { return CeylonTokens.SEGMENT_OP;
          }
        case 138: break;
        case 22: 
          { return CeylonTokens.RBRACKET;
          }
        case 139: break;
        case 79: 
          { return CeylonTokens.BREAK;
          }
        case 140: break;
        case 76: 
          { return CeylonTokens.VOID_MODIFIER;
          }
        case 141: break;
        case 91: 
          { return CeylonTokens.ASSERT ;
          }
        case 142: break;
        case 34: 
          { return CeylonTokens.MULTI_COMMENT;
          }
        case 143: break;
        case 100: 
          { return CeylonTokens.FUNCTION_MODIFIER;
          }
        case 144: break;
        case 36: 
          { return CeylonTokens.NOT_EQUAL_OP;
          }
        case 145: break;
        case 20: 
          { return CeylonTokens.RPAREN;
          }
        case 146: break;
        case 104: 
          { return CeylonTokens.ABSTRACTED_TYPE;
          }
        case 147: break;
        case 92: 
          { return CeylonTokens.SWITCH_CLAUSE;
          }
        case 148: break;
        case 69: 
          { return CeylonTokens.AND_SPECIFY;
          }
        case 149: break;
        case 78: 
          { return CeylonTokens.SUPER;
          }
        case 150: break;
        case 55: 
          { return CeylonTokens.SAFE_MEMBER_OP;
          }
        case 151: break;
        case 59: 
          { return CeylonTokens.UNION_SPECIFY;
          }
        case 152: break;
        case 6: 
          { return CeylonTokens.SPECIFY;
          }
        case 153: break;
        case 12: 
          { return CeylonTokens.SUM_OP;
          }
        case 154: break;
        case 24: 
          { return CeylonTokens.COMMA;
          }
        case 155: break;
        case 67: 
          { return CeylonTokens.TRY_CLAUSE;
          }
        case 156: break;
        case 21: 
          { return CeylonTokens.LBRACKET;
          }
        case 157: break;
        case 19: 
          { return CeylonTokens.LPAREN;
          }
        case 158: break;
        case 11: 
          { return CeylonTokens.MEMBER_OP ;
          }
        case 159: break;
        case 95: 
          { return CeylonTokens.EXTENDS;
          }
        case 160: break;
        case 48: 
          { return CeylonTokens.ADD_SPECIFY;
          }
        case 161: break;
        case 54: 
          { return CeylonTokens.CASE_TYPES;
          }
        case 162: break;
        case 68: 
          { return CeylonTokens.OUT;
          }
        case 163: break;
        case 10: 
          { return CeylonTokens.NATURAL_LITERAL;
          }
        case 164: break;
        case 101: 
          { return CeylonTokens.ASSEMBLY ;
          }
        case 165: break;
        case 73: 
          { return CeylonTokens.THIS;
          }
        case 166: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 167: break;
        case 25: 
          { return CeylonTokens.OPTIONAL ;
          }
        case 168: break;
        case 35: 
          { return CeylonTokens.DIVIDE_SPECIFY;
          }
        case 169: break;
        case 37: 
          { return CeylonTokens.SCALE_OP ;
          }
        case 170: break;
        case 44: 
          { return CeylonTokens.IN_OP;
          }
        case 171: break;
        case 82: 
          { return CeylonTokens.CLASS_DEFINITION;
          }
        case 172: break;
        case 46: 
          { return CeylonTokens.IS_OP;
          }
        case 173: break;
        case 71: 
          { return CeylonTokens.COMPARE_OP;
          }
        case 174: break;
        case 52: 
          { return CeylonTokens.DECREMENT_OP;
          }
        case 175: break;
        case 56: 
          { return CeylonTokens.COMPLEMENT_SPECIFY;
          }
        case 176: break;
        case 74: 
          { return CeylonTokens.THEN_CLAUSE;
          }
        case 177: break;
        case 53: 
          { return CeylonTokens.CHAR_LITERAL;
          }
        case 178: break;
        case 93: 
          { return CeylonTokens.RETURN;
          }
        case 179: break;
        case 32: 
          { return CeylonTokens.COMPILER_ANNOTATION;
          }
        case 180: break;
        case 61: 
          { return CeylonTokens.REMAINDER_SPECIFY;
          }
        case 181: break;
        case 70: 
          { return CeylonTokens.OR_SPECIFY;
          }
        case 182: break;
        case 60: 
          { return CeylonTokens.OR_OP;
          }
        case 183: break;
        case 51: 
          { return CeylonTokens.ENTRY_OP;
          }
        case 184: break;
        case 43: 
          { return CeylonTokens.FLOAT_LITERAL;
          }
        case 185: break;
        case 57: 
          { return CeylonTokens.INTERSECT_SPECIFY;
          }
        case 186: break;
        case 99: 
          { return CeylonTokens.NONEMPTY;
          }
        case 187: break;
        case 96: 
          { return CeylonTokens.PACKAGE;
          }
        case 188: break;
        case 28: 
          { return CeylonTokens.UNION_OP;
          }
        case 189: break;
        case 89: 
          { return CeylonTokens.MODULE;
          }
        case 190: break;
        case 94: 
          { return CeylonTokens.OBJECT_DEFINITION;
          }
        case 191: break;
        case 105: 
          { return CeylonTokens.SATISFIES;
          }
        case 192: break;
        case 102: 
          { return CeylonTokens.CONTINUE;
          }
        case 193: break;
        case 72: 
          { return CeylonTokens.ELSE_CLAUSE;
          }
        case 194: break;
        case 40: 
          { return CeylonTokens.EQUAL_OP;
          }
        case 195: break;
        case 7: 
          { return CeylonTokens.LARGER_OP;
          }
        case 196: break;
        case 3: 
          { return CeylonTokens.QUOTIENT_OP;
          }
        case 197: break;
        case 84: 
          { return CeylonTokens.OUTER;
          }
        case 198: break;
        case 47: 
          { return CeylonTokens.RANGE_OP;
          }
        case 199: break;
        case 103: 
          { return CeylonTokens.INTERFACE_DEFINITION;
          }
        case 200: break;
        case 5: 
          { return CeylonTokens.PRODUCT_OP;
          }
        case 201: break;
        case 23: 
          { return CeylonTokens.SEMICOLON;
          }
        case 202: break;
        case 29: 
          { return CeylonTokens.REMAINDER_OP;
          }
        case 203: break;
        case 81: 
          { return CeylonTokens.CATCH_CLAUSE;
          }
        case 204: break;
        case 64: 
          { return CeylonTokens.ELLIPSIS;
          }
        case 205: break;
        case 80: 
          { return CeylonTokens.THROW;
          }
        case 206: break;
        case 86: 
          { return CeylonTokens.WHILE_CLAUSE;
          }
        case 207: break;
        case 66: 
          { return CeylonTokens.VERBATIM_STRING;
          }
        case 208: break;
        case 97: 
          { return CeylonTokens.FINALLY_CLAUSE;
          }
        case 209: break;
        case 62: 
          { return CeylonTokens.SMALL_AS_OP;
          }
        case 210: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
