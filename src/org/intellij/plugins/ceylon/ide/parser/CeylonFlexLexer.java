/* The following code was generated by JFlex 1.4.3 on 03/06/15 16:40 */

package org.intellij.plugins.ceylon.ide.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.intellij.plugins.ceylon.ide.psi.CeylonTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03/06/15 16:40 from the specification file
 * <tt>/Users/bastien/Dev/ceylon/ceylon-ide-intellij/src/org/intellij/plugins/ceylon/ide/parser/Ceylon.flex</tt>
 */
class CeylonFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MCOMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\30\1\0\1\26\1\27\22\0\1\26\1\32\1\21"+
    "\1\16\1\17\1\72\1\67\1\20\1\55\1\56\1\71\1\4\1\62"+
    "\1\5\1\15\1\31\2\102\10\100\1\54\1\61\1\73\1\63\1\64"+
    "\1\65\1\75\4\101\1\3\1\101\1\7\1\77\1\76\3\77\1\7"+
    "\2\77\1\7\3\77\1\7\6\77\1\57\1\23\1\60\1\74\1\1"+
    "\1\22\1\33\1\35\1\42\1\47\1\2\1\14\1\44\1\45\1\43"+
    "\1\53\1\6\1\36\1\10\1\12\1\46\1\13\1\77\1\40\1\34"+
    "\1\41\1\11\1\51\1\52\1\50\1\37\1\77\1\24\1\70\1\25"+
    "\1\66\101\0\uff3f\77\1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\4\2\1\5\4\1"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\14\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\3\37\2\2\1\40\1\41\1\42"+
    "\1\43\1\44\6\2\1\45\1\36\1\46\1\36\1\0"+
    "\1\47\2\0\1\50\4\0\1\51\1\52\1\53\16\2"+
    "\1\54\1\55\1\56\2\2\1\57\5\2\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\36\1\0\1\76\1\77"+
    "\10\2\1\100\1\101\2\46\1\0\1\50\1\102\1\103"+
    "\1\0\1\104\2\0\10\2\1\105\12\2\1\106\5\2"+
    "\1\107\1\110\1\111\1\112\1\36\1\113\7\2\1\47"+
    "\1\102\1\50\1\0\1\114\1\0\11\2\1\115\1\2"+
    "\1\116\1\117\12\2\1\120\1\2\1\36\7\2\1\102"+
    "\1\103\1\104\1\0\4\2\1\121\1\122\2\2\1\123"+
    "\1\2\1\124\1\125\1\126\3\2\1\127\1\130\2\2"+
    "\1\131\1\132\1\36\1\2\1\133\1\134\4\2\1\102"+
    "\1\114\1\2\1\135\1\136\2\2\1\137\1\140\1\2"+
    "\1\141\1\2\1\142\1\2\1\143\1\2\1\144\1\2"+
    "\1\145\1\102\5\2\1\146\1\147\1\150\1\102\1\151"+
    "\2\2\1\152\1\2\1\153\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\206\0\206\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\206\0\206\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\206\0\206\0\206\0\206\0\206"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u03aa\0\206\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\311\0\206\0\206\0\206\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\311\0\311\0\u14ad"+
    "\0\u14f0\0\311\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\206\0\206\0\206\0\206\0\206\0\u16c5\0\206\0\u1708"+
    "\0\206\0\206\0\206\0\206\0\u174b\0\206\0\u178e\0\206"+
    "\0\206\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\311\0\206\0\u19e9\0\206\0\u1a2c\0\206\0\u1a6f"+
    "\0\206\0\u1ab2\0\206\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\311\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\206\0\206"+
    "\0\206\0\206\0\u21c3\0\311\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u1a2c\0\u23db\0\u1ab2\0\u241e\0\206"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\311\0\u26ff\0\311\0\311\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\311\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u241e\0\u2461\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\311\0\311\0\u2dcd\0\u2e10\0\311\0\u2e53"+
    "\0\311\0\311\0\311\0\u2e96\0\u2ed9\0\u2f1c\0\311\0\311"+
    "\0\u2f5f\0\u2fa2\0\311\0\311\0\u2fe5\0\u3028\0\311\0\311"+
    "\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u2c7e\0\u31ba\0\311"+
    "\0\311\0\u31fd\0\u3240\0\311\0\311\0\u3283\0\311\0\u32c6"+
    "\0\311\0\u3309\0\311\0\u334c\0\311\0\u338f\0\311\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\311\0\311\0\311"+
    "\0\206\0\311\0\u3564\0\u35a7\0\311\0\u35ea\0\311\0\311"+
    "\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\2\4\1\10"+
    "\1\4\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\3\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\4\1\33\1\34\1\35\1\36"+
    "\1\37\1\4\1\40\1\41\1\4\1\42\1\43\1\4"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\2\4\1\66\1\4\1\66\31\67\1\70"+
    "\37\67\1\71\11\67\104\0\3\4\2\0\7\4\16\0"+
    "\21\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\3\4\1\72\11\4\1\73\3\4\22\0\5\4\4\0"+
    "\1\74\56\0\1\75\24\0\1\76\55\0\1\77\1\100"+
    "\17\0\3\4\2\0\7\4\16\0\13\4\1\101\5\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\13\4"+
    "\1\102\5\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\1\103\20\4\22\0\5\4\1\0\3\4\2\0"+
    "\3\4\1\104\3\4\16\0\10\4\1\105\2\4\1\106"+
    "\5\4\22\0\5\4\15\0\1\107\67\0\2\110\10\0"+
    "\1\110\15\0\1\111\1\110\1\0\1\110\4\0\1\110"+
    "\4\0\1\110\30\0\3\110\102\0\1\112\20\113\1\114"+
    "\2\113\1\115\57\113\21\116\1\117\1\120\1\121\57\116"+
    "\22\0\1\122\123\0\1\123\32\0\1\123\32\0\3\25"+
    "\103\0\1\111\31\0\1\124\5\0\1\125\74\0\1\126"+
    "\20\0\3\4\2\0\7\4\16\0\1\4\1\127\1\130"+
    "\1\131\15\4\22\0\5\4\1\0\3\4\2\0\3\4"+
    "\1\132\3\4\16\0\1\133\16\4\1\134\1\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\5\4\1\135"+
    "\13\4\22\0\5\4\1\0\1\4\1\136\1\4\2\0"+
    "\7\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\5\4\1\137\4\4\1\140\6\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\1\141\2\4"+
    "\1\142\7\4\1\143\5\4\22\0\5\4\1\0\3\4"+
    "\2\0\2\4\1\144\1\4\1\145\1\4\1\146\16\0"+
    "\1\4\1\147\17\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\10\4\1\150\10\4\22\0\5\4\1\0"+
    "\3\4\2\0\3\4\1\151\2\4\1\152\16\0\2\4"+
    "\1\153\16\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\4\4\1\154\14\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\1\155\12\4\1\156\5\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\12\4\1\157"+
    "\6\4\22\0\5\4\63\0\1\160\1\161\101\0\1\162"+
    "\34\0\1\163\150\0\1\164\102\0\1\165\3\0\1\166"+
    "\76\0\1\167\4\0\1\170\27\0\1\171\45\0\1\172"+
    "\5\0\1\173\74\0\1\174\102\0\1\175\20\0\1\66"+
    "\4\0\7\176\1\177\62\0\1\66\1\0\1\66\31\67"+
    "\1\0\37\67\1\0\42\67\1\70\37\67\1\200\42\67"+
    "\1\201\37\67\1\71\11\67\1\0\3\4\2\0\7\4"+
    "\16\0\1\4\1\202\17\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\6\4\1\203\1\4\1\204\10\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\14\4"+
    "\1\205\4\4\22\0\5\4\1\0\3\4\2\0\4\4"+
    "\1\206\2\4\16\0\21\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\7\4\1\207\11\4\22\0\5\4"+
    "\1\0\3\4\2\0\4\4\1\210\2\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\4\4\1\211\2\4"+
    "\16\0\21\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\5\4\1\212\13\4\22\0\5\4\15\0\1\213"+
    "\66\0\3\110\10\0\1\110\16\0\1\110\1\0\1\110"+
    "\4\0\1\110\4\0\1\110\30\0\3\110\27\111\1\214"+
    "\1\215\52\111\1\0\1\112\100\0\1\112\24\113\1\216"+
    "\56\113\21\116\1\217\1\120\1\121\57\116\21\0\1\220"+
    "\61\0\21\116\1\217\1\221\104\116\1\222\56\116\21\122"+
    "\1\223\1\224\1\225\57\122\1\0\3\4\2\0\7\4"+
    "\16\0\1\4\1\226\17\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\1\4\1\227\17\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\10\4\1\230\10\4"+
    "\22\0\5\4\1\0\3\4\2\0\5\4\1\231\1\4"+
    "\16\0\21\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\6\4\1\232\12\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\10\4\1\233\10\4\22\0\5\4"+
    "\1\0\1\4\1\234\1\4\2\0\7\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\6\4"+
    "\1\235\12\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\4\4\1\236\14\4\22\0\5\4\1\0\1\4"+
    "\1\237\1\4\2\0\7\4\16\0\5\4\1\240\2\4"+
    "\1\241\10\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\1\4\1\242\4\4\1\243\12\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\1\244\20\4\22\0"+
    "\5\4\1\0\3\4\2\0\4\4\1\245\2\4\16\0"+
    "\21\4\22\0\5\4\1\0\3\4\2\0\5\4\1\246"+
    "\1\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\6\4\1\247\12\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\16\4\1\250\2\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\6\4\1\251"+
    "\12\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\20\4\1\252\22\0\5\4\1\0\3\4\2\0\4\4"+
    "\1\253\2\4\16\0\21\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\3\4\1\254\15\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\10\4\1\255\10\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\10\4"+
    "\1\256\10\4\22\0\5\4\63\0\1\257\102\0\1\260"+
    "\102\0\1\261\103\0\1\262\116\0\1\263\1\0\1\263"+
    "\1\0\1\4\1\264\1\4\2\0\7\4\16\0\21\4"+
    "\22\0\5\4\1\0\1\4\1\265\1\4\2\0\7\4"+
    "\16\0\21\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\1\4\1\266\17\4\22\0\5\4\1\0\3\4"+
    "\2\0\3\4\1\267\3\4\16\0\21\4\22\0\5\4"+
    "\1\0\1\4\1\270\1\4\2\0\7\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\1\271\6\4\16\0"+
    "\21\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\7\4\1\272\11\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\1\273\20\4\22\0\5\4\30\0\1\215"+
    "\52\0\20\216\1\274\4\216\1\113\55\216\21\220\1\275"+
    "\61\220\21\222\1\276\1\277\2\222\1\116\55\222\21\122"+
    "\1\0\1\300\104\122\1\301\56\122\1\0\1\4\1\302"+
    "\1\4\2\0\7\4\16\0\10\4\1\303\10\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\6\4\1\304"+
    "\12\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\1\305\20\4\22\0\5\4\1\0\1\4\1\306\1\4"+
    "\2\0\7\4\16\0\21\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\10\4\1\307\10\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\6\4\1\310\12\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\1\311"+
    "\20\4\22\0\5\4\1\0\3\4\2\0\3\4\1\312"+
    "\3\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\4\4\1\313\2\4\16\0\21\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\13\4\1\314\5\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\1\4\1\315"+
    "\17\4\22\0\5\4\1\0\1\4\1\316\1\4\2\0"+
    "\7\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\7\4\1\317\11\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\1\4\1\320\17\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\6\4\1\321"+
    "\12\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\13\4\1\322\5\4\22\0\5\4\1\0\1\4\1\323"+
    "\1\4\2\0\7\4\16\0\21\4\22\0\5\4\1\0"+
    "\1\4\1\324\1\4\2\0\7\4\16\0\21\4\22\0"+
    "\5\4\1\0\1\4\1\325\1\4\2\0\7\4\16\0"+
    "\21\4\22\0\5\4\1\0\1\4\1\326\1\4\2\0"+
    "\7\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\1\327\20\4\22\0\5\4\1\0\3\4"+
    "\2\0\3\4\1\330\3\4\16\0\21\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\14\4\1\331\4\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\3\4"+
    "\1\332\15\4\22\0\5\4\1\0\1\263\2\333\2\0"+
    "\7\176\63\0\1\263\1\0\1\263\1\0\3\4\2\0"+
    "\4\4\1\334\2\4\16\0\21\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\6\4\1\335\12\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\3\4\1\336"+
    "\15\4\22\0\5\4\1\0\3\4\2\0\2\4\1\337"+
    "\4\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\1\340\20\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\6\4\1\341\12\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\3\4\1\342\15\4"+
    "\22\0\5\4\21\220\1\343\61\220\21\222\1\276\1\344"+
    "\2\222\1\116\55\222\21\301\1\345\1\346\2\301\1\122"+
    "\55\301\1\0\3\4\2\0\2\4\1\347\4\4\16\0"+
    "\5\4\1\350\13\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\11\4\1\351\7\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\5\4\1\352\13\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\1\4\1\353"+
    "\17\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\5\4\1\354\13\4\22\0\5\4\1\0\3\4\2\0"+
    "\7\4\16\0\1\4\1\355\17\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\7\4\1\356\11\4\22\0"+
    "\5\4\1\0\3\4\2\0\1\357\6\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\5\4"+
    "\1\360\13\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\17\4\1\361\1\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\12\4\1\362\6\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\1\4\1\363\17\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\10\4"+
    "\1\364\10\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\5\4\1\365\13\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\5\4\1\366\13\4\22\0\5\4"+
    "\1\0\3\4\2\0\4\4\1\367\2\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\5\4"+
    "\1\370\13\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\7\4\1\371\11\4\22\0\5\4\1\0\3\4"+
    "\2\0\2\4\1\372\4\4\16\0\21\4\22\0\5\4"+
    "\1\0\1\4\1\373\1\4\2\0\7\4\16\0\21\4"+
    "\22\0\5\4\1\0\1\4\1\374\1\4\2\0\7\4"+
    "\16\0\21\4\22\0\5\4\4\0\2\375\72\0\1\375"+
    "\1\0\1\375\1\0\3\4\2\0\7\4\16\0\14\4"+
    "\1\376\4\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\1\4\1\377\17\4\22\0\5\4\1\0\1\4"+
    "\1\u0100\1\4\2\0\7\4\16\0\21\4\22\0\5\4"+
    "\1\0\3\4\2\0\5\4\1\u0101\1\4\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\11\4"+
    "\1\u0102\7\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\10\4\1\u0103\10\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\3\4\1\u0104\15\4\22\0\5\4"+
    "\21\0\1\u0105\61\0\21\301\1\345\1\u0106\2\301\1\122"+
    "\55\301\1\0\3\4\2\0\7\4\16\0\2\4\1\u0107"+
    "\16\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\6\4\1\u0108\12\4\22\0\5\4\1\0\3\4\2\0"+
    "\4\4\1\u0109\2\4\16\0\21\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\1\u010a\20\4\22\0\5\4"+
    "\1\0\3\4\2\0\6\4\1\u010b\16\0\21\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\12\4\1\u010c"+
    "\6\4\22\0\5\4\1\0\3\4\2\0\4\4\1\u010d"+
    "\2\4\16\0\21\4\22\0\5\4\1\0\3\4\2\0"+
    "\4\4\1\u010e\2\4\16\0\21\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\6\4\1\u010f\12\4\22\0"+
    "\5\4\1\0\3\4\2\0\6\4\1\u0110\16\0\21\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\6\4"+
    "\1\u0111\12\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\10\4\1\u0112\10\4\22\0\5\4\100\0\1\375"+
    "\1\0\1\375\1\0\3\4\2\0\7\4\16\0\1\4"+
    "\1\u0113\17\4\22\0\5\4\1\0\3\4\2\0\7\4"+
    "\16\0\6\4\1\u0114\12\4\22\0\5\4\1\0\1\4"+
    "\1\u0115\1\4\2\0\7\4\16\0\21\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\13\4\1\u0116\5\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\4\4"+
    "\1\u0117\14\4\22\0\5\4\21\0\1\u0118\62\0\3\4"+
    "\2\0\7\4\16\0\3\4\1\u0119\15\4\22\0\5\4"+
    "\1\0\3\4\2\0\7\4\16\0\7\4\1\u011a\11\4"+
    "\22\0\5\4\1\0\3\4\2\0\7\4\16\0\10\4"+
    "\1\u011b\10\4\22\0\5\4\1\0\3\4\2\0\3\4"+
    "\1\u011c\3\4\16\0\21\4\22\0\5\4\1\0\3\4"+
    "\2\0\7\4\16\0\1\u011d\20\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\7\4\1\u011e\11\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\4\4\1\u011f"+
    "\14\4\22\0\5\4\1\0\3\4\2\0\4\4\1\u0120"+
    "\2\4\16\0\21\4\22\0\5\4\21\0\1\u0121\62\0"+
    "\3\4\2\0\7\4\16\0\4\4\1\u0122\14\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\6\4\1\u0123"+
    "\12\4\22\0\5\4\1\0\1\4\1\u0124\1\4\2\0"+
    "\7\4\16\0\21\4\22\0\5\4\1\0\1\4\1\u0125"+
    "\1\4\2\0\7\4\16\0\21\4\22\0\5\4\1\0"+
    "\3\4\2\0\7\4\16\0\7\4\1\u0126\11\4\22\0"+
    "\5\4\1\0\3\4\2\0\7\4\16\0\1\4\1\u0127"+
    "\17\4\22\0\5\4\1\0\3\4\2\0\7\4\16\0"+
    "\1\4\1\u0128\17\4\22\0\5\4\1\0\1\4\1\u0129"+
    "\1\4\2\0\7\4\16\0\21\4\22\0\5\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13869];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\17\1\2\11\17\1\7\11\11\1\2\11"+
    "\6\1\5\11\12\1\1\0\1\11\2\0\1\1\4\0"+
    "\3\11\32\1\5\11\1\1\1\11\1\1\4\11\1\1"+
    "\1\11\1\0\2\11\11\1\1\11\1\1\1\11\1\0"+
    "\1\11\1\1\1\11\1\0\1\11\2\0\31\1\4\11"+
    "\14\1\1\0\1\11\1\0\44\1\1\0\72\1\1\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int multiCommentLevel = 0;


  CeylonFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CeylonFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return CeylonTokens.INCREMENT_OP;
          }
        case 110: break;
        case 27: 
          { return CeylonTokens.SMALLER_OP;
          }
        case 111: break;
        case 35: 
          { return CeylonTokens.SUBTRACT_SPECIFY;
          }
        case 112: break;
        case 68: 
          { return CeylonTokens.STRING_END;
          }
        case 113: break;
        case 50: 
          { return CeylonTokens.LARGE_AS_OP;
          }
        case 114: break;
        case 40: 
          { return CeylonTokens.STRING_LITERAL;
          }
        case 115: break;
        case 49: 
          { return CeylonTokens.COMPUTE;
          }
        case 116: break;
        case 38: 
          { return CeylonTokens.LINE_COMMENT;
          }
        case 117: break;
        case 89: 
          { return CeylonTokens.VALUE_MODIFIER;
          }
        case 118: break;
        case 79: 
          { return CeylonTokens.CASE_CLAUSE;
          }
        case 119: break;
        case 11: 
          { return CeylonTokens.NOT_OP;
          }
        case 120: break;
        case 64: 
          { return CeylonTokens.FOR_CLAUSE;
          }
        case 121: break;
        case 81: 
          { return CeylonTokens.ALIAS;
          }
        case 122: break;
        case 57: 
          { return CeylonTokens.SPREAD_OP;
          }
        case 123: break;
        case 4: 
          { return CeylonTokens.DIFFERENCE_OP;
          }
        case 124: break;
        case 45: 
          { return CeylonTokens.IF_CLAUSE;
          }
        case 125: break;
        case 8: 
          { return CeylonTokens.RBRACE;
          }
        case 126: break;
        case 102: 
          { return CeylonTokens.DYNAMIC;
          }
        case 127: break;
        case 58: 
          { return CeylonTokens.MULTIPLY_SPECIFY;
          }
        case 128: break;
        case 7: 
          { return CeylonTokens.LBRACE;
          }
        case 129: break;
        case 94: 
          { return CeylonTokens.ASSIGN;
          }
        case 130: break;
        case 22: 
          { return CeylonTokens.COMPLEMENT_OP;
          }
        case 131: break;
        case 71: 
          { return CeylonTokens.IDENTICAL_OP;
          }
        case 132: break;
        case 23: 
          { return CeylonTokens.INTERSECTION_OP;
          }
        case 133: break;
        case 87: 
          { return CeylonTokens.TYPE_CONSTRAINT;
          }
        case 134: break;
        case 54: 
          { return CeylonTokens.AND_OP;
          }
        case 135: break;
        case 2: 
          { return CeylonTokens.UIDENTIFIER;
          }
        case 136: break;
        case 63: 
          { --multiCommentLevel;
                    if (multiCommentLevel <= 0) {
                        yybegin(YYINITIAL);
                    }
                    return CeylonTokens.MULTI_COMMENT;
          }
        case 137: break;
        case 28: 
          { return CeylonTokens.POWER_OP;
          }
        case 138: break;
        case 97: 
          { return CeylonTokens.IMPORT;
          }
        case 139: break;
        case 91: 
          { return CeylonTokens.EXISTS;
          }
        case 140: break;
        case 12: 
          { return CeylonTokens.SEGMENT_OP;
          }
        case 141: break;
        case 16: 
          { return CeylonTokens.RBRACKET;
          }
        case 142: break;
        case 83: 
          { return CeylonTokens.BREAK;
          }
        case 143: break;
        case 80: 
          { return CeylonTokens.VOID_MODIFIER;
          }
        case 144: break;
        case 31: 
          { return CeylonTokens.MULTI_COMMENT;
          }
        case 145: break;
        case 104: 
          { return CeylonTokens.FUNCTION_MODIFIER;
          }
        case 146: break;
        case 43: 
          { return CeylonTokens.NOT_EQUAL_OP;
          }
        case 147: break;
        case 14: 
          { return CeylonTokens.RPAREN;
          }
        case 148: break;
        case 76: 
          { return CeylonTokens.STRING_MID;
          }
        case 149: break;
        case 107: 
          { return CeylonTokens.ABSTRACTED_TYPE;
          }
        case 150: break;
        case 9: 
          { return CeylonTokens.WS;
          }
        case 151: break;
        case 95: 
          { return CeylonTokens.SWITCH_CLAUSE;
          }
        case 152: break;
        case 72: 
          { return CeylonTokens.AND_SPECIFY;
          }
        case 153: break;
        case 82: 
          { return CeylonTokens.SUPER;
          }
        case 154: break;
        case 51: 
          { return CeylonTokens.SAFE_MEMBER_OP;
          }
        case 155: break;
        case 55: 
          { return CeylonTokens.UNION_SPECIFY;
          }
        case 156: break;
        case 19: 
          { return CeylonTokens.SPECIFY;
          }
        case 157: break;
        case 3: 
          { return CeylonTokens.SUM_OP;
          }
        case 158: break;
        case 59: 
          { return CeylonTokens.SCALE_OP;
          }
        case 159: break;
        case 18: 
          { return CeylonTokens.COMMA;
          }
        case 160: break;
        case 69: 
          { return CeylonTokens.TRY_CLAUSE;
          }
        case 161: break;
        case 15: 
          { return CeylonTokens.LBRACKET;
          }
        case 162: break;
        case 13: 
          { return CeylonTokens.LPAREN;
          }
        case 163: break;
        case 99: 
          { return CeylonTokens.EXTENDS;
          }
        case 164: break;
        case 33: 
          { return CeylonTokens.ADD_SPECIFY;
          }
        case 165: break;
        case 47: 
          { return CeylonTokens.CASE_TYPES;
          }
        case 166: break;
        case 21: 
          { return CeylonTokens.OPTIONAL;
          }
        case 167: break;
        case 70: 
          { return CeylonTokens.OUT;
          }
        case 168: break;
        case 30: 
          { return CeylonTokens.NATURAL_LITERAL;
          }
        case 169: break;
        case 78: 
          { return CeylonTokens.THIS;
          }
        case 170: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 171: break;
        case 41: 
          { return CeylonTokens.DIVIDE_SPECIFY;
          }
        case 172: break;
        case 62: 
          { ++multiCommentLevel; return CeylonTokens.MULTI_COMMENT;
          }
        case 173: break;
        case 44: 
          { return CeylonTokens.IN_OP;
          }
        case 174: break;
        case 86: 
          { return CeylonTokens.CLASS_DEFINITION;
          }
        case 175: break;
        case 105: 
          { return CeylonTokens.ASSEMBLY;
          }
        case 176: break;
        case 46: 
          { return CeylonTokens.IS_OP;
          }
        case 177: break;
        case 74: 
          { return CeylonTokens.COMPARE_OP;
          }
        case 178: break;
        case 34: 
          { return CeylonTokens.DECREMENT_OP;
          }
        case 179: break;
        case 52: 
          { return CeylonTokens.COMPLEMENT_SPECIFY;
          }
        case 180: break;
        case 77: 
          { return CeylonTokens.THEN_CLAUSE;
          }
        case 181: break;
        case 39: 
          { return CeylonTokens.CHAR_LITERAL;
          }
        case 182: break;
        case 67: 
          { return CeylonTokens.STRING_START;
          }
        case 183: break;
        case 96: 
          { return CeylonTokens.RETURN;
          }
        case 184: break;
        case 29: 
          { return CeylonTokens.COMPILER_ANNOTATION;
          }
        case 185: break;
        case 60: 
          { return CeylonTokens.REMAINDER_SPECIFY;
          }
        case 186: break;
        case 93: 
          { return CeylonTokens.ASSERT;
          }
        case 187: break;
        case 73: 
          { return CeylonTokens.OR_SPECIFY;
          }
        case 188: break;
        case 42: 
          { yybegin(MCOMMENT); multiCommentLevel = 1; return CeylonTokens.MULTI_COMMENT;
          }
        case 189: break;
        case 56: 
          { return CeylonTokens.OR_OP;
          }
        case 190: break;
        case 36: 
          { return CeylonTokens.ENTRY_OP;
          }
        case 191: break;
        case 53: 
          { return CeylonTokens.INTERSECT_SPECIFY;
          }
        case 192: break;
        case 103: 
          { return CeylonTokens.NONEMPTY;
          }
        case 193: break;
        case 100: 
          { return CeylonTokens.PACKAGE;
          }
        case 194: break;
        case 24: 
          { return CeylonTokens.UNION_OP;
          }
        case 195: break;
        case 92: 
          { return CeylonTokens.MODULE;
          }
        case 196: break;
        case 98: 
          { return CeylonTokens.OBJECT_DEFINITION;
          }
        case 197: break;
        case 108: 
          { return CeylonTokens.SATISFIES;
          }
        case 198: break;
        case 106: 
          { return CeylonTokens.CONTINUE;
          }
        case 199: break;
        case 75: 
          { return CeylonTokens.ELSE_CLAUSE;
          }
        case 200: break;
        case 48: 
          { return CeylonTokens.EQUAL_OP;
          }
        case 201: break;
        case 20: 
          { return CeylonTokens.LARGER_OP;
          }
        case 202: break;
        case 5: 
          { return CeylonTokens.MEMBER_OP;
          }
        case 203: break;
        case 6: 
          { return CeylonTokens.BACKTICK;
          }
        case 204: break;
        case 10: 
          { return CeylonTokens.QUOTIENT_OP;
          }
        case 205: break;
        case 88: 
          { return CeylonTokens.OUTER;
          }
        case 206: break;
        case 37: 
          { return CeylonTokens.RANGE_OP;
          }
        case 207: break;
        case 109: 
          { return CeylonTokens.INTERFACE_DEFINITION;
          }
        case 208: break;
        case 25: 
          { return CeylonTokens.PRODUCT_OP;
          }
        case 209: break;
        case 17: 
          { return CeylonTokens.SEMICOLON;
          }
        case 210: break;
        case 26: 
          { return CeylonTokens.REMAINDER_OP;
          }
        case 211: break;
        case 85: 
          { return CeylonTokens.CATCH_CLAUSE;
          }
        case 212: break;
        case 65: 
          { return CeylonTokens.ELLIPSIS;
          }
        case 213: break;
        case 84: 
          { return CeylonTokens.THROW;
          }
        case 214: break;
        case 90: 
          { return CeylonTokens.WHILE_CLAUSE;
          }
        case 215: break;
        case 66: 
          { return CeylonTokens.VERBATIM_STRING;
          }
        case 216: break;
        case 101: 
          { return CeylonTokens.FINALLY_CLAUSE;
          }
        case 217: break;
        case 61: 
          { return CeylonTokens.SMALL_AS_OP;
          }
        case 218: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
