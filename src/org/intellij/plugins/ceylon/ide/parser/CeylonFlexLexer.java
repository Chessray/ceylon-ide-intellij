/* The following code was generated by JFlex 1.4.3 on 03/07/15 16:16 */

package org.intellij.plugins.ceylon.ide.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.intellij.plugins.ceylon.ide.psi.CeylonTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03/07/15 16:16 from the specification file
 * <tt>/Users/bastien/Dev/ceylon/ceylon-ide-intellij/src/org/intellij/plugins/ceylon/ide/parser/Ceylon.flex</tt>
 */
class CeylonFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MCOMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\30\1\0\1\26\1\27\22\0\1\26\1\32\1\21"+
    "\1\16\1\17\1\72\1\67\1\20\1\55\1\56\1\71\1\4\1\62"+
    "\1\5\1\15\1\31\2\104\10\102\1\54\1\61\1\73\1\63\1\64"+
    "\1\65\1\75\4\103\1\3\1\103\1\7\1\77\1\100\3\77\1\7"+
    "\2\77\1\7\3\77\1\7\6\77\1\57\1\23\1\60\1\74\1\1"+
    "\1\22\1\33\1\35\1\42\1\47\1\2\1\14\1\44\1\45\1\43"+
    "\1\53\1\6\1\36\1\10\1\12\1\46\1\13\1\76\1\40\1\34"+
    "\1\41\1\11\1\51\1\52\1\50\1\37\1\76\1\24\1\70\1\25"+
    "\1\66\101\0\uff3f\101\1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\5\2\1\6"+
    "\4\1\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\15\2\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\3\40\2\2\1\41\1\42"+
    "\1\43\1\44\1\45\7\2\1\46\1\37\1\47\1\37"+
    "\1\0\1\50\2\0\1\51\5\0\1\52\1\53\1\54"+
    "\17\2\1\55\1\56\1\57\2\2\1\60\5\2\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\37\1\0\1\77"+
    "\1\100\4\2\1\101\4\2\1\102\1\103\2\47\1\0"+
    "\1\51\1\104\1\105\1\0\1\106\2\0\7\2\1\107"+
    "\1\2\1\110\12\2\1\111\5\2\1\112\1\113\1\114"+
    "\1\115\1\37\1\116\7\2\1\50\1\104\1\51\1\0"+
    "\1\117\1\0\11\2\1\120\1\2\1\121\1\122\12\2"+
    "\1\123\1\2\1\37\7\2\1\104\1\105\1\106\1\0"+
    "\4\2\1\124\1\125\2\2\1\126\1\2\1\127\1\130"+
    "\1\131\3\2\1\132\1\133\2\2\1\134\1\135\1\37"+
    "\1\2\1\136\1\137\4\2\1\104\1\117\1\2\1\140"+
    "\1\141\2\2\1\142\1\143\1\2\1\144\1\2\1\145"+
    "\1\2\1\146\1\2\1\147\1\2\1\150\1\104\5\2"+
    "\1\151\1\152\1\153\1\104\1\154\2\2\1\155\1\2"+
    "\1\156\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\212\0\212\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\212\0\212"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\212\0\212"+
    "\0\212\0\212\0\212\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u0450\0\212"+
    "\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u0228\0\u0159"+
    "\0\212\0\212\0\212\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u0228\0\u0228\0\u16a4\0\u16e9\0\u0228"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\212\0\212"+
    "\0\212\0\212\0\212\0\u18cc\0\212\0\u1911\0\212\0\212"+
    "\0\212\0\212\0\u1956\0\212\0\u199b\0\212\0\212\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u0228\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u0228\0\212\0\u1c08\0\212\0\u1c4d\0\212\0\u1c92\0\212"+
    "\0\u1cd7\0\212\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u0228\0\u1f89\0\u0228\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\212\0\212"+
    "\0\212\0\212\0\u241e\0\u0228\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u1c4d\0\u2646\0\u1cd7\0\u268b\0\212"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u0228\0\u2982\0\u0228\0\u0228\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u0228\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17"+
    "\0\u2e5c\0\u2ea1\0\u2ee6\0\u268b\0\u26d0\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u0228\0\u0228\0\u3084\0\u30c9\0\u0228\0\u310e"+
    "\0\u0228\0\u0228\0\u0228\0\u3153\0\u3198\0\u31dd\0\u0228\0\u0228"+
    "\0\u3222\0\u3267\0\u0228\0\u0228\0\u32ac\0\u32f1\0\u0228\0\u0228"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u2f2b\0\u348f\0\u0228"+
    "\0\u0228\0\u34d4\0\u3519\0\u0228\0\u0228\0\u355e\0\u0228\0\u35a3"+
    "\0\u0228\0\u35e8\0\u0228\0\u362d\0\u0228\0\u3672\0\u0228\0\u36b7"+
    "\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u0228\0\u0228\0\u0228"+
    "\0\212\0\u0228\0\u3855\0\u389a\0\u0228\0\u38df\0\u0228\0\u0228"+
    "\0\u0228";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\6"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\11\1\36\1\37"+
    "\1\40\1\41\1\42\1\11\1\43\1\44\1\11\1\45"+
    "\1\46\1\11\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\11\2\6\1\3\1\71"+
    "\1\6\1\71\31\72\1\73\37\72\1\74\13\72\107\0"+
    "\1\11\1\6\2\0\1\11\1\6\5\11\16\0\21\11"+
    "\22\0\1\11\2\6\2\0\1\6\2\0\3\11\2\0"+
    "\7\11\16\0\3\11\1\75\11\11\1\76\3\11\22\0"+
    "\7\11\1\0\3\6\2\0\7\6\16\0\21\6\22\0"+
    "\7\6\4\0\1\77\56\0\1\100\26\0\1\101\55\0"+
    "\1\102\1\103\21\0\3\11\2\0\7\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\13\11"+
    "\1\104\5\11\22\0\7\11\1\0\1\11\1\105\1\11"+
    "\2\0\7\11\16\0\13\11\1\106\5\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\1\107\20\11\22\0"+
    "\7\11\1\0\3\11\2\0\3\11\1\110\3\11\16\0"+
    "\10\11\1\111\2\11\1\112\5\11\22\0\7\11\15\0"+
    "\1\113\71\0\2\114\10\0\1\114\15\0\1\115\1\114"+
    "\1\0\1\114\4\0\1\114\4\0\1\114\32\0\3\114"+
    "\104\0\1\116\20\117\1\120\2\117\1\121\61\117\21\122"+
    "\1\123\1\124\1\125\61\122\22\0\1\126\125\0\1\127"+
    "\34\0\1\130\32\0\3\27\105\0\1\115\31\0\1\131"+
    "\5\0\1\132\76\0\1\133\22\0\3\11\2\0\7\11"+
    "\16\0\1\11\1\134\1\135\1\136\15\11\22\0\7\11"+
    "\1\0\3\11\2\0\3\11\1\137\3\11\16\0\1\140"+
    "\16\11\1\141\1\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\5\11\1\142\13\11\22\0\7\11\1\0"+
    "\1\11\1\143\1\11\2\0\7\11\16\0\21\11\22\0"+
    "\7\11\1\0\1\11\1\144\1\11\2\0\7\11\16\0"+
    "\21\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\5\11\1\145\4\11\1\146\6\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\1\147\2\11\1\150\7\11"+
    "\1\151\5\11\22\0\7\11\1\0\3\11\2\0\2\11"+
    "\1\152\1\11\1\153\1\11\1\154\16\0\1\11\1\155"+
    "\17\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\10\11\1\156\10\11\22\0\7\11\1\0\3\11\2\0"+
    "\3\11\1\157\2\11\1\160\16\0\2\11\1\161\16\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\4\11"+
    "\1\162\14\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\1\163\12\11\1\164\5\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\12\11\1\165\6\11\22\0"+
    "\7\11\63\0\1\166\1\167\103\0\1\170\36\0\1\171"+
    "\152\0\1\172\104\0\1\173\3\0\1\174\100\0\1\175"+
    "\4\0\1\176\31\0\1\177\45\0\1\200\5\0\1\201"+
    "\76\0\1\202\104\0\1\203\22\0\1\71\4\0\7\204"+
    "\1\205\64\0\1\71\1\0\1\71\31\72\1\0\37\72"+
    "\1\0\44\72\1\73\37\72\1\206\44\72\1\207\37\72"+
    "\1\74\13\72\1\0\3\11\2\0\7\11\16\0\1\11"+
    "\1\210\17\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\6\11\1\211\1\11\1\212\10\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\14\11\1\213\4\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\17\11"+
    "\1\214\1\11\22\0\7\11\1\0\3\11\2\0\4\11"+
    "\1\215\2\11\16\0\21\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\7\11\1\216\11\11\22\0\7\11"+
    "\1\0\3\11\2\0\4\11\1\217\2\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\4\11\1\220\2\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\5\11\1\221\13\11\22\0\7\11\15\0\1\222"+
    "\70\0\3\114\10\0\1\114\16\0\1\114\1\0\1\114"+
    "\4\0\1\114\4\0\1\114\32\0\3\114\27\115\1\223"+
    "\1\224\54\115\1\0\1\116\102\0\1\116\24\117\1\225"+
    "\60\117\21\122\1\226\1\124\1\125\61\122\21\0\1\227"+
    "\63\0\21\122\1\226\1\230\106\122\1\231\60\122\21\126"+
    "\1\232\1\233\1\234\61\126\1\0\3\11\2\0\7\11"+
    "\16\0\1\11\1\235\17\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\1\11\1\236\17\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\10\11\1\237\10\11"+
    "\22\0\7\11\1\0\3\11\2\0\5\11\1\240\1\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\6\11\1\241\12\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\10\11\1\242\10\11\22\0\7\11"+
    "\1\0\1\11\1\243\1\11\2\0\7\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\6\11"+
    "\1\244\12\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\6\11\1\245\12\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\4\11\1\246\14\11\22\0\7\11"+
    "\1\0\1\11\1\247\1\11\2\0\7\11\16\0\5\11"+
    "\1\250\2\11\1\251\10\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\1\11\1\252\4\11\1\253\12\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\1\254"+
    "\20\11\22\0\7\11\1\0\3\11\2\0\4\11\1\255"+
    "\2\11\16\0\21\11\22\0\7\11\1\0\3\11\2\0"+
    "\5\11\1\256\1\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\6\11\1\257\12\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\16\11\1\260"+
    "\2\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\6\11\1\261\12\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\20\11\1\262\22\0\7\11\1\0\3\11"+
    "\2\0\4\11\1\263\2\11\16\0\21\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\3\11\1\264\15\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\10\11"+
    "\1\265\10\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\10\11\1\266\10\11\22\0\7\11\63\0\1\267"+
    "\104\0\1\270\104\0\1\271\105\0\1\272\122\0\1\273"+
    "\1\0\1\273\1\0\1\11\1\274\1\11\2\0\7\11"+
    "\16\0\21\11\22\0\7\11\1\0\1\11\1\275\1\11"+
    "\2\0\7\11\16\0\21\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\1\11\1\276\17\11\22\0\7\11"+
    "\1\0\3\11\2\0\3\11\1\277\3\11\16\0\21\11"+
    "\22\0\7\11\1\0\1\11\1\300\1\11\2\0\7\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\1\301"+
    "\6\11\16\0\21\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\7\11\1\302\11\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\1\303\20\11\22\0\7\11"+
    "\30\0\1\224\54\0\20\225\1\304\4\225\1\117\57\225"+
    "\21\227\1\305\63\227\21\231\1\306\1\307\2\231\1\122"+
    "\57\231\21\126\1\0\1\310\106\126\1\311\60\126\1\0"+
    "\1\11\1\312\1\11\2\0\7\11\16\0\10\11\1\313"+
    "\10\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\6\11\1\314\12\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\1\315\20\11\22\0\7\11\1\0\1\11"+
    "\1\316\1\11\2\0\7\11\16\0\21\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\10\11\1\317\10\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\6\11"+
    "\1\320\12\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\1\321\20\11\22\0\7\11\1\0\3\11\2\0"+
    "\3\11\1\322\3\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\4\11\1\323\2\11\16\0\21\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\13\11\1\324"+
    "\5\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\1\11\1\325\17\11\22\0\7\11\1\0\1\11\1\326"+
    "\1\11\2\0\7\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\7\11\1\327\11\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\1\11\1\330"+
    "\17\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\6\11\1\331\12\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\13\11\1\332\5\11\22\0\7\11\1\0"+
    "\1\11\1\333\1\11\2\0\7\11\16\0\21\11\22\0"+
    "\7\11\1\0\1\11\1\334\1\11\2\0\7\11\16\0"+
    "\21\11\22\0\7\11\1\0\1\11\1\335\1\11\2\0"+
    "\7\11\16\0\21\11\22\0\7\11\1\0\1\11\1\336"+
    "\1\11\2\0\7\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\1\337\20\11\22\0\7\11"+
    "\1\0\3\11\2\0\3\11\1\340\3\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\14\11"+
    "\1\341\4\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\3\11\1\342\15\11\22\0\7\11\1\0\1\273"+
    "\2\343\2\0\7\204\65\0\1\273\1\0\1\273\1\0"+
    "\3\11\2\0\4\11\1\344\2\11\16\0\21\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\6\11\1\345"+
    "\12\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\3\11\1\346\15\11\22\0\7\11\1\0\3\11\2\0"+
    "\2\11\1\347\4\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\1\350\20\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\6\11\1\351\12\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\3\11"+
    "\1\352\15\11\22\0\7\11\21\227\1\353\63\227\21\231"+
    "\1\306\1\354\2\231\1\122\57\231\21\311\1\355\1\356"+
    "\2\311\1\126\57\311\1\0\3\11\2\0\2\11\1\357"+
    "\4\11\16\0\5\11\1\360\13\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\11\11\1\361\7\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\5\11\1\362"+
    "\13\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\1\11\1\363\17\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\5\11\1\364\13\11\22\0\7\11\1\0"+
    "\3\11\2\0\7\11\16\0\1\11\1\365\17\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\7\11\1\366"+
    "\11\11\22\0\7\11\1\0\3\11\2\0\1\367\6\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\5\11\1\370\13\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\17\11\1\371\1\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\12\11\1\372\6\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\1\11"+
    "\1\373\17\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\10\11\1\374\10\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\5\11\1\375\13\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\5\11\1\376\13\11"+
    "\22\0\7\11\1\0\3\11\2\0\4\11\1\377\2\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\5\11\1\u0100\13\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\7\11\1\u0101\11\11\22\0\7\11"+
    "\1\0\3\11\2\0\2\11\1\u0102\4\11\16\0\21\11"+
    "\22\0\7\11\1\0\1\11\1\u0103\1\11\2\0\7\11"+
    "\16\0\21\11\22\0\7\11\1\0\1\11\1\u0104\1\11"+
    "\2\0\7\11\16\0\21\11\22\0\7\11\4\0\2\u0105"+
    "\74\0\1\u0105\1\0\1\u0105\1\0\3\11\2\0\7\11"+
    "\16\0\14\11\1\u0106\4\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\1\11\1\u0107\17\11\22\0\7\11"+
    "\1\0\1\11\1\u0108\1\11\2\0\7\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\5\11\1\u0109\1\11"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\11\11\1\u010a\7\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\10\11\1\u010b\10\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\3\11\1\u010c\15\11"+
    "\22\0\7\11\21\0\1\u010d\63\0\21\311\1\355\1\u010e"+
    "\2\311\1\126\57\311\1\0\3\11\2\0\7\11\16\0"+
    "\2\11\1\u010f\16\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\6\11\1\u0110\12\11\22\0\7\11\1\0"+
    "\3\11\2\0\4\11\1\u0111\2\11\16\0\21\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\1\u0112\20\11"+
    "\22\0\7\11\1\0\3\11\2\0\6\11\1\u0113\16\0"+
    "\21\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\12\11\1\u0114\6\11\22\0\7\11\1\0\3\11\2\0"+
    "\4\11\1\u0115\2\11\16\0\21\11\22\0\7\11\1\0"+
    "\3\11\2\0\4\11\1\u0116\2\11\16\0\21\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\6\11\1\u0117"+
    "\12\11\22\0\7\11\1\0\3\11\2\0\6\11\1\u0118"+
    "\16\0\21\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\6\11\1\u0119\12\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\10\11\1\u011a\10\11\22\0\7\11"+
    "\102\0\1\u0105\1\0\1\u0105\1\0\3\11\2\0\7\11"+
    "\16\0\1\11\1\u011b\17\11\22\0\7\11\1\0\3\11"+
    "\2\0\7\11\16\0\6\11\1\u011c\12\11\22\0\7\11"+
    "\1\0\1\11\1\u011d\1\11\2\0\7\11\16\0\21\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\13\11"+
    "\1\u011e\5\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\4\11\1\u011f\14\11\22\0\7\11\21\0\1\u0120"+
    "\64\0\3\11\2\0\7\11\16\0\3\11\1\u0121\15\11"+
    "\22\0\7\11\1\0\3\11\2\0\7\11\16\0\7\11"+
    "\1\u0122\11\11\22\0\7\11\1\0\3\11\2\0\7\11"+
    "\16\0\10\11\1\u0123\10\11\22\0\7\11\1\0\3\11"+
    "\2\0\3\11\1\u0124\3\11\16\0\21\11\22\0\7\11"+
    "\1\0\3\11\2\0\7\11\16\0\1\u0125\20\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\7\11\1\u0126"+
    "\11\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\4\11\1\u0127\14\11\22\0\7\11\1\0\3\11\2\0"+
    "\4\11\1\u0128\2\11\16\0\21\11\22\0\7\11\21\0"+
    "\1\u0129\64\0\3\11\2\0\7\11\16\0\4\11\1\u012a"+
    "\14\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\6\11\1\u012b\12\11\22\0\7\11\1\0\1\11\1\u012c"+
    "\1\11\2\0\7\11\16\0\21\11\22\0\7\11\1\0"+
    "\1\11\1\u012d\1\11\2\0\7\11\16\0\21\11\22\0"+
    "\7\11\1\0\3\11\2\0\7\11\16\0\7\11\1\u012e"+
    "\11\11\22\0\7\11\1\0\3\11\2\0\7\11\16\0"+
    "\1\11\1\u012f\17\11\22\0\7\11\1\0\3\11\2\0"+
    "\7\11\16\0\1\11\1\u0130\17\11\22\0\7\11\1\0"+
    "\1\11\1\u0131\1\11\2\0\7\11\16\0\21\11\22\0"+
    "\7\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14628];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\21\1\2\11\20\1\7\11\11\1\2\11"+
    "\6\1\5\11\13\1\1\0\1\11\2\0\1\1\5\0"+
    "\3\11\33\1\5\11\1\1\1\11\1\1\4\11\1\1"+
    "\1\11\1\0\2\11\12\1\1\11\1\1\1\11\1\0"+
    "\1\11\1\1\1\11\1\0\1\11\2\0\32\1\4\11"+
    "\14\1\1\0\1\11\1\0\44\1\1\0\72\1\1\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int multiCommentLevel = 0;


  CeylonFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CeylonFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return CeylonTokens.INCREMENT_OP;
          }
        case 113: break;
        case 28: 
          { return CeylonTokens.SMALLER_OP;
          }
        case 114: break;
        case 36: 
          { return CeylonTokens.SUBTRACT_SPECIFY;
          }
        case 115: break;
        case 70: 
          { return CeylonTokens.STRING_END;
          }
        case 116: break;
        case 51: 
          { return CeylonTokens.LARGE_AS_OP;
          }
        case 117: break;
        case 41: 
          { return CeylonTokens.STRING_LITERAL;
          }
        case 118: break;
        case 50: 
          { return CeylonTokens.COMPUTE;
          }
        case 119: break;
        case 39: 
          { return CeylonTokens.LINE_COMMENT;
          }
        case 120: break;
        case 92: 
          { return CeylonTokens.VALUE_MODIFIER;
          }
        case 121: break;
        case 82: 
          { return CeylonTokens.CASE_CLAUSE;
          }
        case 122: break;
        case 12: 
          { return CeylonTokens.NOT_OP;
          }
        case 123: break;
        case 66: 
          { return CeylonTokens.FOR_CLAUSE;
          }
        case 124: break;
        case 84: 
          { return CeylonTokens.ALIAS;
          }
        case 125: break;
        case 58: 
          { return CeylonTokens.SPREAD_OP;
          }
        case 126: break;
        case 5: 
          { return CeylonTokens.DIFFERENCE_OP;
          }
        case 127: break;
        case 2: 
          { return CeylonTokens.LIDENTIFIER;
          }
        case 128: break;
        case 46: 
          { return CeylonTokens.IF_CLAUSE;
          }
        case 129: break;
        case 9: 
          { return CeylonTokens.RBRACE;
          }
        case 130: break;
        case 105: 
          { return CeylonTokens.DYNAMIC;
          }
        case 131: break;
        case 59: 
          { return CeylonTokens.MULTIPLY_SPECIFY;
          }
        case 132: break;
        case 8: 
          { return CeylonTokens.LBRACE;
          }
        case 133: break;
        case 97: 
          { return CeylonTokens.ASSIGN;
          }
        case 134: break;
        case 23: 
          { return CeylonTokens.COMPLEMENT_OP;
          }
        case 135: break;
        case 74: 
          { return CeylonTokens.IDENTICAL_OP;
          }
        case 136: break;
        case 24: 
          { return CeylonTokens.INTERSECTION_OP;
          }
        case 137: break;
        case 90: 
          { return CeylonTokens.TYPE_CONSTRAINT;
          }
        case 138: break;
        case 55: 
          { return CeylonTokens.AND_OP;
          }
        case 139: break;
        case 3: 
          { return CeylonTokens.UIDENTIFIER;
          }
        case 140: break;
        case 64: 
          { --multiCommentLevel;
                    if (multiCommentLevel <= 0) {
                        yybegin(YYINITIAL);
                    }
                    return CeylonTokens.MULTI_COMMENT;
          }
        case 141: break;
        case 29: 
          { return CeylonTokens.POWER_OP;
          }
        case 142: break;
        case 100: 
          { return CeylonTokens.IMPORT;
          }
        case 143: break;
        case 94: 
          { return CeylonTokens.EXISTS;
          }
        case 144: break;
        case 13: 
          { return CeylonTokens.SEGMENT_OP;
          }
        case 145: break;
        case 17: 
          { return CeylonTokens.RBRACKET;
          }
        case 146: break;
        case 86: 
          { return CeylonTokens.BREAK;
          }
        case 147: break;
        case 83: 
          { return CeylonTokens.VOID_MODIFIER;
          }
        case 148: break;
        case 32: 
          { return CeylonTokens.MULTI_COMMENT;
          }
        case 149: break;
        case 107: 
          { return CeylonTokens.FUNCTION_MODIFIER;
          }
        case 150: break;
        case 44: 
          { return CeylonTokens.NOT_EQUAL_OP;
          }
        case 151: break;
        case 15: 
          { return CeylonTokens.RPAREN;
          }
        case 152: break;
        case 79: 
          { return CeylonTokens.STRING_MID;
          }
        case 153: break;
        case 110: 
          { return CeylonTokens.ABSTRACTED_TYPE;
          }
        case 154: break;
        case 10: 
          { return CeylonTokens.WS;
          }
        case 155: break;
        case 98: 
          { return CeylonTokens.SWITCH_CLAUSE;
          }
        case 156: break;
        case 75: 
          { return CeylonTokens.AND_SPECIFY;
          }
        case 157: break;
        case 85: 
          { return CeylonTokens.SUPER;
          }
        case 158: break;
        case 52: 
          { return CeylonTokens.SAFE_MEMBER_OP;
          }
        case 159: break;
        case 56: 
          { return CeylonTokens.UNION_SPECIFY;
          }
        case 160: break;
        case 20: 
          { return CeylonTokens.SPECIFY;
          }
        case 161: break;
        case 4: 
          { return CeylonTokens.SUM_OP;
          }
        case 162: break;
        case 60: 
          { return CeylonTokens.SCALE_OP;
          }
        case 163: break;
        case 19: 
          { return CeylonTokens.COMMA;
          }
        case 164: break;
        case 72: 
          { return CeylonTokens.TRY_CLAUSE;
          }
        case 165: break;
        case 16: 
          { return CeylonTokens.LBRACKET;
          }
        case 166: break;
        case 14: 
          { return CeylonTokens.LPAREN;
          }
        case 167: break;
        case 102: 
          { return CeylonTokens.EXTENDS;
          }
        case 168: break;
        case 34: 
          { return CeylonTokens.ADD_SPECIFY;
          }
        case 169: break;
        case 48: 
          { return CeylonTokens.CASE_TYPES;
          }
        case 170: break;
        case 22: 
          { return CeylonTokens.OPTIONAL;
          }
        case 171: break;
        case 65: 
          { return CeylonTokens.NEW;
          }
        case 172: break;
        case 73: 
          { return CeylonTokens.OUT;
          }
        case 173: break;
        case 31: 
          { return CeylonTokens.NATURAL_LITERAL;
          }
        case 174: break;
        case 81: 
          { return CeylonTokens.THIS;
          }
        case 175: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 176: break;
        case 42: 
          { return CeylonTokens.DIVIDE_SPECIFY;
          }
        case 177: break;
        case 63: 
          { ++multiCommentLevel; return CeylonTokens.MULTI_COMMENT;
          }
        case 178: break;
        case 45: 
          { return CeylonTokens.IN_OP;
          }
        case 179: break;
        case 89: 
          { return CeylonTokens.CLASS_DEFINITION;
          }
        case 180: break;
        case 108: 
          { return CeylonTokens.ASSEMBLY;
          }
        case 181: break;
        case 47: 
          { return CeylonTokens.IS_OP;
          }
        case 182: break;
        case 77: 
          { return CeylonTokens.COMPARE_OP;
          }
        case 183: break;
        case 35: 
          { return CeylonTokens.DECREMENT_OP;
          }
        case 184: break;
        case 53: 
          { return CeylonTokens.COMPLEMENT_SPECIFY;
          }
        case 185: break;
        case 80: 
          { return CeylonTokens.THEN_CLAUSE;
          }
        case 186: break;
        case 40: 
          { return CeylonTokens.CHAR_LITERAL;
          }
        case 187: break;
        case 69: 
          { return CeylonTokens.STRING_START;
          }
        case 188: break;
        case 99: 
          { return CeylonTokens.RETURN;
          }
        case 189: break;
        case 30: 
          { return CeylonTokens.COMPILER_ANNOTATION;
          }
        case 190: break;
        case 61: 
          { return CeylonTokens.REMAINDER_SPECIFY;
          }
        case 191: break;
        case 96: 
          { return CeylonTokens.ASSERT;
          }
        case 192: break;
        case 76: 
          { return CeylonTokens.OR_SPECIFY;
          }
        case 193: break;
        case 43: 
          { yybegin(MCOMMENT); multiCommentLevel = 1; return CeylonTokens.MULTI_COMMENT;
          }
        case 194: break;
        case 57: 
          { return CeylonTokens.OR_OP;
          }
        case 195: break;
        case 37: 
          { return CeylonTokens.ENTRY_OP;
          }
        case 196: break;
        case 54: 
          { return CeylonTokens.INTERSECT_SPECIFY;
          }
        case 197: break;
        case 106: 
          { return CeylonTokens.NONEMPTY;
          }
        case 198: break;
        case 103: 
          { return CeylonTokens.PACKAGE;
          }
        case 199: break;
        case 25: 
          { return CeylonTokens.UNION_OP;
          }
        case 200: break;
        case 95: 
          { return CeylonTokens.MODULE;
          }
        case 201: break;
        case 101: 
          { return CeylonTokens.OBJECT_DEFINITION;
          }
        case 202: break;
        case 111: 
          { return CeylonTokens.SATISFIES;
          }
        case 203: break;
        case 109: 
          { return CeylonTokens.CONTINUE;
          }
        case 204: break;
        case 78: 
          { return CeylonTokens.ELSE_CLAUSE;
          }
        case 205: break;
        case 49: 
          { return CeylonTokens.EQUAL_OP;
          }
        case 206: break;
        case 21: 
          { return CeylonTokens.LARGER_OP;
          }
        case 207: break;
        case 6: 
          { return CeylonTokens.MEMBER_OP;
          }
        case 208: break;
        case 7: 
          { return CeylonTokens.BACKTICK;
          }
        case 209: break;
        case 11: 
          { return CeylonTokens.QUOTIENT_OP;
          }
        case 210: break;
        case 91: 
          { return CeylonTokens.OUTER;
          }
        case 211: break;
        case 38: 
          { return CeylonTokens.RANGE_OP;
          }
        case 212: break;
        case 112: 
          { return CeylonTokens.INTERFACE_DEFINITION;
          }
        case 213: break;
        case 26: 
          { return CeylonTokens.PRODUCT_OP;
          }
        case 214: break;
        case 18: 
          { return CeylonTokens.SEMICOLON;
          }
        case 215: break;
        case 27: 
          { return CeylonTokens.REMAINDER_OP;
          }
        case 216: break;
        case 88: 
          { return CeylonTokens.CATCH_CLAUSE;
          }
        case 217: break;
        case 67: 
          { return CeylonTokens.ELLIPSIS;
          }
        case 218: break;
        case 87: 
          { return CeylonTokens.THROW;
          }
        case 219: break;
        case 71: 
          { return CeylonTokens.LET;
          }
        case 220: break;
        case 93: 
          { return CeylonTokens.WHILE_CLAUSE;
          }
        case 221: break;
        case 68: 
          { return CeylonTokens.VERBATIM_STRING;
          }
        case 222: break;
        case 104: 
          { return CeylonTokens.FINALLY_CLAUSE;
          }
        case 223: break;
        case 62: 
          { return CeylonTokens.SMALL_AS_OP;
          }
        case 224: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
